
Ixtopor.elf:     file format elf32-littlenios2
Ixtopor.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010230

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00005b2c memsz 0x00005b2c flags r-x
    LOAD off    0x00006b4c vaddr 0x00015b4c paddr 0x000176a8 align 2**12
         filesz 0x00001b5c memsz 0x00001b5c flags rw-
    LOAD off    0x00009204 vaddr 0x00019204 paddr 0x00019204 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000058c4  00010230  00010230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000058  00015af4  00015af4  00006af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b5c  00015b4c  000176a8  00006b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00019204  00019204  00009204  2**2
                  ALLOC, SMALL_DATA
  6 .memoria      00000000  00019358  00019358  000086a8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000086a8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ad8  00000000  00000000  000086d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00016d2f  00000000  00000000  000091a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000065b2  00000000  00000000  0001fed7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006bdb  00000000  00000000  00026489  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000017d8  00000000  00000000  0002d064  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000296c  00000000  00000000  0002e83c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003545  00000000  00000000  000311a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  000346f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000530  00000000  00000000  00034730  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000374be  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000374c1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000374c4  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000374c5  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000374c6  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000374ca  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000374ce  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000374d2  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000374db  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000374e4  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  000374ed  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000016  00000000  00000000  000374f3  2**0
                  CONTENTS, READONLY
 29 .jdi          000036bf  00000000  00000000  00037509  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000c6046  00000000  00000000  0003abc8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010230 l    d  .text	00000000 .text
00015af4 l    d  .rodata	00000000 .rodata
00015b4c l    d  .rwdata	00000000 .rwdata
00019204 l    d  .bss	00000000 .bss
00019358 l    d  .memoria	00000000 .memoria
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Ixtopor_bsp//obj/HAL/src/crt0.o
00010268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
000102cc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000106cc l     F .text	00000034 alt_dev_reg
00015b4c l     O .rwdata	00001060 jtag_uart
00016bac l     O .rwdata	000000c4 uart
00016c70 l     O .rwdata	0000002c adc_1
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000109f0 l     F .text	0000020c altera_avalon_jtag_uart_irq
00010bfc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00011234 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
000114e4 l     F .text	0000009c altera_avalon_uart_irq
00011580 l     F .text	000000e4 altera_avalon_uart_rxirq
00011664 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00011800 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00011a18 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00011e84 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00011fb8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00011fe4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00012444 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000125a4 l     F .text	0000003c alt_get_errno
000125e0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00016e44 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00013968 l     F .text	00000008 __fp_unlock
0001397c l     F .text	0000019c __sinit.part.1
00013b18 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0001548c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00015580 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00015668 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000157c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
000176a4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000159b8 l     F .text	0000003c alt_get_errno
0001921c g     O .bss	00000004 alt_instruction_exception_handler
00015168 g     F .text	00000054 _isatty_r
000103b8 g     F .text	0000007c alt_main
00019258 g     O .bss	00000100 alt_irq
000151bc g     F .text	00000060 _lseek_r
000176a8 g       *ABS*	00000000 __flash_rwdata_start
00019358 g       *ABS*	00000000 __alt_heap_start
00014ef0 g     F .text	0000005c __sseek
00013cc8 g     F .text	00000010 __sinit
0001317c g     F .text	00000140 __swbuf_r
00013b20 g     F .text	00000078 __sfmoreglue
000157a4 g     F .text	00000024 __malloc_unlock
00013cb0 g     F .text	00000018 _cleanup
00012a50 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
0001510c g     F .text	0000005c _fstat_r
00019220 g     O .bss	00000004 errno
00014e6c g     F .text	00000008 __seofread
00019208 g     O .bss	00000004 alt_argv
0001f670 g       *ABS*	00000000 _gp
0001069c g     F .text	00000030 usleep
00016cc4 g     O .rwdata	00000180 alt_fd_list
00012a74 g     F .text	00000090 alt_find_dev
00012e34 g     F .text	00000148 memcpy
00013970 g     F .text	0000000c _cleanup_r
00012528 g     F .text	0000007c alt_io_redirect
00015af4 g       *ABS*	00000000 __DTOR_END__
00012cd0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00010df4 g     F .text	0000021c altera_avalon_jtag_uart_read
00015374 g     F .text	00000064 .hidden __udivsi3
000155bc g     F .text	000000ac isatty
0001922c g     O .bss	00000004 __malloc_top_pad
00014dc4 g     F .text	00000054 _sbrk_r
0001521c g     F .text	00000060 _read_r
00017680 g     O .rwdata	00000004 alt_max_fd
00015008 g     F .text	000000f0 _fclose_r
00013938 g     F .text	00000030 fflush
00019228 g     O .bss	00000004 __malloc_max_sbrked_mem
000156a4 g     F .text	000000dc lseek
00017694 g     O .rwdata	00000004 _global_impure_ptr
00019358 g       *ABS*	00000000 __bss_end
00012354 g     F .text	000000f0 alt_iic_isr_register
00012948 g     F .text	00000108 alt_tick
00011438 g     F .text	000000ac altera_avalon_uart_init
00013ce8 g     F .text	00000018 __fp_lock_all
00012308 g     F .text	0000004c alt_ic_irq_enabled
000128ac g     F .text	0000009c alt_alarm_stop
00019210 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000d4 alt_irq_handler
00016c9c g     O .rwdata	00000028 alt_dev_null
00011f98 g     F .text	00000020 alt_dcache_flush_all
000176a8 g       *ABS*	00000000 __ram_rwdata_end
00017678 g     O .rwdata	00000008 alt_dev_list
000159f4 g     F .text	00000100 write
00012f7c g     F .text	000000a0 _putc_r
00015b4c g       *ABS*	00000000 __ram_rodata_end
000154c8 g     F .text	000000b8 fstat
000153d8 g     F .text	00000058 .hidden __umodsi3
00019358 g       *ABS*	00000000 end
00011a54 g     F .text	000001ac altera_avalon_uart_write
00010930 g     F .text	000000c0 altera_avalon_jtag_uart_init
000101d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00015af4 g       *ABS*	00000000 __CTOR_LIST__
00019c40 g       *ABS*	00000000 __alt_stack_pointer
000112ac g     F .text	0000007c alt_avalon_timer_sc_init
00011388 g     F .text	00000060 altera_avalon_uart_write_fd
000113e8 g     F .text	00000050 altera_avalon_uart_close_fd
00011010 g     F .text	00000224 altera_avalon_jtag_uart_write
00013cd8 g     F .text	00000004 __sfp_lock_acquire
00013e3c g     F .text	00000310 _free_r
00010434 g     F .text	0000022c alt_printf
00013540 g     F .text	00000180 __call_exitprocs
0001769c g     O .rwdata	00000004 __malloc_sbrk_base
00010230 g     F .text	0000003c _start
00019214 g     O .bss	00000004 _alt_tick_rate
00019218 g     O .bss	00000004 _alt_nticks
00015804 g     F .text	00000104 read
00010738 g     F .text	00000094 alt_sys_init
00013428 g     F .text	00000118 __register_exitproc
00010c9c g     F .text	00000068 altera_avalon_jtag_uart_close
00015430 g     F .text	00000028 .hidden __mulsi3
00015b4c g       *ABS*	00000000 __ram_rwdata_start
00015af4 g       *ABS*	00000000 __ram_rodata_start
00019230 g     O .bss	00000028 __malloc_current_mallinfo
000107cc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00012c0c g     F .text	000000c4 alt_get_fd
00011d2c g     F .text	00000158 alt_busy_sleep
00014fb4 g     F .text	00000054 _close_r
00012db8 g     F .text	0000007c memcmp
0001088c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00019358 g       *ABS*	00000000 __alt_stack_base
000108dc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00010000 g       *ABS*	00000000 __alt_mem_memoria
000132d4 g     F .text	00000154 __swsetup_r
00013b98 g     F .text	00000118 __sfp
00017268 g     O .rwdata	00000408 __malloc_av_
00013ce4 g     F .text	00000004 __sinit_lock_release
00014e18 g     F .text	00000054 __sread
00012b04 g     F .text	00000108 alt_find_file
00012020 g     F .text	000000a4 alt_dev_llist_insert
00015780 g     F .text	00000024 __malloc_lock
00015908 g     F .text	000000b0 sbrk
000138dc g     F .text	0000005c _fflush_r
00019204 g       *ABS*	00000000 __bss_start
00014c9c g     F .text	00000128 memset
0001026c g     F .text	00000060 main
0001920c g     O .bss	00000004 alt_envp
00019224 g     O .bss	00000004 __malloc_max_total_mem
0001082c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000132bc g     F .text	00000018 __swbuf
00014f4c g     F .text	00000008 __sclose
00019c40 g       *ABS*	00000000 __alt_heap_limit
000150f8 g     F .text	00000014 fclose
00014490 g     F .text	0000080c _malloc_r
00017684 g     O .rwdata	00000004 alt_errno
0001414c g     F .text	000000c4 _fwalk
0001301c g     F .text	000000c8 putc
0001527c g     F .text	00000084 .hidden __divsi3
00013d18 g     F .text	00000124 _malloc_trim_r
00015af4 g       *ABS*	00000000 __CTOR_END__
00015af4 g       *ABS*	00000000 __flash_rodata_start
00015af4 g       *ABS*	00000000 __DTOR_LIST__
00010700 g     F .text	00000038 alt_irq_init
00012828 g     F .text	00000084 alt_release_fd
00012d6c g     F .text	00000014 atexit
00014f54 g     F .text	00000060 _write_r
00017698 g     O .rwdata	00000004 _impure_ptr
00019204 g     O .bss	00000004 alt_argc
000136c0 g     F .text	0000021c __sflush_r
00012124 g     F .text	00000060 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00013d00 g     F .text	00000018 __fp_unlock_all
00017670 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
000121a4 g     F .text	00000050 alt_ic_isr_register
000176a8 g       *ABS*	00000000 _edata
00011328 g     F .text	00000060 altera_avalon_uart_read_fd
00019358 g       *ABS*	00000000 _end
00010230 g       *ABS*	00000000 __ram_exceptions_end
00010d04 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0001227c g     F .text	0000008c alt_ic_irq_disable
00014e74 g     F .text	0000007c __swrite
000176a0 g     O .rwdata	00000004 __malloc_trim_threshold
00012d80 g     F .text	00000038 exit
00014210 g     F .text	000000c4 _fwalk_reent
00015300 g     F .text	00000074 .hidden __modsi3
00019c40 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00013cdc g     F .text	00000004 __sfp_lock_release
000117ac g     F .text	00000054 altera_avalon_uart_close
00015458 g     F .text	00000034 _exit
00011c00 g     F .text	0000012c alt_alarm_start
000142d4 g     F .text	000001bc __smakebuf_r
000130e4 g     F .text	00000098 strlen
000126cc g     F .text	0000015c open
00010660 g     F .text	0000003c alt_putchar
00012184 g     F .text	00000020 alt_icache_flush_all
00017688 g     O .rwdata	00000004 alt_priority_mask
000121f4 g     F .text	00000088 alt_ic_irq_enable
0001183c g     F .text	000001dc altera_avalon_uart_read
0001768c g     O .rwdata	00000008 alt_alarm_list
000120c4 g     F .text	00000060 _do_ctors
00011ec0 g     F .text	000000d8 close
00010334 g     F .text	00000084 alt_load
00013ce0 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408c14 	ori	at,at,560
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101d00 	call	101d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001426 	beq	r2,zero,1018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	008000b4 	movhi	r2,2
   10140:	10a49604 	addi	r2,r2,-28072
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	008000b4 	movhi	r2,2
   10158:	10a49604 	addi	r2,r2,-28072
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	1009883a 	mov	r4,r2
   10174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1017c:	0005313a 	rdctl	r2,ipending
   10180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	00000706 	br	101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1018c:	e0bffc17 	ldw	r2,-16(fp)
   10190:	1085883a 	add	r2,r2,r2
   10194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10198:	e0bffd17 	ldw	r2,-12(fp)
   1019c:	10800044 	addi	r2,r2,1
   101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a4:	003fe106 	br	1012c <_gp+0xffff0abc>

    active = alt_irq_pending ();
   101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101ac:	e0bffb17 	ldw	r2,-20(fp)
   101b0:	103fdb1e 	bne	r2,zero,10120 <_gp+0xffff0ab0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b4:	0001883a 	nop
}
   101b8:	0001883a 	nop
   101bc:	e037883a 	mov	sp,fp
   101c0:	dfc00117 	ldw	ra,4(sp)
   101c4:	df000017 	ldw	fp,0(sp)
   101c8:	dec00204 	addi	sp,sp,8
   101cc:	f800283a 	ret

000101d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101d0:	defffb04 	addi	sp,sp,-20
   101d4:	dfc00415 	stw	ra,16(sp)
   101d8:	df000315 	stw	fp,12(sp)
   101dc:	df000304 	addi	fp,sp,12
   101e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101e4:	00bfffc4 	movi	r2,-1
   101e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   101ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101f0:	d0a6eb17 	ldw	r2,-25684(gp)
   101f4:	10000726 	beq	r2,zero,10214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101f8:	d0a6eb17 	ldw	r2,-25684(gp)
   101fc:	e0fffd17 	ldw	r3,-12(fp)
   10200:	e1bffe17 	ldw	r6,-8(fp)
   10204:	e17fff17 	ldw	r5,-4(fp)
   10208:	1809883a 	mov	r4,r3
   1020c:	103ee83a 	callr	r2
   10210:	00000206 	br	1021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   10218:	0005883a 	mov	r2,zero
}
   1021c:	e037883a 	mov	sp,fp
   10220:	dfc00117 	ldw	ra,4(sp)
   10224:	df000017 	ldw	fp,0(sp)
   10228:	dec00204 	addi	sp,sp,8
   1022c:	f800283a 	ret

Disassembly of section .text:

00010230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10230:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10234:	dee71014 	ori	sp,sp,40000
    movhi gp, %hi(_gp)
   10238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1023c:	d6bd9c14 	ori	gp,gp,63088
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10244:	10a48114 	ori	r2,r2,37380

    movhi r3, %hi(__bss_end)
   10248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1024c:	18e4d614 	ori	r3,r3,37720

    beq r2, r3, 1f
   10250:	10c00326 	beq	r2,r3,10260 <_start+0x30>

0:
    stw zero, (r2)
   10254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1025c:	10fffd36 	bltu	r2,r3,10254 <_gp+0xffff0be4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10260:	00103340 	call	10334 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10264:	00103b80 	call	103b8 <alt_main>

00010268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10268:	003fff06 	br	10268 <_gp+0xffff0bf8>

0001026c <main>:

#define saida(porta, valor)	IOWR_ALTERA_AVALON_PIO_DATA(porta, valor)
#define delay(atraso)	usleep(atraso*1000)

int main()
{
   1026c:	defffe04 	addi	sp,sp,-8
   10270:	dfc00115 	stw	ra,4(sp)
   10274:	df000015 	stw	fp,0(sp)
   10278:	d839883a 	mov	fp,sp
	//int val=17110;
	//cout << hex << val << endl;
	//saida(motorX,0x42D6); //Reseta e manda os paramentros para andar na velocidade 0110 e 180 em decimal
	delay(100);
   1027c:	010000b4 	movhi	r4,2
   10280:	2121a804 	addi	r4,r4,-31072
   10284:	001069c0 	call	1069c <usleep>
	//saida(motorX,0x62D6);
	alt_printf ("Ok");
   10288:	01000074 	movhi	r4,1
   1028c:	2116bd04 	addi	r4,r4,23284
   10290:	00104340 	call	10434 <alt_printf>
	IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, "11010100");
   10294:	00c00074 	movhi	r3,1
   10298:	18d6be04 	addi	r3,r3,23288
   1029c:	008000b4 	movhi	r2,2
   102a0:	10842904 	addi	r2,r2,4260
   102a4:	10c00035 	stwio	r3,0(r2)
	while(1){
		alt_printf(IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE));
   102a8:	008000b4 	movhi	r2,2
   102ac:	10842804 	addi	r2,r2,4256
   102b0:	10800037 	ldwio	r2,0(r2)
   102b4:	1009883a 	mov	r4,r2
   102b8:	00104340 	call	10434 <alt_printf>
		delay(100);
   102bc:	010000b4 	movhi	r4,2
   102c0:	2121a804 	addi	r4,r4,-31072
   102c4:	001069c0 	call	1069c <usleep>
	}
   102c8:	003ff706 	br	102a8 <_gp+0xffff0c38>

000102cc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   102cc:	defffc04 	addi	sp,sp,-16
   102d0:	df000315 	stw	fp,12(sp)
   102d4:	df000304 	addi	fp,sp,12
   102d8:	e13ffd15 	stw	r4,-12(fp)
   102dc:	e17ffe15 	stw	r5,-8(fp)
   102e0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   102e4:	e0fffe17 	ldw	r3,-8(fp)
   102e8:	e0bffd17 	ldw	r2,-12(fp)
   102ec:	18800c26 	beq	r3,r2,10320 <alt_load_section+0x54>
  {
    while( to != end )
   102f0:	00000806 	br	10314 <alt_load_section+0x48>
    {
      *to++ = *from++;
   102f4:	e0bffe17 	ldw	r2,-8(fp)
   102f8:	10c00104 	addi	r3,r2,4
   102fc:	e0fffe15 	stw	r3,-8(fp)
   10300:	e0fffd17 	ldw	r3,-12(fp)
   10304:	19000104 	addi	r4,r3,4
   10308:	e13ffd15 	stw	r4,-12(fp)
   1030c:	18c00017 	ldw	r3,0(r3)
   10310:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   10314:	e0fffe17 	ldw	r3,-8(fp)
   10318:	e0bfff17 	ldw	r2,-4(fp)
   1031c:	18bff51e 	bne	r3,r2,102f4 <_gp+0xffff0c84>
    {
      *to++ = *from++;
    }
  }
}
   10320:	0001883a 	nop
   10324:	e037883a 	mov	sp,fp
   10328:	df000017 	ldw	fp,0(sp)
   1032c:	dec00104 	addi	sp,sp,4
   10330:	f800283a 	ret

00010334 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10334:	defffe04 	addi	sp,sp,-8
   10338:	dfc00115 	stw	ra,4(sp)
   1033c:	df000015 	stw	fp,0(sp)
   10340:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   10344:	01800074 	movhi	r6,1
   10348:	319daa04 	addi	r6,r6,30376
   1034c:	01400074 	movhi	r5,1
   10350:	2956d304 	addi	r5,r5,23372
   10354:	01000074 	movhi	r4,1
   10358:	211daa04 	addi	r4,r4,30376
   1035c:	00102cc0 	call	102cc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   10360:	01800074 	movhi	r6,1
   10364:	31808c04 	addi	r6,r6,560
   10368:	01400074 	movhi	r5,1
   1036c:	29400804 	addi	r5,r5,32
   10370:	01000074 	movhi	r4,1
   10374:	21000804 	addi	r4,r4,32
   10378:	00102cc0 	call	102cc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1037c:	01800074 	movhi	r6,1
   10380:	3196d304 	addi	r6,r6,23372
   10384:	01400074 	movhi	r5,1
   10388:	2956bd04 	addi	r5,r5,23284
   1038c:	01000074 	movhi	r4,1
   10390:	2116bd04 	addi	r4,r4,23284
   10394:	00102cc0 	call	102cc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10398:	0011f980 	call	11f98 <alt_dcache_flush_all>
  alt_icache_flush_all();
   1039c:	00121840 	call	12184 <alt_icache_flush_all>
}
   103a0:	0001883a 	nop
   103a4:	e037883a 	mov	sp,fp
   103a8:	dfc00117 	ldw	ra,4(sp)
   103ac:	df000017 	ldw	fp,0(sp)
   103b0:	dec00204 	addi	sp,sp,8
   103b4:	f800283a 	ret

000103b8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   103b8:	defffd04 	addi	sp,sp,-12
   103bc:	dfc00215 	stw	ra,8(sp)
   103c0:	df000115 	stw	fp,4(sp)
   103c4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   103c8:	0009883a 	mov	r4,zero
   103cc:	00107000 	call	10700 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   103d0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   103d4:	00107380 	call	10738 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   103d8:	01800074 	movhi	r6,1
   103dc:	3196c104 	addi	r6,r6,23300
   103e0:	01400074 	movhi	r5,1
   103e4:	2956c104 	addi	r5,r5,23300
   103e8:	01000074 	movhi	r4,1
   103ec:	2116c104 	addi	r4,r4,23300
   103f0:	00125280 	call	12528 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   103f4:	00120c40 	call	120c4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   103f8:	01000074 	movhi	r4,1
   103fc:	21084904 	addi	r4,r4,8484
   10400:	0012d6c0 	call	12d6c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   10404:	d0a6e517 	ldw	r2,-25708(gp)
   10408:	d0e6e617 	ldw	r3,-25704(gp)
   1040c:	d126e717 	ldw	r4,-25700(gp)
   10410:	200d883a 	mov	r6,r4
   10414:	180b883a 	mov	r5,r3
   10418:	1009883a 	mov	r4,r2
   1041c:	001026c0 	call	1026c <main>
   10420:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   10424:	01000044 	movi	r4,1
   10428:	0011ec00 	call	11ec0 <close>
  exit (result);
   1042c:	e13fff17 	ldw	r4,-4(fp)
   10430:	0012d800 	call	12d80 <exit>

00010434 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   10434:	defff204 	addi	sp,sp,-56
   10438:	dfc00a15 	stw	ra,40(sp)
   1043c:	df000915 	stw	fp,36(sp)
   10440:	df000904 	addi	fp,sp,36
   10444:	e13fff15 	stw	r4,-4(fp)
   10448:	e1400215 	stw	r5,8(fp)
   1044c:	e1800315 	stw	r6,12(fp)
   10450:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   10454:	e0800204 	addi	r2,fp,8
   10458:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   1045c:	e0bfff17 	ldw	r2,-4(fp)
   10460:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   10464:	00006f06 	br	10624 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   10468:	e0bff807 	ldb	r2,-32(fp)
   1046c:	10800960 	cmpeqi	r2,r2,37
   10470:	1000041e 	bne	r2,zero,10484 <alt_printf+0x50>
        {
            alt_putchar(c);
   10474:	e0bff807 	ldb	r2,-32(fp)
   10478:	1009883a 	mov	r4,r2
   1047c:	00106600 	call	10660 <alt_putchar>
   10480:	00006806 	br	10624 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   10484:	e0bff717 	ldw	r2,-36(fp)
   10488:	10c00044 	addi	r3,r2,1
   1048c:	e0fff715 	stw	r3,-36(fp)
   10490:	10800003 	ldbu	r2,0(r2)
   10494:	e0bff805 	stb	r2,-32(fp)
   10498:	e0bff807 	ldb	r2,-32(fp)
   1049c:	10006926 	beq	r2,zero,10644 <alt_printf+0x210>
            {
                if (c == '%')
   104a0:	e0bff807 	ldb	r2,-32(fp)
   104a4:	10800958 	cmpnei	r2,r2,37
   104a8:	1000041e 	bne	r2,zero,104bc <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   104ac:	e0bff807 	ldb	r2,-32(fp)
   104b0:	1009883a 	mov	r4,r2
   104b4:	00106600 	call	10660 <alt_putchar>
   104b8:	00005a06 	br	10624 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   104bc:	e0bff807 	ldb	r2,-32(fp)
   104c0:	108018d8 	cmpnei	r2,r2,99
   104c4:	1000081e 	bne	r2,zero,104e8 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   104c8:	e0bffe17 	ldw	r2,-8(fp)
   104cc:	10c00104 	addi	r3,r2,4
   104d0:	e0fffe15 	stw	r3,-8(fp)
   104d4:	10800017 	ldw	r2,0(r2)
   104d8:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   104dc:	e13ffd17 	ldw	r4,-12(fp)
   104e0:	00106600 	call	10660 <alt_putchar>
   104e4:	00004f06 	br	10624 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   104e8:	e0bff807 	ldb	r2,-32(fp)
   104ec:	10801e18 	cmpnei	r2,r2,120
   104f0:	1000341e 	bne	r2,zero,105c4 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   104f4:	e0bffe17 	ldw	r2,-8(fp)
   104f8:	10c00104 	addi	r3,r2,4
   104fc:	e0fffe15 	stw	r3,-8(fp)
   10500:	10800017 	ldw	r2,0(r2)
   10504:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   10508:	e0bffb17 	ldw	r2,-20(fp)
   1050c:	1000031e 	bne	r2,zero,1051c <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   10510:	01000c04 	movi	r4,48
   10514:	00106600 	call	10660 <alt_putchar>
                        continue;
   10518:	00004206 	br	10624 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   1051c:	00800704 	movi	r2,28
   10520:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   10524:	00000306 	br	10534 <alt_printf+0x100>
                        digit_shift -= 4;
   10528:	e0bff917 	ldw	r2,-28(fp)
   1052c:	10bfff04 	addi	r2,r2,-4
   10530:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   10534:	00c003c4 	movi	r3,15
   10538:	e0bff917 	ldw	r2,-28(fp)
   1053c:	1884983a 	sll	r2,r3,r2
   10540:	1007883a 	mov	r3,r2
   10544:	e0bffb17 	ldw	r2,-20(fp)
   10548:	1884703a 	and	r2,r3,r2
   1054c:	103ff626 	beq	r2,zero,10528 <_gp+0xffff0eb8>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   10550:	00001906 	br	105b8 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   10554:	00c003c4 	movi	r3,15
   10558:	e0bff917 	ldw	r2,-28(fp)
   1055c:	1884983a 	sll	r2,r3,r2
   10560:	1007883a 	mov	r3,r2
   10564:	e0bffb17 	ldw	r2,-20(fp)
   10568:	1886703a 	and	r3,r3,r2
   1056c:	e0bff917 	ldw	r2,-28(fp)
   10570:	1884d83a 	srl	r2,r3,r2
   10574:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   10578:	e0bffc17 	ldw	r2,-16(fp)
   1057c:	108002a8 	cmpgeui	r2,r2,10
   10580:	1000041e 	bne	r2,zero,10594 <alt_printf+0x160>
                            c = '0' + digit;
   10584:	e0bffc17 	ldw	r2,-16(fp)
   10588:	10800c04 	addi	r2,r2,48
   1058c:	e0bff805 	stb	r2,-32(fp)
   10590:	00000306 	br	105a0 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   10594:	e0bffc17 	ldw	r2,-16(fp)
   10598:	108015c4 	addi	r2,r2,87
   1059c:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   105a0:	e0bff807 	ldb	r2,-32(fp)
   105a4:	1009883a 	mov	r4,r2
   105a8:	00106600 	call	10660 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   105ac:	e0bff917 	ldw	r2,-28(fp)
   105b0:	10bfff04 	addi	r2,r2,-4
   105b4:	e0bff915 	stw	r2,-28(fp)
   105b8:	e0bff917 	ldw	r2,-28(fp)
   105bc:	103fe50e 	bge	r2,zero,10554 <_gp+0xffff0ee4>
   105c0:	00001806 	br	10624 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   105c4:	e0bff807 	ldb	r2,-32(fp)
   105c8:	10801cd8 	cmpnei	r2,r2,115
   105cc:	1000151e 	bne	r2,zero,10624 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   105d0:	e0bffe17 	ldw	r2,-8(fp)
   105d4:	10c00104 	addi	r3,r2,4
   105d8:	e0fffe15 	stw	r3,-8(fp)
   105dc:	10800017 	ldw	r2,0(r2)
   105e0:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   105e4:	00000906 	br	1060c <alt_printf+0x1d8>
                      alt_putchar(*s++);
   105e8:	e0bffa17 	ldw	r2,-24(fp)
   105ec:	10c00044 	addi	r3,r2,1
   105f0:	e0fffa15 	stw	r3,-24(fp)
   105f4:	10800003 	ldbu	r2,0(r2)
   105f8:	10803fcc 	andi	r2,r2,255
   105fc:	1080201c 	xori	r2,r2,128
   10600:	10bfe004 	addi	r2,r2,-128
   10604:	1009883a 	mov	r4,r2
   10608:	00106600 	call	10660 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   1060c:	e0bffa17 	ldw	r2,-24(fp)
   10610:	10800003 	ldbu	r2,0(r2)
   10614:	10803fcc 	andi	r2,r2,255
   10618:	1080201c 	xori	r2,r2,128
   1061c:	10bfe004 	addi	r2,r2,-128
   10620:	103ff11e 	bne	r2,zero,105e8 <_gp+0xffff0f78>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   10624:	e0bff717 	ldw	r2,-36(fp)
   10628:	10c00044 	addi	r3,r2,1
   1062c:	e0fff715 	stw	r3,-36(fp)
   10630:	10800003 	ldbu	r2,0(r2)
   10634:	e0bff805 	stb	r2,-32(fp)
   10638:	e0bff807 	ldb	r2,-32(fp)
   1063c:	103f8a1e 	bne	r2,zero,10468 <_gp+0xffff0df8>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   10640:	00000106 	br	10648 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   10644:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   10648:	0001883a 	nop
   1064c:	e037883a 	mov	sp,fp
   10650:	dfc00117 	ldw	ra,4(sp)
   10654:	df000017 	ldw	fp,0(sp)
   10658:	dec00504 	addi	sp,sp,20
   1065c:	f800283a 	ret

00010660 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   10660:	defffd04 	addi	sp,sp,-12
   10664:	dfc00215 	stw	ra,8(sp)
   10668:	df000115 	stw	fp,4(sp)
   1066c:	df000104 	addi	fp,sp,4
   10670:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   10674:	d0a00a17 	ldw	r2,-32728(gp)
   10678:	10800217 	ldw	r2,8(r2)
   1067c:	100b883a 	mov	r5,r2
   10680:	e13fff17 	ldw	r4,-4(fp)
   10684:	001301c0 	call	1301c <putc>
#endif
#endif
}
   10688:	e037883a 	mov	sp,fp
   1068c:	dfc00117 	ldw	ra,4(sp)
   10690:	df000017 	ldw	fp,0(sp)
   10694:	dec00204 	addi	sp,sp,8
   10698:	f800283a 	ret

0001069c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   1069c:	defffd04 	addi	sp,sp,-12
   106a0:	dfc00215 	stw	ra,8(sp)
   106a4:	df000115 	stw	fp,4(sp)
   106a8:	df000104 	addi	fp,sp,4
   106ac:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   106b0:	e13fff17 	ldw	r4,-4(fp)
   106b4:	0011d2c0 	call	11d2c <alt_busy_sleep>
}
   106b8:	e037883a 	mov	sp,fp
   106bc:	dfc00117 	ldw	ra,4(sp)
   106c0:	df000017 	ldw	fp,0(sp)
   106c4:	dec00204 	addi	sp,sp,8
   106c8:	f800283a 	ret

000106cc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   106cc:	defffd04 	addi	sp,sp,-12
   106d0:	dfc00215 	stw	ra,8(sp)
   106d4:	df000115 	stw	fp,4(sp)
   106d8:	df000104 	addi	fp,sp,4
   106dc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   106e0:	d1600204 	addi	r5,gp,-32760
   106e4:	e13fff17 	ldw	r4,-4(fp)
   106e8:	00120200 	call	12020 <alt_dev_llist_insert>
}
   106ec:	e037883a 	mov	sp,fp
   106f0:	dfc00117 	ldw	ra,4(sp)
   106f4:	df000017 	ldw	fp,0(sp)
   106f8:	dec00204 	addi	sp,sp,8
   106fc:	f800283a 	ret

00010700 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10700:	defffd04 	addi	sp,sp,-12
   10704:	dfc00215 	stw	ra,8(sp)
   10708:	df000115 	stw	fp,4(sp)
   1070c:	df000104 	addi	fp,sp,4
   10710:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   10714:	0012a500 	call	12a50 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10718:	00800044 	movi	r2,1
   1071c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10720:	0001883a 	nop
   10724:	e037883a 	mov	sp,fp
   10728:	dfc00117 	ldw	ra,4(sp)
   1072c:	df000017 	ldw	fp,0(sp)
   10730:	dec00204 	addi	sp,sp,8
   10734:	f800283a 	ret

00010738 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10738:	defffe04 	addi	sp,sp,-8
   1073c:	dfc00115 	stw	ra,4(sp)
   10740:	df000015 	stw	fp,0(sp)
   10744:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
   10748:	01c0fa04 	movi	r7,1000
   1074c:	01800144 	movi	r6,5
   10750:	000b883a 	mov	r5,zero
   10754:	010000b4 	movhi	r4,2
   10758:	21042004 	addi	r4,r4,4224
   1075c:	00112ac0 	call	112ac <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_GERAL, timer_geral);
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP_TIMER, timestamp_timer);
    ALTERA_AVALON_TIMER_INIT ( WATCHDOG_TIMER, watchdog_timer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   10760:	000d883a 	mov	r6,zero
   10764:	000b883a 	mov	r5,zero
   10768:	01000074 	movhi	r4,1
   1076c:	2116dd04 	addi	r4,r4,23412
   10770:	00109300 	call	10930 <altera_avalon_jtag_uart_init>
   10774:	01000074 	movhi	r4,1
   10778:	2116d304 	addi	r4,r4,23372
   1077c:	00106cc0 	call	106cc <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI, spi);
   10780:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   10784:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
   10788:	01800084 	movi	r6,2
   1078c:	000b883a 	mov	r5,zero
   10790:	01000074 	movhi	r4,1
   10794:	211af504 	addi	r4,r4,27604
   10798:	00114380 	call	11438 <altera_avalon_uart_init>
   1079c:	01000074 	movhi	r4,1
   107a0:	211aeb04 	addi	r4,r4,27564
   107a4:	00106cc0 	call	106cc <alt_dev_reg>
    ALTERA_UP_AVALON_ADC_INIT ( ADC_1, adc_1);
   107a8:	01000074 	movhi	r4,1
   107ac:	211b1c04 	addi	r4,r4,27760
   107b0:	00106cc0 	call	106cc <alt_dev_reg>
}
   107b4:	0001883a 	nop
   107b8:	e037883a 	mov	sp,fp
   107bc:	dfc00117 	ldw	ra,4(sp)
   107c0:	df000017 	ldw	fp,0(sp)
   107c4:	dec00204 	addi	sp,sp,8
   107c8:	f800283a 	ret

000107cc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   107cc:	defffa04 	addi	sp,sp,-24
   107d0:	dfc00515 	stw	ra,20(sp)
   107d4:	df000415 	stw	fp,16(sp)
   107d8:	df000404 	addi	fp,sp,16
   107dc:	e13ffd15 	stw	r4,-12(fp)
   107e0:	e17ffe15 	stw	r5,-8(fp)
   107e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   107e8:	e0bffd17 	ldw	r2,-12(fp)
   107ec:	10800017 	ldw	r2,0(r2)
   107f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   107f4:	e0bffc17 	ldw	r2,-16(fp)
   107f8:	10c00a04 	addi	r3,r2,40
   107fc:	e0bffd17 	ldw	r2,-12(fp)
   10800:	10800217 	ldw	r2,8(r2)
   10804:	100f883a 	mov	r7,r2
   10808:	e1bfff17 	ldw	r6,-4(fp)
   1080c:	e17ffe17 	ldw	r5,-8(fp)
   10810:	1809883a 	mov	r4,r3
   10814:	0010df40 	call	10df4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   10818:	e037883a 	mov	sp,fp
   1081c:	dfc00117 	ldw	ra,4(sp)
   10820:	df000017 	ldw	fp,0(sp)
   10824:	dec00204 	addi	sp,sp,8
   10828:	f800283a 	ret

0001082c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1082c:	defffa04 	addi	sp,sp,-24
   10830:	dfc00515 	stw	ra,20(sp)
   10834:	df000415 	stw	fp,16(sp)
   10838:	df000404 	addi	fp,sp,16
   1083c:	e13ffd15 	stw	r4,-12(fp)
   10840:	e17ffe15 	stw	r5,-8(fp)
   10844:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10848:	e0bffd17 	ldw	r2,-12(fp)
   1084c:	10800017 	ldw	r2,0(r2)
   10850:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   10854:	e0bffc17 	ldw	r2,-16(fp)
   10858:	10c00a04 	addi	r3,r2,40
   1085c:	e0bffd17 	ldw	r2,-12(fp)
   10860:	10800217 	ldw	r2,8(r2)
   10864:	100f883a 	mov	r7,r2
   10868:	e1bfff17 	ldw	r6,-4(fp)
   1086c:	e17ffe17 	ldw	r5,-8(fp)
   10870:	1809883a 	mov	r4,r3
   10874:	00110100 	call	11010 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   10878:	e037883a 	mov	sp,fp
   1087c:	dfc00117 	ldw	ra,4(sp)
   10880:	df000017 	ldw	fp,0(sp)
   10884:	dec00204 	addi	sp,sp,8
   10888:	f800283a 	ret

0001088c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1088c:	defffc04 	addi	sp,sp,-16
   10890:	dfc00315 	stw	ra,12(sp)
   10894:	df000215 	stw	fp,8(sp)
   10898:	df000204 	addi	fp,sp,8
   1089c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   108a0:	e0bfff17 	ldw	r2,-4(fp)
   108a4:	10800017 	ldw	r2,0(r2)
   108a8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   108ac:	e0bffe17 	ldw	r2,-8(fp)
   108b0:	10c00a04 	addi	r3,r2,40
   108b4:	e0bfff17 	ldw	r2,-4(fp)
   108b8:	10800217 	ldw	r2,8(r2)
   108bc:	100b883a 	mov	r5,r2
   108c0:	1809883a 	mov	r4,r3
   108c4:	0010c9c0 	call	10c9c <altera_avalon_jtag_uart_close>
}
   108c8:	e037883a 	mov	sp,fp
   108cc:	dfc00117 	ldw	ra,4(sp)
   108d0:	df000017 	ldw	fp,0(sp)
   108d4:	dec00204 	addi	sp,sp,8
   108d8:	f800283a 	ret

000108dc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   108dc:	defffa04 	addi	sp,sp,-24
   108e0:	dfc00515 	stw	ra,20(sp)
   108e4:	df000415 	stw	fp,16(sp)
   108e8:	df000404 	addi	fp,sp,16
   108ec:	e13ffd15 	stw	r4,-12(fp)
   108f0:	e17ffe15 	stw	r5,-8(fp)
   108f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   108f8:	e0bffd17 	ldw	r2,-12(fp)
   108fc:	10800017 	ldw	r2,0(r2)
   10900:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   10904:	e0bffc17 	ldw	r2,-16(fp)
   10908:	10800a04 	addi	r2,r2,40
   1090c:	e1bfff17 	ldw	r6,-4(fp)
   10910:	e17ffe17 	ldw	r5,-8(fp)
   10914:	1009883a 	mov	r4,r2
   10918:	0010d040 	call	10d04 <altera_avalon_jtag_uart_ioctl>
}
   1091c:	e037883a 	mov	sp,fp
   10920:	dfc00117 	ldw	ra,4(sp)
   10924:	df000017 	ldw	fp,0(sp)
   10928:	dec00204 	addi	sp,sp,8
   1092c:	f800283a 	ret

00010930 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   10930:	defffa04 	addi	sp,sp,-24
   10934:	dfc00515 	stw	ra,20(sp)
   10938:	df000415 	stw	fp,16(sp)
   1093c:	df000404 	addi	fp,sp,16
   10940:	e13ffd15 	stw	r4,-12(fp)
   10944:	e17ffe15 	stw	r5,-8(fp)
   10948:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1094c:	e0bffd17 	ldw	r2,-12(fp)
   10950:	00c00044 	movi	r3,1
   10954:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   10958:	e0bffd17 	ldw	r2,-12(fp)
   1095c:	10800017 	ldw	r2,0(r2)
   10960:	10800104 	addi	r2,r2,4
   10964:	1007883a 	mov	r3,r2
   10968:	e0bffd17 	ldw	r2,-12(fp)
   1096c:	10800817 	ldw	r2,32(r2)
   10970:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   10974:	e0bffe17 	ldw	r2,-8(fp)
   10978:	e0ffff17 	ldw	r3,-4(fp)
   1097c:	d8000015 	stw	zero,0(sp)
   10980:	e1fffd17 	ldw	r7,-12(fp)
   10984:	01800074 	movhi	r6,1
   10988:	31827c04 	addi	r6,r6,2544
   1098c:	180b883a 	mov	r5,r3
   10990:	1009883a 	mov	r4,r2
   10994:	00121a40 	call	121a4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   10998:	e0bffd17 	ldw	r2,-12(fp)
   1099c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   109a0:	e0bffd17 	ldw	r2,-12(fp)
   109a4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   109a8:	d0e6e917 	ldw	r3,-25692(gp)
   109ac:	e1fffd17 	ldw	r7,-12(fp)
   109b0:	01800074 	movhi	r6,1
   109b4:	3182ff04 	addi	r6,r6,3068
   109b8:	180b883a 	mov	r5,r3
   109bc:	1009883a 	mov	r4,r2
   109c0:	0011c000 	call	11c00 <alt_alarm_start>
   109c4:	1000040e 	bge	r2,zero,109d8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   109c8:	e0fffd17 	ldw	r3,-12(fp)
   109cc:	00a00034 	movhi	r2,32768
   109d0:	10bfffc4 	addi	r2,r2,-1
   109d4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   109d8:	0001883a 	nop
   109dc:	e037883a 	mov	sp,fp
   109e0:	dfc00117 	ldw	ra,4(sp)
   109e4:	df000017 	ldw	fp,0(sp)
   109e8:	dec00204 	addi	sp,sp,8
   109ec:	f800283a 	ret

000109f0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   109f0:	defff804 	addi	sp,sp,-32
   109f4:	df000715 	stw	fp,28(sp)
   109f8:	df000704 	addi	fp,sp,28
   109fc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   10a00:	e0bfff17 	ldw	r2,-4(fp)
   10a04:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   10a08:	e0bffb17 	ldw	r2,-20(fp)
   10a0c:	10800017 	ldw	r2,0(r2)
   10a10:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10a14:	e0bffc17 	ldw	r2,-16(fp)
   10a18:	10800104 	addi	r2,r2,4
   10a1c:	10800037 	ldwio	r2,0(r2)
   10a20:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   10a24:	e0bffd17 	ldw	r2,-12(fp)
   10a28:	1080c00c 	andi	r2,r2,768
   10a2c:	10006d26 	beq	r2,zero,10be4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   10a30:	e0bffd17 	ldw	r2,-12(fp)
   10a34:	1080400c 	andi	r2,r2,256
   10a38:	10003526 	beq	r2,zero,10b10 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   10a3c:	00800074 	movhi	r2,1
   10a40:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10a44:	e0bffb17 	ldw	r2,-20(fp)
   10a48:	10800a17 	ldw	r2,40(r2)
   10a4c:	10800044 	addi	r2,r2,1
   10a50:	1081ffcc 	andi	r2,r2,2047
   10a54:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   10a58:	e0bffb17 	ldw	r2,-20(fp)
   10a5c:	10c00b17 	ldw	r3,44(r2)
   10a60:	e0bffe17 	ldw	r2,-8(fp)
   10a64:	18801526 	beq	r3,r2,10abc <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   10a68:	e0bffc17 	ldw	r2,-16(fp)
   10a6c:	10800037 	ldwio	r2,0(r2)
   10a70:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   10a74:	e0bff917 	ldw	r2,-28(fp)
   10a78:	10a0000c 	andi	r2,r2,32768
   10a7c:	10001126 	beq	r2,zero,10ac4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   10a80:	e0bffb17 	ldw	r2,-20(fp)
   10a84:	10800a17 	ldw	r2,40(r2)
   10a88:	e0fff917 	ldw	r3,-28(fp)
   10a8c:	1809883a 	mov	r4,r3
   10a90:	e0fffb17 	ldw	r3,-20(fp)
   10a94:	1885883a 	add	r2,r3,r2
   10a98:	10800e04 	addi	r2,r2,56
   10a9c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10aa0:	e0bffb17 	ldw	r2,-20(fp)
   10aa4:	10800a17 	ldw	r2,40(r2)
   10aa8:	10800044 	addi	r2,r2,1
   10aac:	10c1ffcc 	andi	r3,r2,2047
   10ab0:	e0bffb17 	ldw	r2,-20(fp)
   10ab4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   10ab8:	003fe206 	br	10a44 <_gp+0xffff13d4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   10abc:	0001883a 	nop
   10ac0:	00000106 	br	10ac8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   10ac4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   10ac8:	e0bff917 	ldw	r2,-28(fp)
   10acc:	10bfffec 	andhi	r2,r2,65535
   10ad0:	10000f26 	beq	r2,zero,10b10 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10ad4:	e0bffb17 	ldw	r2,-20(fp)
   10ad8:	10c00817 	ldw	r3,32(r2)
   10adc:	00bfff84 	movi	r2,-2
   10ae0:	1886703a 	and	r3,r3,r2
   10ae4:	e0bffb17 	ldw	r2,-20(fp)
   10ae8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   10aec:	e0bffc17 	ldw	r2,-16(fp)
   10af0:	10800104 	addi	r2,r2,4
   10af4:	1007883a 	mov	r3,r2
   10af8:	e0bffb17 	ldw	r2,-20(fp)
   10afc:	10800817 	ldw	r2,32(r2)
   10b00:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10b04:	e0bffc17 	ldw	r2,-16(fp)
   10b08:	10800104 	addi	r2,r2,4
   10b0c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   10b10:	e0bffd17 	ldw	r2,-12(fp)
   10b14:	1080800c 	andi	r2,r2,512
   10b18:	103fbe26 	beq	r2,zero,10a14 <_gp+0xffff13a4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   10b1c:	e0bffd17 	ldw	r2,-12(fp)
   10b20:	1004d43a 	srli	r2,r2,16
   10b24:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   10b28:	00001406 	br	10b7c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   10b2c:	e0bffc17 	ldw	r2,-16(fp)
   10b30:	e0fffb17 	ldw	r3,-20(fp)
   10b34:	18c00d17 	ldw	r3,52(r3)
   10b38:	e13ffb17 	ldw	r4,-20(fp)
   10b3c:	20c7883a 	add	r3,r4,r3
   10b40:	18c20e04 	addi	r3,r3,2104
   10b44:	18c00003 	ldbu	r3,0(r3)
   10b48:	18c03fcc 	andi	r3,r3,255
   10b4c:	18c0201c 	xori	r3,r3,128
   10b50:	18ffe004 	addi	r3,r3,-128
   10b54:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10b58:	e0bffb17 	ldw	r2,-20(fp)
   10b5c:	10800d17 	ldw	r2,52(r2)
   10b60:	10800044 	addi	r2,r2,1
   10b64:	10c1ffcc 	andi	r3,r2,2047
   10b68:	e0bffb17 	ldw	r2,-20(fp)
   10b6c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   10b70:	e0bffa17 	ldw	r2,-24(fp)
   10b74:	10bfffc4 	addi	r2,r2,-1
   10b78:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   10b7c:	e0bffa17 	ldw	r2,-24(fp)
   10b80:	10000526 	beq	r2,zero,10b98 <altera_avalon_jtag_uart_irq+0x1a8>
   10b84:	e0bffb17 	ldw	r2,-20(fp)
   10b88:	10c00d17 	ldw	r3,52(r2)
   10b8c:	e0bffb17 	ldw	r2,-20(fp)
   10b90:	10800c17 	ldw	r2,48(r2)
   10b94:	18bfe51e 	bne	r3,r2,10b2c <_gp+0xffff14bc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   10b98:	e0bffa17 	ldw	r2,-24(fp)
   10b9c:	103f9d26 	beq	r2,zero,10a14 <_gp+0xffff13a4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10ba0:	e0bffb17 	ldw	r2,-20(fp)
   10ba4:	10c00817 	ldw	r3,32(r2)
   10ba8:	00bfff44 	movi	r2,-3
   10bac:	1886703a 	and	r3,r3,r2
   10bb0:	e0bffb17 	ldw	r2,-20(fp)
   10bb4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10bb8:	e0bffb17 	ldw	r2,-20(fp)
   10bbc:	10800017 	ldw	r2,0(r2)
   10bc0:	10800104 	addi	r2,r2,4
   10bc4:	1007883a 	mov	r3,r2
   10bc8:	e0bffb17 	ldw	r2,-20(fp)
   10bcc:	10800817 	ldw	r2,32(r2)
   10bd0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10bd4:	e0bffc17 	ldw	r2,-16(fp)
   10bd8:	10800104 	addi	r2,r2,4
   10bdc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   10be0:	003f8c06 	br	10a14 <_gp+0xffff13a4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   10be4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   10be8:	0001883a 	nop
   10bec:	e037883a 	mov	sp,fp
   10bf0:	df000017 	ldw	fp,0(sp)
   10bf4:	dec00104 	addi	sp,sp,4
   10bf8:	f800283a 	ret

00010bfc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   10bfc:	defff804 	addi	sp,sp,-32
   10c00:	df000715 	stw	fp,28(sp)
   10c04:	df000704 	addi	fp,sp,28
   10c08:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   10c0c:	e0bffb17 	ldw	r2,-20(fp)
   10c10:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   10c14:	e0bff917 	ldw	r2,-28(fp)
   10c18:	10800017 	ldw	r2,0(r2)
   10c1c:	10800104 	addi	r2,r2,4
   10c20:	10800037 	ldwio	r2,0(r2)
   10c24:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   10c28:	e0bffa17 	ldw	r2,-24(fp)
   10c2c:	1081000c 	andi	r2,r2,1024
   10c30:	10000b26 	beq	r2,zero,10c60 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   10c34:	e0bff917 	ldw	r2,-28(fp)
   10c38:	10800017 	ldw	r2,0(r2)
   10c3c:	10800104 	addi	r2,r2,4
   10c40:	1007883a 	mov	r3,r2
   10c44:	e0bff917 	ldw	r2,-28(fp)
   10c48:	10800817 	ldw	r2,32(r2)
   10c4c:	10810014 	ori	r2,r2,1024
   10c50:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   10c54:	e0bff917 	ldw	r2,-28(fp)
   10c58:	10000915 	stw	zero,36(r2)
   10c5c:	00000a06 	br	10c88 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   10c60:	e0bff917 	ldw	r2,-28(fp)
   10c64:	10c00917 	ldw	r3,36(r2)
   10c68:	00a00034 	movhi	r2,32768
   10c6c:	10bfff04 	addi	r2,r2,-4
   10c70:	10c00536 	bltu	r2,r3,10c88 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   10c74:	e0bff917 	ldw	r2,-28(fp)
   10c78:	10800917 	ldw	r2,36(r2)
   10c7c:	10c00044 	addi	r3,r2,1
   10c80:	e0bff917 	ldw	r2,-28(fp)
   10c84:	10c00915 	stw	r3,36(r2)
   10c88:	d0a6e917 	ldw	r2,-25692(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   10c8c:	e037883a 	mov	sp,fp
   10c90:	df000017 	ldw	fp,0(sp)
   10c94:	dec00104 	addi	sp,sp,4
   10c98:	f800283a 	ret

00010c9c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   10c9c:	defffd04 	addi	sp,sp,-12
   10ca0:	df000215 	stw	fp,8(sp)
   10ca4:	df000204 	addi	fp,sp,8
   10ca8:	e13ffe15 	stw	r4,-8(fp)
   10cac:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10cb0:	00000506 	br	10cc8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   10cb4:	e0bfff17 	ldw	r2,-4(fp)
   10cb8:	1090000c 	andi	r2,r2,16384
   10cbc:	10000226 	beq	r2,zero,10cc8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   10cc0:	00bffd44 	movi	r2,-11
   10cc4:	00000b06 	br	10cf4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10cc8:	e0bffe17 	ldw	r2,-8(fp)
   10ccc:	10c00d17 	ldw	r3,52(r2)
   10cd0:	e0bffe17 	ldw	r2,-8(fp)
   10cd4:	10800c17 	ldw	r2,48(r2)
   10cd8:	18800526 	beq	r3,r2,10cf0 <altera_avalon_jtag_uart_close+0x54>
   10cdc:	e0bffe17 	ldw	r2,-8(fp)
   10ce0:	10c00917 	ldw	r3,36(r2)
   10ce4:	e0bffe17 	ldw	r2,-8(fp)
   10ce8:	10800117 	ldw	r2,4(r2)
   10cec:	18bff136 	bltu	r3,r2,10cb4 <_gp+0xffff1644>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   10cf0:	0005883a 	mov	r2,zero
}
   10cf4:	e037883a 	mov	sp,fp
   10cf8:	df000017 	ldw	fp,0(sp)
   10cfc:	dec00104 	addi	sp,sp,4
   10d00:	f800283a 	ret

00010d04 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   10d04:	defffa04 	addi	sp,sp,-24
   10d08:	df000515 	stw	fp,20(sp)
   10d0c:	df000504 	addi	fp,sp,20
   10d10:	e13ffd15 	stw	r4,-12(fp)
   10d14:	e17ffe15 	stw	r5,-8(fp)
   10d18:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   10d1c:	00bff9c4 	movi	r2,-25
   10d20:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   10d24:	e0bffe17 	ldw	r2,-8(fp)
   10d28:	10da8060 	cmpeqi	r3,r2,27137
   10d2c:	1800031e 	bne	r3,zero,10d3c <altera_avalon_jtag_uart_ioctl+0x38>
   10d30:	109a80a0 	cmpeqi	r2,r2,27138
   10d34:	1000181e 	bne	r2,zero,10d98 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   10d38:	00002906 	br	10de0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   10d3c:	e0bffd17 	ldw	r2,-12(fp)
   10d40:	10c00117 	ldw	r3,4(r2)
   10d44:	00a00034 	movhi	r2,32768
   10d48:	10bfffc4 	addi	r2,r2,-1
   10d4c:	18802126 	beq	r3,r2,10dd4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   10d50:	e0bfff17 	ldw	r2,-4(fp)
   10d54:	10800017 	ldw	r2,0(r2)
   10d58:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   10d5c:	e0bffc17 	ldw	r2,-16(fp)
   10d60:	10800090 	cmplti	r2,r2,2
   10d64:	1000061e 	bne	r2,zero,10d80 <altera_avalon_jtag_uart_ioctl+0x7c>
   10d68:	e0fffc17 	ldw	r3,-16(fp)
   10d6c:	00a00034 	movhi	r2,32768
   10d70:	10bfffc4 	addi	r2,r2,-1
   10d74:	18800226 	beq	r3,r2,10d80 <altera_avalon_jtag_uart_ioctl+0x7c>
   10d78:	e0bffc17 	ldw	r2,-16(fp)
   10d7c:	00000206 	br	10d88 <altera_avalon_jtag_uart_ioctl+0x84>
   10d80:	00a00034 	movhi	r2,32768
   10d84:	10bfff84 	addi	r2,r2,-2
   10d88:	e0fffd17 	ldw	r3,-12(fp)
   10d8c:	18800115 	stw	r2,4(r3)
      rc = 0;
   10d90:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10d94:	00000f06 	br	10dd4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   10d98:	e0bffd17 	ldw	r2,-12(fp)
   10d9c:	10c00117 	ldw	r3,4(r2)
   10da0:	00a00034 	movhi	r2,32768
   10da4:	10bfffc4 	addi	r2,r2,-1
   10da8:	18800c26 	beq	r3,r2,10ddc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   10dac:	e0bffd17 	ldw	r2,-12(fp)
   10db0:	10c00917 	ldw	r3,36(r2)
   10db4:	e0bffd17 	ldw	r2,-12(fp)
   10db8:	10800117 	ldw	r2,4(r2)
   10dbc:	1885803a 	cmpltu	r2,r3,r2
   10dc0:	10c03fcc 	andi	r3,r2,255
   10dc4:	e0bfff17 	ldw	r2,-4(fp)
   10dc8:	10c00015 	stw	r3,0(r2)
      rc = 0;
   10dcc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10dd0:	00000206 	br	10ddc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   10dd4:	0001883a 	nop
   10dd8:	00000106 	br	10de0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   10ddc:	0001883a 	nop

  default:
    break;
  }

  return rc;
   10de0:	e0bffb17 	ldw	r2,-20(fp)
}
   10de4:	e037883a 	mov	sp,fp
   10de8:	df000017 	ldw	fp,0(sp)
   10dec:	dec00104 	addi	sp,sp,4
   10df0:	f800283a 	ret

00010df4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   10df4:	defff304 	addi	sp,sp,-52
   10df8:	dfc00c15 	stw	ra,48(sp)
   10dfc:	df000b15 	stw	fp,44(sp)
   10e00:	df000b04 	addi	fp,sp,44
   10e04:	e13ffc15 	stw	r4,-16(fp)
   10e08:	e17ffd15 	stw	r5,-12(fp)
   10e0c:	e1bffe15 	stw	r6,-8(fp)
   10e10:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   10e14:	e0bffd17 	ldw	r2,-12(fp)
   10e18:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10e1c:	00004706 	br	10f3c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   10e20:	e0bffc17 	ldw	r2,-16(fp)
   10e24:	10800a17 	ldw	r2,40(r2)
   10e28:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   10e2c:	e0bffc17 	ldw	r2,-16(fp)
   10e30:	10800b17 	ldw	r2,44(r2)
   10e34:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   10e38:	e0fff717 	ldw	r3,-36(fp)
   10e3c:	e0bff817 	ldw	r2,-32(fp)
   10e40:	18800536 	bltu	r3,r2,10e58 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   10e44:	e0fff717 	ldw	r3,-36(fp)
   10e48:	e0bff817 	ldw	r2,-32(fp)
   10e4c:	1885c83a 	sub	r2,r3,r2
   10e50:	e0bff615 	stw	r2,-40(fp)
   10e54:	00000406 	br	10e68 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   10e58:	00c20004 	movi	r3,2048
   10e5c:	e0bff817 	ldw	r2,-32(fp)
   10e60:	1885c83a 	sub	r2,r3,r2
   10e64:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10e68:	e0bff617 	ldw	r2,-40(fp)
   10e6c:	10001e26 	beq	r2,zero,10ee8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   10e70:	e0fffe17 	ldw	r3,-8(fp)
   10e74:	e0bff617 	ldw	r2,-40(fp)
   10e78:	1880022e 	bgeu	r3,r2,10e84 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   10e7c:	e0bffe17 	ldw	r2,-8(fp)
   10e80:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   10e84:	e0bffc17 	ldw	r2,-16(fp)
   10e88:	10c00e04 	addi	r3,r2,56
   10e8c:	e0bff817 	ldw	r2,-32(fp)
   10e90:	1885883a 	add	r2,r3,r2
   10e94:	e1bff617 	ldw	r6,-40(fp)
   10e98:	100b883a 	mov	r5,r2
   10e9c:	e13ff517 	ldw	r4,-44(fp)
   10ea0:	0012e340 	call	12e34 <memcpy>
      ptr   += n;
   10ea4:	e0fff517 	ldw	r3,-44(fp)
   10ea8:	e0bff617 	ldw	r2,-40(fp)
   10eac:	1885883a 	add	r2,r3,r2
   10eb0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   10eb4:	e0fffe17 	ldw	r3,-8(fp)
   10eb8:	e0bff617 	ldw	r2,-40(fp)
   10ebc:	1885c83a 	sub	r2,r3,r2
   10ec0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10ec4:	e0fff817 	ldw	r3,-32(fp)
   10ec8:	e0bff617 	ldw	r2,-40(fp)
   10ecc:	1885883a 	add	r2,r3,r2
   10ed0:	10c1ffcc 	andi	r3,r2,2047
   10ed4:	e0bffc17 	ldw	r2,-16(fp)
   10ed8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   10edc:	e0bffe17 	ldw	r2,-8(fp)
   10ee0:	00bfcf16 	blt	zero,r2,10e20 <_gp+0xffff17b0>
   10ee4:	00000106 	br	10eec <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   10ee8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   10eec:	e0fff517 	ldw	r3,-44(fp)
   10ef0:	e0bffd17 	ldw	r2,-12(fp)
   10ef4:	1880141e 	bne	r3,r2,10f48 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   10ef8:	e0bfff17 	ldw	r2,-4(fp)
   10efc:	1090000c 	andi	r2,r2,16384
   10f00:	1000131e 	bne	r2,zero,10f50 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   10f04:	0001883a 	nop
   10f08:	e0bffc17 	ldw	r2,-16(fp)
   10f0c:	10c00a17 	ldw	r3,40(r2)
   10f10:	e0bff717 	ldw	r2,-36(fp)
   10f14:	1880051e 	bne	r3,r2,10f2c <altera_avalon_jtag_uart_read+0x138>
   10f18:	e0bffc17 	ldw	r2,-16(fp)
   10f1c:	10c00917 	ldw	r3,36(r2)
   10f20:	e0bffc17 	ldw	r2,-16(fp)
   10f24:	10800117 	ldw	r2,4(r2)
   10f28:	18bff736 	bltu	r3,r2,10f08 <_gp+0xffff1898>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   10f2c:	e0bffc17 	ldw	r2,-16(fp)
   10f30:	10c00a17 	ldw	r3,40(r2)
   10f34:	e0bff717 	ldw	r2,-36(fp)
   10f38:	18800726 	beq	r3,r2,10f58 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10f3c:	e0bffe17 	ldw	r2,-8(fp)
   10f40:	00bfb716 	blt	zero,r2,10e20 <_gp+0xffff17b0>
   10f44:	00000506 	br	10f5c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   10f48:	0001883a 	nop
   10f4c:	00000306 	br	10f5c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   10f50:	0001883a 	nop
   10f54:	00000106 	br	10f5c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   10f58:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   10f5c:	e0fff517 	ldw	r3,-44(fp)
   10f60:	e0bffd17 	ldw	r2,-12(fp)
   10f64:	18801826 	beq	r3,r2,10fc8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10f68:	0005303a 	rdctl	r2,status
   10f6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10f70:	e0fffb17 	ldw	r3,-20(fp)
   10f74:	00bfff84 	movi	r2,-2
   10f78:	1884703a 	and	r2,r3,r2
   10f7c:	1001703a 	wrctl	status,r2
  
  return context;
   10f80:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   10f84:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10f88:	e0bffc17 	ldw	r2,-16(fp)
   10f8c:	10800817 	ldw	r2,32(r2)
   10f90:	10c00054 	ori	r3,r2,1
   10f94:	e0bffc17 	ldw	r2,-16(fp)
   10f98:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10f9c:	e0bffc17 	ldw	r2,-16(fp)
   10fa0:	10800017 	ldw	r2,0(r2)
   10fa4:	10800104 	addi	r2,r2,4
   10fa8:	1007883a 	mov	r3,r2
   10fac:	e0bffc17 	ldw	r2,-16(fp)
   10fb0:	10800817 	ldw	r2,32(r2)
   10fb4:	18800035 	stwio	r2,0(r3)
   10fb8:	e0bffa17 	ldw	r2,-24(fp)
   10fbc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10fc0:	e0bff917 	ldw	r2,-28(fp)
   10fc4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   10fc8:	e0fff517 	ldw	r3,-44(fp)
   10fcc:	e0bffd17 	ldw	r2,-12(fp)
   10fd0:	18800426 	beq	r3,r2,10fe4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   10fd4:	e0fff517 	ldw	r3,-44(fp)
   10fd8:	e0bffd17 	ldw	r2,-12(fp)
   10fdc:	1885c83a 	sub	r2,r3,r2
   10fe0:	00000606 	br	10ffc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   10fe4:	e0bfff17 	ldw	r2,-4(fp)
   10fe8:	1090000c 	andi	r2,r2,16384
   10fec:	10000226 	beq	r2,zero,10ff8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   10ff0:	00bffd44 	movi	r2,-11
   10ff4:	00000106 	br	10ffc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   10ff8:	00bffec4 	movi	r2,-5
}
   10ffc:	e037883a 	mov	sp,fp
   11000:	dfc00117 	ldw	ra,4(sp)
   11004:	df000017 	ldw	fp,0(sp)
   11008:	dec00204 	addi	sp,sp,8
   1100c:	f800283a 	ret

00011010 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   11010:	defff304 	addi	sp,sp,-52
   11014:	dfc00c15 	stw	ra,48(sp)
   11018:	df000b15 	stw	fp,44(sp)
   1101c:	df000b04 	addi	fp,sp,44
   11020:	e13ffc15 	stw	r4,-16(fp)
   11024:	e17ffd15 	stw	r5,-12(fp)
   11028:	e1bffe15 	stw	r6,-8(fp)
   1102c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   11030:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   11034:	e0bffd17 	ldw	r2,-12(fp)
   11038:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1103c:	00003706 	br	1111c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   11040:	e0bffc17 	ldw	r2,-16(fp)
   11044:	10800c17 	ldw	r2,48(r2)
   11048:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   1104c:	e0bffc17 	ldw	r2,-16(fp)
   11050:	10800d17 	ldw	r2,52(r2)
   11054:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   11058:	e0fff917 	ldw	r3,-28(fp)
   1105c:	e0bff517 	ldw	r2,-44(fp)
   11060:	1880062e 	bgeu	r3,r2,1107c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   11064:	e0fff517 	ldw	r3,-44(fp)
   11068:	e0bff917 	ldw	r2,-28(fp)
   1106c:	1885c83a 	sub	r2,r3,r2
   11070:	10bfffc4 	addi	r2,r2,-1
   11074:	e0bff615 	stw	r2,-40(fp)
   11078:	00000b06 	br	110a8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   1107c:	e0bff517 	ldw	r2,-44(fp)
   11080:	10000526 	beq	r2,zero,11098 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   11084:	00c20004 	movi	r3,2048
   11088:	e0bff917 	ldw	r2,-28(fp)
   1108c:	1885c83a 	sub	r2,r3,r2
   11090:	e0bff615 	stw	r2,-40(fp)
   11094:	00000406 	br	110a8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   11098:	00c1ffc4 	movi	r3,2047
   1109c:	e0bff917 	ldw	r2,-28(fp)
   110a0:	1885c83a 	sub	r2,r3,r2
   110a4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   110a8:	e0bff617 	ldw	r2,-40(fp)
   110ac:	10001e26 	beq	r2,zero,11128 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   110b0:	e0fffe17 	ldw	r3,-8(fp)
   110b4:	e0bff617 	ldw	r2,-40(fp)
   110b8:	1880022e 	bgeu	r3,r2,110c4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   110bc:	e0bffe17 	ldw	r2,-8(fp)
   110c0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   110c4:	e0bffc17 	ldw	r2,-16(fp)
   110c8:	10c20e04 	addi	r3,r2,2104
   110cc:	e0bff917 	ldw	r2,-28(fp)
   110d0:	1885883a 	add	r2,r3,r2
   110d4:	e1bff617 	ldw	r6,-40(fp)
   110d8:	e17ffd17 	ldw	r5,-12(fp)
   110dc:	1009883a 	mov	r4,r2
   110e0:	0012e340 	call	12e34 <memcpy>
      ptr   += n;
   110e4:	e0fffd17 	ldw	r3,-12(fp)
   110e8:	e0bff617 	ldw	r2,-40(fp)
   110ec:	1885883a 	add	r2,r3,r2
   110f0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   110f4:	e0fffe17 	ldw	r3,-8(fp)
   110f8:	e0bff617 	ldw	r2,-40(fp)
   110fc:	1885c83a 	sub	r2,r3,r2
   11100:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11104:	e0fff917 	ldw	r3,-28(fp)
   11108:	e0bff617 	ldw	r2,-40(fp)
   1110c:	1885883a 	add	r2,r3,r2
   11110:	10c1ffcc 	andi	r3,r2,2047
   11114:	e0bffc17 	ldw	r2,-16(fp)
   11118:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1111c:	e0bffe17 	ldw	r2,-8(fp)
   11120:	00bfc716 	blt	zero,r2,11040 <_gp+0xffff19d0>
   11124:	00000106 	br	1112c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   11128:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1112c:	0005303a 	rdctl	r2,status
   11130:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11134:	e0fffb17 	ldw	r3,-20(fp)
   11138:	00bfff84 	movi	r2,-2
   1113c:	1884703a 	and	r2,r3,r2
   11140:	1001703a 	wrctl	status,r2
  
  return context;
   11144:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   11148:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1114c:	e0bffc17 	ldw	r2,-16(fp)
   11150:	10800817 	ldw	r2,32(r2)
   11154:	10c00094 	ori	r3,r2,2
   11158:	e0bffc17 	ldw	r2,-16(fp)
   1115c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   11160:	e0bffc17 	ldw	r2,-16(fp)
   11164:	10800017 	ldw	r2,0(r2)
   11168:	10800104 	addi	r2,r2,4
   1116c:	1007883a 	mov	r3,r2
   11170:	e0bffc17 	ldw	r2,-16(fp)
   11174:	10800817 	ldw	r2,32(r2)
   11178:	18800035 	stwio	r2,0(r3)
   1117c:	e0bffa17 	ldw	r2,-24(fp)
   11180:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11184:	e0bff817 	ldw	r2,-32(fp)
   11188:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1118c:	e0bffe17 	ldw	r2,-8(fp)
   11190:	0080100e 	bge	zero,r2,111d4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   11194:	e0bfff17 	ldw	r2,-4(fp)
   11198:	1090000c 	andi	r2,r2,16384
   1119c:	1000101e 	bne	r2,zero,111e0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   111a0:	0001883a 	nop
   111a4:	e0bffc17 	ldw	r2,-16(fp)
   111a8:	10c00d17 	ldw	r3,52(r2)
   111ac:	e0bff517 	ldw	r2,-44(fp)
   111b0:	1880051e 	bne	r3,r2,111c8 <altera_avalon_jtag_uart_write+0x1b8>
   111b4:	e0bffc17 	ldw	r2,-16(fp)
   111b8:	10c00917 	ldw	r3,36(r2)
   111bc:	e0bffc17 	ldw	r2,-16(fp)
   111c0:	10800117 	ldw	r2,4(r2)
   111c4:	18bff736 	bltu	r3,r2,111a4 <_gp+0xffff1b34>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   111c8:	e0bffc17 	ldw	r2,-16(fp)
   111cc:	10800917 	ldw	r2,36(r2)
   111d0:	1000051e 	bne	r2,zero,111e8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   111d4:	e0bffe17 	ldw	r2,-8(fp)
   111d8:	00bfd016 	blt	zero,r2,1111c <_gp+0xffff1aac>
   111dc:	00000306 	br	111ec <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   111e0:	0001883a 	nop
   111e4:	00000106 	br	111ec <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   111e8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   111ec:	e0fffd17 	ldw	r3,-12(fp)
   111f0:	e0bff717 	ldw	r2,-36(fp)
   111f4:	18800426 	beq	r3,r2,11208 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   111f8:	e0fffd17 	ldw	r3,-12(fp)
   111fc:	e0bff717 	ldw	r2,-36(fp)
   11200:	1885c83a 	sub	r2,r3,r2
   11204:	00000606 	br	11220 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   11208:	e0bfff17 	ldw	r2,-4(fp)
   1120c:	1090000c 	andi	r2,r2,16384
   11210:	10000226 	beq	r2,zero,1121c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   11214:	00bffd44 	movi	r2,-11
   11218:	00000106 	br	11220 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1121c:	00bffec4 	movi	r2,-5
}
   11220:	e037883a 	mov	sp,fp
   11224:	dfc00117 	ldw	ra,4(sp)
   11228:	df000017 	ldw	fp,0(sp)
   1122c:	dec00204 	addi	sp,sp,8
   11230:	f800283a 	ret

00011234 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   11234:	defffa04 	addi	sp,sp,-24
   11238:	dfc00515 	stw	ra,20(sp)
   1123c:	df000415 	stw	fp,16(sp)
   11240:	df000404 	addi	fp,sp,16
   11244:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   11248:	0007883a 	mov	r3,zero
   1124c:	e0bfff17 	ldw	r2,-4(fp)
   11250:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   11254:	e0bfff17 	ldw	r2,-4(fp)
   11258:	10800104 	addi	r2,r2,4
   1125c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11260:	0005303a 	rdctl	r2,status
   11264:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11268:	e0fffd17 	ldw	r3,-12(fp)
   1126c:	00bfff84 	movi	r2,-2
   11270:	1884703a 	and	r2,r3,r2
   11274:	1001703a 	wrctl	status,r2
  
  return context;
   11278:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1127c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   11280:	00129480 	call	12948 <alt_tick>
   11284:	e0bffc17 	ldw	r2,-16(fp)
   11288:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1128c:	e0bffe17 	ldw	r2,-8(fp)
   11290:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   11294:	0001883a 	nop
   11298:	e037883a 	mov	sp,fp
   1129c:	dfc00117 	ldw	ra,4(sp)
   112a0:	df000017 	ldw	fp,0(sp)
   112a4:	dec00204 	addi	sp,sp,8
   112a8:	f800283a 	ret

000112ac <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   112ac:	defff804 	addi	sp,sp,-32
   112b0:	dfc00715 	stw	ra,28(sp)
   112b4:	df000615 	stw	fp,24(sp)
   112b8:	df000604 	addi	fp,sp,24
   112bc:	e13ffc15 	stw	r4,-16(fp)
   112c0:	e17ffd15 	stw	r5,-12(fp)
   112c4:	e1bffe15 	stw	r6,-8(fp)
   112c8:	e1ffff15 	stw	r7,-4(fp)
   112cc:	e0bfff17 	ldw	r2,-4(fp)
   112d0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   112d4:	d0a6e917 	ldw	r2,-25692(gp)
   112d8:	1000021e 	bne	r2,zero,112e4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   112dc:	e0bffb17 	ldw	r2,-20(fp)
   112e0:	d0a6e915 	stw	r2,-25692(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   112e4:	e0bffc17 	ldw	r2,-16(fp)
   112e8:	10800104 	addi	r2,r2,4
   112ec:	00c001c4 	movi	r3,7
   112f0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   112f4:	d8000015 	stw	zero,0(sp)
   112f8:	e1fffc17 	ldw	r7,-16(fp)
   112fc:	01800074 	movhi	r6,1
   11300:	31848d04 	addi	r6,r6,4660
   11304:	e17ffe17 	ldw	r5,-8(fp)
   11308:	e13ffd17 	ldw	r4,-12(fp)
   1130c:	00121a40 	call	121a4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   11310:	0001883a 	nop
   11314:	e037883a 	mov	sp,fp
   11318:	dfc00117 	ldw	ra,4(sp)
   1131c:	df000017 	ldw	fp,0(sp)
   11320:	dec00204 	addi	sp,sp,8
   11324:	f800283a 	ret

00011328 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   11328:	defffa04 	addi	sp,sp,-24
   1132c:	dfc00515 	stw	ra,20(sp)
   11330:	df000415 	stw	fp,16(sp)
   11334:	df000404 	addi	fp,sp,16
   11338:	e13ffd15 	stw	r4,-12(fp)
   1133c:	e17ffe15 	stw	r5,-8(fp)
   11340:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   11344:	e0bffd17 	ldw	r2,-12(fp)
   11348:	10800017 	ldw	r2,0(r2)
   1134c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   11350:	e0bffc17 	ldw	r2,-16(fp)
   11354:	10c00a04 	addi	r3,r2,40
   11358:	e0bffd17 	ldw	r2,-12(fp)
   1135c:	10800217 	ldw	r2,8(r2)
   11360:	100f883a 	mov	r7,r2
   11364:	e1bfff17 	ldw	r6,-4(fp)
   11368:	e17ffe17 	ldw	r5,-8(fp)
   1136c:	1809883a 	mov	r4,r3
   11370:	001183c0 	call	1183c <altera_avalon_uart_read>
      fd->fd_flags);
}
   11374:	e037883a 	mov	sp,fp
   11378:	dfc00117 	ldw	ra,4(sp)
   1137c:	df000017 	ldw	fp,0(sp)
   11380:	dec00204 	addi	sp,sp,8
   11384:	f800283a 	ret

00011388 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   11388:	defffa04 	addi	sp,sp,-24
   1138c:	dfc00515 	stw	ra,20(sp)
   11390:	df000415 	stw	fp,16(sp)
   11394:	df000404 	addi	fp,sp,16
   11398:	e13ffd15 	stw	r4,-12(fp)
   1139c:	e17ffe15 	stw	r5,-8(fp)
   113a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   113a4:	e0bffd17 	ldw	r2,-12(fp)
   113a8:	10800017 	ldw	r2,0(r2)
   113ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   113b0:	e0bffc17 	ldw	r2,-16(fp)
   113b4:	10c00a04 	addi	r3,r2,40
   113b8:	e0bffd17 	ldw	r2,-12(fp)
   113bc:	10800217 	ldw	r2,8(r2)
   113c0:	100f883a 	mov	r7,r2
   113c4:	e1bfff17 	ldw	r6,-4(fp)
   113c8:	e17ffe17 	ldw	r5,-8(fp)
   113cc:	1809883a 	mov	r4,r3
   113d0:	0011a540 	call	11a54 <altera_avalon_uart_write>
      fd->fd_flags);
}
   113d4:	e037883a 	mov	sp,fp
   113d8:	dfc00117 	ldw	ra,4(sp)
   113dc:	df000017 	ldw	fp,0(sp)
   113e0:	dec00204 	addi	sp,sp,8
   113e4:	f800283a 	ret

000113e8 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   113e8:	defffc04 	addi	sp,sp,-16
   113ec:	dfc00315 	stw	ra,12(sp)
   113f0:	df000215 	stw	fp,8(sp)
   113f4:	df000204 	addi	fp,sp,8
   113f8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   113fc:	e0bfff17 	ldw	r2,-4(fp)
   11400:	10800017 	ldw	r2,0(r2)
   11404:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   11408:	e0bffe17 	ldw	r2,-8(fp)
   1140c:	10c00a04 	addi	r3,r2,40
   11410:	e0bfff17 	ldw	r2,-4(fp)
   11414:	10800217 	ldw	r2,8(r2)
   11418:	100b883a 	mov	r5,r2
   1141c:	1809883a 	mov	r4,r3
   11420:	00117ac0 	call	117ac <altera_avalon_uart_close>
}
   11424:	e037883a 	mov	sp,fp
   11428:	dfc00117 	ldw	ra,4(sp)
   1142c:	df000017 	ldw	fp,0(sp)
   11430:	dec00204 	addi	sp,sp,8
   11434:	f800283a 	ret

00011438 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   11438:	defff804 	addi	sp,sp,-32
   1143c:	dfc00715 	stw	ra,28(sp)
   11440:	df000615 	stw	fp,24(sp)
   11444:	df000604 	addi	fp,sp,24
   11448:	e13ffd15 	stw	r4,-12(fp)
   1144c:	e17ffe15 	stw	r5,-8(fp)
   11450:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   11454:	e0bffd17 	ldw	r2,-12(fp)
   11458:	10800017 	ldw	r2,0(r2)
   1145c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   11460:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   11464:	1000041e 	bne	r2,zero,11478 <altera_avalon_uart_init+0x40>
   11468:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   1146c:	1000021e 	bne	r2,zero,11478 <altera_avalon_uart_init+0x40>
   11470:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   11474:	10000226 	beq	r2,zero,11480 <altera_avalon_uart_init+0x48>
   11478:	00800044 	movi	r2,1
   1147c:	00000106 	br	11484 <altera_avalon_uart_init+0x4c>
   11480:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   11484:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   11488:	e0bffc17 	ldw	r2,-16(fp)
   1148c:	10000f1e 	bne	r2,zero,114cc <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   11490:	e0bffd17 	ldw	r2,-12(fp)
   11494:	00c32004 	movi	r3,3200
   11498:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   1149c:	e0bffb17 	ldw	r2,-20(fp)
   114a0:	10800304 	addi	r2,r2,12
   114a4:	e0fffd17 	ldw	r3,-12(fp)
   114a8:	18c00117 	ldw	r3,4(r3)
   114ac:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   114b0:	d8000015 	stw	zero,0(sp)
   114b4:	e1fffd17 	ldw	r7,-12(fp)
   114b8:	01800074 	movhi	r6,1
   114bc:	31853904 	addi	r6,r6,5348
   114c0:	e17fff17 	ldw	r5,-4(fp)
   114c4:	e13ffe17 	ldw	r4,-8(fp)
   114c8:	00121a40 	call	121a4 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   114cc:	0001883a 	nop
   114d0:	e037883a 	mov	sp,fp
   114d4:	dfc00117 	ldw	ra,4(sp)
   114d8:	df000017 	ldw	fp,0(sp)
   114dc:	dec00204 	addi	sp,sp,8
   114e0:	f800283a 	ret

000114e4 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   114e4:	defffa04 	addi	sp,sp,-24
   114e8:	dfc00515 	stw	ra,20(sp)
   114ec:	df000415 	stw	fp,16(sp)
   114f0:	df000404 	addi	fp,sp,16
   114f4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   114f8:	e0bfff17 	ldw	r2,-4(fp)
   114fc:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   11500:	e0bffc17 	ldw	r2,-16(fp)
   11504:	10800017 	ldw	r2,0(r2)
   11508:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   1150c:	e0bffd17 	ldw	r2,-12(fp)
   11510:	10800204 	addi	r2,r2,8
   11514:	10800037 	ldwio	r2,0(r2)
   11518:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   1151c:	e0bffd17 	ldw	r2,-12(fp)
   11520:	10800204 	addi	r2,r2,8
   11524:	0007883a 	mov	r3,zero
   11528:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   1152c:	e0bffd17 	ldw	r2,-12(fp)
   11530:	10800204 	addi	r2,r2,8
   11534:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   11538:	e0bffe17 	ldw	r2,-8(fp)
   1153c:	1080200c 	andi	r2,r2,128
   11540:	10000326 	beq	r2,zero,11550 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   11544:	e17ffe17 	ldw	r5,-8(fp)
   11548:	e13ffc17 	ldw	r4,-16(fp)
   1154c:	00115800 	call	11580 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   11550:	e0bffe17 	ldw	r2,-8(fp)
   11554:	1081100c 	andi	r2,r2,1088
   11558:	10000326 	beq	r2,zero,11568 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   1155c:	e17ffe17 	ldw	r5,-8(fp)
   11560:	e13ffc17 	ldw	r4,-16(fp)
   11564:	00116640 	call	11664 <altera_avalon_uart_txirq>
  }
  

}
   11568:	0001883a 	nop
   1156c:	e037883a 	mov	sp,fp
   11570:	dfc00117 	ldw	ra,4(sp)
   11574:	df000017 	ldw	fp,0(sp)
   11578:	dec00204 	addi	sp,sp,8
   1157c:	f800283a 	ret

00011580 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   11580:	defffc04 	addi	sp,sp,-16
   11584:	df000315 	stw	fp,12(sp)
   11588:	df000304 	addi	fp,sp,12
   1158c:	e13ffe15 	stw	r4,-8(fp)
   11590:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   11594:	e0bfff17 	ldw	r2,-4(fp)
   11598:	108000cc 	andi	r2,r2,3
   1159c:	10002c1e 	bne	r2,zero,11650 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   115a0:	e0bffe17 	ldw	r2,-8(fp)
   115a4:	10800317 	ldw	r2,12(r2)
   115a8:	e0bffe17 	ldw	r2,-8(fp)
   115ac:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   115b0:	e0bffe17 	ldw	r2,-8(fp)
   115b4:	10800317 	ldw	r2,12(r2)
   115b8:	10800044 	addi	r2,r2,1
   115bc:	10800fcc 	andi	r2,r2,63
   115c0:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   115c4:	e0bffe17 	ldw	r2,-8(fp)
   115c8:	10800317 	ldw	r2,12(r2)
   115cc:	e0fffe17 	ldw	r3,-8(fp)
   115d0:	18c00017 	ldw	r3,0(r3)
   115d4:	18c00037 	ldwio	r3,0(r3)
   115d8:	1809883a 	mov	r4,r3
   115dc:	e0fffe17 	ldw	r3,-8(fp)
   115e0:	1885883a 	add	r2,r3,r2
   115e4:	10800704 	addi	r2,r2,28
   115e8:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   115ec:	e0bffe17 	ldw	r2,-8(fp)
   115f0:	e0fffd17 	ldw	r3,-12(fp)
   115f4:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   115f8:	e0bffe17 	ldw	r2,-8(fp)
   115fc:	10800317 	ldw	r2,12(r2)
   11600:	10800044 	addi	r2,r2,1
   11604:	10800fcc 	andi	r2,r2,63
   11608:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   1160c:	e0bffe17 	ldw	r2,-8(fp)
   11610:	10c00217 	ldw	r3,8(r2)
   11614:	e0bffd17 	ldw	r2,-12(fp)
   11618:	18800e1e 	bne	r3,r2,11654 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   1161c:	e0bffe17 	ldw	r2,-8(fp)
   11620:	10c00117 	ldw	r3,4(r2)
   11624:	00bfdfc4 	movi	r2,-129
   11628:	1886703a 	and	r3,r3,r2
   1162c:	e0bffe17 	ldw	r2,-8(fp)
   11630:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   11634:	e0bffe17 	ldw	r2,-8(fp)
   11638:	10800017 	ldw	r2,0(r2)
   1163c:	10800304 	addi	r2,r2,12
   11640:	e0fffe17 	ldw	r3,-8(fp)
   11644:	18c00117 	ldw	r3,4(r3)
   11648:	10c00035 	stwio	r3,0(r2)
   1164c:	00000106 	br	11654 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   11650:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
   11654:	e037883a 	mov	sp,fp
   11658:	df000017 	ldw	fp,0(sp)
   1165c:	dec00104 	addi	sp,sp,4
   11660:	f800283a 	ret

00011664 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   11664:	defffb04 	addi	sp,sp,-20
   11668:	df000415 	stw	fp,16(sp)
   1166c:	df000404 	addi	fp,sp,16
   11670:	e13ffc15 	stw	r4,-16(fp)
   11674:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   11678:	e0bffc17 	ldw	r2,-16(fp)
   1167c:	10c00417 	ldw	r3,16(r2)
   11680:	e0bffc17 	ldw	r2,-16(fp)
   11684:	10800517 	ldw	r2,20(r2)
   11688:	18803226 	beq	r3,r2,11754 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   1168c:	e0bffc17 	ldw	r2,-16(fp)
   11690:	10800617 	ldw	r2,24(r2)
   11694:	1080008c 	andi	r2,r2,2
   11698:	10000326 	beq	r2,zero,116a8 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   1169c:	e0bffd17 	ldw	r2,-12(fp)
   116a0:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   116a4:	10001d26 	beq	r2,zero,1171c <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   116a8:	e0bffc17 	ldw	r2,-16(fp)
   116ac:	10800417 	ldw	r2,16(r2)
   116b0:	e0bffc17 	ldw	r2,-16(fp)
   116b4:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   116b8:	e0bffc17 	ldw	r2,-16(fp)
   116bc:	10800017 	ldw	r2,0(r2)
   116c0:	10800104 	addi	r2,r2,4
   116c4:	e0fffc17 	ldw	r3,-16(fp)
   116c8:	18c00417 	ldw	r3,16(r3)
   116cc:	e13ffc17 	ldw	r4,-16(fp)
   116d0:	20c7883a 	add	r3,r4,r3
   116d4:	18c01704 	addi	r3,r3,92
   116d8:	18c00003 	ldbu	r3,0(r3)
   116dc:	18c03fcc 	andi	r3,r3,255
   116e0:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   116e4:	e0bffc17 	ldw	r2,-16(fp)
   116e8:	10800417 	ldw	r2,16(r2)
   116ec:	10800044 	addi	r2,r2,1
   116f0:	e0fffc17 	ldw	r3,-16(fp)
   116f4:	18800415 	stw	r2,16(r3)
   116f8:	10c00fcc 	andi	r3,r2,63
   116fc:	e0bffc17 	ldw	r2,-16(fp)
   11700:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   11704:	e0bffc17 	ldw	r2,-16(fp)
   11708:	10800117 	ldw	r2,4(r2)
   1170c:	10c01014 	ori	r3,r2,64
   11710:	e0bffc17 	ldw	r2,-16(fp)
   11714:	10c00115 	stw	r3,4(r2)
   11718:	00000e06 	br	11754 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   1171c:	e0bffc17 	ldw	r2,-16(fp)
   11720:	10800017 	ldw	r2,0(r2)
   11724:	10800204 	addi	r2,r2,8
   11728:	10800037 	ldwio	r2,0(r2)
   1172c:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   11730:	e0bffd17 	ldw	r2,-12(fp)
   11734:	1082000c 	andi	r2,r2,2048
   11738:	1000061e 	bne	r2,zero,11754 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   1173c:	e0bffc17 	ldw	r2,-16(fp)
   11740:	10c00117 	ldw	r3,4(r2)
   11744:	00bfefc4 	movi	r2,-65
   11748:	1886703a 	and	r3,r3,r2
   1174c:	e0bffc17 	ldw	r2,-16(fp)
   11750:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   11754:	e0bffc17 	ldw	r2,-16(fp)
   11758:	10c00417 	ldw	r3,16(r2)
   1175c:	e0bffc17 	ldw	r2,-16(fp)
   11760:	10800517 	ldw	r2,20(r2)
   11764:	1880061e 	bne	r3,r2,11780 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   11768:	e0bffc17 	ldw	r2,-16(fp)
   1176c:	10c00117 	ldw	r3,4(r2)
   11770:	00beefc4 	movi	r2,-1089
   11774:	1886703a 	and	r3,r3,r2
   11778:	e0bffc17 	ldw	r2,-16(fp)
   1177c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   11780:	e0bffc17 	ldw	r2,-16(fp)
   11784:	10800017 	ldw	r2,0(r2)
   11788:	10800304 	addi	r2,r2,12
   1178c:	e0fffc17 	ldw	r3,-16(fp)
   11790:	18c00117 	ldw	r3,4(r3)
   11794:	10c00035 	stwio	r3,0(r2)
}
   11798:	0001883a 	nop
   1179c:	e037883a 	mov	sp,fp
   117a0:	df000017 	ldw	fp,0(sp)
   117a4:	dec00104 	addi	sp,sp,4
   117a8:	f800283a 	ret

000117ac <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   117ac:	defffd04 	addi	sp,sp,-12
   117b0:	df000215 	stw	fp,8(sp)
   117b4:	df000204 	addi	fp,sp,8
   117b8:	e13ffe15 	stw	r4,-8(fp)
   117bc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   117c0:	00000506 	br	117d8 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   117c4:	e0bfff17 	ldw	r2,-4(fp)
   117c8:	1090000c 	andi	r2,r2,16384
   117cc:	10000226 	beq	r2,zero,117d8 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   117d0:	00bffd44 	movi	r2,-11
   117d4:	00000606 	br	117f0 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   117d8:	e0bffe17 	ldw	r2,-8(fp)
   117dc:	10c00417 	ldw	r3,16(r2)
   117e0:	e0bffe17 	ldw	r2,-8(fp)
   117e4:	10800517 	ldw	r2,20(r2)
   117e8:	18bff61e 	bne	r3,r2,117c4 <_gp+0xffff2154>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   117ec:	0005883a 	mov	r2,zero
}
   117f0:	e037883a 	mov	sp,fp
   117f4:	df000017 	ldw	fp,0(sp)
   117f8:	dec00104 	addi	sp,sp,4
   117fc:	f800283a 	ret

00011800 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11800:	defffe04 	addi	sp,sp,-8
   11804:	dfc00115 	stw	ra,4(sp)
   11808:	df000015 	stw	fp,0(sp)
   1180c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11810:	d0a00517 	ldw	r2,-32748(gp)
   11814:	10000326 	beq	r2,zero,11824 <alt_get_errno+0x24>
   11818:	d0a00517 	ldw	r2,-32748(gp)
   1181c:	103ee83a 	callr	r2
   11820:	00000106 	br	11828 <alt_get_errno+0x28>
   11824:	d0a6ec04 	addi	r2,gp,-25680
}
   11828:	e037883a 	mov	sp,fp
   1182c:	dfc00117 	ldw	ra,4(sp)
   11830:	df000017 	ldw	fp,0(sp)
   11834:	dec00204 	addi	sp,sp,8
   11838:	f800283a 	ret

0001183c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   1183c:	defff204 	addi	sp,sp,-56
   11840:	dfc00d15 	stw	ra,52(sp)
   11844:	df000c15 	stw	fp,48(sp)
   11848:	df000c04 	addi	fp,sp,48
   1184c:	e13ffc15 	stw	r4,-16(fp)
   11850:	e17ffd15 	stw	r5,-12(fp)
   11854:	e1bffe15 	stw	r6,-8(fp)
   11858:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   1185c:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   11860:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   11864:	e0bfff17 	ldw	r2,-4(fp)
   11868:	1090000c 	andi	r2,r2,16384
   1186c:	1005003a 	cmpeq	r2,r2,zero
   11870:	10803fcc 	andi	r2,r2,255
   11874:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   11878:	00001306 	br	118c8 <altera_avalon_uart_read+0x8c>
    {
      count++;
   1187c:	e0bff517 	ldw	r2,-44(fp)
   11880:	10800044 	addi	r2,r2,1
   11884:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   11888:	e0bffd17 	ldw	r2,-12(fp)
   1188c:	10c00044 	addi	r3,r2,1
   11890:	e0fffd15 	stw	r3,-12(fp)
   11894:	e0fffc17 	ldw	r3,-16(fp)
   11898:	18c00217 	ldw	r3,8(r3)
   1189c:	e13ffc17 	ldw	r4,-16(fp)
   118a0:	20c7883a 	add	r3,r4,r3
   118a4:	18c00704 	addi	r3,r3,28
   118a8:	18c00003 	ldbu	r3,0(r3)
   118ac:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   118b0:	e0bffc17 	ldw	r2,-16(fp)
   118b4:	10800217 	ldw	r2,8(r2)
   118b8:	10800044 	addi	r2,r2,1
   118bc:	10c00fcc 	andi	r3,r2,63
   118c0:	e0bffc17 	ldw	r2,-16(fp)
   118c4:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   118c8:	e0fff517 	ldw	r3,-44(fp)
   118cc:	e0bffe17 	ldw	r2,-8(fp)
   118d0:	1880050e 	bge	r3,r2,118e8 <altera_avalon_uart_read+0xac>
   118d4:	e0bffc17 	ldw	r2,-16(fp)
   118d8:	10c00217 	ldw	r3,8(r2)
   118dc:	e0bffc17 	ldw	r2,-16(fp)
   118e0:	10800317 	ldw	r2,12(r2)
   118e4:	18bfe51e 	bne	r3,r2,1187c <_gp+0xffff220c>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   118e8:	e0bff517 	ldw	r2,-44(fp)
   118ec:	1000251e 	bne	r2,zero,11984 <altera_avalon_uart_read+0x148>
   118f0:	e0bffc17 	ldw	r2,-16(fp)
   118f4:	10c00217 	ldw	r3,8(r2)
   118f8:	e0bffc17 	ldw	r2,-16(fp)
   118fc:	10800317 	ldw	r2,12(r2)
   11900:	1880201e 	bne	r3,r2,11984 <altera_avalon_uart_read+0x148>
    {
      if (!block)
   11904:	e0bff617 	ldw	r2,-40(fp)
   11908:	1000071e 	bne	r2,zero,11928 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   1190c:	00118000 	call	11800 <alt_get_errno>
   11910:	1007883a 	mov	r3,r2
   11914:	008002c4 	movi	r2,11
   11918:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   1191c:	00800044 	movi	r2,1
   11920:	e0bff405 	stb	r2,-48(fp)
        break;
   11924:	00001b06 	br	11994 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11928:	0005303a 	rdctl	r2,status
   1192c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11930:	e0fff917 	ldw	r3,-28(fp)
   11934:	00bfff84 	movi	r2,-2
   11938:	1884703a 	and	r2,r3,r2
   1193c:	1001703a 	wrctl	status,r2
  
  return context;
   11940:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   11944:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   11948:	e0bffc17 	ldw	r2,-16(fp)
   1194c:	10800117 	ldw	r2,4(r2)
   11950:	10c02014 	ori	r3,r2,128
   11954:	e0bffc17 	ldw	r2,-16(fp)
   11958:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   1195c:	e0bffc17 	ldw	r2,-16(fp)
   11960:	10800017 	ldw	r2,0(r2)
   11964:	10800304 	addi	r2,r2,12
   11968:	e0fffc17 	ldw	r3,-16(fp)
   1196c:	18c00117 	ldw	r3,4(r3)
   11970:	10c00035 	stwio	r3,0(r2)
   11974:	e0bff817 	ldw	r2,-32(fp)
   11978:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1197c:	e0bffa17 	ldw	r2,-24(fp)
   11980:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   11984:	e0bff517 	ldw	r2,-44(fp)
   11988:	1000021e 	bne	r2,zero,11994 <altera_avalon_uart_read+0x158>
   1198c:	e0bffe17 	ldw	r2,-8(fp)
   11990:	103fcd1e 	bne	r2,zero,118c8 <_gp+0xffff2258>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11994:	0005303a 	rdctl	r2,status
   11998:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1199c:	e0fffb17 	ldw	r3,-20(fp)
   119a0:	00bfff84 	movi	r2,-2
   119a4:	1884703a 	and	r2,r3,r2
   119a8:	1001703a 	wrctl	status,r2
  
  return context;
   119ac:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   119b0:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   119b4:	e0bffc17 	ldw	r2,-16(fp)
   119b8:	10800117 	ldw	r2,4(r2)
   119bc:	10c02014 	ori	r3,r2,128
   119c0:	e0bffc17 	ldw	r2,-16(fp)
   119c4:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   119c8:	e0bffc17 	ldw	r2,-16(fp)
   119cc:	10800017 	ldw	r2,0(r2)
   119d0:	10800304 	addi	r2,r2,12
   119d4:	e0fffc17 	ldw	r3,-16(fp)
   119d8:	18c00117 	ldw	r3,4(r3)
   119dc:	10c00035 	stwio	r3,0(r2)
   119e0:	e0bff817 	ldw	r2,-32(fp)
   119e4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   119e8:	e0bff717 	ldw	r2,-36(fp)
   119ec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   119f0:	e0bff403 	ldbu	r2,-48(fp)
   119f4:	10000226 	beq	r2,zero,11a00 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   119f8:	00bffd44 	movi	r2,-11
   119fc:	00000106 	br	11a04 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   11a00:	e0bff517 	ldw	r2,-44(fp)
  }
}
   11a04:	e037883a 	mov	sp,fp
   11a08:	dfc00117 	ldw	ra,4(sp)
   11a0c:	df000017 	ldw	fp,0(sp)
   11a10:	dec00204 	addi	sp,sp,8
   11a14:	f800283a 	ret

00011a18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11a18:	defffe04 	addi	sp,sp,-8
   11a1c:	dfc00115 	stw	ra,4(sp)
   11a20:	df000015 	stw	fp,0(sp)
   11a24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11a28:	d0a00517 	ldw	r2,-32748(gp)
   11a2c:	10000326 	beq	r2,zero,11a3c <alt_get_errno+0x24>
   11a30:	d0a00517 	ldw	r2,-32748(gp)
   11a34:	103ee83a 	callr	r2
   11a38:	00000106 	br	11a40 <alt_get_errno+0x28>
   11a3c:	d0a6ec04 	addi	r2,gp,-25680
}
   11a40:	e037883a 	mov	sp,fp
   11a44:	dfc00117 	ldw	ra,4(sp)
   11a48:	df000017 	ldw	fp,0(sp)
   11a4c:	dec00204 	addi	sp,sp,8
   11a50:	f800283a 	ret

00011a54 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   11a54:	defff204 	addi	sp,sp,-56
   11a58:	dfc00d15 	stw	ra,52(sp)
   11a5c:	df000c15 	stw	fp,48(sp)
   11a60:	df000c04 	addi	fp,sp,48
   11a64:	e13ffc15 	stw	r4,-16(fp)
   11a68:	e17ffd15 	stw	r5,-12(fp)
   11a6c:	e1bffe15 	stw	r6,-8(fp)
   11a70:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   11a74:	e0bffe17 	ldw	r2,-8(fp)
   11a78:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   11a7c:	e0bfff17 	ldw	r2,-4(fp)
   11a80:	1090000c 	andi	r2,r2,16384
   11a84:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   11a88:	00003c06 	br	11b7c <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   11a8c:	e0bffc17 	ldw	r2,-16(fp)
   11a90:	10800517 	ldw	r2,20(r2)
   11a94:	10800044 	addi	r2,r2,1
   11a98:	10800fcc 	andi	r2,r2,63
   11a9c:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   11aa0:	e0bffc17 	ldw	r2,-16(fp)
   11aa4:	10c00417 	ldw	r3,16(r2)
   11aa8:	e0bff717 	ldw	r2,-36(fp)
   11aac:	1880221e 	bne	r3,r2,11b38 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   11ab0:	e0bff517 	ldw	r2,-44(fp)
   11ab4:	10000526 	beq	r2,zero,11acc <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   11ab8:	0011a180 	call	11a18 <alt_get_errno>
   11abc:	1007883a 	mov	r3,r2
   11ac0:	008002c4 	movi	r2,11
   11ac4:	18800015 	stw	r2,0(r3)
        break;
   11ac8:	00002e06 	br	11b84 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11acc:	0005303a 	rdctl	r2,status
   11ad0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11ad4:	e0fff917 	ldw	r3,-28(fp)
   11ad8:	00bfff84 	movi	r2,-2
   11adc:	1884703a 	and	r2,r3,r2
   11ae0:	1001703a 	wrctl	status,r2
  
  return context;
   11ae4:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   11ae8:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   11aec:	e0bffc17 	ldw	r2,-16(fp)
   11af0:	10800117 	ldw	r2,4(r2)
   11af4:	10c11014 	ori	r3,r2,1088
   11af8:	e0bffc17 	ldw	r2,-16(fp)
   11afc:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   11b00:	e0bffc17 	ldw	r2,-16(fp)
   11b04:	10800017 	ldw	r2,0(r2)
   11b08:	10800304 	addi	r2,r2,12
   11b0c:	e0fffc17 	ldw	r3,-16(fp)
   11b10:	18c00117 	ldw	r3,4(r3)
   11b14:	10c00035 	stwio	r3,0(r2)
   11b18:	e0bff817 	ldw	r2,-32(fp)
   11b1c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11b20:	e0bff617 	ldw	r2,-40(fp)
   11b24:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   11b28:	e0bffc17 	ldw	r2,-16(fp)
   11b2c:	10c00417 	ldw	r3,16(r2)
   11b30:	e0bff717 	ldw	r2,-36(fp)
   11b34:	18bffc26 	beq	r3,r2,11b28 <_gp+0xffff24b8>
      }
    }

    count--;
   11b38:	e0bff417 	ldw	r2,-48(fp)
   11b3c:	10bfffc4 	addi	r2,r2,-1
   11b40:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   11b44:	e0bffc17 	ldw	r2,-16(fp)
   11b48:	10c00517 	ldw	r3,20(r2)
   11b4c:	e0bffd17 	ldw	r2,-12(fp)
   11b50:	11000044 	addi	r4,r2,1
   11b54:	e13ffd15 	stw	r4,-12(fp)
   11b58:	10800003 	ldbu	r2,0(r2)
   11b5c:	1009883a 	mov	r4,r2
   11b60:	e0bffc17 	ldw	r2,-16(fp)
   11b64:	10c5883a 	add	r2,r2,r3
   11b68:	10801704 	addi	r2,r2,92
   11b6c:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   11b70:	e0bffc17 	ldw	r2,-16(fp)
   11b74:	e0fff717 	ldw	r3,-36(fp)
   11b78:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   11b7c:	e0bff417 	ldw	r2,-48(fp)
   11b80:	103fc21e 	bne	r2,zero,11a8c <_gp+0xffff241c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11b84:	0005303a 	rdctl	r2,status
   11b88:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11b8c:	e0fffb17 	ldw	r3,-20(fp)
   11b90:	00bfff84 	movi	r2,-2
   11b94:	1884703a 	and	r2,r3,r2
   11b98:	1001703a 	wrctl	status,r2
  
  return context;
   11b9c:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   11ba0:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   11ba4:	e0bffc17 	ldw	r2,-16(fp)
   11ba8:	10800117 	ldw	r2,4(r2)
   11bac:	10c11014 	ori	r3,r2,1088
   11bb0:	e0bffc17 	ldw	r2,-16(fp)
   11bb4:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   11bb8:	e0bffc17 	ldw	r2,-16(fp)
   11bbc:	10800017 	ldw	r2,0(r2)
   11bc0:	10800304 	addi	r2,r2,12
   11bc4:	e0fffc17 	ldw	r3,-16(fp)
   11bc8:	18c00117 	ldw	r3,4(r3)
   11bcc:	10c00035 	stwio	r3,0(r2)
   11bd0:	e0bff817 	ldw	r2,-32(fp)
   11bd4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11bd8:	e0bffa17 	ldw	r2,-24(fp)
   11bdc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   11be0:	e0fffe17 	ldw	r3,-8(fp)
   11be4:	e0bff417 	ldw	r2,-48(fp)
   11be8:	1885c83a 	sub	r2,r3,r2
}
   11bec:	e037883a 	mov	sp,fp
   11bf0:	dfc00117 	ldw	ra,4(sp)
   11bf4:	df000017 	ldw	fp,0(sp)
   11bf8:	dec00204 	addi	sp,sp,8
   11bfc:	f800283a 	ret

00011c00 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   11c00:	defff504 	addi	sp,sp,-44
   11c04:	df000a15 	stw	fp,40(sp)
   11c08:	df000a04 	addi	fp,sp,40
   11c0c:	e13ffc15 	stw	r4,-16(fp)
   11c10:	e17ffd15 	stw	r5,-12(fp)
   11c14:	e1bffe15 	stw	r6,-8(fp)
   11c18:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   11c1c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   11c20:	d0a6e917 	ldw	r2,-25692(gp)
  
  if (alt_ticks_per_second ())
   11c24:	10003c26 	beq	r2,zero,11d18 <alt_alarm_start+0x118>
  {
    if (alarm)
   11c28:	e0bffc17 	ldw	r2,-16(fp)
   11c2c:	10003826 	beq	r2,zero,11d10 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   11c30:	e0bffc17 	ldw	r2,-16(fp)
   11c34:	e0fffe17 	ldw	r3,-8(fp)
   11c38:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   11c3c:	e0bffc17 	ldw	r2,-16(fp)
   11c40:	e0ffff17 	ldw	r3,-4(fp)
   11c44:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11c48:	0005303a 	rdctl	r2,status
   11c4c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11c50:	e0fff917 	ldw	r3,-28(fp)
   11c54:	00bfff84 	movi	r2,-2
   11c58:	1884703a 	and	r2,r3,r2
   11c5c:	1001703a 	wrctl	status,r2
  
  return context;
   11c60:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   11c64:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   11c68:	d0a6ea17 	ldw	r2,-25688(gp)
      
      current_nticks = alt_nticks();
   11c6c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   11c70:	e0fffd17 	ldw	r3,-12(fp)
   11c74:	e0bff617 	ldw	r2,-40(fp)
   11c78:	1885883a 	add	r2,r3,r2
   11c7c:	10c00044 	addi	r3,r2,1
   11c80:	e0bffc17 	ldw	r2,-16(fp)
   11c84:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   11c88:	e0bffc17 	ldw	r2,-16(fp)
   11c8c:	10c00217 	ldw	r3,8(r2)
   11c90:	e0bff617 	ldw	r2,-40(fp)
   11c94:	1880042e 	bgeu	r3,r2,11ca8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   11c98:	e0bffc17 	ldw	r2,-16(fp)
   11c9c:	00c00044 	movi	r3,1
   11ca0:	10c00405 	stb	r3,16(r2)
   11ca4:	00000206 	br	11cb0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   11ca8:	e0bffc17 	ldw	r2,-16(fp)
   11cac:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   11cb0:	e0bffc17 	ldw	r2,-16(fp)
   11cb4:	d0e00704 	addi	r3,gp,-32740
   11cb8:	e0fffa15 	stw	r3,-24(fp)
   11cbc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11cc0:	e0bffb17 	ldw	r2,-20(fp)
   11cc4:	e0fffa17 	ldw	r3,-24(fp)
   11cc8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11ccc:	e0bffa17 	ldw	r2,-24(fp)
   11cd0:	10c00017 	ldw	r3,0(r2)
   11cd4:	e0bffb17 	ldw	r2,-20(fp)
   11cd8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11cdc:	e0bffa17 	ldw	r2,-24(fp)
   11ce0:	10800017 	ldw	r2,0(r2)
   11ce4:	e0fffb17 	ldw	r3,-20(fp)
   11ce8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11cec:	e0bffa17 	ldw	r2,-24(fp)
   11cf0:	e0fffb17 	ldw	r3,-20(fp)
   11cf4:	10c00015 	stw	r3,0(r2)
   11cf8:	e0bff817 	ldw	r2,-32(fp)
   11cfc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11d00:	e0bff717 	ldw	r2,-36(fp)
   11d04:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   11d08:	0005883a 	mov	r2,zero
   11d0c:	00000306 	br	11d1c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   11d10:	00bffa84 	movi	r2,-22
   11d14:	00000106 	br	11d1c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   11d18:	00bfde84 	movi	r2,-134
  }
}
   11d1c:	e037883a 	mov	sp,fp
   11d20:	df000017 	ldw	fp,0(sp)
   11d24:	dec00104 	addi	sp,sp,4
   11d28:	f800283a 	ret

00011d2c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   11d2c:	defffa04 	addi	sp,sp,-24
   11d30:	dfc00515 	stw	ra,20(sp)
   11d34:	df000415 	stw	fp,16(sp)
   11d38:	df000404 	addi	fp,sp,16
   11d3c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   11d40:	00800244 	movi	r2,9
   11d44:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   11d48:	014003f4 	movhi	r5,15
   11d4c:	29509004 	addi	r5,r5,16960
   11d50:	e13ffd17 	ldw	r4,-12(fp)
   11d54:	00154300 	call	15430 <__mulsi3>
   11d58:	100b883a 	mov	r5,r2
   11d5c:	0100bef4 	movhi	r4,763
   11d60:	213c2004 	addi	r4,r4,-3968
   11d64:	00153740 	call	15374 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   11d68:	100b883a 	mov	r5,r2
   11d6c:	01200034 	movhi	r4,32768
   11d70:	213fffc4 	addi	r4,r4,-1
   11d74:	00153740 	call	15374 <__udivsi3>
   11d78:	100b883a 	mov	r5,r2
   11d7c:	e13fff17 	ldw	r4,-4(fp)
   11d80:	00153740 	call	15374 <__udivsi3>
   11d84:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   11d88:	e0bffe17 	ldw	r2,-8(fp)
   11d8c:	10002a26 	beq	r2,zero,11e38 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   11d90:	e03ffc15 	stw	zero,-16(fp)
   11d94:	00001706 	br	11df4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   11d98:	00a00034 	movhi	r2,32768
   11d9c:	10bfffc4 	addi	r2,r2,-1
   11da0:	10bfffc4 	addi	r2,r2,-1
   11da4:	103ffe1e 	bne	r2,zero,11da0 <_gp+0xffff2730>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   11da8:	014003f4 	movhi	r5,15
   11dac:	29509004 	addi	r5,r5,16960
   11db0:	e13ffd17 	ldw	r4,-12(fp)
   11db4:	00154300 	call	15430 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   11db8:	100b883a 	mov	r5,r2
   11dbc:	0100bef4 	movhi	r4,763
   11dc0:	213c2004 	addi	r4,r4,-3968
   11dc4:	00153740 	call	15374 <__udivsi3>
   11dc8:	100b883a 	mov	r5,r2
   11dcc:	01200034 	movhi	r4,32768
   11dd0:	213fffc4 	addi	r4,r4,-1
   11dd4:	00153740 	call	15374 <__udivsi3>
   11dd8:	1007883a 	mov	r3,r2
   11ddc:	e0bfff17 	ldw	r2,-4(fp)
   11de0:	10c5c83a 	sub	r2,r2,r3
   11de4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   11de8:	e0bffc17 	ldw	r2,-16(fp)
   11dec:	10800044 	addi	r2,r2,1
   11df0:	e0bffc15 	stw	r2,-16(fp)
   11df4:	e0fffc17 	ldw	r3,-16(fp)
   11df8:	e0bffe17 	ldw	r2,-8(fp)
   11dfc:	18bfe616 	blt	r3,r2,11d98 <_gp+0xffff2728>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   11e00:	014003f4 	movhi	r5,15
   11e04:	29509004 	addi	r5,r5,16960
   11e08:	e13ffd17 	ldw	r4,-12(fp)
   11e0c:	00154300 	call	15430 <__mulsi3>
   11e10:	100b883a 	mov	r5,r2
   11e14:	0100bef4 	movhi	r4,763
   11e18:	213c2004 	addi	r4,r4,-3968
   11e1c:	00153740 	call	15374 <__udivsi3>
   11e20:	e17fff17 	ldw	r5,-4(fp)
   11e24:	1009883a 	mov	r4,r2
   11e28:	00154300 	call	15430 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11e2c:	10bfffc4 	addi	r2,r2,-1
   11e30:	103ffe1e 	bne	r2,zero,11e2c <_gp+0xffff27bc>
   11e34:	00000d06 	br	11e6c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   11e38:	014003f4 	movhi	r5,15
   11e3c:	29509004 	addi	r5,r5,16960
   11e40:	e13ffd17 	ldw	r4,-12(fp)
   11e44:	00154300 	call	15430 <__mulsi3>
   11e48:	100b883a 	mov	r5,r2
   11e4c:	0100bef4 	movhi	r4,763
   11e50:	213c2004 	addi	r4,r4,-3968
   11e54:	00153740 	call	15374 <__udivsi3>
   11e58:	e17fff17 	ldw	r5,-4(fp)
   11e5c:	1009883a 	mov	r4,r2
   11e60:	00154300 	call	15430 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11e64:	10bfffc4 	addi	r2,r2,-1
   11e68:	00bffe16 	blt	zero,r2,11e64 <_gp+0xffff27f4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   11e6c:	0005883a 	mov	r2,zero
}
   11e70:	e037883a 	mov	sp,fp
   11e74:	dfc00117 	ldw	ra,4(sp)
   11e78:	df000017 	ldw	fp,0(sp)
   11e7c:	dec00204 	addi	sp,sp,8
   11e80:	f800283a 	ret

00011e84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11e84:	defffe04 	addi	sp,sp,-8
   11e88:	dfc00115 	stw	ra,4(sp)
   11e8c:	df000015 	stw	fp,0(sp)
   11e90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11e94:	d0a00517 	ldw	r2,-32748(gp)
   11e98:	10000326 	beq	r2,zero,11ea8 <alt_get_errno+0x24>
   11e9c:	d0a00517 	ldw	r2,-32748(gp)
   11ea0:	103ee83a 	callr	r2
   11ea4:	00000106 	br	11eac <alt_get_errno+0x28>
   11ea8:	d0a6ec04 	addi	r2,gp,-25680
}
   11eac:	e037883a 	mov	sp,fp
   11eb0:	dfc00117 	ldw	ra,4(sp)
   11eb4:	df000017 	ldw	fp,0(sp)
   11eb8:	dec00204 	addi	sp,sp,8
   11ebc:	f800283a 	ret

00011ec0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   11ec0:	defffb04 	addi	sp,sp,-20
   11ec4:	dfc00415 	stw	ra,16(sp)
   11ec8:	df000315 	stw	fp,12(sp)
   11ecc:	df000304 	addi	fp,sp,12
   11ed0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   11ed4:	e0bfff17 	ldw	r2,-4(fp)
   11ed8:	10000816 	blt	r2,zero,11efc <close+0x3c>
   11edc:	01400304 	movi	r5,12
   11ee0:	e13fff17 	ldw	r4,-4(fp)
   11ee4:	00154300 	call	15430 <__mulsi3>
   11ee8:	1007883a 	mov	r3,r2
   11eec:	00800074 	movhi	r2,1
   11ef0:	109b3104 	addi	r2,r2,27844
   11ef4:	1885883a 	add	r2,r3,r2
   11ef8:	00000106 	br	11f00 <close+0x40>
   11efc:	0005883a 	mov	r2,zero
   11f00:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   11f04:	e0bffd17 	ldw	r2,-12(fp)
   11f08:	10001926 	beq	r2,zero,11f70 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   11f0c:	e0bffd17 	ldw	r2,-12(fp)
   11f10:	10800017 	ldw	r2,0(r2)
   11f14:	10800417 	ldw	r2,16(r2)
   11f18:	10000626 	beq	r2,zero,11f34 <close+0x74>
   11f1c:	e0bffd17 	ldw	r2,-12(fp)
   11f20:	10800017 	ldw	r2,0(r2)
   11f24:	10800417 	ldw	r2,16(r2)
   11f28:	e13ffd17 	ldw	r4,-12(fp)
   11f2c:	103ee83a 	callr	r2
   11f30:	00000106 	br	11f38 <close+0x78>
   11f34:	0005883a 	mov	r2,zero
   11f38:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   11f3c:	e13fff17 	ldw	r4,-4(fp)
   11f40:	00128280 	call	12828 <alt_release_fd>
    if (rval < 0)
   11f44:	e0bffe17 	ldw	r2,-8(fp)
   11f48:	1000070e 	bge	r2,zero,11f68 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   11f4c:	0011e840 	call	11e84 <alt_get_errno>
   11f50:	1007883a 	mov	r3,r2
   11f54:	e0bffe17 	ldw	r2,-8(fp)
   11f58:	0085c83a 	sub	r2,zero,r2
   11f5c:	18800015 	stw	r2,0(r3)
      return -1;
   11f60:	00bfffc4 	movi	r2,-1
   11f64:	00000706 	br	11f84 <close+0xc4>
    }
    return 0;
   11f68:	0005883a 	mov	r2,zero
   11f6c:	00000506 	br	11f84 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11f70:	0011e840 	call	11e84 <alt_get_errno>
   11f74:	1007883a 	mov	r3,r2
   11f78:	00801444 	movi	r2,81
   11f7c:	18800015 	stw	r2,0(r3)
    return -1;
   11f80:	00bfffc4 	movi	r2,-1
  }
}
   11f84:	e037883a 	mov	sp,fp
   11f88:	dfc00117 	ldw	ra,4(sp)
   11f8c:	df000017 	ldw	fp,0(sp)
   11f90:	dec00204 	addi	sp,sp,8
   11f94:	f800283a 	ret

00011f98 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11f98:	deffff04 	addi	sp,sp,-4
   11f9c:	df000015 	stw	fp,0(sp)
   11fa0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   11fa4:	0001883a 	nop
   11fa8:	e037883a 	mov	sp,fp
   11fac:	df000017 	ldw	fp,0(sp)
   11fb0:	dec00104 	addi	sp,sp,4
   11fb4:	f800283a 	ret

00011fb8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   11fb8:	defffc04 	addi	sp,sp,-16
   11fbc:	df000315 	stw	fp,12(sp)
   11fc0:	df000304 	addi	fp,sp,12
   11fc4:	e13ffd15 	stw	r4,-12(fp)
   11fc8:	e17ffe15 	stw	r5,-8(fp)
   11fcc:	e1bfff15 	stw	r6,-4(fp)
  return len;
   11fd0:	e0bfff17 	ldw	r2,-4(fp)
}
   11fd4:	e037883a 	mov	sp,fp
   11fd8:	df000017 	ldw	fp,0(sp)
   11fdc:	dec00104 	addi	sp,sp,4
   11fe0:	f800283a 	ret

00011fe4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11fe4:	defffe04 	addi	sp,sp,-8
   11fe8:	dfc00115 	stw	ra,4(sp)
   11fec:	df000015 	stw	fp,0(sp)
   11ff0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11ff4:	d0a00517 	ldw	r2,-32748(gp)
   11ff8:	10000326 	beq	r2,zero,12008 <alt_get_errno+0x24>
   11ffc:	d0a00517 	ldw	r2,-32748(gp)
   12000:	103ee83a 	callr	r2
   12004:	00000106 	br	1200c <alt_get_errno+0x28>
   12008:	d0a6ec04 	addi	r2,gp,-25680
}
   1200c:	e037883a 	mov	sp,fp
   12010:	dfc00117 	ldw	ra,4(sp)
   12014:	df000017 	ldw	fp,0(sp)
   12018:	dec00204 	addi	sp,sp,8
   1201c:	f800283a 	ret

00012020 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   12020:	defffa04 	addi	sp,sp,-24
   12024:	dfc00515 	stw	ra,20(sp)
   12028:	df000415 	stw	fp,16(sp)
   1202c:	df000404 	addi	fp,sp,16
   12030:	e13ffe15 	stw	r4,-8(fp)
   12034:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   12038:	e0bffe17 	ldw	r2,-8(fp)
   1203c:	10000326 	beq	r2,zero,1204c <alt_dev_llist_insert+0x2c>
   12040:	e0bffe17 	ldw	r2,-8(fp)
   12044:	10800217 	ldw	r2,8(r2)
   12048:	1000061e 	bne	r2,zero,12064 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1204c:	0011fe40 	call	11fe4 <alt_get_errno>
   12050:	1007883a 	mov	r3,r2
   12054:	00800584 	movi	r2,22
   12058:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1205c:	00bffa84 	movi	r2,-22
   12060:	00001306 	br	120b0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   12064:	e0bffe17 	ldw	r2,-8(fp)
   12068:	e0ffff17 	ldw	r3,-4(fp)
   1206c:	e0fffc15 	stw	r3,-16(fp)
   12070:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   12074:	e0bffd17 	ldw	r2,-12(fp)
   12078:	e0fffc17 	ldw	r3,-16(fp)
   1207c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   12080:	e0bffc17 	ldw	r2,-16(fp)
   12084:	10c00017 	ldw	r3,0(r2)
   12088:	e0bffd17 	ldw	r2,-12(fp)
   1208c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   12090:	e0bffc17 	ldw	r2,-16(fp)
   12094:	10800017 	ldw	r2,0(r2)
   12098:	e0fffd17 	ldw	r3,-12(fp)
   1209c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   120a0:	e0bffc17 	ldw	r2,-16(fp)
   120a4:	e0fffd17 	ldw	r3,-12(fp)
   120a8:	10c00015 	stw	r3,0(r2)

  return 0;  
   120ac:	0005883a 	mov	r2,zero
}
   120b0:	e037883a 	mov	sp,fp
   120b4:	dfc00117 	ldw	ra,4(sp)
   120b8:	df000017 	ldw	fp,0(sp)
   120bc:	dec00204 	addi	sp,sp,8
   120c0:	f800283a 	ret

000120c4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   120c4:	defffd04 	addi	sp,sp,-12
   120c8:	dfc00215 	stw	ra,8(sp)
   120cc:	df000115 	stw	fp,4(sp)
   120d0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   120d4:	00800074 	movhi	r2,1
   120d8:	1096bc04 	addi	r2,r2,23280
   120dc:	e0bfff15 	stw	r2,-4(fp)
   120e0:	00000606 	br	120fc <_do_ctors+0x38>
        (*ctor) (); 
   120e4:	e0bfff17 	ldw	r2,-4(fp)
   120e8:	10800017 	ldw	r2,0(r2)
   120ec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   120f0:	e0bfff17 	ldw	r2,-4(fp)
   120f4:	10bfff04 	addi	r2,r2,-4
   120f8:	e0bfff15 	stw	r2,-4(fp)
   120fc:	e0ffff17 	ldw	r3,-4(fp)
   12100:	00800074 	movhi	r2,1
   12104:	1096bd04 	addi	r2,r2,23284
   12108:	18bff62e 	bgeu	r3,r2,120e4 <_gp+0xffff2a74>
        (*ctor) (); 
}
   1210c:	0001883a 	nop
   12110:	e037883a 	mov	sp,fp
   12114:	dfc00117 	ldw	ra,4(sp)
   12118:	df000017 	ldw	fp,0(sp)
   1211c:	dec00204 	addi	sp,sp,8
   12120:	f800283a 	ret

00012124 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   12124:	defffd04 	addi	sp,sp,-12
   12128:	dfc00215 	stw	ra,8(sp)
   1212c:	df000115 	stw	fp,4(sp)
   12130:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   12134:	00800074 	movhi	r2,1
   12138:	1096bc04 	addi	r2,r2,23280
   1213c:	e0bfff15 	stw	r2,-4(fp)
   12140:	00000606 	br	1215c <_do_dtors+0x38>
        (*dtor) (); 
   12144:	e0bfff17 	ldw	r2,-4(fp)
   12148:	10800017 	ldw	r2,0(r2)
   1214c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   12150:	e0bfff17 	ldw	r2,-4(fp)
   12154:	10bfff04 	addi	r2,r2,-4
   12158:	e0bfff15 	stw	r2,-4(fp)
   1215c:	e0ffff17 	ldw	r3,-4(fp)
   12160:	00800074 	movhi	r2,1
   12164:	1096bd04 	addi	r2,r2,23284
   12168:	18bff62e 	bgeu	r3,r2,12144 <_gp+0xffff2ad4>
        (*dtor) (); 
}
   1216c:	0001883a 	nop
   12170:	e037883a 	mov	sp,fp
   12174:	dfc00117 	ldw	ra,4(sp)
   12178:	df000017 	ldw	fp,0(sp)
   1217c:	dec00204 	addi	sp,sp,8
   12180:	f800283a 	ret

00012184 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   12184:	deffff04 	addi	sp,sp,-4
   12188:	df000015 	stw	fp,0(sp)
   1218c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   12190:	0001883a 	nop
   12194:	e037883a 	mov	sp,fp
   12198:	df000017 	ldw	fp,0(sp)
   1219c:	dec00104 	addi	sp,sp,4
   121a0:	f800283a 	ret

000121a4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   121a4:	defff904 	addi	sp,sp,-28
   121a8:	dfc00615 	stw	ra,24(sp)
   121ac:	df000515 	stw	fp,20(sp)
   121b0:	df000504 	addi	fp,sp,20
   121b4:	e13ffc15 	stw	r4,-16(fp)
   121b8:	e17ffd15 	stw	r5,-12(fp)
   121bc:	e1bffe15 	stw	r6,-8(fp)
   121c0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   121c4:	e0800217 	ldw	r2,8(fp)
   121c8:	d8800015 	stw	r2,0(sp)
   121cc:	e1ffff17 	ldw	r7,-4(fp)
   121d0:	e1bffe17 	ldw	r6,-8(fp)
   121d4:	e17ffd17 	ldw	r5,-12(fp)
   121d8:	e13ffc17 	ldw	r4,-16(fp)
   121dc:	00123540 	call	12354 <alt_iic_isr_register>
}  
   121e0:	e037883a 	mov	sp,fp
   121e4:	dfc00117 	ldw	ra,4(sp)
   121e8:	df000017 	ldw	fp,0(sp)
   121ec:	dec00204 	addi	sp,sp,8
   121f0:	f800283a 	ret

000121f4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   121f4:	defff904 	addi	sp,sp,-28
   121f8:	df000615 	stw	fp,24(sp)
   121fc:	df000604 	addi	fp,sp,24
   12200:	e13ffe15 	stw	r4,-8(fp)
   12204:	e17fff15 	stw	r5,-4(fp)
   12208:	e0bfff17 	ldw	r2,-4(fp)
   1220c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12210:	0005303a 	rdctl	r2,status
   12214:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12218:	e0fffb17 	ldw	r3,-20(fp)
   1221c:	00bfff84 	movi	r2,-2
   12220:	1884703a 	and	r2,r3,r2
   12224:	1001703a 	wrctl	status,r2
  
  return context;
   12228:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1222c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   12230:	00c00044 	movi	r3,1
   12234:	e0bffa17 	ldw	r2,-24(fp)
   12238:	1884983a 	sll	r2,r3,r2
   1223c:	1007883a 	mov	r3,r2
   12240:	d0a6e817 	ldw	r2,-25696(gp)
   12244:	1884b03a 	or	r2,r3,r2
   12248:	d0a6e815 	stw	r2,-25696(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1224c:	d0a6e817 	ldw	r2,-25696(gp)
   12250:	100170fa 	wrctl	ienable,r2
   12254:	e0bffc17 	ldw	r2,-16(fp)
   12258:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1225c:	e0bffd17 	ldw	r2,-12(fp)
   12260:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   12264:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   12268:	0001883a 	nop
}
   1226c:	e037883a 	mov	sp,fp
   12270:	df000017 	ldw	fp,0(sp)
   12274:	dec00104 	addi	sp,sp,4
   12278:	f800283a 	ret

0001227c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   1227c:	defff904 	addi	sp,sp,-28
   12280:	df000615 	stw	fp,24(sp)
   12284:	df000604 	addi	fp,sp,24
   12288:	e13ffe15 	stw	r4,-8(fp)
   1228c:	e17fff15 	stw	r5,-4(fp)
   12290:	e0bfff17 	ldw	r2,-4(fp)
   12294:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12298:	0005303a 	rdctl	r2,status
   1229c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   122a0:	e0fffb17 	ldw	r3,-20(fp)
   122a4:	00bfff84 	movi	r2,-2
   122a8:	1884703a 	and	r2,r3,r2
   122ac:	1001703a 	wrctl	status,r2
  
  return context;
   122b0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   122b4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   122b8:	00c00044 	movi	r3,1
   122bc:	e0bffa17 	ldw	r2,-24(fp)
   122c0:	1884983a 	sll	r2,r3,r2
   122c4:	0084303a 	nor	r2,zero,r2
   122c8:	1007883a 	mov	r3,r2
   122cc:	d0a6e817 	ldw	r2,-25696(gp)
   122d0:	1884703a 	and	r2,r3,r2
   122d4:	d0a6e815 	stw	r2,-25696(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   122d8:	d0a6e817 	ldw	r2,-25696(gp)
   122dc:	100170fa 	wrctl	ienable,r2
   122e0:	e0bffc17 	ldw	r2,-16(fp)
   122e4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   122e8:	e0bffd17 	ldw	r2,-12(fp)
   122ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   122f0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   122f4:	0001883a 	nop
}
   122f8:	e037883a 	mov	sp,fp
   122fc:	df000017 	ldw	fp,0(sp)
   12300:	dec00104 	addi	sp,sp,4
   12304:	f800283a 	ret

00012308 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   12308:	defffc04 	addi	sp,sp,-16
   1230c:	df000315 	stw	fp,12(sp)
   12310:	df000304 	addi	fp,sp,12
   12314:	e13ffe15 	stw	r4,-8(fp)
   12318:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   1231c:	000530fa 	rdctl	r2,ienable
   12320:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   12324:	00c00044 	movi	r3,1
   12328:	e0bfff17 	ldw	r2,-4(fp)
   1232c:	1884983a 	sll	r2,r3,r2
   12330:	1007883a 	mov	r3,r2
   12334:	e0bffd17 	ldw	r2,-12(fp)
   12338:	1884703a 	and	r2,r3,r2
   1233c:	1004c03a 	cmpne	r2,r2,zero
   12340:	10803fcc 	andi	r2,r2,255
}
   12344:	e037883a 	mov	sp,fp
   12348:	df000017 	ldw	fp,0(sp)
   1234c:	dec00104 	addi	sp,sp,4
   12350:	f800283a 	ret

00012354 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   12354:	defff504 	addi	sp,sp,-44
   12358:	dfc00a15 	stw	ra,40(sp)
   1235c:	df000915 	stw	fp,36(sp)
   12360:	df000904 	addi	fp,sp,36
   12364:	e13ffc15 	stw	r4,-16(fp)
   12368:	e17ffd15 	stw	r5,-12(fp)
   1236c:	e1bffe15 	stw	r6,-8(fp)
   12370:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   12374:	00bffa84 	movi	r2,-22
   12378:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   1237c:	e0bffd17 	ldw	r2,-12(fp)
   12380:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   12384:	e0bff817 	ldw	r2,-32(fp)
   12388:	10800808 	cmpgei	r2,r2,32
   1238c:	1000271e 	bne	r2,zero,1242c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12390:	0005303a 	rdctl	r2,status
   12394:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12398:	e0fffb17 	ldw	r3,-20(fp)
   1239c:	00bfff84 	movi	r2,-2
   123a0:	1884703a 	and	r2,r3,r2
   123a4:	1001703a 	wrctl	status,r2
  
  return context;
   123a8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   123ac:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   123b0:	008000b4 	movhi	r2,2
   123b4:	10a49604 	addi	r2,r2,-28072
   123b8:	e0fff817 	ldw	r3,-32(fp)
   123bc:	180690fa 	slli	r3,r3,3
   123c0:	10c5883a 	add	r2,r2,r3
   123c4:	e0fffe17 	ldw	r3,-8(fp)
   123c8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   123cc:	008000b4 	movhi	r2,2
   123d0:	10a49604 	addi	r2,r2,-28072
   123d4:	e0fff817 	ldw	r3,-32(fp)
   123d8:	180690fa 	slli	r3,r3,3
   123dc:	10c5883a 	add	r2,r2,r3
   123e0:	10800104 	addi	r2,r2,4
   123e4:	e0ffff17 	ldw	r3,-4(fp)
   123e8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   123ec:	e0bffe17 	ldw	r2,-8(fp)
   123f0:	10000526 	beq	r2,zero,12408 <alt_iic_isr_register+0xb4>
   123f4:	e0bff817 	ldw	r2,-32(fp)
   123f8:	100b883a 	mov	r5,r2
   123fc:	e13ffc17 	ldw	r4,-16(fp)
   12400:	00121f40 	call	121f4 <alt_ic_irq_enable>
   12404:	00000406 	br	12418 <alt_iic_isr_register+0xc4>
   12408:	e0bff817 	ldw	r2,-32(fp)
   1240c:	100b883a 	mov	r5,r2
   12410:	e13ffc17 	ldw	r4,-16(fp)
   12414:	001227c0 	call	1227c <alt_ic_irq_disable>
   12418:	e0bff715 	stw	r2,-36(fp)
   1241c:	e0bffa17 	ldw	r2,-24(fp)
   12420:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12424:	e0bff917 	ldw	r2,-28(fp)
   12428:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   1242c:	e0bff717 	ldw	r2,-36(fp)
}
   12430:	e037883a 	mov	sp,fp
   12434:	dfc00117 	ldw	ra,4(sp)
   12438:	df000017 	ldw	fp,0(sp)
   1243c:	dec00204 	addi	sp,sp,8
   12440:	f800283a 	ret

00012444 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   12444:	defff804 	addi	sp,sp,-32
   12448:	dfc00715 	stw	ra,28(sp)
   1244c:	df000615 	stw	fp,24(sp)
   12450:	dc000515 	stw	r16,20(sp)
   12454:	df000604 	addi	fp,sp,24
   12458:	e13ffb15 	stw	r4,-20(fp)
   1245c:	e17ffc15 	stw	r5,-16(fp)
   12460:	e1bffd15 	stw	r6,-12(fp)
   12464:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   12468:	e1bffe17 	ldw	r6,-8(fp)
   1246c:	e17ffd17 	ldw	r5,-12(fp)
   12470:	e13ffc17 	ldw	r4,-16(fp)
   12474:	00126cc0 	call	126cc <open>
   12478:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   1247c:	e0bffa17 	ldw	r2,-24(fp)
   12480:	10002216 	blt	r2,zero,1250c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   12484:	04000074 	movhi	r16,1
   12488:	841b3104 	addi	r16,r16,27844
   1248c:	e0bffa17 	ldw	r2,-24(fp)
   12490:	01400304 	movi	r5,12
   12494:	1009883a 	mov	r4,r2
   12498:	00154300 	call	15430 <__mulsi3>
   1249c:	8085883a 	add	r2,r16,r2
   124a0:	10c00017 	ldw	r3,0(r2)
   124a4:	e0bffb17 	ldw	r2,-20(fp)
   124a8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   124ac:	04000074 	movhi	r16,1
   124b0:	841b3104 	addi	r16,r16,27844
   124b4:	e0bffa17 	ldw	r2,-24(fp)
   124b8:	01400304 	movi	r5,12
   124bc:	1009883a 	mov	r4,r2
   124c0:	00154300 	call	15430 <__mulsi3>
   124c4:	8085883a 	add	r2,r16,r2
   124c8:	10800104 	addi	r2,r2,4
   124cc:	10c00017 	ldw	r3,0(r2)
   124d0:	e0bffb17 	ldw	r2,-20(fp)
   124d4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   124d8:	04000074 	movhi	r16,1
   124dc:	841b3104 	addi	r16,r16,27844
   124e0:	e0bffa17 	ldw	r2,-24(fp)
   124e4:	01400304 	movi	r5,12
   124e8:	1009883a 	mov	r4,r2
   124ec:	00154300 	call	15430 <__mulsi3>
   124f0:	8085883a 	add	r2,r16,r2
   124f4:	10800204 	addi	r2,r2,8
   124f8:	10c00017 	ldw	r3,0(r2)
   124fc:	e0bffb17 	ldw	r2,-20(fp)
   12500:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   12504:	e13ffa17 	ldw	r4,-24(fp)
   12508:	00128280 	call	12828 <alt_release_fd>
  }
} 
   1250c:	0001883a 	nop
   12510:	e6ffff04 	addi	sp,fp,-4
   12514:	dfc00217 	ldw	ra,8(sp)
   12518:	df000117 	ldw	fp,4(sp)
   1251c:	dc000017 	ldw	r16,0(sp)
   12520:	dec00304 	addi	sp,sp,12
   12524:	f800283a 	ret

00012528 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   12528:	defffb04 	addi	sp,sp,-20
   1252c:	dfc00415 	stw	ra,16(sp)
   12530:	df000315 	stw	fp,12(sp)
   12534:	df000304 	addi	fp,sp,12
   12538:	e13ffd15 	stw	r4,-12(fp)
   1253c:	e17ffe15 	stw	r5,-8(fp)
   12540:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   12544:	01c07fc4 	movi	r7,511
   12548:	01800044 	movi	r6,1
   1254c:	e17ffd17 	ldw	r5,-12(fp)
   12550:	01000074 	movhi	r4,1
   12554:	211b3404 	addi	r4,r4,27856
   12558:	00124440 	call	12444 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1255c:	01c07fc4 	movi	r7,511
   12560:	000d883a 	mov	r6,zero
   12564:	e17ffe17 	ldw	r5,-8(fp)
   12568:	01000074 	movhi	r4,1
   1256c:	211b3104 	addi	r4,r4,27844
   12570:	00124440 	call	12444 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   12574:	01c07fc4 	movi	r7,511
   12578:	01800044 	movi	r6,1
   1257c:	e17fff17 	ldw	r5,-4(fp)
   12580:	01000074 	movhi	r4,1
   12584:	211b3704 	addi	r4,r4,27868
   12588:	00124440 	call	12444 <alt_open_fd>
}  
   1258c:	0001883a 	nop
   12590:	e037883a 	mov	sp,fp
   12594:	dfc00117 	ldw	ra,4(sp)
   12598:	df000017 	ldw	fp,0(sp)
   1259c:	dec00204 	addi	sp,sp,8
   125a0:	f800283a 	ret

000125a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   125a4:	defffe04 	addi	sp,sp,-8
   125a8:	dfc00115 	stw	ra,4(sp)
   125ac:	df000015 	stw	fp,0(sp)
   125b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   125b4:	d0a00517 	ldw	r2,-32748(gp)
   125b8:	10000326 	beq	r2,zero,125c8 <alt_get_errno+0x24>
   125bc:	d0a00517 	ldw	r2,-32748(gp)
   125c0:	103ee83a 	callr	r2
   125c4:	00000106 	br	125cc <alt_get_errno+0x28>
   125c8:	d0a6ec04 	addi	r2,gp,-25680
}
   125cc:	e037883a 	mov	sp,fp
   125d0:	dfc00117 	ldw	ra,4(sp)
   125d4:	df000017 	ldw	fp,0(sp)
   125d8:	dec00204 	addi	sp,sp,8
   125dc:	f800283a 	ret

000125e0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   125e0:	defffb04 	addi	sp,sp,-20
   125e4:	dfc00415 	stw	ra,16(sp)
   125e8:	df000315 	stw	fp,12(sp)
   125ec:	dc000215 	stw	r16,8(sp)
   125f0:	df000304 	addi	fp,sp,12
   125f4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   125f8:	e0bffe17 	ldw	r2,-8(fp)
   125fc:	10800217 	ldw	r2,8(r2)
   12600:	10d00034 	orhi	r3,r2,16384
   12604:	e0bffe17 	ldw	r2,-8(fp)
   12608:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1260c:	e03ffd15 	stw	zero,-12(fp)
   12610:	00002306 	br	126a0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   12614:	04000074 	movhi	r16,1
   12618:	841b3104 	addi	r16,r16,27844
   1261c:	e0bffd17 	ldw	r2,-12(fp)
   12620:	01400304 	movi	r5,12
   12624:	1009883a 	mov	r4,r2
   12628:	00154300 	call	15430 <__mulsi3>
   1262c:	8085883a 	add	r2,r16,r2
   12630:	10c00017 	ldw	r3,0(r2)
   12634:	e0bffe17 	ldw	r2,-8(fp)
   12638:	10800017 	ldw	r2,0(r2)
   1263c:	1880151e 	bne	r3,r2,12694 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   12640:	04000074 	movhi	r16,1
   12644:	841b3104 	addi	r16,r16,27844
   12648:	e0bffd17 	ldw	r2,-12(fp)
   1264c:	01400304 	movi	r5,12
   12650:	1009883a 	mov	r4,r2
   12654:	00154300 	call	15430 <__mulsi3>
   12658:	8085883a 	add	r2,r16,r2
   1265c:	10800204 	addi	r2,r2,8
   12660:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   12664:	10000b0e 	bge	r2,zero,12694 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   12668:	01400304 	movi	r5,12
   1266c:	e13ffd17 	ldw	r4,-12(fp)
   12670:	00154300 	call	15430 <__mulsi3>
   12674:	1007883a 	mov	r3,r2
   12678:	00800074 	movhi	r2,1
   1267c:	109b3104 	addi	r2,r2,27844
   12680:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   12684:	e0bffe17 	ldw	r2,-8(fp)
   12688:	18800226 	beq	r3,r2,12694 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1268c:	00bffcc4 	movi	r2,-13
   12690:	00000806 	br	126b4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   12694:	e0bffd17 	ldw	r2,-12(fp)
   12698:	10800044 	addi	r2,r2,1
   1269c:	e0bffd15 	stw	r2,-12(fp)
   126a0:	d0a00417 	ldw	r2,-32752(gp)
   126a4:	1007883a 	mov	r3,r2
   126a8:	e0bffd17 	ldw	r2,-12(fp)
   126ac:	18bfd92e 	bgeu	r3,r2,12614 <_gp+0xffff2fa4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   126b0:	0005883a 	mov	r2,zero
}
   126b4:	e6ffff04 	addi	sp,fp,-4
   126b8:	dfc00217 	ldw	ra,8(sp)
   126bc:	df000117 	ldw	fp,4(sp)
   126c0:	dc000017 	ldw	r16,0(sp)
   126c4:	dec00304 	addi	sp,sp,12
   126c8:	f800283a 	ret

000126cc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   126cc:	defff604 	addi	sp,sp,-40
   126d0:	dfc00915 	stw	ra,36(sp)
   126d4:	df000815 	stw	fp,32(sp)
   126d8:	df000804 	addi	fp,sp,32
   126dc:	e13ffd15 	stw	r4,-12(fp)
   126e0:	e17ffe15 	stw	r5,-8(fp)
   126e4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   126e8:	00bfffc4 	movi	r2,-1
   126ec:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   126f0:	00bffb44 	movi	r2,-19
   126f4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   126f8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   126fc:	d1600204 	addi	r5,gp,-32760
   12700:	e13ffd17 	ldw	r4,-12(fp)
   12704:	0012a740 	call	12a74 <alt_find_dev>
   12708:	e0bff815 	stw	r2,-32(fp)
   1270c:	e0bff817 	ldw	r2,-32(fp)
   12710:	1000051e 	bne	r2,zero,12728 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   12714:	e13ffd17 	ldw	r4,-12(fp)
   12718:	0012b040 	call	12b04 <alt_find_file>
   1271c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   12720:	00800044 	movi	r2,1
   12724:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   12728:	e0bff817 	ldw	r2,-32(fp)
   1272c:	10002b26 	beq	r2,zero,127dc <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   12730:	e13ff817 	ldw	r4,-32(fp)
   12734:	0012c0c0 	call	12c0c <alt_get_fd>
   12738:	e0bff915 	stw	r2,-28(fp)
   1273c:	e0bff917 	ldw	r2,-28(fp)
   12740:	1000030e 	bge	r2,zero,12750 <open+0x84>
    {
      status = index;
   12744:	e0bff917 	ldw	r2,-28(fp)
   12748:	e0bffa15 	stw	r2,-24(fp)
   1274c:	00002506 	br	127e4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   12750:	01400304 	movi	r5,12
   12754:	e13ff917 	ldw	r4,-28(fp)
   12758:	00154300 	call	15430 <__mulsi3>
   1275c:	1007883a 	mov	r3,r2
   12760:	00800074 	movhi	r2,1
   12764:	109b3104 	addi	r2,r2,27844
   12768:	1885883a 	add	r2,r3,r2
   1276c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   12770:	e0fffe17 	ldw	r3,-8(fp)
   12774:	00900034 	movhi	r2,16384
   12778:	10bfffc4 	addi	r2,r2,-1
   1277c:	1886703a 	and	r3,r3,r2
   12780:	e0bffc17 	ldw	r2,-16(fp)
   12784:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   12788:	e0bffb17 	ldw	r2,-20(fp)
   1278c:	1000051e 	bne	r2,zero,127a4 <open+0xd8>
   12790:	e13ffc17 	ldw	r4,-16(fp)
   12794:	00125e00 	call	125e0 <alt_file_locked>
   12798:	e0bffa15 	stw	r2,-24(fp)
   1279c:	e0bffa17 	ldw	r2,-24(fp)
   127a0:	10001016 	blt	r2,zero,127e4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   127a4:	e0bff817 	ldw	r2,-32(fp)
   127a8:	10800317 	ldw	r2,12(r2)
   127ac:	10000826 	beq	r2,zero,127d0 <open+0x104>
   127b0:	e0bff817 	ldw	r2,-32(fp)
   127b4:	10800317 	ldw	r2,12(r2)
   127b8:	e1ffff17 	ldw	r7,-4(fp)
   127bc:	e1bffe17 	ldw	r6,-8(fp)
   127c0:	e17ffd17 	ldw	r5,-12(fp)
   127c4:	e13ffc17 	ldw	r4,-16(fp)
   127c8:	103ee83a 	callr	r2
   127cc:	00000106 	br	127d4 <open+0x108>
   127d0:	0005883a 	mov	r2,zero
   127d4:	e0bffa15 	stw	r2,-24(fp)
   127d8:	00000206 	br	127e4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   127dc:	00bffb44 	movi	r2,-19
   127e0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   127e4:	e0bffa17 	ldw	r2,-24(fp)
   127e8:	1000090e 	bge	r2,zero,12810 <open+0x144>
  {
    alt_release_fd (index);  
   127ec:	e13ff917 	ldw	r4,-28(fp)
   127f0:	00128280 	call	12828 <alt_release_fd>
    ALT_ERRNO = -status;
   127f4:	00125a40 	call	125a4 <alt_get_errno>
   127f8:	1007883a 	mov	r3,r2
   127fc:	e0bffa17 	ldw	r2,-24(fp)
   12800:	0085c83a 	sub	r2,zero,r2
   12804:	18800015 	stw	r2,0(r3)
    return -1;
   12808:	00bfffc4 	movi	r2,-1
   1280c:	00000106 	br	12814 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   12810:	e0bff917 	ldw	r2,-28(fp)
}
   12814:	e037883a 	mov	sp,fp
   12818:	dfc00117 	ldw	ra,4(sp)
   1281c:	df000017 	ldw	fp,0(sp)
   12820:	dec00204 	addi	sp,sp,8
   12824:	f800283a 	ret

00012828 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   12828:	defffc04 	addi	sp,sp,-16
   1282c:	dfc00315 	stw	ra,12(sp)
   12830:	df000215 	stw	fp,8(sp)
   12834:	dc000115 	stw	r16,4(sp)
   12838:	df000204 	addi	fp,sp,8
   1283c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   12840:	e0bffe17 	ldw	r2,-8(fp)
   12844:	108000d0 	cmplti	r2,r2,3
   12848:	1000111e 	bne	r2,zero,12890 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   1284c:	04000074 	movhi	r16,1
   12850:	841b3104 	addi	r16,r16,27844
   12854:	e0bffe17 	ldw	r2,-8(fp)
   12858:	01400304 	movi	r5,12
   1285c:	1009883a 	mov	r4,r2
   12860:	00154300 	call	15430 <__mulsi3>
   12864:	8085883a 	add	r2,r16,r2
   12868:	10800204 	addi	r2,r2,8
   1286c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   12870:	04000074 	movhi	r16,1
   12874:	841b3104 	addi	r16,r16,27844
   12878:	e0bffe17 	ldw	r2,-8(fp)
   1287c:	01400304 	movi	r5,12
   12880:	1009883a 	mov	r4,r2
   12884:	00154300 	call	15430 <__mulsi3>
   12888:	8085883a 	add	r2,r16,r2
   1288c:	10000015 	stw	zero,0(r2)
  }
}
   12890:	0001883a 	nop
   12894:	e6ffff04 	addi	sp,fp,-4
   12898:	dfc00217 	ldw	ra,8(sp)
   1289c:	df000117 	ldw	fp,4(sp)
   128a0:	dc000017 	ldw	r16,0(sp)
   128a4:	dec00304 	addi	sp,sp,12
   128a8:	f800283a 	ret

000128ac <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   128ac:	defffa04 	addi	sp,sp,-24
   128b0:	df000515 	stw	fp,20(sp)
   128b4:	df000504 	addi	fp,sp,20
   128b8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   128bc:	0005303a 	rdctl	r2,status
   128c0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   128c4:	e0fffc17 	ldw	r3,-16(fp)
   128c8:	00bfff84 	movi	r2,-2
   128cc:	1884703a 	and	r2,r3,r2
   128d0:	1001703a 	wrctl	status,r2
  
  return context;
   128d4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   128d8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   128dc:	e0bfff17 	ldw	r2,-4(fp)
   128e0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   128e4:	e0bffd17 	ldw	r2,-12(fp)
   128e8:	10800017 	ldw	r2,0(r2)
   128ec:	e0fffd17 	ldw	r3,-12(fp)
   128f0:	18c00117 	ldw	r3,4(r3)
   128f4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   128f8:	e0bffd17 	ldw	r2,-12(fp)
   128fc:	10800117 	ldw	r2,4(r2)
   12900:	e0fffd17 	ldw	r3,-12(fp)
   12904:	18c00017 	ldw	r3,0(r3)
   12908:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1290c:	e0bffd17 	ldw	r2,-12(fp)
   12910:	e0fffd17 	ldw	r3,-12(fp)
   12914:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   12918:	e0bffd17 	ldw	r2,-12(fp)
   1291c:	e0fffd17 	ldw	r3,-12(fp)
   12920:	10c00015 	stw	r3,0(r2)
   12924:	e0bffb17 	ldw	r2,-20(fp)
   12928:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1292c:	e0bffe17 	ldw	r2,-8(fp)
   12930:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   12934:	0001883a 	nop
   12938:	e037883a 	mov	sp,fp
   1293c:	df000017 	ldw	fp,0(sp)
   12940:	dec00104 	addi	sp,sp,4
   12944:	f800283a 	ret

00012948 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   12948:	defffb04 	addi	sp,sp,-20
   1294c:	dfc00415 	stw	ra,16(sp)
   12950:	df000315 	stw	fp,12(sp)
   12954:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   12958:	d0a00717 	ldw	r2,-32740(gp)
   1295c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   12960:	d0a6ea17 	ldw	r2,-25688(gp)
   12964:	10800044 	addi	r2,r2,1
   12968:	d0a6ea15 	stw	r2,-25688(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1296c:	00002e06 	br	12a28 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   12970:	e0bffd17 	ldw	r2,-12(fp)
   12974:	10800017 	ldw	r2,0(r2)
   12978:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1297c:	e0bffd17 	ldw	r2,-12(fp)
   12980:	10800403 	ldbu	r2,16(r2)
   12984:	10803fcc 	andi	r2,r2,255
   12988:	10000426 	beq	r2,zero,1299c <alt_tick+0x54>
   1298c:	d0a6ea17 	ldw	r2,-25688(gp)
   12990:	1000021e 	bne	r2,zero,1299c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   12994:	e0bffd17 	ldw	r2,-12(fp)
   12998:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1299c:	e0bffd17 	ldw	r2,-12(fp)
   129a0:	10800217 	ldw	r2,8(r2)
   129a4:	d0e6ea17 	ldw	r3,-25688(gp)
   129a8:	18801d36 	bltu	r3,r2,12a20 <alt_tick+0xd8>
   129ac:	e0bffd17 	ldw	r2,-12(fp)
   129b0:	10800403 	ldbu	r2,16(r2)
   129b4:	10803fcc 	andi	r2,r2,255
   129b8:	1000191e 	bne	r2,zero,12a20 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   129bc:	e0bffd17 	ldw	r2,-12(fp)
   129c0:	10800317 	ldw	r2,12(r2)
   129c4:	e0fffd17 	ldw	r3,-12(fp)
   129c8:	18c00517 	ldw	r3,20(r3)
   129cc:	1809883a 	mov	r4,r3
   129d0:	103ee83a 	callr	r2
   129d4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   129d8:	e0bfff17 	ldw	r2,-4(fp)
   129dc:	1000031e 	bne	r2,zero,129ec <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   129e0:	e13ffd17 	ldw	r4,-12(fp)
   129e4:	00128ac0 	call	128ac <alt_alarm_stop>
   129e8:	00000d06 	br	12a20 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   129ec:	e0bffd17 	ldw	r2,-12(fp)
   129f0:	10c00217 	ldw	r3,8(r2)
   129f4:	e0bfff17 	ldw	r2,-4(fp)
   129f8:	1887883a 	add	r3,r3,r2
   129fc:	e0bffd17 	ldw	r2,-12(fp)
   12a00:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   12a04:	e0bffd17 	ldw	r2,-12(fp)
   12a08:	10c00217 	ldw	r3,8(r2)
   12a0c:	d0a6ea17 	ldw	r2,-25688(gp)
   12a10:	1880032e 	bgeu	r3,r2,12a20 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   12a14:	e0bffd17 	ldw	r2,-12(fp)
   12a18:	00c00044 	movi	r3,1
   12a1c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   12a20:	e0bffe17 	ldw	r2,-8(fp)
   12a24:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   12a28:	e0fffd17 	ldw	r3,-12(fp)
   12a2c:	d0a00704 	addi	r2,gp,-32740
   12a30:	18bfcf1e 	bne	r3,r2,12970 <_gp+0xffff3300>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   12a34:	0001883a 	nop
}
   12a38:	0001883a 	nop
   12a3c:	e037883a 	mov	sp,fp
   12a40:	dfc00117 	ldw	ra,4(sp)
   12a44:	df000017 	ldw	fp,0(sp)
   12a48:	dec00204 	addi	sp,sp,8
   12a4c:	f800283a 	ret

00012a50 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   12a50:	deffff04 	addi	sp,sp,-4
   12a54:	df000015 	stw	fp,0(sp)
   12a58:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   12a5c:	000170fa 	wrctl	ienable,zero
}
   12a60:	0001883a 	nop
   12a64:	e037883a 	mov	sp,fp
   12a68:	df000017 	ldw	fp,0(sp)
   12a6c:	dec00104 	addi	sp,sp,4
   12a70:	f800283a 	ret

00012a74 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   12a74:	defffa04 	addi	sp,sp,-24
   12a78:	dfc00515 	stw	ra,20(sp)
   12a7c:	df000415 	stw	fp,16(sp)
   12a80:	df000404 	addi	fp,sp,16
   12a84:	e13ffe15 	stw	r4,-8(fp)
   12a88:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   12a8c:	e0bfff17 	ldw	r2,-4(fp)
   12a90:	10800017 	ldw	r2,0(r2)
   12a94:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   12a98:	e13ffe17 	ldw	r4,-8(fp)
   12a9c:	00130e40 	call	130e4 <strlen>
   12aa0:	10800044 	addi	r2,r2,1
   12aa4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12aa8:	00000d06 	br	12ae0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   12aac:	e0bffc17 	ldw	r2,-16(fp)
   12ab0:	10800217 	ldw	r2,8(r2)
   12ab4:	e0fffd17 	ldw	r3,-12(fp)
   12ab8:	180d883a 	mov	r6,r3
   12abc:	e17ffe17 	ldw	r5,-8(fp)
   12ac0:	1009883a 	mov	r4,r2
   12ac4:	0012db80 	call	12db8 <memcmp>
   12ac8:	1000021e 	bne	r2,zero,12ad4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   12acc:	e0bffc17 	ldw	r2,-16(fp)
   12ad0:	00000706 	br	12af0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   12ad4:	e0bffc17 	ldw	r2,-16(fp)
   12ad8:	10800017 	ldw	r2,0(r2)
   12adc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12ae0:	e0fffc17 	ldw	r3,-16(fp)
   12ae4:	e0bfff17 	ldw	r2,-4(fp)
   12ae8:	18bff01e 	bne	r3,r2,12aac <_gp+0xffff343c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   12aec:	0005883a 	mov	r2,zero
}
   12af0:	e037883a 	mov	sp,fp
   12af4:	dfc00117 	ldw	ra,4(sp)
   12af8:	df000017 	ldw	fp,0(sp)
   12afc:	dec00204 	addi	sp,sp,8
   12b00:	f800283a 	ret

00012b04 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   12b04:	defffb04 	addi	sp,sp,-20
   12b08:	dfc00415 	stw	ra,16(sp)
   12b0c:	df000315 	stw	fp,12(sp)
   12b10:	df000304 	addi	fp,sp,12
   12b14:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   12b18:	d0a00017 	ldw	r2,-32768(gp)
   12b1c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   12b20:	00003106 	br	12be8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   12b24:	e0bffd17 	ldw	r2,-12(fp)
   12b28:	10800217 	ldw	r2,8(r2)
   12b2c:	1009883a 	mov	r4,r2
   12b30:	00130e40 	call	130e4 <strlen>
   12b34:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   12b38:	e0bffd17 	ldw	r2,-12(fp)
   12b3c:	10c00217 	ldw	r3,8(r2)
   12b40:	e0bffe17 	ldw	r2,-8(fp)
   12b44:	10bfffc4 	addi	r2,r2,-1
   12b48:	1885883a 	add	r2,r3,r2
   12b4c:	10800003 	ldbu	r2,0(r2)
   12b50:	10803fcc 	andi	r2,r2,255
   12b54:	1080201c 	xori	r2,r2,128
   12b58:	10bfe004 	addi	r2,r2,-128
   12b5c:	10800bd8 	cmpnei	r2,r2,47
   12b60:	1000031e 	bne	r2,zero,12b70 <alt_find_file+0x6c>
    {
      len -= 1;
   12b64:	e0bffe17 	ldw	r2,-8(fp)
   12b68:	10bfffc4 	addi	r2,r2,-1
   12b6c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   12b70:	e0bffe17 	ldw	r2,-8(fp)
   12b74:	e0ffff17 	ldw	r3,-4(fp)
   12b78:	1885883a 	add	r2,r3,r2
   12b7c:	10800003 	ldbu	r2,0(r2)
   12b80:	10803fcc 	andi	r2,r2,255
   12b84:	1080201c 	xori	r2,r2,128
   12b88:	10bfe004 	addi	r2,r2,-128
   12b8c:	10800be0 	cmpeqi	r2,r2,47
   12b90:	1000081e 	bne	r2,zero,12bb4 <alt_find_file+0xb0>
   12b94:	e0bffe17 	ldw	r2,-8(fp)
   12b98:	e0ffff17 	ldw	r3,-4(fp)
   12b9c:	1885883a 	add	r2,r3,r2
   12ba0:	10800003 	ldbu	r2,0(r2)
   12ba4:	10803fcc 	andi	r2,r2,255
   12ba8:	1080201c 	xori	r2,r2,128
   12bac:	10bfe004 	addi	r2,r2,-128
   12bb0:	10000a1e 	bne	r2,zero,12bdc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   12bb4:	e0bffd17 	ldw	r2,-12(fp)
   12bb8:	10800217 	ldw	r2,8(r2)
   12bbc:	e0fffe17 	ldw	r3,-8(fp)
   12bc0:	180d883a 	mov	r6,r3
   12bc4:	e17fff17 	ldw	r5,-4(fp)
   12bc8:	1009883a 	mov	r4,r2
   12bcc:	0012db80 	call	12db8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   12bd0:	1000021e 	bne	r2,zero,12bdc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   12bd4:	e0bffd17 	ldw	r2,-12(fp)
   12bd8:	00000706 	br	12bf8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   12bdc:	e0bffd17 	ldw	r2,-12(fp)
   12be0:	10800017 	ldw	r2,0(r2)
   12be4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   12be8:	e0fffd17 	ldw	r3,-12(fp)
   12bec:	d0a00004 	addi	r2,gp,-32768
   12bf0:	18bfcc1e 	bne	r3,r2,12b24 <_gp+0xffff34b4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   12bf4:	0005883a 	mov	r2,zero
}
   12bf8:	e037883a 	mov	sp,fp
   12bfc:	dfc00117 	ldw	ra,4(sp)
   12c00:	df000017 	ldw	fp,0(sp)
   12c04:	dec00204 	addi	sp,sp,8
   12c08:	f800283a 	ret

00012c0c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   12c0c:	defffa04 	addi	sp,sp,-24
   12c10:	dfc00515 	stw	ra,20(sp)
   12c14:	df000415 	stw	fp,16(sp)
   12c18:	dc000315 	stw	r16,12(sp)
   12c1c:	df000404 	addi	fp,sp,16
   12c20:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   12c24:	00bffa04 	movi	r2,-24
   12c28:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12c2c:	e03ffc15 	stw	zero,-16(fp)
   12c30:	00001d06 	br	12ca8 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   12c34:	04000074 	movhi	r16,1
   12c38:	841b3104 	addi	r16,r16,27844
   12c3c:	e0bffc17 	ldw	r2,-16(fp)
   12c40:	01400304 	movi	r5,12
   12c44:	1009883a 	mov	r4,r2
   12c48:	00154300 	call	15430 <__mulsi3>
   12c4c:	8085883a 	add	r2,r16,r2
   12c50:	10800017 	ldw	r2,0(r2)
   12c54:	1000111e 	bne	r2,zero,12c9c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   12c58:	04000074 	movhi	r16,1
   12c5c:	841b3104 	addi	r16,r16,27844
   12c60:	e0bffc17 	ldw	r2,-16(fp)
   12c64:	01400304 	movi	r5,12
   12c68:	1009883a 	mov	r4,r2
   12c6c:	00154300 	call	15430 <__mulsi3>
   12c70:	8085883a 	add	r2,r16,r2
   12c74:	e0fffe17 	ldw	r3,-8(fp)
   12c78:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   12c7c:	d0e00417 	ldw	r3,-32752(gp)
   12c80:	e0bffc17 	ldw	r2,-16(fp)
   12c84:	1880020e 	bge	r3,r2,12c90 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   12c88:	e0bffc17 	ldw	r2,-16(fp)
   12c8c:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
   12c90:	e0bffc17 	ldw	r2,-16(fp)
   12c94:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   12c98:	00000606 	br	12cb4 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12c9c:	e0bffc17 	ldw	r2,-16(fp)
   12ca0:	10800044 	addi	r2,r2,1
   12ca4:	e0bffc15 	stw	r2,-16(fp)
   12ca8:	e0bffc17 	ldw	r2,-16(fp)
   12cac:	10800810 	cmplti	r2,r2,32
   12cb0:	103fe01e 	bne	r2,zero,12c34 <_gp+0xffff35c4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   12cb4:	e0bffd17 	ldw	r2,-12(fp)
}
   12cb8:	e6ffff04 	addi	sp,fp,-4
   12cbc:	dfc00217 	ldw	ra,8(sp)
   12cc0:	df000117 	ldw	fp,4(sp)
   12cc4:	dc000017 	ldw	r16,0(sp)
   12cc8:	dec00304 	addi	sp,sp,12
   12ccc:	f800283a 	ret

00012cd0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   12cd0:	defffe04 	addi	sp,sp,-8
   12cd4:	df000115 	stw	fp,4(sp)
   12cd8:	df000104 	addi	fp,sp,4
   12cdc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   12ce0:	e0bfff17 	ldw	r2,-4(fp)
   12ce4:	10bffe84 	addi	r2,r2,-6
   12ce8:	10c00428 	cmpgeui	r3,r2,16
   12cec:	18001a1e 	bne	r3,zero,12d58 <alt_exception_cause_generated_bad_addr+0x88>
   12cf0:	100690ba 	slli	r3,r2,2
   12cf4:	00800074 	movhi	r2,1
   12cf8:	108b4204 	addi	r2,r2,11528
   12cfc:	1885883a 	add	r2,r3,r2
   12d00:	10800017 	ldw	r2,0(r2)
   12d04:	1000683a 	jmp	r2
   12d08:	00012d48 	cmpgei	zero,zero,1205
   12d0c:	00012d48 	cmpgei	zero,zero,1205
   12d10:	00012d58 	cmpnei	zero,zero,1205
   12d14:	00012d58 	cmpnei	zero,zero,1205
   12d18:	00012d58 	cmpnei	zero,zero,1205
   12d1c:	00012d48 	cmpgei	zero,zero,1205
   12d20:	00012d50 	cmplti	zero,zero,1205
   12d24:	00012d58 	cmpnei	zero,zero,1205
   12d28:	00012d48 	cmpgei	zero,zero,1205
   12d2c:	00012d48 	cmpgei	zero,zero,1205
   12d30:	00012d58 	cmpnei	zero,zero,1205
   12d34:	00012d48 	cmpgei	zero,zero,1205
   12d38:	00012d50 	cmplti	zero,zero,1205
   12d3c:	00012d58 	cmpnei	zero,zero,1205
   12d40:	00012d58 	cmpnei	zero,zero,1205
   12d44:	00012d48 	cmpgei	zero,zero,1205
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   12d48:	00800044 	movi	r2,1
   12d4c:	00000306 	br	12d5c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   12d50:	0005883a 	mov	r2,zero
   12d54:	00000106 	br	12d5c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   12d58:	0005883a 	mov	r2,zero
  }
}
   12d5c:	e037883a 	mov	sp,fp
   12d60:	df000017 	ldw	fp,0(sp)
   12d64:	dec00104 	addi	sp,sp,4
   12d68:	f800283a 	ret

00012d6c <atexit>:
   12d6c:	200b883a 	mov	r5,r4
   12d70:	000f883a 	mov	r7,zero
   12d74:	000d883a 	mov	r6,zero
   12d78:	0009883a 	mov	r4,zero
   12d7c:	00134281 	jmpi	13428 <__register_exitproc>

00012d80 <exit>:
   12d80:	defffe04 	addi	sp,sp,-8
   12d84:	000b883a 	mov	r5,zero
   12d88:	dc000015 	stw	r16,0(sp)
   12d8c:	dfc00115 	stw	ra,4(sp)
   12d90:	2021883a 	mov	r16,r4
   12d94:	00135400 	call	13540 <__call_exitprocs>
   12d98:	00800074 	movhi	r2,1
   12d9c:	109da504 	addi	r2,r2,30356
   12da0:	11000017 	ldw	r4,0(r2)
   12da4:	20800f17 	ldw	r2,60(r4)
   12da8:	10000126 	beq	r2,zero,12db0 <exit+0x30>
   12dac:	103ee83a 	callr	r2
   12db0:	8009883a 	mov	r4,r16
   12db4:	00154580 	call	15458 <_exit>

00012db8 <memcmp>:
   12db8:	01c000c4 	movi	r7,3
   12dbc:	3980192e 	bgeu	r7,r6,12e24 <memcmp+0x6c>
   12dc0:	2144b03a 	or	r2,r4,r5
   12dc4:	11c4703a 	and	r2,r2,r7
   12dc8:	10000f26 	beq	r2,zero,12e08 <memcmp+0x50>
   12dcc:	20800003 	ldbu	r2,0(r4)
   12dd0:	28c00003 	ldbu	r3,0(r5)
   12dd4:	10c0151e 	bne	r2,r3,12e2c <memcmp+0x74>
   12dd8:	31bfff84 	addi	r6,r6,-2
   12ddc:	01ffffc4 	movi	r7,-1
   12de0:	00000406 	br	12df4 <memcmp+0x3c>
   12de4:	20800003 	ldbu	r2,0(r4)
   12de8:	28c00003 	ldbu	r3,0(r5)
   12dec:	31bfffc4 	addi	r6,r6,-1
   12df0:	10c00e1e 	bne	r2,r3,12e2c <memcmp+0x74>
   12df4:	21000044 	addi	r4,r4,1
   12df8:	29400044 	addi	r5,r5,1
   12dfc:	31fff91e 	bne	r6,r7,12de4 <_gp+0xffff3774>
   12e00:	0005883a 	mov	r2,zero
   12e04:	f800283a 	ret
   12e08:	20c00017 	ldw	r3,0(r4)
   12e0c:	28800017 	ldw	r2,0(r5)
   12e10:	18bfee1e 	bne	r3,r2,12dcc <_gp+0xffff375c>
   12e14:	31bfff04 	addi	r6,r6,-4
   12e18:	21000104 	addi	r4,r4,4
   12e1c:	29400104 	addi	r5,r5,4
   12e20:	39bff936 	bltu	r7,r6,12e08 <_gp+0xffff3798>
   12e24:	303fe91e 	bne	r6,zero,12dcc <_gp+0xffff375c>
   12e28:	003ff506 	br	12e00 <_gp+0xffff3790>
   12e2c:	10c5c83a 	sub	r2,r2,r3
   12e30:	f800283a 	ret

00012e34 <memcpy>:
   12e34:	defffd04 	addi	sp,sp,-12
   12e38:	dfc00215 	stw	ra,8(sp)
   12e3c:	dc400115 	stw	r17,4(sp)
   12e40:	dc000015 	stw	r16,0(sp)
   12e44:	00c003c4 	movi	r3,15
   12e48:	2005883a 	mov	r2,r4
   12e4c:	1980452e 	bgeu	r3,r6,12f64 <memcpy+0x130>
   12e50:	2906b03a 	or	r3,r5,r4
   12e54:	18c000cc 	andi	r3,r3,3
   12e58:	1800441e 	bne	r3,zero,12f6c <memcpy+0x138>
   12e5c:	347ffc04 	addi	r17,r6,-16
   12e60:	8822d13a 	srli	r17,r17,4
   12e64:	28c00104 	addi	r3,r5,4
   12e68:	23400104 	addi	r13,r4,4
   12e6c:	8820913a 	slli	r16,r17,4
   12e70:	2b000204 	addi	r12,r5,8
   12e74:	22c00204 	addi	r11,r4,8
   12e78:	84000504 	addi	r16,r16,20
   12e7c:	2a800304 	addi	r10,r5,12
   12e80:	22400304 	addi	r9,r4,12
   12e84:	2c21883a 	add	r16,r5,r16
   12e88:	2811883a 	mov	r8,r5
   12e8c:	200f883a 	mov	r7,r4
   12e90:	41000017 	ldw	r4,0(r8)
   12e94:	1fc00017 	ldw	ra,0(r3)
   12e98:	63c00017 	ldw	r15,0(r12)
   12e9c:	39000015 	stw	r4,0(r7)
   12ea0:	53800017 	ldw	r14,0(r10)
   12ea4:	6fc00015 	stw	ra,0(r13)
   12ea8:	5bc00015 	stw	r15,0(r11)
   12eac:	4b800015 	stw	r14,0(r9)
   12eb0:	18c00404 	addi	r3,r3,16
   12eb4:	39c00404 	addi	r7,r7,16
   12eb8:	42000404 	addi	r8,r8,16
   12ebc:	6b400404 	addi	r13,r13,16
   12ec0:	63000404 	addi	r12,r12,16
   12ec4:	5ac00404 	addi	r11,r11,16
   12ec8:	52800404 	addi	r10,r10,16
   12ecc:	4a400404 	addi	r9,r9,16
   12ed0:	1c3fef1e 	bne	r3,r16,12e90 <_gp+0xffff3820>
   12ed4:	89c00044 	addi	r7,r17,1
   12ed8:	380e913a 	slli	r7,r7,4
   12edc:	310003cc 	andi	r4,r6,15
   12ee0:	02c000c4 	movi	r11,3
   12ee4:	11c7883a 	add	r3,r2,r7
   12ee8:	29cb883a 	add	r5,r5,r7
   12eec:	5900212e 	bgeu	r11,r4,12f74 <memcpy+0x140>
   12ef0:	1813883a 	mov	r9,r3
   12ef4:	2811883a 	mov	r8,r5
   12ef8:	200f883a 	mov	r7,r4
   12efc:	42800017 	ldw	r10,0(r8)
   12f00:	4a400104 	addi	r9,r9,4
   12f04:	39ffff04 	addi	r7,r7,-4
   12f08:	4abfff15 	stw	r10,-4(r9)
   12f0c:	42000104 	addi	r8,r8,4
   12f10:	59fffa36 	bltu	r11,r7,12efc <_gp+0xffff388c>
   12f14:	213fff04 	addi	r4,r4,-4
   12f18:	2008d0ba 	srli	r4,r4,2
   12f1c:	318000cc 	andi	r6,r6,3
   12f20:	21000044 	addi	r4,r4,1
   12f24:	2109883a 	add	r4,r4,r4
   12f28:	2109883a 	add	r4,r4,r4
   12f2c:	1907883a 	add	r3,r3,r4
   12f30:	290b883a 	add	r5,r5,r4
   12f34:	30000626 	beq	r6,zero,12f50 <memcpy+0x11c>
   12f38:	198d883a 	add	r6,r3,r6
   12f3c:	29c00003 	ldbu	r7,0(r5)
   12f40:	18c00044 	addi	r3,r3,1
   12f44:	29400044 	addi	r5,r5,1
   12f48:	19ffffc5 	stb	r7,-1(r3)
   12f4c:	19bffb1e 	bne	r3,r6,12f3c <_gp+0xffff38cc>
   12f50:	dfc00217 	ldw	ra,8(sp)
   12f54:	dc400117 	ldw	r17,4(sp)
   12f58:	dc000017 	ldw	r16,0(sp)
   12f5c:	dec00304 	addi	sp,sp,12
   12f60:	f800283a 	ret
   12f64:	2007883a 	mov	r3,r4
   12f68:	003ff206 	br	12f34 <_gp+0xffff38c4>
   12f6c:	2007883a 	mov	r3,r4
   12f70:	003ff106 	br	12f38 <_gp+0xffff38c8>
   12f74:	200d883a 	mov	r6,r4
   12f78:	003fee06 	br	12f34 <_gp+0xffff38c4>

00012f7c <_putc_r>:
   12f7c:	defffc04 	addi	sp,sp,-16
   12f80:	dc000215 	stw	r16,8(sp)
   12f84:	dfc00315 	stw	ra,12(sp)
   12f88:	2021883a 	mov	r16,r4
   12f8c:	20000226 	beq	r4,zero,12f98 <_putc_r+0x1c>
   12f90:	20800e17 	ldw	r2,56(r4)
   12f94:	10001b26 	beq	r2,zero,13004 <_putc_r+0x88>
   12f98:	30800217 	ldw	r2,8(r6)
   12f9c:	10bfffc4 	addi	r2,r2,-1
   12fa0:	30800215 	stw	r2,8(r6)
   12fa4:	10000a16 	blt	r2,zero,12fd0 <_putc_r+0x54>
   12fa8:	30800017 	ldw	r2,0(r6)
   12fac:	11400005 	stb	r5,0(r2)
   12fb0:	30800017 	ldw	r2,0(r6)
   12fb4:	10c00044 	addi	r3,r2,1
   12fb8:	30c00015 	stw	r3,0(r6)
   12fbc:	10800003 	ldbu	r2,0(r2)
   12fc0:	dfc00317 	ldw	ra,12(sp)
   12fc4:	dc000217 	ldw	r16,8(sp)
   12fc8:	dec00404 	addi	sp,sp,16
   12fcc:	f800283a 	ret
   12fd0:	30c00617 	ldw	r3,24(r6)
   12fd4:	10c00616 	blt	r2,r3,12ff0 <_putc_r+0x74>
   12fd8:	30800017 	ldw	r2,0(r6)
   12fdc:	00c00284 	movi	r3,10
   12fe0:	11400005 	stb	r5,0(r2)
   12fe4:	30800017 	ldw	r2,0(r6)
   12fe8:	11400003 	ldbu	r5,0(r2)
   12fec:	28fff11e 	bne	r5,r3,12fb4 <_gp+0xffff3944>
   12ff0:	8009883a 	mov	r4,r16
   12ff4:	dfc00317 	ldw	ra,12(sp)
   12ff8:	dc000217 	ldw	r16,8(sp)
   12ffc:	dec00404 	addi	sp,sp,16
   13000:	001317c1 	jmpi	1317c <__swbuf_r>
   13004:	d9400015 	stw	r5,0(sp)
   13008:	d9800115 	stw	r6,4(sp)
   1300c:	0013cc80 	call	13cc8 <__sinit>
   13010:	d9800117 	ldw	r6,4(sp)
   13014:	d9400017 	ldw	r5,0(sp)
   13018:	003fdf06 	br	12f98 <_gp+0xffff3928>

0001301c <putc>:
   1301c:	00800074 	movhi	r2,1
   13020:	defffc04 	addi	sp,sp,-16
   13024:	109da604 	addi	r2,r2,30360
   13028:	dc000115 	stw	r16,4(sp)
   1302c:	14000017 	ldw	r16,0(r2)
   13030:	dc400215 	stw	r17,8(sp)
   13034:	dfc00315 	stw	ra,12(sp)
   13038:	2023883a 	mov	r17,r4
   1303c:	80000226 	beq	r16,zero,13048 <putc+0x2c>
   13040:	80800e17 	ldw	r2,56(r16)
   13044:	10001a26 	beq	r2,zero,130b0 <putc+0x94>
   13048:	28800217 	ldw	r2,8(r5)
   1304c:	10bfffc4 	addi	r2,r2,-1
   13050:	28800215 	stw	r2,8(r5)
   13054:	10000b16 	blt	r2,zero,13084 <putc+0x68>
   13058:	28800017 	ldw	r2,0(r5)
   1305c:	14400005 	stb	r17,0(r2)
   13060:	28800017 	ldw	r2,0(r5)
   13064:	10c00044 	addi	r3,r2,1
   13068:	28c00015 	stw	r3,0(r5)
   1306c:	10800003 	ldbu	r2,0(r2)
   13070:	dfc00317 	ldw	ra,12(sp)
   13074:	dc400217 	ldw	r17,8(sp)
   13078:	dc000117 	ldw	r16,4(sp)
   1307c:	dec00404 	addi	sp,sp,16
   13080:	f800283a 	ret
   13084:	28c00617 	ldw	r3,24(r5)
   13088:	10c00e16 	blt	r2,r3,130c4 <putc+0xa8>
   1308c:	28800017 	ldw	r2,0(r5)
   13090:	01000284 	movi	r4,10
   13094:	14400005 	stb	r17,0(r2)
   13098:	28800017 	ldw	r2,0(r5)
   1309c:	10c00003 	ldbu	r3,0(r2)
   130a0:	193ff01e 	bne	r3,r4,13064 <_gp+0xffff39f4>
   130a4:	280d883a 	mov	r6,r5
   130a8:	180b883a 	mov	r5,r3
   130ac:	00000706 	br	130cc <putc+0xb0>
   130b0:	8009883a 	mov	r4,r16
   130b4:	d9400015 	stw	r5,0(sp)
   130b8:	0013cc80 	call	13cc8 <__sinit>
   130bc:	d9400017 	ldw	r5,0(sp)
   130c0:	003fe106 	br	13048 <_gp+0xffff39d8>
   130c4:	280d883a 	mov	r6,r5
   130c8:	880b883a 	mov	r5,r17
   130cc:	8009883a 	mov	r4,r16
   130d0:	dfc00317 	ldw	ra,12(sp)
   130d4:	dc400217 	ldw	r17,8(sp)
   130d8:	dc000117 	ldw	r16,4(sp)
   130dc:	dec00404 	addi	sp,sp,16
   130e0:	001317c1 	jmpi	1317c <__swbuf_r>

000130e4 <strlen>:
   130e4:	208000cc 	andi	r2,r4,3
   130e8:	10002026 	beq	r2,zero,1316c <strlen+0x88>
   130ec:	20800007 	ldb	r2,0(r4)
   130f0:	10002026 	beq	r2,zero,13174 <strlen+0x90>
   130f4:	2005883a 	mov	r2,r4
   130f8:	00000206 	br	13104 <strlen+0x20>
   130fc:	10c00007 	ldb	r3,0(r2)
   13100:	18001826 	beq	r3,zero,13164 <strlen+0x80>
   13104:	10800044 	addi	r2,r2,1
   13108:	10c000cc 	andi	r3,r2,3
   1310c:	183ffb1e 	bne	r3,zero,130fc <_gp+0xffff3a8c>
   13110:	10c00017 	ldw	r3,0(r2)
   13114:	01ffbff4 	movhi	r7,65279
   13118:	39ffbfc4 	addi	r7,r7,-257
   1311c:	00ca303a 	nor	r5,zero,r3
   13120:	01a02074 	movhi	r6,32897
   13124:	19c7883a 	add	r3,r3,r7
   13128:	31a02004 	addi	r6,r6,-32640
   1312c:	1946703a 	and	r3,r3,r5
   13130:	1986703a 	and	r3,r3,r6
   13134:	1800091e 	bne	r3,zero,1315c <strlen+0x78>
   13138:	10800104 	addi	r2,r2,4
   1313c:	10c00017 	ldw	r3,0(r2)
   13140:	19cb883a 	add	r5,r3,r7
   13144:	00c6303a 	nor	r3,zero,r3
   13148:	28c6703a 	and	r3,r5,r3
   1314c:	1986703a 	and	r3,r3,r6
   13150:	183ff926 	beq	r3,zero,13138 <_gp+0xffff3ac8>
   13154:	00000106 	br	1315c <strlen+0x78>
   13158:	10800044 	addi	r2,r2,1
   1315c:	10c00007 	ldb	r3,0(r2)
   13160:	183ffd1e 	bne	r3,zero,13158 <_gp+0xffff3ae8>
   13164:	1105c83a 	sub	r2,r2,r4
   13168:	f800283a 	ret
   1316c:	2005883a 	mov	r2,r4
   13170:	003fe706 	br	13110 <_gp+0xffff3aa0>
   13174:	0005883a 	mov	r2,zero
   13178:	f800283a 	ret

0001317c <__swbuf_r>:
   1317c:	defffb04 	addi	sp,sp,-20
   13180:	dcc00315 	stw	r19,12(sp)
   13184:	dc800215 	stw	r18,8(sp)
   13188:	dc000015 	stw	r16,0(sp)
   1318c:	dfc00415 	stw	ra,16(sp)
   13190:	dc400115 	stw	r17,4(sp)
   13194:	2025883a 	mov	r18,r4
   13198:	2827883a 	mov	r19,r5
   1319c:	3021883a 	mov	r16,r6
   131a0:	20000226 	beq	r4,zero,131ac <__swbuf_r+0x30>
   131a4:	20800e17 	ldw	r2,56(r4)
   131a8:	10004226 	beq	r2,zero,132b4 <__swbuf_r+0x138>
   131ac:	80800617 	ldw	r2,24(r16)
   131b0:	8100030b 	ldhu	r4,12(r16)
   131b4:	80800215 	stw	r2,8(r16)
   131b8:	2080020c 	andi	r2,r4,8
   131bc:	10003626 	beq	r2,zero,13298 <__swbuf_r+0x11c>
   131c0:	80c00417 	ldw	r3,16(r16)
   131c4:	18003426 	beq	r3,zero,13298 <__swbuf_r+0x11c>
   131c8:	2088000c 	andi	r2,r4,8192
   131cc:	9c403fcc 	andi	r17,r19,255
   131d0:	10001a26 	beq	r2,zero,1323c <__swbuf_r+0xc0>
   131d4:	80800017 	ldw	r2,0(r16)
   131d8:	81000517 	ldw	r4,20(r16)
   131dc:	10c7c83a 	sub	r3,r2,r3
   131e0:	1900200e 	bge	r3,r4,13264 <__swbuf_r+0xe8>
   131e4:	18c00044 	addi	r3,r3,1
   131e8:	81000217 	ldw	r4,8(r16)
   131ec:	11400044 	addi	r5,r2,1
   131f0:	81400015 	stw	r5,0(r16)
   131f4:	213fffc4 	addi	r4,r4,-1
   131f8:	81000215 	stw	r4,8(r16)
   131fc:	14c00005 	stb	r19,0(r2)
   13200:	80800517 	ldw	r2,20(r16)
   13204:	10c01e26 	beq	r2,r3,13280 <__swbuf_r+0x104>
   13208:	8080030b 	ldhu	r2,12(r16)
   1320c:	1080004c 	andi	r2,r2,1
   13210:	10000226 	beq	r2,zero,1321c <__swbuf_r+0xa0>
   13214:	00800284 	movi	r2,10
   13218:	88801926 	beq	r17,r2,13280 <__swbuf_r+0x104>
   1321c:	8805883a 	mov	r2,r17
   13220:	dfc00417 	ldw	ra,16(sp)
   13224:	dcc00317 	ldw	r19,12(sp)
   13228:	dc800217 	ldw	r18,8(sp)
   1322c:	dc400117 	ldw	r17,4(sp)
   13230:	dc000017 	ldw	r16,0(sp)
   13234:	dec00504 	addi	sp,sp,20
   13238:	f800283a 	ret
   1323c:	81401917 	ldw	r5,100(r16)
   13240:	00b7ffc4 	movi	r2,-8193
   13244:	21080014 	ori	r4,r4,8192
   13248:	2884703a 	and	r2,r5,r2
   1324c:	80801915 	stw	r2,100(r16)
   13250:	80800017 	ldw	r2,0(r16)
   13254:	8100030d 	sth	r4,12(r16)
   13258:	81000517 	ldw	r4,20(r16)
   1325c:	10c7c83a 	sub	r3,r2,r3
   13260:	193fe016 	blt	r3,r4,131e4 <_gp+0xffff3b74>
   13264:	800b883a 	mov	r5,r16
   13268:	9009883a 	mov	r4,r18
   1326c:	00138dc0 	call	138dc <_fflush_r>
   13270:	1000071e 	bne	r2,zero,13290 <__swbuf_r+0x114>
   13274:	80800017 	ldw	r2,0(r16)
   13278:	00c00044 	movi	r3,1
   1327c:	003fda06 	br	131e8 <_gp+0xffff3b78>
   13280:	800b883a 	mov	r5,r16
   13284:	9009883a 	mov	r4,r18
   13288:	00138dc0 	call	138dc <_fflush_r>
   1328c:	103fe326 	beq	r2,zero,1321c <_gp+0xffff3bac>
   13290:	00bfffc4 	movi	r2,-1
   13294:	003fe206 	br	13220 <_gp+0xffff3bb0>
   13298:	800b883a 	mov	r5,r16
   1329c:	9009883a 	mov	r4,r18
   132a0:	00132d40 	call	132d4 <__swsetup_r>
   132a4:	103ffa1e 	bne	r2,zero,13290 <_gp+0xffff3c20>
   132a8:	8100030b 	ldhu	r4,12(r16)
   132ac:	80c00417 	ldw	r3,16(r16)
   132b0:	003fc506 	br	131c8 <_gp+0xffff3b58>
   132b4:	0013cc80 	call	13cc8 <__sinit>
   132b8:	003fbc06 	br	131ac <_gp+0xffff3b3c>

000132bc <__swbuf>:
   132bc:	00800074 	movhi	r2,1
   132c0:	109da604 	addi	r2,r2,30360
   132c4:	280d883a 	mov	r6,r5
   132c8:	200b883a 	mov	r5,r4
   132cc:	11000017 	ldw	r4,0(r2)
   132d0:	001317c1 	jmpi	1317c <__swbuf_r>

000132d4 <__swsetup_r>:
   132d4:	00800074 	movhi	r2,1
   132d8:	defffd04 	addi	sp,sp,-12
   132dc:	109da604 	addi	r2,r2,30360
   132e0:	dc400115 	stw	r17,4(sp)
   132e4:	2023883a 	mov	r17,r4
   132e8:	11000017 	ldw	r4,0(r2)
   132ec:	dc000015 	stw	r16,0(sp)
   132f0:	dfc00215 	stw	ra,8(sp)
   132f4:	2821883a 	mov	r16,r5
   132f8:	20000226 	beq	r4,zero,13304 <__swsetup_r+0x30>
   132fc:	20800e17 	ldw	r2,56(r4)
   13300:	10003126 	beq	r2,zero,133c8 <__swsetup_r+0xf4>
   13304:	8080030b 	ldhu	r2,12(r16)
   13308:	10c0020c 	andi	r3,r2,8
   1330c:	1009883a 	mov	r4,r2
   13310:	18000f26 	beq	r3,zero,13350 <__swsetup_r+0x7c>
   13314:	80c00417 	ldw	r3,16(r16)
   13318:	18001526 	beq	r3,zero,13370 <__swsetup_r+0x9c>
   1331c:	1100004c 	andi	r4,r2,1
   13320:	20001c1e 	bne	r4,zero,13394 <__swsetup_r+0xc0>
   13324:	1080008c 	andi	r2,r2,2
   13328:	1000291e 	bne	r2,zero,133d0 <__swsetup_r+0xfc>
   1332c:	80800517 	ldw	r2,20(r16)
   13330:	80800215 	stw	r2,8(r16)
   13334:	18001c26 	beq	r3,zero,133a8 <__swsetup_r+0xd4>
   13338:	0005883a 	mov	r2,zero
   1333c:	dfc00217 	ldw	ra,8(sp)
   13340:	dc400117 	ldw	r17,4(sp)
   13344:	dc000017 	ldw	r16,0(sp)
   13348:	dec00304 	addi	sp,sp,12
   1334c:	f800283a 	ret
   13350:	2080040c 	andi	r2,r4,16
   13354:	10002e26 	beq	r2,zero,13410 <__swsetup_r+0x13c>
   13358:	2080010c 	andi	r2,r4,4
   1335c:	10001e1e 	bne	r2,zero,133d8 <__swsetup_r+0x104>
   13360:	80c00417 	ldw	r3,16(r16)
   13364:	20800214 	ori	r2,r4,8
   13368:	8080030d 	sth	r2,12(r16)
   1336c:	183feb1e 	bne	r3,zero,1331c <_gp+0xffff3cac>
   13370:	1100a00c 	andi	r4,r2,640
   13374:	01408004 	movi	r5,512
   13378:	217fe826 	beq	r4,r5,1331c <_gp+0xffff3cac>
   1337c:	800b883a 	mov	r5,r16
   13380:	8809883a 	mov	r4,r17
   13384:	00142d40 	call	142d4 <__smakebuf_r>
   13388:	8080030b 	ldhu	r2,12(r16)
   1338c:	80c00417 	ldw	r3,16(r16)
   13390:	003fe206 	br	1331c <_gp+0xffff3cac>
   13394:	80800517 	ldw	r2,20(r16)
   13398:	80000215 	stw	zero,8(r16)
   1339c:	0085c83a 	sub	r2,zero,r2
   133a0:	80800615 	stw	r2,24(r16)
   133a4:	183fe41e 	bne	r3,zero,13338 <_gp+0xffff3cc8>
   133a8:	80c0030b 	ldhu	r3,12(r16)
   133ac:	0005883a 	mov	r2,zero
   133b0:	1900200c 	andi	r4,r3,128
   133b4:	203fe126 	beq	r4,zero,1333c <_gp+0xffff3ccc>
   133b8:	18c01014 	ori	r3,r3,64
   133bc:	80c0030d 	sth	r3,12(r16)
   133c0:	00bfffc4 	movi	r2,-1
   133c4:	003fdd06 	br	1333c <_gp+0xffff3ccc>
   133c8:	0013cc80 	call	13cc8 <__sinit>
   133cc:	003fcd06 	br	13304 <_gp+0xffff3c94>
   133d0:	0005883a 	mov	r2,zero
   133d4:	003fd606 	br	13330 <_gp+0xffff3cc0>
   133d8:	81400c17 	ldw	r5,48(r16)
   133dc:	28000626 	beq	r5,zero,133f8 <__swsetup_r+0x124>
   133e0:	80801004 	addi	r2,r16,64
   133e4:	28800326 	beq	r5,r2,133f4 <__swsetup_r+0x120>
   133e8:	8809883a 	mov	r4,r17
   133ec:	0013e3c0 	call	13e3c <_free_r>
   133f0:	8100030b 	ldhu	r4,12(r16)
   133f4:	80000c15 	stw	zero,48(r16)
   133f8:	80c00417 	ldw	r3,16(r16)
   133fc:	00bff6c4 	movi	r2,-37
   13400:	1108703a 	and	r4,r2,r4
   13404:	80000115 	stw	zero,4(r16)
   13408:	80c00015 	stw	r3,0(r16)
   1340c:	003fd506 	br	13364 <_gp+0xffff3cf4>
   13410:	00800244 	movi	r2,9
   13414:	88800015 	stw	r2,0(r17)
   13418:	20801014 	ori	r2,r4,64
   1341c:	8080030d 	sth	r2,12(r16)
   13420:	00bfffc4 	movi	r2,-1
   13424:	003fc506 	br	1333c <_gp+0xffff3ccc>

00013428 <__register_exitproc>:
   13428:	defffa04 	addi	sp,sp,-24
   1342c:	dc000315 	stw	r16,12(sp)
   13430:	04000074 	movhi	r16,1
   13434:	841da504 	addi	r16,r16,30356
   13438:	80c00017 	ldw	r3,0(r16)
   1343c:	dc400415 	stw	r17,16(sp)
   13440:	dfc00515 	stw	ra,20(sp)
   13444:	18805217 	ldw	r2,328(r3)
   13448:	2023883a 	mov	r17,r4
   1344c:	10003726 	beq	r2,zero,1352c <__register_exitproc+0x104>
   13450:	10c00117 	ldw	r3,4(r2)
   13454:	010007c4 	movi	r4,31
   13458:	20c00e16 	blt	r4,r3,13494 <__register_exitproc+0x6c>
   1345c:	1a000044 	addi	r8,r3,1
   13460:	8800221e 	bne	r17,zero,134ec <__register_exitproc+0xc4>
   13464:	18c00084 	addi	r3,r3,2
   13468:	18c7883a 	add	r3,r3,r3
   1346c:	18c7883a 	add	r3,r3,r3
   13470:	12000115 	stw	r8,4(r2)
   13474:	10c7883a 	add	r3,r2,r3
   13478:	19400015 	stw	r5,0(r3)
   1347c:	0005883a 	mov	r2,zero
   13480:	dfc00517 	ldw	ra,20(sp)
   13484:	dc400417 	ldw	r17,16(sp)
   13488:	dc000317 	ldw	r16,12(sp)
   1348c:	dec00604 	addi	sp,sp,24
   13490:	f800283a 	ret
   13494:	00800034 	movhi	r2,0
   13498:	10800004 	addi	r2,r2,0
   1349c:	10002626 	beq	r2,zero,13538 <__register_exitproc+0x110>
   134a0:	01006404 	movi	r4,400
   134a4:	d9400015 	stw	r5,0(sp)
   134a8:	d9800115 	stw	r6,4(sp)
   134ac:	d9c00215 	stw	r7,8(sp)
   134b0:	00000000 	call	0 <__alt_mem_memoria-0x10000>
   134b4:	d9400017 	ldw	r5,0(sp)
   134b8:	d9800117 	ldw	r6,4(sp)
   134bc:	d9c00217 	ldw	r7,8(sp)
   134c0:	10001d26 	beq	r2,zero,13538 <__register_exitproc+0x110>
   134c4:	81000017 	ldw	r4,0(r16)
   134c8:	10000115 	stw	zero,4(r2)
   134cc:	02000044 	movi	r8,1
   134d0:	22405217 	ldw	r9,328(r4)
   134d4:	0007883a 	mov	r3,zero
   134d8:	12400015 	stw	r9,0(r2)
   134dc:	20805215 	stw	r2,328(r4)
   134e0:	10006215 	stw	zero,392(r2)
   134e4:	10006315 	stw	zero,396(r2)
   134e8:	883fde26 	beq	r17,zero,13464 <_gp+0xffff3df4>
   134ec:	18c9883a 	add	r4,r3,r3
   134f0:	2109883a 	add	r4,r4,r4
   134f4:	1109883a 	add	r4,r2,r4
   134f8:	21802215 	stw	r6,136(r4)
   134fc:	01800044 	movi	r6,1
   13500:	12406217 	ldw	r9,392(r2)
   13504:	30cc983a 	sll	r6,r6,r3
   13508:	4992b03a 	or	r9,r9,r6
   1350c:	12406215 	stw	r9,392(r2)
   13510:	21c04215 	stw	r7,264(r4)
   13514:	01000084 	movi	r4,2
   13518:	893fd21e 	bne	r17,r4,13464 <_gp+0xffff3df4>
   1351c:	11006317 	ldw	r4,396(r2)
   13520:	218cb03a 	or	r6,r4,r6
   13524:	11806315 	stw	r6,396(r2)
   13528:	003fce06 	br	13464 <_gp+0xffff3df4>
   1352c:	18805304 	addi	r2,r3,332
   13530:	18805215 	stw	r2,328(r3)
   13534:	003fc606 	br	13450 <_gp+0xffff3de0>
   13538:	00bfffc4 	movi	r2,-1
   1353c:	003fd006 	br	13480 <_gp+0xffff3e10>

00013540 <__call_exitprocs>:
   13540:	defff504 	addi	sp,sp,-44
   13544:	df000915 	stw	fp,36(sp)
   13548:	dd400615 	stw	r21,24(sp)
   1354c:	dc800315 	stw	r18,12(sp)
   13550:	dfc00a15 	stw	ra,40(sp)
   13554:	ddc00815 	stw	r23,32(sp)
   13558:	dd800715 	stw	r22,28(sp)
   1355c:	dd000515 	stw	r20,20(sp)
   13560:	dcc00415 	stw	r19,16(sp)
   13564:	dc400215 	stw	r17,8(sp)
   13568:	dc000115 	stw	r16,4(sp)
   1356c:	d9000015 	stw	r4,0(sp)
   13570:	2839883a 	mov	fp,r5
   13574:	04800044 	movi	r18,1
   13578:	057fffc4 	movi	r21,-1
   1357c:	00800074 	movhi	r2,1
   13580:	109da504 	addi	r2,r2,30356
   13584:	12000017 	ldw	r8,0(r2)
   13588:	45005217 	ldw	r20,328(r8)
   1358c:	44c05204 	addi	r19,r8,328
   13590:	a0001c26 	beq	r20,zero,13604 <__call_exitprocs+0xc4>
   13594:	a0800117 	ldw	r2,4(r20)
   13598:	15ffffc4 	addi	r23,r2,-1
   1359c:	b8000d16 	blt	r23,zero,135d4 <__call_exitprocs+0x94>
   135a0:	14000044 	addi	r16,r2,1
   135a4:	8421883a 	add	r16,r16,r16
   135a8:	8421883a 	add	r16,r16,r16
   135ac:	84402004 	addi	r17,r16,128
   135b0:	a463883a 	add	r17,r20,r17
   135b4:	a421883a 	add	r16,r20,r16
   135b8:	e0001e26 	beq	fp,zero,13634 <__call_exitprocs+0xf4>
   135bc:	80804017 	ldw	r2,256(r16)
   135c0:	e0801c26 	beq	fp,r2,13634 <__call_exitprocs+0xf4>
   135c4:	bdffffc4 	addi	r23,r23,-1
   135c8:	843fff04 	addi	r16,r16,-4
   135cc:	8c7fff04 	addi	r17,r17,-4
   135d0:	bd7ff91e 	bne	r23,r21,135b8 <_gp+0xffff3f48>
   135d4:	00800034 	movhi	r2,0
   135d8:	10800004 	addi	r2,r2,0
   135dc:	10000926 	beq	r2,zero,13604 <__call_exitprocs+0xc4>
   135e0:	a0800117 	ldw	r2,4(r20)
   135e4:	1000301e 	bne	r2,zero,136a8 <__call_exitprocs+0x168>
   135e8:	a0800017 	ldw	r2,0(r20)
   135ec:	10003226 	beq	r2,zero,136b8 <__call_exitprocs+0x178>
   135f0:	a009883a 	mov	r4,r20
   135f4:	98800015 	stw	r2,0(r19)
   135f8:	00000000 	call	0 <__alt_mem_memoria-0x10000>
   135fc:	9d000017 	ldw	r20,0(r19)
   13600:	a03fe41e 	bne	r20,zero,13594 <_gp+0xffff3f24>
   13604:	dfc00a17 	ldw	ra,40(sp)
   13608:	df000917 	ldw	fp,36(sp)
   1360c:	ddc00817 	ldw	r23,32(sp)
   13610:	dd800717 	ldw	r22,28(sp)
   13614:	dd400617 	ldw	r21,24(sp)
   13618:	dd000517 	ldw	r20,20(sp)
   1361c:	dcc00417 	ldw	r19,16(sp)
   13620:	dc800317 	ldw	r18,12(sp)
   13624:	dc400217 	ldw	r17,8(sp)
   13628:	dc000117 	ldw	r16,4(sp)
   1362c:	dec00b04 	addi	sp,sp,44
   13630:	f800283a 	ret
   13634:	a0800117 	ldw	r2,4(r20)
   13638:	80c00017 	ldw	r3,0(r16)
   1363c:	10bfffc4 	addi	r2,r2,-1
   13640:	15c01426 	beq	r2,r23,13694 <__call_exitprocs+0x154>
   13644:	80000015 	stw	zero,0(r16)
   13648:	183fde26 	beq	r3,zero,135c4 <_gp+0xffff3f54>
   1364c:	95c8983a 	sll	r4,r18,r23
   13650:	a0806217 	ldw	r2,392(r20)
   13654:	a5800117 	ldw	r22,4(r20)
   13658:	2084703a 	and	r2,r4,r2
   1365c:	10000b26 	beq	r2,zero,1368c <__call_exitprocs+0x14c>
   13660:	a0806317 	ldw	r2,396(r20)
   13664:	2088703a 	and	r4,r4,r2
   13668:	20000c1e 	bne	r4,zero,1369c <__call_exitprocs+0x15c>
   1366c:	89400017 	ldw	r5,0(r17)
   13670:	d9000017 	ldw	r4,0(sp)
   13674:	183ee83a 	callr	r3
   13678:	a0800117 	ldw	r2,4(r20)
   1367c:	15bfbf1e 	bne	r2,r22,1357c <_gp+0xffff3f0c>
   13680:	98800017 	ldw	r2,0(r19)
   13684:	153fcf26 	beq	r2,r20,135c4 <_gp+0xffff3f54>
   13688:	003fbc06 	br	1357c <_gp+0xffff3f0c>
   1368c:	183ee83a 	callr	r3
   13690:	003ff906 	br	13678 <_gp+0xffff4008>
   13694:	a5c00115 	stw	r23,4(r20)
   13698:	003feb06 	br	13648 <_gp+0xffff3fd8>
   1369c:	89000017 	ldw	r4,0(r17)
   136a0:	183ee83a 	callr	r3
   136a4:	003ff406 	br	13678 <_gp+0xffff4008>
   136a8:	a0800017 	ldw	r2,0(r20)
   136ac:	a027883a 	mov	r19,r20
   136b0:	1029883a 	mov	r20,r2
   136b4:	003fb606 	br	13590 <_gp+0xffff3f20>
   136b8:	0005883a 	mov	r2,zero
   136bc:	003ffb06 	br	136ac <_gp+0xffff403c>

000136c0 <__sflush_r>:
   136c0:	2880030b 	ldhu	r2,12(r5)
   136c4:	defffb04 	addi	sp,sp,-20
   136c8:	dcc00315 	stw	r19,12(sp)
   136cc:	dc400115 	stw	r17,4(sp)
   136d0:	dfc00415 	stw	ra,16(sp)
   136d4:	dc800215 	stw	r18,8(sp)
   136d8:	dc000015 	stw	r16,0(sp)
   136dc:	10c0020c 	andi	r3,r2,8
   136e0:	2823883a 	mov	r17,r5
   136e4:	2027883a 	mov	r19,r4
   136e8:	1800311e 	bne	r3,zero,137b0 <__sflush_r+0xf0>
   136ec:	28c00117 	ldw	r3,4(r5)
   136f0:	10820014 	ori	r2,r2,2048
   136f4:	2880030d 	sth	r2,12(r5)
   136f8:	00c04b0e 	bge	zero,r3,13828 <__sflush_r+0x168>
   136fc:	8a000a17 	ldw	r8,40(r17)
   13700:	40002326 	beq	r8,zero,13790 <__sflush_r+0xd0>
   13704:	9c000017 	ldw	r16,0(r19)
   13708:	10c4000c 	andi	r3,r2,4096
   1370c:	98000015 	stw	zero,0(r19)
   13710:	18004826 	beq	r3,zero,13834 <__sflush_r+0x174>
   13714:	89801417 	ldw	r6,80(r17)
   13718:	10c0010c 	andi	r3,r2,4
   1371c:	18000626 	beq	r3,zero,13738 <__sflush_r+0x78>
   13720:	88c00117 	ldw	r3,4(r17)
   13724:	88800c17 	ldw	r2,48(r17)
   13728:	30cdc83a 	sub	r6,r6,r3
   1372c:	10000226 	beq	r2,zero,13738 <__sflush_r+0x78>
   13730:	88800f17 	ldw	r2,60(r17)
   13734:	308dc83a 	sub	r6,r6,r2
   13738:	89400717 	ldw	r5,28(r17)
   1373c:	000f883a 	mov	r7,zero
   13740:	9809883a 	mov	r4,r19
   13744:	403ee83a 	callr	r8
   13748:	00ffffc4 	movi	r3,-1
   1374c:	10c04426 	beq	r2,r3,13860 <__sflush_r+0x1a0>
   13750:	88c0030b 	ldhu	r3,12(r17)
   13754:	89000417 	ldw	r4,16(r17)
   13758:	88000115 	stw	zero,4(r17)
   1375c:	197dffcc 	andi	r5,r3,63487
   13760:	8940030d 	sth	r5,12(r17)
   13764:	89000015 	stw	r4,0(r17)
   13768:	18c4000c 	andi	r3,r3,4096
   1376c:	18002c1e 	bne	r3,zero,13820 <__sflush_r+0x160>
   13770:	89400c17 	ldw	r5,48(r17)
   13774:	9c000015 	stw	r16,0(r19)
   13778:	28000526 	beq	r5,zero,13790 <__sflush_r+0xd0>
   1377c:	88801004 	addi	r2,r17,64
   13780:	28800226 	beq	r5,r2,1378c <__sflush_r+0xcc>
   13784:	9809883a 	mov	r4,r19
   13788:	0013e3c0 	call	13e3c <_free_r>
   1378c:	88000c15 	stw	zero,48(r17)
   13790:	0005883a 	mov	r2,zero
   13794:	dfc00417 	ldw	ra,16(sp)
   13798:	dcc00317 	ldw	r19,12(sp)
   1379c:	dc800217 	ldw	r18,8(sp)
   137a0:	dc400117 	ldw	r17,4(sp)
   137a4:	dc000017 	ldw	r16,0(sp)
   137a8:	dec00504 	addi	sp,sp,20
   137ac:	f800283a 	ret
   137b0:	2c800417 	ldw	r18,16(r5)
   137b4:	903ff626 	beq	r18,zero,13790 <_gp+0xffff4120>
   137b8:	2c000017 	ldw	r16,0(r5)
   137bc:	108000cc 	andi	r2,r2,3
   137c0:	2c800015 	stw	r18,0(r5)
   137c4:	84a1c83a 	sub	r16,r16,r18
   137c8:	1000131e 	bne	r2,zero,13818 <__sflush_r+0x158>
   137cc:	28800517 	ldw	r2,20(r5)
   137d0:	88800215 	stw	r2,8(r17)
   137d4:	04000316 	blt	zero,r16,137e4 <__sflush_r+0x124>
   137d8:	003fed06 	br	13790 <_gp+0xffff4120>
   137dc:	90a5883a 	add	r18,r18,r2
   137e0:	043feb0e 	bge	zero,r16,13790 <_gp+0xffff4120>
   137e4:	88800917 	ldw	r2,36(r17)
   137e8:	89400717 	ldw	r5,28(r17)
   137ec:	800f883a 	mov	r7,r16
   137f0:	900d883a 	mov	r6,r18
   137f4:	9809883a 	mov	r4,r19
   137f8:	103ee83a 	callr	r2
   137fc:	80a1c83a 	sub	r16,r16,r2
   13800:	00bff616 	blt	zero,r2,137dc <_gp+0xffff416c>
   13804:	88c0030b 	ldhu	r3,12(r17)
   13808:	00bfffc4 	movi	r2,-1
   1380c:	18c01014 	ori	r3,r3,64
   13810:	88c0030d 	sth	r3,12(r17)
   13814:	003fdf06 	br	13794 <_gp+0xffff4124>
   13818:	0005883a 	mov	r2,zero
   1381c:	003fec06 	br	137d0 <_gp+0xffff4160>
   13820:	88801415 	stw	r2,80(r17)
   13824:	003fd206 	br	13770 <_gp+0xffff4100>
   13828:	28c00f17 	ldw	r3,60(r5)
   1382c:	00ffb316 	blt	zero,r3,136fc <_gp+0xffff408c>
   13830:	003fd706 	br	13790 <_gp+0xffff4120>
   13834:	89400717 	ldw	r5,28(r17)
   13838:	000d883a 	mov	r6,zero
   1383c:	01c00044 	movi	r7,1
   13840:	9809883a 	mov	r4,r19
   13844:	403ee83a 	callr	r8
   13848:	100d883a 	mov	r6,r2
   1384c:	00bfffc4 	movi	r2,-1
   13850:	30801426 	beq	r6,r2,138a4 <__sflush_r+0x1e4>
   13854:	8880030b 	ldhu	r2,12(r17)
   13858:	8a000a17 	ldw	r8,40(r17)
   1385c:	003fae06 	br	13718 <_gp+0xffff40a8>
   13860:	98c00017 	ldw	r3,0(r19)
   13864:	183fba26 	beq	r3,zero,13750 <_gp+0xffff40e0>
   13868:	01000744 	movi	r4,29
   1386c:	19000626 	beq	r3,r4,13888 <__sflush_r+0x1c8>
   13870:	01000584 	movi	r4,22
   13874:	19000426 	beq	r3,r4,13888 <__sflush_r+0x1c8>
   13878:	88c0030b 	ldhu	r3,12(r17)
   1387c:	18c01014 	ori	r3,r3,64
   13880:	88c0030d 	sth	r3,12(r17)
   13884:	003fc306 	br	13794 <_gp+0xffff4124>
   13888:	8880030b 	ldhu	r2,12(r17)
   1388c:	88c00417 	ldw	r3,16(r17)
   13890:	88000115 	stw	zero,4(r17)
   13894:	10bdffcc 	andi	r2,r2,63487
   13898:	8880030d 	sth	r2,12(r17)
   1389c:	88c00015 	stw	r3,0(r17)
   138a0:	003fb306 	br	13770 <_gp+0xffff4100>
   138a4:	98800017 	ldw	r2,0(r19)
   138a8:	103fea26 	beq	r2,zero,13854 <_gp+0xffff41e4>
   138ac:	00c00744 	movi	r3,29
   138b0:	10c00226 	beq	r2,r3,138bc <__sflush_r+0x1fc>
   138b4:	00c00584 	movi	r3,22
   138b8:	10c0031e 	bne	r2,r3,138c8 <__sflush_r+0x208>
   138bc:	9c000015 	stw	r16,0(r19)
   138c0:	0005883a 	mov	r2,zero
   138c4:	003fb306 	br	13794 <_gp+0xffff4124>
   138c8:	88c0030b 	ldhu	r3,12(r17)
   138cc:	3005883a 	mov	r2,r6
   138d0:	18c01014 	ori	r3,r3,64
   138d4:	88c0030d 	sth	r3,12(r17)
   138d8:	003fae06 	br	13794 <_gp+0xffff4124>

000138dc <_fflush_r>:
   138dc:	defffd04 	addi	sp,sp,-12
   138e0:	dc000115 	stw	r16,4(sp)
   138e4:	dfc00215 	stw	ra,8(sp)
   138e8:	2021883a 	mov	r16,r4
   138ec:	20000226 	beq	r4,zero,138f8 <_fflush_r+0x1c>
   138f0:	20800e17 	ldw	r2,56(r4)
   138f4:	10000c26 	beq	r2,zero,13928 <_fflush_r+0x4c>
   138f8:	2880030f 	ldh	r2,12(r5)
   138fc:	1000051e 	bne	r2,zero,13914 <_fflush_r+0x38>
   13900:	0005883a 	mov	r2,zero
   13904:	dfc00217 	ldw	ra,8(sp)
   13908:	dc000117 	ldw	r16,4(sp)
   1390c:	dec00304 	addi	sp,sp,12
   13910:	f800283a 	ret
   13914:	8009883a 	mov	r4,r16
   13918:	dfc00217 	ldw	ra,8(sp)
   1391c:	dc000117 	ldw	r16,4(sp)
   13920:	dec00304 	addi	sp,sp,12
   13924:	00136c01 	jmpi	136c0 <__sflush_r>
   13928:	d9400015 	stw	r5,0(sp)
   1392c:	0013cc80 	call	13cc8 <__sinit>
   13930:	d9400017 	ldw	r5,0(sp)
   13934:	003ff006 	br	138f8 <_gp+0xffff4288>

00013938 <fflush>:
   13938:	20000526 	beq	r4,zero,13950 <fflush+0x18>
   1393c:	00800074 	movhi	r2,1
   13940:	109da604 	addi	r2,r2,30360
   13944:	200b883a 	mov	r5,r4
   13948:	11000017 	ldw	r4,0(r2)
   1394c:	00138dc1 	jmpi	138dc <_fflush_r>
   13950:	00800074 	movhi	r2,1
   13954:	109da504 	addi	r2,r2,30356
   13958:	11000017 	ldw	r4,0(r2)
   1395c:	01400074 	movhi	r5,1
   13960:	294e3704 	addi	r5,r5,14556
   13964:	00142101 	jmpi	14210 <_fwalk_reent>

00013968 <__fp_unlock>:
   13968:	0005883a 	mov	r2,zero
   1396c:	f800283a 	ret

00013970 <_cleanup_r>:
   13970:	01400074 	movhi	r5,1
   13974:	29540204 	addi	r5,r5,20488
   13978:	00142101 	jmpi	14210 <_fwalk_reent>

0001397c <__sinit.part.1>:
   1397c:	defff704 	addi	sp,sp,-36
   13980:	00c00074 	movhi	r3,1
   13984:	dfc00815 	stw	ra,32(sp)
   13988:	ddc00715 	stw	r23,28(sp)
   1398c:	dd800615 	stw	r22,24(sp)
   13990:	dd400515 	stw	r21,20(sp)
   13994:	dd000415 	stw	r20,16(sp)
   13998:	dcc00315 	stw	r19,12(sp)
   1399c:	dc800215 	stw	r18,8(sp)
   139a0:	dc400115 	stw	r17,4(sp)
   139a4:	dc000015 	stw	r16,0(sp)
   139a8:	18ce5c04 	addi	r3,r3,14704
   139ac:	24000117 	ldw	r16,4(r4)
   139b0:	20c00f15 	stw	r3,60(r4)
   139b4:	2080bb04 	addi	r2,r4,748
   139b8:	00c000c4 	movi	r3,3
   139bc:	20c0b915 	stw	r3,740(r4)
   139c0:	2080ba15 	stw	r2,744(r4)
   139c4:	2000b815 	stw	zero,736(r4)
   139c8:	05c00204 	movi	r23,8
   139cc:	00800104 	movi	r2,4
   139d0:	2025883a 	mov	r18,r4
   139d4:	b80d883a 	mov	r6,r23
   139d8:	81001704 	addi	r4,r16,92
   139dc:	000b883a 	mov	r5,zero
   139e0:	80000015 	stw	zero,0(r16)
   139e4:	80000115 	stw	zero,4(r16)
   139e8:	80000215 	stw	zero,8(r16)
   139ec:	8080030d 	sth	r2,12(r16)
   139f0:	80001915 	stw	zero,100(r16)
   139f4:	8000038d 	sth	zero,14(r16)
   139f8:	80000415 	stw	zero,16(r16)
   139fc:	80000515 	stw	zero,20(r16)
   13a00:	80000615 	stw	zero,24(r16)
   13a04:	0014c9c0 	call	14c9c <memset>
   13a08:	05800074 	movhi	r22,1
   13a0c:	94400217 	ldw	r17,8(r18)
   13a10:	05400074 	movhi	r21,1
   13a14:	05000074 	movhi	r20,1
   13a18:	04c00074 	movhi	r19,1
   13a1c:	b5938604 	addi	r22,r22,19992
   13a20:	ad539d04 	addi	r21,r21,20084
   13a24:	a513bc04 	addi	r20,r20,20208
   13a28:	9cd3d304 	addi	r19,r19,20300
   13a2c:	85800815 	stw	r22,32(r16)
   13a30:	85400915 	stw	r21,36(r16)
   13a34:	85000a15 	stw	r20,40(r16)
   13a38:	84c00b15 	stw	r19,44(r16)
   13a3c:	84000715 	stw	r16,28(r16)
   13a40:	00800284 	movi	r2,10
   13a44:	8880030d 	sth	r2,12(r17)
   13a48:	00800044 	movi	r2,1
   13a4c:	b80d883a 	mov	r6,r23
   13a50:	89001704 	addi	r4,r17,92
   13a54:	000b883a 	mov	r5,zero
   13a58:	88000015 	stw	zero,0(r17)
   13a5c:	88000115 	stw	zero,4(r17)
   13a60:	88000215 	stw	zero,8(r17)
   13a64:	88001915 	stw	zero,100(r17)
   13a68:	8880038d 	sth	r2,14(r17)
   13a6c:	88000415 	stw	zero,16(r17)
   13a70:	88000515 	stw	zero,20(r17)
   13a74:	88000615 	stw	zero,24(r17)
   13a78:	0014c9c0 	call	14c9c <memset>
   13a7c:	94000317 	ldw	r16,12(r18)
   13a80:	00800484 	movi	r2,18
   13a84:	8c400715 	stw	r17,28(r17)
   13a88:	8d800815 	stw	r22,32(r17)
   13a8c:	8d400915 	stw	r21,36(r17)
   13a90:	8d000a15 	stw	r20,40(r17)
   13a94:	8cc00b15 	stw	r19,44(r17)
   13a98:	8080030d 	sth	r2,12(r16)
   13a9c:	00800084 	movi	r2,2
   13aa0:	80000015 	stw	zero,0(r16)
   13aa4:	80000115 	stw	zero,4(r16)
   13aa8:	80000215 	stw	zero,8(r16)
   13aac:	80001915 	stw	zero,100(r16)
   13ab0:	8080038d 	sth	r2,14(r16)
   13ab4:	80000415 	stw	zero,16(r16)
   13ab8:	80000515 	stw	zero,20(r16)
   13abc:	80000615 	stw	zero,24(r16)
   13ac0:	b80d883a 	mov	r6,r23
   13ac4:	000b883a 	mov	r5,zero
   13ac8:	81001704 	addi	r4,r16,92
   13acc:	0014c9c0 	call	14c9c <memset>
   13ad0:	00800044 	movi	r2,1
   13ad4:	84000715 	stw	r16,28(r16)
   13ad8:	85800815 	stw	r22,32(r16)
   13adc:	85400915 	stw	r21,36(r16)
   13ae0:	85000a15 	stw	r20,40(r16)
   13ae4:	84c00b15 	stw	r19,44(r16)
   13ae8:	90800e15 	stw	r2,56(r18)
   13aec:	dfc00817 	ldw	ra,32(sp)
   13af0:	ddc00717 	ldw	r23,28(sp)
   13af4:	dd800617 	ldw	r22,24(sp)
   13af8:	dd400517 	ldw	r21,20(sp)
   13afc:	dd000417 	ldw	r20,16(sp)
   13b00:	dcc00317 	ldw	r19,12(sp)
   13b04:	dc800217 	ldw	r18,8(sp)
   13b08:	dc400117 	ldw	r17,4(sp)
   13b0c:	dc000017 	ldw	r16,0(sp)
   13b10:	dec00904 	addi	sp,sp,36
   13b14:	f800283a 	ret

00013b18 <__fp_lock>:
   13b18:	0005883a 	mov	r2,zero
   13b1c:	f800283a 	ret

00013b20 <__sfmoreglue>:
   13b20:	defffc04 	addi	sp,sp,-16
   13b24:	dc800215 	stw	r18,8(sp)
   13b28:	2825883a 	mov	r18,r5
   13b2c:	dc000015 	stw	r16,0(sp)
   13b30:	01401a04 	movi	r5,104
   13b34:	2021883a 	mov	r16,r4
   13b38:	913fffc4 	addi	r4,r18,-1
   13b3c:	dfc00315 	stw	ra,12(sp)
   13b40:	dc400115 	stw	r17,4(sp)
   13b44:	00154300 	call	15430 <__mulsi3>
   13b48:	8009883a 	mov	r4,r16
   13b4c:	11401d04 	addi	r5,r2,116
   13b50:	1023883a 	mov	r17,r2
   13b54:	00144900 	call	14490 <_malloc_r>
   13b58:	1021883a 	mov	r16,r2
   13b5c:	10000726 	beq	r2,zero,13b7c <__sfmoreglue+0x5c>
   13b60:	11000304 	addi	r4,r2,12
   13b64:	10000015 	stw	zero,0(r2)
   13b68:	14800115 	stw	r18,4(r2)
   13b6c:	11000215 	stw	r4,8(r2)
   13b70:	89801a04 	addi	r6,r17,104
   13b74:	000b883a 	mov	r5,zero
   13b78:	0014c9c0 	call	14c9c <memset>
   13b7c:	8005883a 	mov	r2,r16
   13b80:	dfc00317 	ldw	ra,12(sp)
   13b84:	dc800217 	ldw	r18,8(sp)
   13b88:	dc400117 	ldw	r17,4(sp)
   13b8c:	dc000017 	ldw	r16,0(sp)
   13b90:	dec00404 	addi	sp,sp,16
   13b94:	f800283a 	ret

00013b98 <__sfp>:
   13b98:	defffb04 	addi	sp,sp,-20
   13b9c:	dc000015 	stw	r16,0(sp)
   13ba0:	04000074 	movhi	r16,1
   13ba4:	841da504 	addi	r16,r16,30356
   13ba8:	dcc00315 	stw	r19,12(sp)
   13bac:	2027883a 	mov	r19,r4
   13bb0:	81000017 	ldw	r4,0(r16)
   13bb4:	dfc00415 	stw	ra,16(sp)
   13bb8:	dc800215 	stw	r18,8(sp)
   13bbc:	20800e17 	ldw	r2,56(r4)
   13bc0:	dc400115 	stw	r17,4(sp)
   13bc4:	1000021e 	bne	r2,zero,13bd0 <__sfp+0x38>
   13bc8:	001397c0 	call	1397c <__sinit.part.1>
   13bcc:	81000017 	ldw	r4,0(r16)
   13bd0:	2480b804 	addi	r18,r4,736
   13bd4:	047fffc4 	movi	r17,-1
   13bd8:	91000117 	ldw	r4,4(r18)
   13bdc:	94000217 	ldw	r16,8(r18)
   13be0:	213fffc4 	addi	r4,r4,-1
   13be4:	20000a16 	blt	r4,zero,13c10 <__sfp+0x78>
   13be8:	8080030f 	ldh	r2,12(r16)
   13bec:	10000c26 	beq	r2,zero,13c20 <__sfp+0x88>
   13bf0:	80c01d04 	addi	r3,r16,116
   13bf4:	00000206 	br	13c00 <__sfp+0x68>
   13bf8:	18bfe60f 	ldh	r2,-104(r3)
   13bfc:	10000826 	beq	r2,zero,13c20 <__sfp+0x88>
   13c00:	213fffc4 	addi	r4,r4,-1
   13c04:	1c3ffd04 	addi	r16,r3,-12
   13c08:	18c01a04 	addi	r3,r3,104
   13c0c:	247ffa1e 	bne	r4,r17,13bf8 <_gp+0xffff4588>
   13c10:	90800017 	ldw	r2,0(r18)
   13c14:	10001d26 	beq	r2,zero,13c8c <__sfp+0xf4>
   13c18:	1025883a 	mov	r18,r2
   13c1c:	003fee06 	br	13bd8 <_gp+0xffff4568>
   13c20:	00bfffc4 	movi	r2,-1
   13c24:	8080038d 	sth	r2,14(r16)
   13c28:	00800044 	movi	r2,1
   13c2c:	8080030d 	sth	r2,12(r16)
   13c30:	80001915 	stw	zero,100(r16)
   13c34:	80000015 	stw	zero,0(r16)
   13c38:	80000215 	stw	zero,8(r16)
   13c3c:	80000115 	stw	zero,4(r16)
   13c40:	80000415 	stw	zero,16(r16)
   13c44:	80000515 	stw	zero,20(r16)
   13c48:	80000615 	stw	zero,24(r16)
   13c4c:	01800204 	movi	r6,8
   13c50:	000b883a 	mov	r5,zero
   13c54:	81001704 	addi	r4,r16,92
   13c58:	0014c9c0 	call	14c9c <memset>
   13c5c:	8005883a 	mov	r2,r16
   13c60:	80000c15 	stw	zero,48(r16)
   13c64:	80000d15 	stw	zero,52(r16)
   13c68:	80001115 	stw	zero,68(r16)
   13c6c:	80001215 	stw	zero,72(r16)
   13c70:	dfc00417 	ldw	ra,16(sp)
   13c74:	dcc00317 	ldw	r19,12(sp)
   13c78:	dc800217 	ldw	r18,8(sp)
   13c7c:	dc400117 	ldw	r17,4(sp)
   13c80:	dc000017 	ldw	r16,0(sp)
   13c84:	dec00504 	addi	sp,sp,20
   13c88:	f800283a 	ret
   13c8c:	01400104 	movi	r5,4
   13c90:	9809883a 	mov	r4,r19
   13c94:	0013b200 	call	13b20 <__sfmoreglue>
   13c98:	90800015 	stw	r2,0(r18)
   13c9c:	103fde1e 	bne	r2,zero,13c18 <_gp+0xffff45a8>
   13ca0:	00800304 	movi	r2,12
   13ca4:	98800015 	stw	r2,0(r19)
   13ca8:	0005883a 	mov	r2,zero
   13cac:	003ff006 	br	13c70 <_gp+0xffff4600>

00013cb0 <_cleanup>:
   13cb0:	00800074 	movhi	r2,1
   13cb4:	109da504 	addi	r2,r2,30356
   13cb8:	11000017 	ldw	r4,0(r2)
   13cbc:	01400074 	movhi	r5,1
   13cc0:	29540204 	addi	r5,r5,20488
   13cc4:	00142101 	jmpi	14210 <_fwalk_reent>

00013cc8 <__sinit>:
   13cc8:	20800e17 	ldw	r2,56(r4)
   13ccc:	10000126 	beq	r2,zero,13cd4 <__sinit+0xc>
   13cd0:	f800283a 	ret
   13cd4:	001397c1 	jmpi	1397c <__sinit.part.1>

00013cd8 <__sfp_lock_acquire>:
   13cd8:	f800283a 	ret

00013cdc <__sfp_lock_release>:
   13cdc:	f800283a 	ret

00013ce0 <__sinit_lock_acquire>:
   13ce0:	f800283a 	ret

00013ce4 <__sinit_lock_release>:
   13ce4:	f800283a 	ret

00013ce8 <__fp_lock_all>:
   13ce8:	00800074 	movhi	r2,1
   13cec:	109da604 	addi	r2,r2,30360
   13cf0:	11000017 	ldw	r4,0(r2)
   13cf4:	01400074 	movhi	r5,1
   13cf8:	294ec604 	addi	r5,r5,15128
   13cfc:	001414c1 	jmpi	1414c <_fwalk>

00013d00 <__fp_unlock_all>:
   13d00:	00800074 	movhi	r2,1
   13d04:	109da604 	addi	r2,r2,30360
   13d08:	11000017 	ldw	r4,0(r2)
   13d0c:	01400074 	movhi	r5,1
   13d10:	294e5a04 	addi	r5,r5,14696
   13d14:	001414c1 	jmpi	1414c <_fwalk>

00013d18 <_malloc_trim_r>:
   13d18:	defffb04 	addi	sp,sp,-20
   13d1c:	dcc00315 	stw	r19,12(sp)
   13d20:	04c00074 	movhi	r19,1
   13d24:	dc800215 	stw	r18,8(sp)
   13d28:	dc400115 	stw	r17,4(sp)
   13d2c:	dc000015 	stw	r16,0(sp)
   13d30:	dfc00415 	stw	ra,16(sp)
   13d34:	2821883a 	mov	r16,r5
   13d38:	9cdc9a04 	addi	r19,r19,29288
   13d3c:	2025883a 	mov	r18,r4
   13d40:	00157800 	call	15780 <__malloc_lock>
   13d44:	98800217 	ldw	r2,8(r19)
   13d48:	14400117 	ldw	r17,4(r2)
   13d4c:	00bfff04 	movi	r2,-4
   13d50:	88a2703a 	and	r17,r17,r2
   13d54:	8c21c83a 	sub	r16,r17,r16
   13d58:	8403fbc4 	addi	r16,r16,4079
   13d5c:	8020d33a 	srli	r16,r16,12
   13d60:	0083ffc4 	movi	r2,4095
   13d64:	843fffc4 	addi	r16,r16,-1
   13d68:	8020933a 	slli	r16,r16,12
   13d6c:	1400060e 	bge	r2,r16,13d88 <_malloc_trim_r+0x70>
   13d70:	000b883a 	mov	r5,zero
   13d74:	9009883a 	mov	r4,r18
   13d78:	0014dc40 	call	14dc4 <_sbrk_r>
   13d7c:	98c00217 	ldw	r3,8(r19)
   13d80:	1c47883a 	add	r3,r3,r17
   13d84:	10c00a26 	beq	r2,r3,13db0 <_malloc_trim_r+0x98>
   13d88:	9009883a 	mov	r4,r18
   13d8c:	00157a40 	call	157a4 <__malloc_unlock>
   13d90:	0005883a 	mov	r2,zero
   13d94:	dfc00417 	ldw	ra,16(sp)
   13d98:	dcc00317 	ldw	r19,12(sp)
   13d9c:	dc800217 	ldw	r18,8(sp)
   13da0:	dc400117 	ldw	r17,4(sp)
   13da4:	dc000017 	ldw	r16,0(sp)
   13da8:	dec00504 	addi	sp,sp,20
   13dac:	f800283a 	ret
   13db0:	040bc83a 	sub	r5,zero,r16
   13db4:	9009883a 	mov	r4,r18
   13db8:	0014dc40 	call	14dc4 <_sbrk_r>
   13dbc:	00ffffc4 	movi	r3,-1
   13dc0:	10c00d26 	beq	r2,r3,13df8 <_malloc_trim_r+0xe0>
   13dc4:	00c000b4 	movhi	r3,2
   13dc8:	18e48c04 	addi	r3,r3,-28112
   13dcc:	18800017 	ldw	r2,0(r3)
   13dd0:	99000217 	ldw	r4,8(r19)
   13dd4:	8c23c83a 	sub	r17,r17,r16
   13dd8:	8c400054 	ori	r17,r17,1
   13ddc:	1421c83a 	sub	r16,r2,r16
   13de0:	24400115 	stw	r17,4(r4)
   13de4:	9009883a 	mov	r4,r18
   13de8:	1c000015 	stw	r16,0(r3)
   13dec:	00157a40 	call	157a4 <__malloc_unlock>
   13df0:	00800044 	movi	r2,1
   13df4:	003fe706 	br	13d94 <_gp+0xffff4724>
   13df8:	000b883a 	mov	r5,zero
   13dfc:	9009883a 	mov	r4,r18
   13e00:	0014dc40 	call	14dc4 <_sbrk_r>
   13e04:	99000217 	ldw	r4,8(r19)
   13e08:	014003c4 	movi	r5,15
   13e0c:	1107c83a 	sub	r3,r2,r4
   13e10:	28ffdd0e 	bge	r5,r3,13d88 <_gp+0xffff4718>
   13e14:	01400074 	movhi	r5,1
   13e18:	295da704 	addi	r5,r5,30364
   13e1c:	29400017 	ldw	r5,0(r5)
   13e20:	18c00054 	ori	r3,r3,1
   13e24:	20c00115 	stw	r3,4(r4)
   13e28:	00c000b4 	movhi	r3,2
   13e2c:	1145c83a 	sub	r2,r2,r5
   13e30:	18e48c04 	addi	r3,r3,-28112
   13e34:	18800015 	stw	r2,0(r3)
   13e38:	003fd306 	br	13d88 <_gp+0xffff4718>

00013e3c <_free_r>:
   13e3c:	28004126 	beq	r5,zero,13f44 <_free_r+0x108>
   13e40:	defffd04 	addi	sp,sp,-12
   13e44:	dc400115 	stw	r17,4(sp)
   13e48:	dc000015 	stw	r16,0(sp)
   13e4c:	2023883a 	mov	r17,r4
   13e50:	2821883a 	mov	r16,r5
   13e54:	dfc00215 	stw	ra,8(sp)
   13e58:	00157800 	call	15780 <__malloc_lock>
   13e5c:	81ffff17 	ldw	r7,-4(r16)
   13e60:	00bfff84 	movi	r2,-2
   13e64:	01000074 	movhi	r4,1
   13e68:	81bffe04 	addi	r6,r16,-8
   13e6c:	3884703a 	and	r2,r7,r2
   13e70:	211c9a04 	addi	r4,r4,29288
   13e74:	308b883a 	add	r5,r6,r2
   13e78:	2a400117 	ldw	r9,4(r5)
   13e7c:	22000217 	ldw	r8,8(r4)
   13e80:	00ffff04 	movi	r3,-4
   13e84:	48c6703a 	and	r3,r9,r3
   13e88:	2a005726 	beq	r5,r8,13fe8 <_free_r+0x1ac>
   13e8c:	28c00115 	stw	r3,4(r5)
   13e90:	39c0004c 	andi	r7,r7,1
   13e94:	3800091e 	bne	r7,zero,13ebc <_free_r+0x80>
   13e98:	823ffe17 	ldw	r8,-8(r16)
   13e9c:	22400204 	addi	r9,r4,8
   13ea0:	320dc83a 	sub	r6,r6,r8
   13ea4:	31c00217 	ldw	r7,8(r6)
   13ea8:	1205883a 	add	r2,r2,r8
   13eac:	3a406526 	beq	r7,r9,14044 <_free_r+0x208>
   13eb0:	32000317 	ldw	r8,12(r6)
   13eb4:	3a000315 	stw	r8,12(r7)
   13eb8:	41c00215 	stw	r7,8(r8)
   13ebc:	28cf883a 	add	r7,r5,r3
   13ec0:	39c00117 	ldw	r7,4(r7)
   13ec4:	39c0004c 	andi	r7,r7,1
   13ec8:	38003a26 	beq	r7,zero,13fb4 <_free_r+0x178>
   13ecc:	10c00054 	ori	r3,r2,1
   13ed0:	30c00115 	stw	r3,4(r6)
   13ed4:	3087883a 	add	r3,r6,r2
   13ed8:	18800015 	stw	r2,0(r3)
   13edc:	00c07fc4 	movi	r3,511
   13ee0:	18801936 	bltu	r3,r2,13f48 <_free_r+0x10c>
   13ee4:	1004d0fa 	srli	r2,r2,3
   13ee8:	01c00044 	movi	r7,1
   13eec:	21400117 	ldw	r5,4(r4)
   13ef0:	10c00044 	addi	r3,r2,1
   13ef4:	18c7883a 	add	r3,r3,r3
   13ef8:	1005d0ba 	srai	r2,r2,2
   13efc:	18c7883a 	add	r3,r3,r3
   13f00:	18c7883a 	add	r3,r3,r3
   13f04:	1907883a 	add	r3,r3,r4
   13f08:	3884983a 	sll	r2,r7,r2
   13f0c:	19c00017 	ldw	r7,0(r3)
   13f10:	1a3ffe04 	addi	r8,r3,-8
   13f14:	1144b03a 	or	r2,r2,r5
   13f18:	32000315 	stw	r8,12(r6)
   13f1c:	31c00215 	stw	r7,8(r6)
   13f20:	20800115 	stw	r2,4(r4)
   13f24:	19800015 	stw	r6,0(r3)
   13f28:	39800315 	stw	r6,12(r7)
   13f2c:	8809883a 	mov	r4,r17
   13f30:	dfc00217 	ldw	ra,8(sp)
   13f34:	dc400117 	ldw	r17,4(sp)
   13f38:	dc000017 	ldw	r16,0(sp)
   13f3c:	dec00304 	addi	sp,sp,12
   13f40:	00157a41 	jmpi	157a4 <__malloc_unlock>
   13f44:	f800283a 	ret
   13f48:	100ad27a 	srli	r5,r2,9
   13f4c:	00c00104 	movi	r3,4
   13f50:	19404a36 	bltu	r3,r5,1407c <_free_r+0x240>
   13f54:	100ad1ba 	srli	r5,r2,6
   13f58:	28c00e44 	addi	r3,r5,57
   13f5c:	18c7883a 	add	r3,r3,r3
   13f60:	29400e04 	addi	r5,r5,56
   13f64:	18c7883a 	add	r3,r3,r3
   13f68:	18c7883a 	add	r3,r3,r3
   13f6c:	1909883a 	add	r4,r3,r4
   13f70:	20c00017 	ldw	r3,0(r4)
   13f74:	01c00074 	movhi	r7,1
   13f78:	213ffe04 	addi	r4,r4,-8
   13f7c:	39dc9a04 	addi	r7,r7,29288
   13f80:	20c04426 	beq	r4,r3,14094 <_free_r+0x258>
   13f84:	01ffff04 	movi	r7,-4
   13f88:	19400117 	ldw	r5,4(r3)
   13f8c:	29ca703a 	and	r5,r5,r7
   13f90:	1140022e 	bgeu	r2,r5,13f9c <_free_r+0x160>
   13f94:	18c00217 	ldw	r3,8(r3)
   13f98:	20fffb1e 	bne	r4,r3,13f88 <_gp+0xffff4918>
   13f9c:	19000317 	ldw	r4,12(r3)
   13fa0:	31000315 	stw	r4,12(r6)
   13fa4:	30c00215 	stw	r3,8(r6)
   13fa8:	21800215 	stw	r6,8(r4)
   13fac:	19800315 	stw	r6,12(r3)
   13fb0:	003fde06 	br	13f2c <_gp+0xffff48bc>
   13fb4:	29c00217 	ldw	r7,8(r5)
   13fb8:	10c5883a 	add	r2,r2,r3
   13fbc:	00c00074 	movhi	r3,1
   13fc0:	18dc9c04 	addi	r3,r3,29296
   13fc4:	38c03b26 	beq	r7,r3,140b4 <_free_r+0x278>
   13fc8:	2a000317 	ldw	r8,12(r5)
   13fcc:	11400054 	ori	r5,r2,1
   13fd0:	3087883a 	add	r3,r6,r2
   13fd4:	3a000315 	stw	r8,12(r7)
   13fd8:	41c00215 	stw	r7,8(r8)
   13fdc:	31400115 	stw	r5,4(r6)
   13fe0:	18800015 	stw	r2,0(r3)
   13fe4:	003fbd06 	br	13edc <_gp+0xffff486c>
   13fe8:	39c0004c 	andi	r7,r7,1
   13fec:	10c5883a 	add	r2,r2,r3
   13ff0:	3800071e 	bne	r7,zero,14010 <_free_r+0x1d4>
   13ff4:	81fffe17 	ldw	r7,-8(r16)
   13ff8:	31cdc83a 	sub	r6,r6,r7
   13ffc:	30c00317 	ldw	r3,12(r6)
   14000:	31400217 	ldw	r5,8(r6)
   14004:	11c5883a 	add	r2,r2,r7
   14008:	28c00315 	stw	r3,12(r5)
   1400c:	19400215 	stw	r5,8(r3)
   14010:	10c00054 	ori	r3,r2,1
   14014:	30c00115 	stw	r3,4(r6)
   14018:	00c00074 	movhi	r3,1
   1401c:	18dda804 	addi	r3,r3,30368
   14020:	18c00017 	ldw	r3,0(r3)
   14024:	21800215 	stw	r6,8(r4)
   14028:	10ffc036 	bltu	r2,r3,13f2c <_gp+0xffff48bc>
   1402c:	008000b4 	movhi	r2,2
   14030:	10a48b04 	addi	r2,r2,-28116
   14034:	11400017 	ldw	r5,0(r2)
   14038:	8809883a 	mov	r4,r17
   1403c:	0013d180 	call	13d18 <_malloc_trim_r>
   14040:	003fba06 	br	13f2c <_gp+0xffff48bc>
   14044:	28c9883a 	add	r4,r5,r3
   14048:	21000117 	ldw	r4,4(r4)
   1404c:	2100004c 	andi	r4,r4,1
   14050:	2000391e 	bne	r4,zero,14138 <_free_r+0x2fc>
   14054:	29c00217 	ldw	r7,8(r5)
   14058:	29000317 	ldw	r4,12(r5)
   1405c:	1885883a 	add	r2,r3,r2
   14060:	10c00054 	ori	r3,r2,1
   14064:	39000315 	stw	r4,12(r7)
   14068:	21c00215 	stw	r7,8(r4)
   1406c:	30c00115 	stw	r3,4(r6)
   14070:	308d883a 	add	r6,r6,r2
   14074:	30800015 	stw	r2,0(r6)
   14078:	003fac06 	br	13f2c <_gp+0xffff48bc>
   1407c:	00c00504 	movi	r3,20
   14080:	19401536 	bltu	r3,r5,140d8 <_free_r+0x29c>
   14084:	28c01704 	addi	r3,r5,92
   14088:	18c7883a 	add	r3,r3,r3
   1408c:	294016c4 	addi	r5,r5,91
   14090:	003fb406 	br	13f64 <_gp+0xffff48f4>
   14094:	280bd0ba 	srai	r5,r5,2
   14098:	00c00044 	movi	r3,1
   1409c:	38800117 	ldw	r2,4(r7)
   140a0:	194a983a 	sll	r5,r3,r5
   140a4:	2007883a 	mov	r3,r4
   140a8:	2884b03a 	or	r2,r5,r2
   140ac:	38800115 	stw	r2,4(r7)
   140b0:	003fbb06 	br	13fa0 <_gp+0xffff4930>
   140b4:	21800515 	stw	r6,20(r4)
   140b8:	21800415 	stw	r6,16(r4)
   140bc:	10c00054 	ori	r3,r2,1
   140c0:	31c00315 	stw	r7,12(r6)
   140c4:	31c00215 	stw	r7,8(r6)
   140c8:	30c00115 	stw	r3,4(r6)
   140cc:	308d883a 	add	r6,r6,r2
   140d0:	30800015 	stw	r2,0(r6)
   140d4:	003f9506 	br	13f2c <_gp+0xffff48bc>
   140d8:	00c01504 	movi	r3,84
   140dc:	19400536 	bltu	r3,r5,140f4 <_free_r+0x2b8>
   140e0:	100ad33a 	srli	r5,r2,12
   140e4:	28c01bc4 	addi	r3,r5,111
   140e8:	18c7883a 	add	r3,r3,r3
   140ec:	29401b84 	addi	r5,r5,110
   140f0:	003f9c06 	br	13f64 <_gp+0xffff48f4>
   140f4:	00c05504 	movi	r3,340
   140f8:	19400536 	bltu	r3,r5,14110 <_free_r+0x2d4>
   140fc:	100ad3fa 	srli	r5,r2,15
   14100:	28c01e04 	addi	r3,r5,120
   14104:	18c7883a 	add	r3,r3,r3
   14108:	29401dc4 	addi	r5,r5,119
   1410c:	003f9506 	br	13f64 <_gp+0xffff48f4>
   14110:	00c15504 	movi	r3,1364
   14114:	19400536 	bltu	r3,r5,1412c <_free_r+0x2f0>
   14118:	100ad4ba 	srli	r5,r2,18
   1411c:	28c01f44 	addi	r3,r5,125
   14120:	18c7883a 	add	r3,r3,r3
   14124:	29401f04 	addi	r5,r5,124
   14128:	003f8e06 	br	13f64 <_gp+0xffff48f4>
   1412c:	00c03f84 	movi	r3,254
   14130:	01401f84 	movi	r5,126
   14134:	003f8b06 	br	13f64 <_gp+0xffff48f4>
   14138:	10c00054 	ori	r3,r2,1
   1413c:	30c00115 	stw	r3,4(r6)
   14140:	308d883a 	add	r6,r6,r2
   14144:	30800015 	stw	r2,0(r6)
   14148:	003f7806 	br	13f2c <_gp+0xffff48bc>

0001414c <_fwalk>:
   1414c:	defff704 	addi	sp,sp,-36
   14150:	dd000415 	stw	r20,16(sp)
   14154:	dfc00815 	stw	ra,32(sp)
   14158:	ddc00715 	stw	r23,28(sp)
   1415c:	dd800615 	stw	r22,24(sp)
   14160:	dd400515 	stw	r21,20(sp)
   14164:	dcc00315 	stw	r19,12(sp)
   14168:	dc800215 	stw	r18,8(sp)
   1416c:	dc400115 	stw	r17,4(sp)
   14170:	dc000015 	stw	r16,0(sp)
   14174:	2500b804 	addi	r20,r4,736
   14178:	a0002326 	beq	r20,zero,14208 <_fwalk+0xbc>
   1417c:	282b883a 	mov	r21,r5
   14180:	002f883a 	mov	r23,zero
   14184:	05800044 	movi	r22,1
   14188:	04ffffc4 	movi	r19,-1
   1418c:	a4400117 	ldw	r17,4(r20)
   14190:	a4800217 	ldw	r18,8(r20)
   14194:	8c7fffc4 	addi	r17,r17,-1
   14198:	88000d16 	blt	r17,zero,141d0 <_fwalk+0x84>
   1419c:	94000304 	addi	r16,r18,12
   141a0:	94800384 	addi	r18,r18,14
   141a4:	8080000b 	ldhu	r2,0(r16)
   141a8:	8c7fffc4 	addi	r17,r17,-1
   141ac:	813ffd04 	addi	r4,r16,-12
   141b0:	b080042e 	bgeu	r22,r2,141c4 <_fwalk+0x78>
   141b4:	9080000f 	ldh	r2,0(r18)
   141b8:	14c00226 	beq	r2,r19,141c4 <_fwalk+0x78>
   141bc:	a83ee83a 	callr	r21
   141c0:	b8aeb03a 	or	r23,r23,r2
   141c4:	84001a04 	addi	r16,r16,104
   141c8:	94801a04 	addi	r18,r18,104
   141cc:	8cfff51e 	bne	r17,r19,141a4 <_gp+0xffff4b34>
   141d0:	a5000017 	ldw	r20,0(r20)
   141d4:	a03fed1e 	bne	r20,zero,1418c <_gp+0xffff4b1c>
   141d8:	b805883a 	mov	r2,r23
   141dc:	dfc00817 	ldw	ra,32(sp)
   141e0:	ddc00717 	ldw	r23,28(sp)
   141e4:	dd800617 	ldw	r22,24(sp)
   141e8:	dd400517 	ldw	r21,20(sp)
   141ec:	dd000417 	ldw	r20,16(sp)
   141f0:	dcc00317 	ldw	r19,12(sp)
   141f4:	dc800217 	ldw	r18,8(sp)
   141f8:	dc400117 	ldw	r17,4(sp)
   141fc:	dc000017 	ldw	r16,0(sp)
   14200:	dec00904 	addi	sp,sp,36
   14204:	f800283a 	ret
   14208:	002f883a 	mov	r23,zero
   1420c:	003ff206 	br	141d8 <_gp+0xffff4b68>

00014210 <_fwalk_reent>:
   14210:	defff704 	addi	sp,sp,-36
   14214:	dd000415 	stw	r20,16(sp)
   14218:	dfc00815 	stw	ra,32(sp)
   1421c:	ddc00715 	stw	r23,28(sp)
   14220:	dd800615 	stw	r22,24(sp)
   14224:	dd400515 	stw	r21,20(sp)
   14228:	dcc00315 	stw	r19,12(sp)
   1422c:	dc800215 	stw	r18,8(sp)
   14230:	dc400115 	stw	r17,4(sp)
   14234:	dc000015 	stw	r16,0(sp)
   14238:	2500b804 	addi	r20,r4,736
   1423c:	a0002326 	beq	r20,zero,142cc <_fwalk_reent+0xbc>
   14240:	282b883a 	mov	r21,r5
   14244:	2027883a 	mov	r19,r4
   14248:	002f883a 	mov	r23,zero
   1424c:	05800044 	movi	r22,1
   14250:	04bfffc4 	movi	r18,-1
   14254:	a4400117 	ldw	r17,4(r20)
   14258:	a4000217 	ldw	r16,8(r20)
   1425c:	8c7fffc4 	addi	r17,r17,-1
   14260:	88000c16 	blt	r17,zero,14294 <_fwalk_reent+0x84>
   14264:	84000304 	addi	r16,r16,12
   14268:	8080000b 	ldhu	r2,0(r16)
   1426c:	8c7fffc4 	addi	r17,r17,-1
   14270:	817ffd04 	addi	r5,r16,-12
   14274:	b080052e 	bgeu	r22,r2,1428c <_fwalk_reent+0x7c>
   14278:	8080008f 	ldh	r2,2(r16)
   1427c:	9809883a 	mov	r4,r19
   14280:	14800226 	beq	r2,r18,1428c <_fwalk_reent+0x7c>
   14284:	a83ee83a 	callr	r21
   14288:	b8aeb03a 	or	r23,r23,r2
   1428c:	84001a04 	addi	r16,r16,104
   14290:	8cbff51e 	bne	r17,r18,14268 <_gp+0xffff4bf8>
   14294:	a5000017 	ldw	r20,0(r20)
   14298:	a03fee1e 	bne	r20,zero,14254 <_gp+0xffff4be4>
   1429c:	b805883a 	mov	r2,r23
   142a0:	dfc00817 	ldw	ra,32(sp)
   142a4:	ddc00717 	ldw	r23,28(sp)
   142a8:	dd800617 	ldw	r22,24(sp)
   142ac:	dd400517 	ldw	r21,20(sp)
   142b0:	dd000417 	ldw	r20,16(sp)
   142b4:	dcc00317 	ldw	r19,12(sp)
   142b8:	dc800217 	ldw	r18,8(sp)
   142bc:	dc400117 	ldw	r17,4(sp)
   142c0:	dc000017 	ldw	r16,0(sp)
   142c4:	dec00904 	addi	sp,sp,36
   142c8:	f800283a 	ret
   142cc:	002f883a 	mov	r23,zero
   142d0:	003ff206 	br	1429c <_gp+0xffff4c2c>

000142d4 <__smakebuf_r>:
   142d4:	2880030b 	ldhu	r2,12(r5)
   142d8:	10c0008c 	andi	r3,r2,2
   142dc:	1800411e 	bne	r3,zero,143e4 <__smakebuf_r+0x110>
   142e0:	deffec04 	addi	sp,sp,-80
   142e4:	dc000f15 	stw	r16,60(sp)
   142e8:	2821883a 	mov	r16,r5
   142ec:	2940038f 	ldh	r5,14(r5)
   142f0:	dc401015 	stw	r17,64(sp)
   142f4:	dfc01315 	stw	ra,76(sp)
   142f8:	dcc01215 	stw	r19,72(sp)
   142fc:	dc801115 	stw	r18,68(sp)
   14300:	2023883a 	mov	r17,r4
   14304:	28001c16 	blt	r5,zero,14378 <__smakebuf_r+0xa4>
   14308:	d80d883a 	mov	r6,sp
   1430c:	001510c0 	call	1510c <_fstat_r>
   14310:	10001816 	blt	r2,zero,14374 <__smakebuf_r+0xa0>
   14314:	d8800117 	ldw	r2,4(sp)
   14318:	00e00014 	movui	r3,32768
   1431c:	10bc000c 	andi	r2,r2,61440
   14320:	14c80020 	cmpeqi	r19,r2,8192
   14324:	10c03726 	beq	r2,r3,14404 <__smakebuf_r+0x130>
   14328:	80c0030b 	ldhu	r3,12(r16)
   1432c:	18c20014 	ori	r3,r3,2048
   14330:	80c0030d 	sth	r3,12(r16)
   14334:	00c80004 	movi	r3,8192
   14338:	10c0521e 	bne	r2,r3,14484 <__smakebuf_r+0x1b0>
   1433c:	8140038f 	ldh	r5,14(r16)
   14340:	8809883a 	mov	r4,r17
   14344:	00151680 	call	15168 <_isatty_r>
   14348:	10004c26 	beq	r2,zero,1447c <__smakebuf_r+0x1a8>
   1434c:	8080030b 	ldhu	r2,12(r16)
   14350:	80c010c4 	addi	r3,r16,67
   14354:	80c00015 	stw	r3,0(r16)
   14358:	10800054 	ori	r2,r2,1
   1435c:	8080030d 	sth	r2,12(r16)
   14360:	00800044 	movi	r2,1
   14364:	80c00415 	stw	r3,16(r16)
   14368:	80800515 	stw	r2,20(r16)
   1436c:	04810004 	movi	r18,1024
   14370:	00000706 	br	14390 <__smakebuf_r+0xbc>
   14374:	8080030b 	ldhu	r2,12(r16)
   14378:	10c0200c 	andi	r3,r2,128
   1437c:	18001f1e 	bne	r3,zero,143fc <__smakebuf_r+0x128>
   14380:	04810004 	movi	r18,1024
   14384:	10820014 	ori	r2,r2,2048
   14388:	8080030d 	sth	r2,12(r16)
   1438c:	0027883a 	mov	r19,zero
   14390:	900b883a 	mov	r5,r18
   14394:	8809883a 	mov	r4,r17
   14398:	00144900 	call	14490 <_malloc_r>
   1439c:	10002c26 	beq	r2,zero,14450 <__smakebuf_r+0x17c>
   143a0:	80c0030b 	ldhu	r3,12(r16)
   143a4:	01000074 	movhi	r4,1
   143a8:	210e5c04 	addi	r4,r4,14704
   143ac:	89000f15 	stw	r4,60(r17)
   143b0:	18c02014 	ori	r3,r3,128
   143b4:	80c0030d 	sth	r3,12(r16)
   143b8:	80800015 	stw	r2,0(r16)
   143bc:	80800415 	stw	r2,16(r16)
   143c0:	84800515 	stw	r18,20(r16)
   143c4:	98001a1e 	bne	r19,zero,14430 <__smakebuf_r+0x15c>
   143c8:	dfc01317 	ldw	ra,76(sp)
   143cc:	dcc01217 	ldw	r19,72(sp)
   143d0:	dc801117 	ldw	r18,68(sp)
   143d4:	dc401017 	ldw	r17,64(sp)
   143d8:	dc000f17 	ldw	r16,60(sp)
   143dc:	dec01404 	addi	sp,sp,80
   143e0:	f800283a 	ret
   143e4:	288010c4 	addi	r2,r5,67
   143e8:	28800015 	stw	r2,0(r5)
   143ec:	28800415 	stw	r2,16(r5)
   143f0:	00800044 	movi	r2,1
   143f4:	28800515 	stw	r2,20(r5)
   143f8:	f800283a 	ret
   143fc:	04801004 	movi	r18,64
   14400:	003fe006 	br	14384 <_gp+0xffff4d14>
   14404:	81000a17 	ldw	r4,40(r16)
   14408:	00c00074 	movhi	r3,1
   1440c:	18d3bc04 	addi	r3,r3,20208
   14410:	20ffc51e 	bne	r4,r3,14328 <_gp+0xffff4cb8>
   14414:	8080030b 	ldhu	r2,12(r16)
   14418:	04810004 	movi	r18,1024
   1441c:	84801315 	stw	r18,76(r16)
   14420:	1484b03a 	or	r2,r2,r18
   14424:	8080030d 	sth	r2,12(r16)
   14428:	0027883a 	mov	r19,zero
   1442c:	003fd806 	br	14390 <_gp+0xffff4d20>
   14430:	8140038f 	ldh	r5,14(r16)
   14434:	8809883a 	mov	r4,r17
   14438:	00151680 	call	15168 <_isatty_r>
   1443c:	103fe226 	beq	r2,zero,143c8 <_gp+0xffff4d58>
   14440:	8080030b 	ldhu	r2,12(r16)
   14444:	10800054 	ori	r2,r2,1
   14448:	8080030d 	sth	r2,12(r16)
   1444c:	003fde06 	br	143c8 <_gp+0xffff4d58>
   14450:	8080030b 	ldhu	r2,12(r16)
   14454:	10c0800c 	andi	r3,r2,512
   14458:	183fdb1e 	bne	r3,zero,143c8 <_gp+0xffff4d58>
   1445c:	10800094 	ori	r2,r2,2
   14460:	80c010c4 	addi	r3,r16,67
   14464:	8080030d 	sth	r2,12(r16)
   14468:	00800044 	movi	r2,1
   1446c:	80c00015 	stw	r3,0(r16)
   14470:	80c00415 	stw	r3,16(r16)
   14474:	80800515 	stw	r2,20(r16)
   14478:	003fd306 	br	143c8 <_gp+0xffff4d58>
   1447c:	04810004 	movi	r18,1024
   14480:	003fc306 	br	14390 <_gp+0xffff4d20>
   14484:	0027883a 	mov	r19,zero
   14488:	04810004 	movi	r18,1024
   1448c:	003fc006 	br	14390 <_gp+0xffff4d20>

00014490 <_malloc_r>:
   14490:	defff504 	addi	sp,sp,-44
   14494:	dc800315 	stw	r18,12(sp)
   14498:	dfc00a15 	stw	ra,40(sp)
   1449c:	df000915 	stw	fp,36(sp)
   144a0:	ddc00815 	stw	r23,32(sp)
   144a4:	dd800715 	stw	r22,28(sp)
   144a8:	dd400615 	stw	r21,24(sp)
   144ac:	dd000515 	stw	r20,20(sp)
   144b0:	dcc00415 	stw	r19,16(sp)
   144b4:	dc400215 	stw	r17,8(sp)
   144b8:	dc000115 	stw	r16,4(sp)
   144bc:	288002c4 	addi	r2,r5,11
   144c0:	00c00584 	movi	r3,22
   144c4:	2025883a 	mov	r18,r4
   144c8:	18807f2e 	bgeu	r3,r2,146c8 <_malloc_r+0x238>
   144cc:	047ffe04 	movi	r17,-8
   144d0:	1462703a 	and	r17,r2,r17
   144d4:	8800a316 	blt	r17,zero,14764 <_malloc_r+0x2d4>
   144d8:	8940a236 	bltu	r17,r5,14764 <_malloc_r+0x2d4>
   144dc:	00157800 	call	15780 <__malloc_lock>
   144e0:	00807dc4 	movi	r2,503
   144e4:	1441e92e 	bgeu	r2,r17,14c8c <_malloc_r+0x7fc>
   144e8:	8804d27a 	srli	r2,r17,9
   144ec:	1000a126 	beq	r2,zero,14774 <_malloc_r+0x2e4>
   144f0:	00c00104 	movi	r3,4
   144f4:	18811e36 	bltu	r3,r2,14970 <_malloc_r+0x4e0>
   144f8:	8804d1ba 	srli	r2,r17,6
   144fc:	12000e44 	addi	r8,r2,57
   14500:	11c00e04 	addi	r7,r2,56
   14504:	4209883a 	add	r4,r8,r8
   14508:	04c00074 	movhi	r19,1
   1450c:	2109883a 	add	r4,r4,r4
   14510:	9cdc9a04 	addi	r19,r19,29288
   14514:	2109883a 	add	r4,r4,r4
   14518:	9909883a 	add	r4,r19,r4
   1451c:	24000117 	ldw	r16,4(r4)
   14520:	213ffe04 	addi	r4,r4,-8
   14524:	24009726 	beq	r4,r16,14784 <_malloc_r+0x2f4>
   14528:	80800117 	ldw	r2,4(r16)
   1452c:	01bfff04 	movi	r6,-4
   14530:	014003c4 	movi	r5,15
   14534:	1184703a 	and	r2,r2,r6
   14538:	1447c83a 	sub	r3,r2,r17
   1453c:	28c00716 	blt	r5,r3,1455c <_malloc_r+0xcc>
   14540:	1800920e 	bge	r3,zero,1478c <_malloc_r+0x2fc>
   14544:	84000317 	ldw	r16,12(r16)
   14548:	24008e26 	beq	r4,r16,14784 <_malloc_r+0x2f4>
   1454c:	80800117 	ldw	r2,4(r16)
   14550:	1184703a 	and	r2,r2,r6
   14554:	1447c83a 	sub	r3,r2,r17
   14558:	28fff90e 	bge	r5,r3,14540 <_gp+0xffff4ed0>
   1455c:	3809883a 	mov	r4,r7
   14560:	01800074 	movhi	r6,1
   14564:	9c000417 	ldw	r16,16(r19)
   14568:	319c9a04 	addi	r6,r6,29288
   1456c:	32000204 	addi	r8,r6,8
   14570:	82013426 	beq	r16,r8,14a44 <_malloc_r+0x5b4>
   14574:	80c00117 	ldw	r3,4(r16)
   14578:	00bfff04 	movi	r2,-4
   1457c:	188e703a 	and	r7,r3,r2
   14580:	3c45c83a 	sub	r2,r7,r17
   14584:	00c003c4 	movi	r3,15
   14588:	18811f16 	blt	r3,r2,14a08 <_malloc_r+0x578>
   1458c:	32000515 	stw	r8,20(r6)
   14590:	32000415 	stw	r8,16(r6)
   14594:	10007f0e 	bge	r2,zero,14794 <_malloc_r+0x304>
   14598:	00807fc4 	movi	r2,511
   1459c:	11c0fd36 	bltu	r2,r7,14994 <_malloc_r+0x504>
   145a0:	3806d0fa 	srli	r3,r7,3
   145a4:	01c00044 	movi	r7,1
   145a8:	30800117 	ldw	r2,4(r6)
   145ac:	19400044 	addi	r5,r3,1
   145b0:	294b883a 	add	r5,r5,r5
   145b4:	1807d0ba 	srai	r3,r3,2
   145b8:	294b883a 	add	r5,r5,r5
   145bc:	294b883a 	add	r5,r5,r5
   145c0:	298b883a 	add	r5,r5,r6
   145c4:	38c6983a 	sll	r3,r7,r3
   145c8:	29c00017 	ldw	r7,0(r5)
   145cc:	2a7ffe04 	addi	r9,r5,-8
   145d0:	1886b03a 	or	r3,r3,r2
   145d4:	82400315 	stw	r9,12(r16)
   145d8:	81c00215 	stw	r7,8(r16)
   145dc:	30c00115 	stw	r3,4(r6)
   145e0:	2c000015 	stw	r16,0(r5)
   145e4:	3c000315 	stw	r16,12(r7)
   145e8:	2005d0ba 	srai	r2,r4,2
   145ec:	01400044 	movi	r5,1
   145f0:	288a983a 	sll	r5,r5,r2
   145f4:	19406f36 	bltu	r3,r5,147b4 <_malloc_r+0x324>
   145f8:	28c4703a 	and	r2,r5,r3
   145fc:	10000a1e 	bne	r2,zero,14628 <_malloc_r+0x198>
   14600:	00bfff04 	movi	r2,-4
   14604:	294b883a 	add	r5,r5,r5
   14608:	2088703a 	and	r4,r4,r2
   1460c:	28c4703a 	and	r2,r5,r3
   14610:	21000104 	addi	r4,r4,4
   14614:	1000041e 	bne	r2,zero,14628 <_malloc_r+0x198>
   14618:	294b883a 	add	r5,r5,r5
   1461c:	28c4703a 	and	r2,r5,r3
   14620:	21000104 	addi	r4,r4,4
   14624:	103ffc26 	beq	r2,zero,14618 <_gp+0xffff4fa8>
   14628:	02bfff04 	movi	r10,-4
   1462c:	024003c4 	movi	r9,15
   14630:	21800044 	addi	r6,r4,1
   14634:	318d883a 	add	r6,r6,r6
   14638:	318d883a 	add	r6,r6,r6
   1463c:	318d883a 	add	r6,r6,r6
   14640:	998d883a 	add	r6,r19,r6
   14644:	333ffe04 	addi	r12,r6,-8
   14648:	2017883a 	mov	r11,r4
   1464c:	31800104 	addi	r6,r6,4
   14650:	34000017 	ldw	r16,0(r6)
   14654:	31fffd04 	addi	r7,r6,-12
   14658:	81c0041e 	bne	r16,r7,1466c <_malloc_r+0x1dc>
   1465c:	0000fb06 	br	14a4c <_malloc_r+0x5bc>
   14660:	1801030e 	bge	r3,zero,14a70 <_malloc_r+0x5e0>
   14664:	84000317 	ldw	r16,12(r16)
   14668:	81c0f826 	beq	r16,r7,14a4c <_malloc_r+0x5bc>
   1466c:	80800117 	ldw	r2,4(r16)
   14670:	1284703a 	and	r2,r2,r10
   14674:	1447c83a 	sub	r3,r2,r17
   14678:	48fff90e 	bge	r9,r3,14660 <_gp+0xffff4ff0>
   1467c:	80800317 	ldw	r2,12(r16)
   14680:	81000217 	ldw	r4,8(r16)
   14684:	89400054 	ori	r5,r17,1
   14688:	81400115 	stw	r5,4(r16)
   1468c:	20800315 	stw	r2,12(r4)
   14690:	11000215 	stw	r4,8(r2)
   14694:	8463883a 	add	r17,r16,r17
   14698:	9c400515 	stw	r17,20(r19)
   1469c:	9c400415 	stw	r17,16(r19)
   146a0:	18800054 	ori	r2,r3,1
   146a4:	88800115 	stw	r2,4(r17)
   146a8:	8a000315 	stw	r8,12(r17)
   146ac:	8a000215 	stw	r8,8(r17)
   146b0:	88e3883a 	add	r17,r17,r3
   146b4:	88c00015 	stw	r3,0(r17)
   146b8:	9009883a 	mov	r4,r18
   146bc:	00157a40 	call	157a4 <__malloc_unlock>
   146c0:	80800204 	addi	r2,r16,8
   146c4:	00001b06 	br	14734 <_malloc_r+0x2a4>
   146c8:	04400404 	movi	r17,16
   146cc:	89402536 	bltu	r17,r5,14764 <_malloc_r+0x2d4>
   146d0:	00157800 	call	15780 <__malloc_lock>
   146d4:	00800184 	movi	r2,6
   146d8:	01000084 	movi	r4,2
   146dc:	04c00074 	movhi	r19,1
   146e0:	1085883a 	add	r2,r2,r2
   146e4:	9cdc9a04 	addi	r19,r19,29288
   146e8:	1085883a 	add	r2,r2,r2
   146ec:	9885883a 	add	r2,r19,r2
   146f0:	14000117 	ldw	r16,4(r2)
   146f4:	10fffe04 	addi	r3,r2,-8
   146f8:	80c0d926 	beq	r16,r3,14a60 <_malloc_r+0x5d0>
   146fc:	80c00117 	ldw	r3,4(r16)
   14700:	81000317 	ldw	r4,12(r16)
   14704:	00bfff04 	movi	r2,-4
   14708:	1884703a 	and	r2,r3,r2
   1470c:	81400217 	ldw	r5,8(r16)
   14710:	8085883a 	add	r2,r16,r2
   14714:	10c00117 	ldw	r3,4(r2)
   14718:	29000315 	stw	r4,12(r5)
   1471c:	21400215 	stw	r5,8(r4)
   14720:	18c00054 	ori	r3,r3,1
   14724:	10c00115 	stw	r3,4(r2)
   14728:	9009883a 	mov	r4,r18
   1472c:	00157a40 	call	157a4 <__malloc_unlock>
   14730:	80800204 	addi	r2,r16,8
   14734:	dfc00a17 	ldw	ra,40(sp)
   14738:	df000917 	ldw	fp,36(sp)
   1473c:	ddc00817 	ldw	r23,32(sp)
   14740:	dd800717 	ldw	r22,28(sp)
   14744:	dd400617 	ldw	r21,24(sp)
   14748:	dd000517 	ldw	r20,20(sp)
   1474c:	dcc00417 	ldw	r19,16(sp)
   14750:	dc800317 	ldw	r18,12(sp)
   14754:	dc400217 	ldw	r17,8(sp)
   14758:	dc000117 	ldw	r16,4(sp)
   1475c:	dec00b04 	addi	sp,sp,44
   14760:	f800283a 	ret
   14764:	00800304 	movi	r2,12
   14768:	90800015 	stw	r2,0(r18)
   1476c:	0005883a 	mov	r2,zero
   14770:	003ff006 	br	14734 <_gp+0xffff50c4>
   14774:	01002004 	movi	r4,128
   14778:	02001004 	movi	r8,64
   1477c:	01c00fc4 	movi	r7,63
   14780:	003f6106 	br	14508 <_gp+0xffff4e98>
   14784:	4009883a 	mov	r4,r8
   14788:	003f7506 	br	14560 <_gp+0xffff4ef0>
   1478c:	81000317 	ldw	r4,12(r16)
   14790:	003fde06 	br	1470c <_gp+0xffff509c>
   14794:	81c5883a 	add	r2,r16,r7
   14798:	11400117 	ldw	r5,4(r2)
   1479c:	9009883a 	mov	r4,r18
   147a0:	29400054 	ori	r5,r5,1
   147a4:	11400115 	stw	r5,4(r2)
   147a8:	00157a40 	call	157a4 <__malloc_unlock>
   147ac:	80800204 	addi	r2,r16,8
   147b0:	003fe006 	br	14734 <_gp+0xffff50c4>
   147b4:	9c000217 	ldw	r16,8(r19)
   147b8:	00bfff04 	movi	r2,-4
   147bc:	85800117 	ldw	r22,4(r16)
   147c0:	b0ac703a 	and	r22,r22,r2
   147c4:	b4400336 	bltu	r22,r17,147d4 <_malloc_r+0x344>
   147c8:	b445c83a 	sub	r2,r22,r17
   147cc:	00c003c4 	movi	r3,15
   147d0:	18805d16 	blt	r3,r2,14948 <_malloc_r+0x4b8>
   147d4:	05c00074 	movhi	r23,1
   147d8:	008000b4 	movhi	r2,2
   147dc:	10a48b04 	addi	r2,r2,-28116
   147e0:	bddda704 	addi	r23,r23,30364
   147e4:	15400017 	ldw	r21,0(r2)
   147e8:	b8c00017 	ldw	r3,0(r23)
   147ec:	00bfffc4 	movi	r2,-1
   147f0:	858d883a 	add	r6,r16,r22
   147f4:	8d6b883a 	add	r21,r17,r21
   147f8:	1880ea26 	beq	r3,r2,14ba4 <_malloc_r+0x714>
   147fc:	ad4403c4 	addi	r21,r21,4111
   14800:	00bc0004 	movi	r2,-4096
   14804:	a8aa703a 	and	r21,r21,r2
   14808:	a80b883a 	mov	r5,r21
   1480c:	9009883a 	mov	r4,r18
   14810:	d9800015 	stw	r6,0(sp)
   14814:	0014dc40 	call	14dc4 <_sbrk_r>
   14818:	1029883a 	mov	r20,r2
   1481c:	00bfffc4 	movi	r2,-1
   14820:	d9800017 	ldw	r6,0(sp)
   14824:	a080e826 	beq	r20,r2,14bc8 <_malloc_r+0x738>
   14828:	a180a636 	bltu	r20,r6,14ac4 <_malloc_r+0x634>
   1482c:	070000b4 	movhi	fp,2
   14830:	e7248c04 	addi	fp,fp,-28112
   14834:	e0800017 	ldw	r2,0(fp)
   14838:	a887883a 	add	r3,r21,r2
   1483c:	e0c00015 	stw	r3,0(fp)
   14840:	3500e626 	beq	r6,r20,14bdc <_malloc_r+0x74c>
   14844:	b9000017 	ldw	r4,0(r23)
   14848:	00bfffc4 	movi	r2,-1
   1484c:	2080ee26 	beq	r4,r2,14c08 <_malloc_r+0x778>
   14850:	a185c83a 	sub	r2,r20,r6
   14854:	10c5883a 	add	r2,r2,r3
   14858:	e0800015 	stw	r2,0(fp)
   1485c:	a0c001cc 	andi	r3,r20,7
   14860:	1800bc26 	beq	r3,zero,14b54 <_malloc_r+0x6c4>
   14864:	a0e9c83a 	sub	r20,r20,r3
   14868:	00840204 	movi	r2,4104
   1486c:	a5000204 	addi	r20,r20,8
   14870:	10c7c83a 	sub	r3,r2,r3
   14874:	a545883a 	add	r2,r20,r21
   14878:	1083ffcc 	andi	r2,r2,4095
   1487c:	18abc83a 	sub	r21,r3,r2
   14880:	a80b883a 	mov	r5,r21
   14884:	9009883a 	mov	r4,r18
   14888:	0014dc40 	call	14dc4 <_sbrk_r>
   1488c:	00ffffc4 	movi	r3,-1
   14890:	10c0e126 	beq	r2,r3,14c18 <_malloc_r+0x788>
   14894:	1505c83a 	sub	r2,r2,r20
   14898:	1545883a 	add	r2,r2,r21
   1489c:	10800054 	ori	r2,r2,1
   148a0:	e0c00017 	ldw	r3,0(fp)
   148a4:	9d000215 	stw	r20,8(r19)
   148a8:	a0800115 	stw	r2,4(r20)
   148ac:	a8c7883a 	add	r3,r21,r3
   148b0:	e0c00015 	stw	r3,0(fp)
   148b4:	84c00e26 	beq	r16,r19,148f0 <_malloc_r+0x460>
   148b8:	018003c4 	movi	r6,15
   148bc:	3580a72e 	bgeu	r6,r22,14b5c <_malloc_r+0x6cc>
   148c0:	81400117 	ldw	r5,4(r16)
   148c4:	013ffe04 	movi	r4,-8
   148c8:	b0bffd04 	addi	r2,r22,-12
   148cc:	1104703a 	and	r2,r2,r4
   148d0:	2900004c 	andi	r4,r5,1
   148d4:	2088b03a 	or	r4,r4,r2
   148d8:	81000115 	stw	r4,4(r16)
   148dc:	01400144 	movi	r5,5
   148e0:	8089883a 	add	r4,r16,r2
   148e4:	21400115 	stw	r5,4(r4)
   148e8:	21400215 	stw	r5,8(r4)
   148ec:	3080cd36 	bltu	r6,r2,14c24 <_malloc_r+0x794>
   148f0:	008000b4 	movhi	r2,2
   148f4:	10a48a04 	addi	r2,r2,-28120
   148f8:	11000017 	ldw	r4,0(r2)
   148fc:	20c0012e 	bgeu	r4,r3,14904 <_malloc_r+0x474>
   14900:	10c00015 	stw	r3,0(r2)
   14904:	008000b4 	movhi	r2,2
   14908:	10a48904 	addi	r2,r2,-28124
   1490c:	11000017 	ldw	r4,0(r2)
   14910:	9c000217 	ldw	r16,8(r19)
   14914:	20c0012e 	bgeu	r4,r3,1491c <_malloc_r+0x48c>
   14918:	10c00015 	stw	r3,0(r2)
   1491c:	80c00117 	ldw	r3,4(r16)
   14920:	00bfff04 	movi	r2,-4
   14924:	1886703a 	and	r3,r3,r2
   14928:	1c45c83a 	sub	r2,r3,r17
   1492c:	1c400236 	bltu	r3,r17,14938 <_malloc_r+0x4a8>
   14930:	00c003c4 	movi	r3,15
   14934:	18800416 	blt	r3,r2,14948 <_malloc_r+0x4b8>
   14938:	9009883a 	mov	r4,r18
   1493c:	00157a40 	call	157a4 <__malloc_unlock>
   14940:	0005883a 	mov	r2,zero
   14944:	003f7b06 	br	14734 <_gp+0xffff50c4>
   14948:	88c00054 	ori	r3,r17,1
   1494c:	80c00115 	stw	r3,4(r16)
   14950:	8463883a 	add	r17,r16,r17
   14954:	10800054 	ori	r2,r2,1
   14958:	9c400215 	stw	r17,8(r19)
   1495c:	88800115 	stw	r2,4(r17)
   14960:	9009883a 	mov	r4,r18
   14964:	00157a40 	call	157a4 <__malloc_unlock>
   14968:	80800204 	addi	r2,r16,8
   1496c:	003f7106 	br	14734 <_gp+0xffff50c4>
   14970:	00c00504 	movi	r3,20
   14974:	18804a2e 	bgeu	r3,r2,14aa0 <_malloc_r+0x610>
   14978:	00c01504 	movi	r3,84
   1497c:	18806e36 	bltu	r3,r2,14b38 <_malloc_r+0x6a8>
   14980:	8804d33a 	srli	r2,r17,12
   14984:	12001bc4 	addi	r8,r2,111
   14988:	11c01b84 	addi	r7,r2,110
   1498c:	4209883a 	add	r4,r8,r8
   14990:	003edd06 	br	14508 <_gp+0xffff4e98>
   14994:	3804d27a 	srli	r2,r7,9
   14998:	00c00104 	movi	r3,4
   1499c:	1880442e 	bgeu	r3,r2,14ab0 <_malloc_r+0x620>
   149a0:	00c00504 	movi	r3,20
   149a4:	18808136 	bltu	r3,r2,14bac <_malloc_r+0x71c>
   149a8:	11401704 	addi	r5,r2,92
   149ac:	10c016c4 	addi	r3,r2,91
   149b0:	294b883a 	add	r5,r5,r5
   149b4:	294b883a 	add	r5,r5,r5
   149b8:	294b883a 	add	r5,r5,r5
   149bc:	994b883a 	add	r5,r19,r5
   149c0:	28800017 	ldw	r2,0(r5)
   149c4:	01800074 	movhi	r6,1
   149c8:	297ffe04 	addi	r5,r5,-8
   149cc:	319c9a04 	addi	r6,r6,29288
   149d0:	28806526 	beq	r5,r2,14b68 <_malloc_r+0x6d8>
   149d4:	01bfff04 	movi	r6,-4
   149d8:	10c00117 	ldw	r3,4(r2)
   149dc:	1986703a 	and	r3,r3,r6
   149e0:	38c0022e 	bgeu	r7,r3,149ec <_malloc_r+0x55c>
   149e4:	10800217 	ldw	r2,8(r2)
   149e8:	28bffb1e 	bne	r5,r2,149d8 <_gp+0xffff5368>
   149ec:	11400317 	ldw	r5,12(r2)
   149f0:	98c00117 	ldw	r3,4(r19)
   149f4:	81400315 	stw	r5,12(r16)
   149f8:	80800215 	stw	r2,8(r16)
   149fc:	2c000215 	stw	r16,8(r5)
   14a00:	14000315 	stw	r16,12(r2)
   14a04:	003ef806 	br	145e8 <_gp+0xffff4f78>
   14a08:	88c00054 	ori	r3,r17,1
   14a0c:	80c00115 	stw	r3,4(r16)
   14a10:	8463883a 	add	r17,r16,r17
   14a14:	34400515 	stw	r17,20(r6)
   14a18:	34400415 	stw	r17,16(r6)
   14a1c:	10c00054 	ori	r3,r2,1
   14a20:	8a000315 	stw	r8,12(r17)
   14a24:	8a000215 	stw	r8,8(r17)
   14a28:	88c00115 	stw	r3,4(r17)
   14a2c:	88a3883a 	add	r17,r17,r2
   14a30:	88800015 	stw	r2,0(r17)
   14a34:	9009883a 	mov	r4,r18
   14a38:	00157a40 	call	157a4 <__malloc_unlock>
   14a3c:	80800204 	addi	r2,r16,8
   14a40:	003f3c06 	br	14734 <_gp+0xffff50c4>
   14a44:	30c00117 	ldw	r3,4(r6)
   14a48:	003ee706 	br	145e8 <_gp+0xffff4f78>
   14a4c:	5ac00044 	addi	r11,r11,1
   14a50:	588000cc 	andi	r2,r11,3
   14a54:	31800204 	addi	r6,r6,8
   14a58:	103efd1e 	bne	r2,zero,14650 <_gp+0xffff4fe0>
   14a5c:	00002406 	br	14af0 <_malloc_r+0x660>
   14a60:	14000317 	ldw	r16,12(r2)
   14a64:	143f251e 	bne	r2,r16,146fc <_gp+0xffff508c>
   14a68:	21000084 	addi	r4,r4,2
   14a6c:	003ebc06 	br	14560 <_gp+0xffff4ef0>
   14a70:	8085883a 	add	r2,r16,r2
   14a74:	10c00117 	ldw	r3,4(r2)
   14a78:	81000317 	ldw	r4,12(r16)
   14a7c:	81400217 	ldw	r5,8(r16)
   14a80:	18c00054 	ori	r3,r3,1
   14a84:	10c00115 	stw	r3,4(r2)
   14a88:	29000315 	stw	r4,12(r5)
   14a8c:	21400215 	stw	r5,8(r4)
   14a90:	9009883a 	mov	r4,r18
   14a94:	00157a40 	call	157a4 <__malloc_unlock>
   14a98:	80800204 	addi	r2,r16,8
   14a9c:	003f2506 	br	14734 <_gp+0xffff50c4>
   14aa0:	12001704 	addi	r8,r2,92
   14aa4:	11c016c4 	addi	r7,r2,91
   14aa8:	4209883a 	add	r4,r8,r8
   14aac:	003e9606 	br	14508 <_gp+0xffff4e98>
   14ab0:	3804d1ba 	srli	r2,r7,6
   14ab4:	11400e44 	addi	r5,r2,57
   14ab8:	10c00e04 	addi	r3,r2,56
   14abc:	294b883a 	add	r5,r5,r5
   14ac0:	003fbc06 	br	149b4 <_gp+0xffff5344>
   14ac4:	84ff5926 	beq	r16,r19,1482c <_gp+0xffff51bc>
   14ac8:	00800074 	movhi	r2,1
   14acc:	109c9a04 	addi	r2,r2,29288
   14ad0:	14000217 	ldw	r16,8(r2)
   14ad4:	00bfff04 	movi	r2,-4
   14ad8:	80c00117 	ldw	r3,4(r16)
   14adc:	1886703a 	and	r3,r3,r2
   14ae0:	003f9106 	br	14928 <_gp+0xffff52b8>
   14ae4:	60800217 	ldw	r2,8(r12)
   14ae8:	213fffc4 	addi	r4,r4,-1
   14aec:	1300651e 	bne	r2,r12,14c84 <_malloc_r+0x7f4>
   14af0:	208000cc 	andi	r2,r4,3
   14af4:	633ffe04 	addi	r12,r12,-8
   14af8:	103ffa1e 	bne	r2,zero,14ae4 <_gp+0xffff5474>
   14afc:	98800117 	ldw	r2,4(r19)
   14b00:	0146303a 	nor	r3,zero,r5
   14b04:	1884703a 	and	r2,r3,r2
   14b08:	98800115 	stw	r2,4(r19)
   14b0c:	294b883a 	add	r5,r5,r5
   14b10:	117f2836 	bltu	r2,r5,147b4 <_gp+0xffff5144>
   14b14:	283f2726 	beq	r5,zero,147b4 <_gp+0xffff5144>
   14b18:	2886703a 	and	r3,r5,r2
   14b1c:	5809883a 	mov	r4,r11
   14b20:	183ec31e 	bne	r3,zero,14630 <_gp+0xffff4fc0>
   14b24:	294b883a 	add	r5,r5,r5
   14b28:	2886703a 	and	r3,r5,r2
   14b2c:	21000104 	addi	r4,r4,4
   14b30:	183ffc26 	beq	r3,zero,14b24 <_gp+0xffff54b4>
   14b34:	003ebe06 	br	14630 <_gp+0xffff4fc0>
   14b38:	00c05504 	movi	r3,340
   14b3c:	18801236 	bltu	r3,r2,14b88 <_malloc_r+0x6f8>
   14b40:	8804d3fa 	srli	r2,r17,15
   14b44:	12001e04 	addi	r8,r2,120
   14b48:	11c01dc4 	addi	r7,r2,119
   14b4c:	4209883a 	add	r4,r8,r8
   14b50:	003e6d06 	br	14508 <_gp+0xffff4e98>
   14b54:	00c40004 	movi	r3,4096
   14b58:	003f4606 	br	14874 <_gp+0xffff5204>
   14b5c:	00800044 	movi	r2,1
   14b60:	a0800115 	stw	r2,4(r20)
   14b64:	003f7406 	br	14938 <_gp+0xffff52c8>
   14b68:	1805d0ba 	srai	r2,r3,2
   14b6c:	01c00044 	movi	r7,1
   14b70:	30c00117 	ldw	r3,4(r6)
   14b74:	388e983a 	sll	r7,r7,r2
   14b78:	2805883a 	mov	r2,r5
   14b7c:	38c6b03a 	or	r3,r7,r3
   14b80:	30c00115 	stw	r3,4(r6)
   14b84:	003f9b06 	br	149f4 <_gp+0xffff5384>
   14b88:	00c15504 	movi	r3,1364
   14b8c:	18801a36 	bltu	r3,r2,14bf8 <_malloc_r+0x768>
   14b90:	8804d4ba 	srli	r2,r17,18
   14b94:	12001f44 	addi	r8,r2,125
   14b98:	11c01f04 	addi	r7,r2,124
   14b9c:	4209883a 	add	r4,r8,r8
   14ba0:	003e5906 	br	14508 <_gp+0xffff4e98>
   14ba4:	ad400404 	addi	r21,r21,16
   14ba8:	003f1706 	br	14808 <_gp+0xffff5198>
   14bac:	00c01504 	movi	r3,84
   14bb0:	18802336 	bltu	r3,r2,14c40 <_malloc_r+0x7b0>
   14bb4:	3804d33a 	srli	r2,r7,12
   14bb8:	11401bc4 	addi	r5,r2,111
   14bbc:	10c01b84 	addi	r3,r2,110
   14bc0:	294b883a 	add	r5,r5,r5
   14bc4:	003f7b06 	br	149b4 <_gp+0xffff5344>
   14bc8:	9c000217 	ldw	r16,8(r19)
   14bcc:	00bfff04 	movi	r2,-4
   14bd0:	80c00117 	ldw	r3,4(r16)
   14bd4:	1886703a 	and	r3,r3,r2
   14bd8:	003f5306 	br	14928 <_gp+0xffff52b8>
   14bdc:	3083ffcc 	andi	r2,r6,4095
   14be0:	103f181e 	bne	r2,zero,14844 <_gp+0xffff51d4>
   14be4:	99000217 	ldw	r4,8(r19)
   14be8:	b545883a 	add	r2,r22,r21
   14bec:	10800054 	ori	r2,r2,1
   14bf0:	20800115 	stw	r2,4(r4)
   14bf4:	003f3e06 	br	148f0 <_gp+0xffff5280>
   14bf8:	01003f84 	movi	r4,254
   14bfc:	02001fc4 	movi	r8,127
   14c00:	01c01f84 	movi	r7,126
   14c04:	003e4006 	br	14508 <_gp+0xffff4e98>
   14c08:	00800074 	movhi	r2,1
   14c0c:	109da704 	addi	r2,r2,30364
   14c10:	15000015 	stw	r20,0(r2)
   14c14:	003f1106 	br	1485c <_gp+0xffff51ec>
   14c18:	00800044 	movi	r2,1
   14c1c:	002b883a 	mov	r21,zero
   14c20:	003f1f06 	br	148a0 <_gp+0xffff5230>
   14c24:	81400204 	addi	r5,r16,8
   14c28:	9009883a 	mov	r4,r18
   14c2c:	0013e3c0 	call	13e3c <_free_r>
   14c30:	008000b4 	movhi	r2,2
   14c34:	10a48c04 	addi	r2,r2,-28112
   14c38:	10c00017 	ldw	r3,0(r2)
   14c3c:	003f2c06 	br	148f0 <_gp+0xffff5280>
   14c40:	00c05504 	movi	r3,340
   14c44:	18800536 	bltu	r3,r2,14c5c <_malloc_r+0x7cc>
   14c48:	3804d3fa 	srli	r2,r7,15
   14c4c:	11401e04 	addi	r5,r2,120
   14c50:	10c01dc4 	addi	r3,r2,119
   14c54:	294b883a 	add	r5,r5,r5
   14c58:	003f5606 	br	149b4 <_gp+0xffff5344>
   14c5c:	00c15504 	movi	r3,1364
   14c60:	18800536 	bltu	r3,r2,14c78 <_malloc_r+0x7e8>
   14c64:	3804d4ba 	srli	r2,r7,18
   14c68:	11401f44 	addi	r5,r2,125
   14c6c:	10c01f04 	addi	r3,r2,124
   14c70:	294b883a 	add	r5,r5,r5
   14c74:	003f4f06 	br	149b4 <_gp+0xffff5344>
   14c78:	01403f84 	movi	r5,254
   14c7c:	00c01f84 	movi	r3,126
   14c80:	003f4c06 	br	149b4 <_gp+0xffff5344>
   14c84:	98800117 	ldw	r2,4(r19)
   14c88:	003fa006 	br	14b0c <_gp+0xffff549c>
   14c8c:	8808d0fa 	srli	r4,r17,3
   14c90:	20800044 	addi	r2,r4,1
   14c94:	1085883a 	add	r2,r2,r2
   14c98:	003e9006 	br	146dc <_gp+0xffff506c>

00014c9c <memset>:
   14c9c:	20c000cc 	andi	r3,r4,3
   14ca0:	2005883a 	mov	r2,r4
   14ca4:	18004426 	beq	r3,zero,14db8 <memset+0x11c>
   14ca8:	31ffffc4 	addi	r7,r6,-1
   14cac:	30004026 	beq	r6,zero,14db0 <memset+0x114>
   14cb0:	2813883a 	mov	r9,r5
   14cb4:	200d883a 	mov	r6,r4
   14cb8:	2007883a 	mov	r3,r4
   14cbc:	00000406 	br	14cd0 <memset+0x34>
   14cc0:	3a3fffc4 	addi	r8,r7,-1
   14cc4:	31800044 	addi	r6,r6,1
   14cc8:	38003926 	beq	r7,zero,14db0 <memset+0x114>
   14ccc:	400f883a 	mov	r7,r8
   14cd0:	18c00044 	addi	r3,r3,1
   14cd4:	32400005 	stb	r9,0(r6)
   14cd8:	1a0000cc 	andi	r8,r3,3
   14cdc:	403ff81e 	bne	r8,zero,14cc0 <_gp+0xffff5650>
   14ce0:	010000c4 	movi	r4,3
   14ce4:	21c02d2e 	bgeu	r4,r7,14d9c <memset+0x100>
   14ce8:	29003fcc 	andi	r4,r5,255
   14cec:	200c923a 	slli	r6,r4,8
   14cf0:	3108b03a 	or	r4,r6,r4
   14cf4:	200c943a 	slli	r6,r4,16
   14cf8:	218cb03a 	or	r6,r4,r6
   14cfc:	010003c4 	movi	r4,15
   14d00:	21c0182e 	bgeu	r4,r7,14d64 <memset+0xc8>
   14d04:	3b3ffc04 	addi	r12,r7,-16
   14d08:	6018d13a 	srli	r12,r12,4
   14d0c:	1a000104 	addi	r8,r3,4
   14d10:	1ac00204 	addi	r11,r3,8
   14d14:	6008913a 	slli	r4,r12,4
   14d18:	1a800304 	addi	r10,r3,12
   14d1c:	1813883a 	mov	r9,r3
   14d20:	21000504 	addi	r4,r4,20
   14d24:	1909883a 	add	r4,r3,r4
   14d28:	49800015 	stw	r6,0(r9)
   14d2c:	41800015 	stw	r6,0(r8)
   14d30:	59800015 	stw	r6,0(r11)
   14d34:	51800015 	stw	r6,0(r10)
   14d38:	42000404 	addi	r8,r8,16
   14d3c:	4a400404 	addi	r9,r9,16
   14d40:	5ac00404 	addi	r11,r11,16
   14d44:	52800404 	addi	r10,r10,16
   14d48:	413ff71e 	bne	r8,r4,14d28 <_gp+0xffff56b8>
   14d4c:	63000044 	addi	r12,r12,1
   14d50:	6018913a 	slli	r12,r12,4
   14d54:	39c003cc 	andi	r7,r7,15
   14d58:	010000c4 	movi	r4,3
   14d5c:	1b07883a 	add	r3,r3,r12
   14d60:	21c00e2e 	bgeu	r4,r7,14d9c <memset+0x100>
   14d64:	1813883a 	mov	r9,r3
   14d68:	3811883a 	mov	r8,r7
   14d6c:	010000c4 	movi	r4,3
   14d70:	49800015 	stw	r6,0(r9)
   14d74:	423fff04 	addi	r8,r8,-4
   14d78:	4a400104 	addi	r9,r9,4
   14d7c:	223ffc36 	bltu	r4,r8,14d70 <_gp+0xffff5700>
   14d80:	393fff04 	addi	r4,r7,-4
   14d84:	2008d0ba 	srli	r4,r4,2
   14d88:	39c000cc 	andi	r7,r7,3
   14d8c:	21000044 	addi	r4,r4,1
   14d90:	2109883a 	add	r4,r4,r4
   14d94:	2109883a 	add	r4,r4,r4
   14d98:	1907883a 	add	r3,r3,r4
   14d9c:	38000526 	beq	r7,zero,14db4 <memset+0x118>
   14da0:	19cf883a 	add	r7,r3,r7
   14da4:	19400005 	stb	r5,0(r3)
   14da8:	18c00044 	addi	r3,r3,1
   14dac:	38fffd1e 	bne	r7,r3,14da4 <_gp+0xffff5734>
   14db0:	f800283a 	ret
   14db4:	f800283a 	ret
   14db8:	2007883a 	mov	r3,r4
   14dbc:	300f883a 	mov	r7,r6
   14dc0:	003fc706 	br	14ce0 <_gp+0xffff5670>

00014dc4 <_sbrk_r>:
   14dc4:	defffd04 	addi	sp,sp,-12
   14dc8:	dc000015 	stw	r16,0(sp)
   14dcc:	040000b4 	movhi	r16,2
   14dd0:	dc400115 	stw	r17,4(sp)
   14dd4:	84248804 	addi	r16,r16,-28128
   14dd8:	2023883a 	mov	r17,r4
   14ddc:	2809883a 	mov	r4,r5
   14de0:	dfc00215 	stw	ra,8(sp)
   14de4:	80000015 	stw	zero,0(r16)
   14de8:	00159080 	call	15908 <sbrk>
   14dec:	00ffffc4 	movi	r3,-1
   14df0:	10c00526 	beq	r2,r3,14e08 <_sbrk_r+0x44>
   14df4:	dfc00217 	ldw	ra,8(sp)
   14df8:	dc400117 	ldw	r17,4(sp)
   14dfc:	dc000017 	ldw	r16,0(sp)
   14e00:	dec00304 	addi	sp,sp,12
   14e04:	f800283a 	ret
   14e08:	80c00017 	ldw	r3,0(r16)
   14e0c:	183ff926 	beq	r3,zero,14df4 <_gp+0xffff5784>
   14e10:	88c00015 	stw	r3,0(r17)
   14e14:	003ff706 	br	14df4 <_gp+0xffff5784>

00014e18 <__sread>:
   14e18:	defffe04 	addi	sp,sp,-8
   14e1c:	dc000015 	stw	r16,0(sp)
   14e20:	2821883a 	mov	r16,r5
   14e24:	2940038f 	ldh	r5,14(r5)
   14e28:	dfc00115 	stw	ra,4(sp)
   14e2c:	001521c0 	call	1521c <_read_r>
   14e30:	10000716 	blt	r2,zero,14e50 <__sread+0x38>
   14e34:	80c01417 	ldw	r3,80(r16)
   14e38:	1887883a 	add	r3,r3,r2
   14e3c:	80c01415 	stw	r3,80(r16)
   14e40:	dfc00117 	ldw	ra,4(sp)
   14e44:	dc000017 	ldw	r16,0(sp)
   14e48:	dec00204 	addi	sp,sp,8
   14e4c:	f800283a 	ret
   14e50:	80c0030b 	ldhu	r3,12(r16)
   14e54:	18fbffcc 	andi	r3,r3,61439
   14e58:	80c0030d 	sth	r3,12(r16)
   14e5c:	dfc00117 	ldw	ra,4(sp)
   14e60:	dc000017 	ldw	r16,0(sp)
   14e64:	dec00204 	addi	sp,sp,8
   14e68:	f800283a 	ret

00014e6c <__seofread>:
   14e6c:	0005883a 	mov	r2,zero
   14e70:	f800283a 	ret

00014e74 <__swrite>:
   14e74:	2880030b 	ldhu	r2,12(r5)
   14e78:	defffb04 	addi	sp,sp,-20
   14e7c:	dcc00315 	stw	r19,12(sp)
   14e80:	dc800215 	stw	r18,8(sp)
   14e84:	dc400115 	stw	r17,4(sp)
   14e88:	dc000015 	stw	r16,0(sp)
   14e8c:	dfc00415 	stw	ra,16(sp)
   14e90:	10c0400c 	andi	r3,r2,256
   14e94:	2821883a 	mov	r16,r5
   14e98:	2023883a 	mov	r17,r4
   14e9c:	3025883a 	mov	r18,r6
   14ea0:	3827883a 	mov	r19,r7
   14ea4:	18000526 	beq	r3,zero,14ebc <__swrite+0x48>
   14ea8:	2940038f 	ldh	r5,14(r5)
   14eac:	01c00084 	movi	r7,2
   14eb0:	000d883a 	mov	r6,zero
   14eb4:	00151bc0 	call	151bc <_lseek_r>
   14eb8:	8080030b 	ldhu	r2,12(r16)
   14ebc:	8140038f 	ldh	r5,14(r16)
   14ec0:	10bbffcc 	andi	r2,r2,61439
   14ec4:	980f883a 	mov	r7,r19
   14ec8:	900d883a 	mov	r6,r18
   14ecc:	8809883a 	mov	r4,r17
   14ed0:	8080030d 	sth	r2,12(r16)
   14ed4:	dfc00417 	ldw	ra,16(sp)
   14ed8:	dcc00317 	ldw	r19,12(sp)
   14edc:	dc800217 	ldw	r18,8(sp)
   14ee0:	dc400117 	ldw	r17,4(sp)
   14ee4:	dc000017 	ldw	r16,0(sp)
   14ee8:	dec00504 	addi	sp,sp,20
   14eec:	0014f541 	jmpi	14f54 <_write_r>

00014ef0 <__sseek>:
   14ef0:	defffe04 	addi	sp,sp,-8
   14ef4:	dc000015 	stw	r16,0(sp)
   14ef8:	2821883a 	mov	r16,r5
   14efc:	2940038f 	ldh	r5,14(r5)
   14f00:	dfc00115 	stw	ra,4(sp)
   14f04:	00151bc0 	call	151bc <_lseek_r>
   14f08:	00ffffc4 	movi	r3,-1
   14f0c:	10c00826 	beq	r2,r3,14f30 <__sseek+0x40>
   14f10:	80c0030b 	ldhu	r3,12(r16)
   14f14:	80801415 	stw	r2,80(r16)
   14f18:	18c40014 	ori	r3,r3,4096
   14f1c:	80c0030d 	sth	r3,12(r16)
   14f20:	dfc00117 	ldw	ra,4(sp)
   14f24:	dc000017 	ldw	r16,0(sp)
   14f28:	dec00204 	addi	sp,sp,8
   14f2c:	f800283a 	ret
   14f30:	80c0030b 	ldhu	r3,12(r16)
   14f34:	18fbffcc 	andi	r3,r3,61439
   14f38:	80c0030d 	sth	r3,12(r16)
   14f3c:	dfc00117 	ldw	ra,4(sp)
   14f40:	dc000017 	ldw	r16,0(sp)
   14f44:	dec00204 	addi	sp,sp,8
   14f48:	f800283a 	ret

00014f4c <__sclose>:
   14f4c:	2940038f 	ldh	r5,14(r5)
   14f50:	0014fb41 	jmpi	14fb4 <_close_r>

00014f54 <_write_r>:
   14f54:	defffd04 	addi	sp,sp,-12
   14f58:	2805883a 	mov	r2,r5
   14f5c:	dc000015 	stw	r16,0(sp)
   14f60:	040000b4 	movhi	r16,2
   14f64:	dc400115 	stw	r17,4(sp)
   14f68:	300b883a 	mov	r5,r6
   14f6c:	84248804 	addi	r16,r16,-28128
   14f70:	2023883a 	mov	r17,r4
   14f74:	380d883a 	mov	r6,r7
   14f78:	1009883a 	mov	r4,r2
   14f7c:	dfc00215 	stw	ra,8(sp)
   14f80:	80000015 	stw	zero,0(r16)
   14f84:	00159f40 	call	159f4 <write>
   14f88:	00ffffc4 	movi	r3,-1
   14f8c:	10c00526 	beq	r2,r3,14fa4 <_write_r+0x50>
   14f90:	dfc00217 	ldw	ra,8(sp)
   14f94:	dc400117 	ldw	r17,4(sp)
   14f98:	dc000017 	ldw	r16,0(sp)
   14f9c:	dec00304 	addi	sp,sp,12
   14fa0:	f800283a 	ret
   14fa4:	80c00017 	ldw	r3,0(r16)
   14fa8:	183ff926 	beq	r3,zero,14f90 <_gp+0xffff5920>
   14fac:	88c00015 	stw	r3,0(r17)
   14fb0:	003ff706 	br	14f90 <_gp+0xffff5920>

00014fb4 <_close_r>:
   14fb4:	defffd04 	addi	sp,sp,-12
   14fb8:	dc000015 	stw	r16,0(sp)
   14fbc:	040000b4 	movhi	r16,2
   14fc0:	dc400115 	stw	r17,4(sp)
   14fc4:	84248804 	addi	r16,r16,-28128
   14fc8:	2023883a 	mov	r17,r4
   14fcc:	2809883a 	mov	r4,r5
   14fd0:	dfc00215 	stw	ra,8(sp)
   14fd4:	80000015 	stw	zero,0(r16)
   14fd8:	0011ec00 	call	11ec0 <close>
   14fdc:	00ffffc4 	movi	r3,-1
   14fe0:	10c00526 	beq	r2,r3,14ff8 <_close_r+0x44>
   14fe4:	dfc00217 	ldw	ra,8(sp)
   14fe8:	dc400117 	ldw	r17,4(sp)
   14fec:	dc000017 	ldw	r16,0(sp)
   14ff0:	dec00304 	addi	sp,sp,12
   14ff4:	f800283a 	ret
   14ff8:	80c00017 	ldw	r3,0(r16)
   14ffc:	183ff926 	beq	r3,zero,14fe4 <_gp+0xffff5974>
   15000:	88c00015 	stw	r3,0(r17)
   15004:	003ff706 	br	14fe4 <_gp+0xffff5974>

00015008 <_fclose_r>:
   15008:	28003926 	beq	r5,zero,150f0 <_fclose_r+0xe8>
   1500c:	defffc04 	addi	sp,sp,-16
   15010:	dc400115 	stw	r17,4(sp)
   15014:	dc000015 	stw	r16,0(sp)
   15018:	dfc00315 	stw	ra,12(sp)
   1501c:	dc800215 	stw	r18,8(sp)
   15020:	2023883a 	mov	r17,r4
   15024:	2821883a 	mov	r16,r5
   15028:	20000226 	beq	r4,zero,15034 <_fclose_r+0x2c>
   1502c:	20800e17 	ldw	r2,56(r4)
   15030:	10002726 	beq	r2,zero,150d0 <_fclose_r+0xc8>
   15034:	8080030f 	ldh	r2,12(r16)
   15038:	1000071e 	bne	r2,zero,15058 <_fclose_r+0x50>
   1503c:	0005883a 	mov	r2,zero
   15040:	dfc00317 	ldw	ra,12(sp)
   15044:	dc800217 	ldw	r18,8(sp)
   15048:	dc400117 	ldw	r17,4(sp)
   1504c:	dc000017 	ldw	r16,0(sp)
   15050:	dec00404 	addi	sp,sp,16
   15054:	f800283a 	ret
   15058:	800b883a 	mov	r5,r16
   1505c:	8809883a 	mov	r4,r17
   15060:	00136c00 	call	136c0 <__sflush_r>
   15064:	1025883a 	mov	r18,r2
   15068:	80800b17 	ldw	r2,44(r16)
   1506c:	10000426 	beq	r2,zero,15080 <_fclose_r+0x78>
   15070:	81400717 	ldw	r5,28(r16)
   15074:	8809883a 	mov	r4,r17
   15078:	103ee83a 	callr	r2
   1507c:	10001616 	blt	r2,zero,150d8 <_fclose_r+0xd0>
   15080:	8080030b 	ldhu	r2,12(r16)
   15084:	1080200c 	andi	r2,r2,128
   15088:	1000151e 	bne	r2,zero,150e0 <_fclose_r+0xd8>
   1508c:	81400c17 	ldw	r5,48(r16)
   15090:	28000526 	beq	r5,zero,150a8 <_fclose_r+0xa0>
   15094:	80801004 	addi	r2,r16,64
   15098:	28800226 	beq	r5,r2,150a4 <_fclose_r+0x9c>
   1509c:	8809883a 	mov	r4,r17
   150a0:	0013e3c0 	call	13e3c <_free_r>
   150a4:	80000c15 	stw	zero,48(r16)
   150a8:	81401117 	ldw	r5,68(r16)
   150ac:	28000326 	beq	r5,zero,150bc <_fclose_r+0xb4>
   150b0:	8809883a 	mov	r4,r17
   150b4:	0013e3c0 	call	13e3c <_free_r>
   150b8:	80001115 	stw	zero,68(r16)
   150bc:	0013cd80 	call	13cd8 <__sfp_lock_acquire>
   150c0:	8000030d 	sth	zero,12(r16)
   150c4:	0013cdc0 	call	13cdc <__sfp_lock_release>
   150c8:	9005883a 	mov	r2,r18
   150cc:	003fdc06 	br	15040 <_gp+0xffff59d0>
   150d0:	0013cc80 	call	13cc8 <__sinit>
   150d4:	003fd706 	br	15034 <_gp+0xffff59c4>
   150d8:	04bfffc4 	movi	r18,-1
   150dc:	003fe806 	br	15080 <_gp+0xffff5a10>
   150e0:	81400417 	ldw	r5,16(r16)
   150e4:	8809883a 	mov	r4,r17
   150e8:	0013e3c0 	call	13e3c <_free_r>
   150ec:	003fe706 	br	1508c <_gp+0xffff5a1c>
   150f0:	0005883a 	mov	r2,zero
   150f4:	f800283a 	ret

000150f8 <fclose>:
   150f8:	00800074 	movhi	r2,1
   150fc:	109da604 	addi	r2,r2,30360
   15100:	200b883a 	mov	r5,r4
   15104:	11000017 	ldw	r4,0(r2)
   15108:	00150081 	jmpi	15008 <_fclose_r>

0001510c <_fstat_r>:
   1510c:	defffd04 	addi	sp,sp,-12
   15110:	2805883a 	mov	r2,r5
   15114:	dc000015 	stw	r16,0(sp)
   15118:	040000b4 	movhi	r16,2
   1511c:	dc400115 	stw	r17,4(sp)
   15120:	84248804 	addi	r16,r16,-28128
   15124:	2023883a 	mov	r17,r4
   15128:	300b883a 	mov	r5,r6
   1512c:	1009883a 	mov	r4,r2
   15130:	dfc00215 	stw	ra,8(sp)
   15134:	80000015 	stw	zero,0(r16)
   15138:	00154c80 	call	154c8 <fstat>
   1513c:	00ffffc4 	movi	r3,-1
   15140:	10c00526 	beq	r2,r3,15158 <_fstat_r+0x4c>
   15144:	dfc00217 	ldw	ra,8(sp)
   15148:	dc400117 	ldw	r17,4(sp)
   1514c:	dc000017 	ldw	r16,0(sp)
   15150:	dec00304 	addi	sp,sp,12
   15154:	f800283a 	ret
   15158:	80c00017 	ldw	r3,0(r16)
   1515c:	183ff926 	beq	r3,zero,15144 <_gp+0xffff5ad4>
   15160:	88c00015 	stw	r3,0(r17)
   15164:	003ff706 	br	15144 <_gp+0xffff5ad4>

00015168 <_isatty_r>:
   15168:	defffd04 	addi	sp,sp,-12
   1516c:	dc000015 	stw	r16,0(sp)
   15170:	040000b4 	movhi	r16,2
   15174:	dc400115 	stw	r17,4(sp)
   15178:	84248804 	addi	r16,r16,-28128
   1517c:	2023883a 	mov	r17,r4
   15180:	2809883a 	mov	r4,r5
   15184:	dfc00215 	stw	ra,8(sp)
   15188:	80000015 	stw	zero,0(r16)
   1518c:	00155bc0 	call	155bc <isatty>
   15190:	00ffffc4 	movi	r3,-1
   15194:	10c00526 	beq	r2,r3,151ac <_isatty_r+0x44>
   15198:	dfc00217 	ldw	ra,8(sp)
   1519c:	dc400117 	ldw	r17,4(sp)
   151a0:	dc000017 	ldw	r16,0(sp)
   151a4:	dec00304 	addi	sp,sp,12
   151a8:	f800283a 	ret
   151ac:	80c00017 	ldw	r3,0(r16)
   151b0:	183ff926 	beq	r3,zero,15198 <_gp+0xffff5b28>
   151b4:	88c00015 	stw	r3,0(r17)
   151b8:	003ff706 	br	15198 <_gp+0xffff5b28>

000151bc <_lseek_r>:
   151bc:	defffd04 	addi	sp,sp,-12
   151c0:	2805883a 	mov	r2,r5
   151c4:	dc000015 	stw	r16,0(sp)
   151c8:	040000b4 	movhi	r16,2
   151cc:	dc400115 	stw	r17,4(sp)
   151d0:	300b883a 	mov	r5,r6
   151d4:	84248804 	addi	r16,r16,-28128
   151d8:	2023883a 	mov	r17,r4
   151dc:	380d883a 	mov	r6,r7
   151e0:	1009883a 	mov	r4,r2
   151e4:	dfc00215 	stw	ra,8(sp)
   151e8:	80000015 	stw	zero,0(r16)
   151ec:	00156a40 	call	156a4 <lseek>
   151f0:	00ffffc4 	movi	r3,-1
   151f4:	10c00526 	beq	r2,r3,1520c <_lseek_r+0x50>
   151f8:	dfc00217 	ldw	ra,8(sp)
   151fc:	dc400117 	ldw	r17,4(sp)
   15200:	dc000017 	ldw	r16,0(sp)
   15204:	dec00304 	addi	sp,sp,12
   15208:	f800283a 	ret
   1520c:	80c00017 	ldw	r3,0(r16)
   15210:	183ff926 	beq	r3,zero,151f8 <_gp+0xffff5b88>
   15214:	88c00015 	stw	r3,0(r17)
   15218:	003ff706 	br	151f8 <_gp+0xffff5b88>

0001521c <_read_r>:
   1521c:	defffd04 	addi	sp,sp,-12
   15220:	2805883a 	mov	r2,r5
   15224:	dc000015 	stw	r16,0(sp)
   15228:	040000b4 	movhi	r16,2
   1522c:	dc400115 	stw	r17,4(sp)
   15230:	300b883a 	mov	r5,r6
   15234:	84248804 	addi	r16,r16,-28128
   15238:	2023883a 	mov	r17,r4
   1523c:	380d883a 	mov	r6,r7
   15240:	1009883a 	mov	r4,r2
   15244:	dfc00215 	stw	ra,8(sp)
   15248:	80000015 	stw	zero,0(r16)
   1524c:	00158040 	call	15804 <read>
   15250:	00ffffc4 	movi	r3,-1
   15254:	10c00526 	beq	r2,r3,1526c <_read_r+0x50>
   15258:	dfc00217 	ldw	ra,8(sp)
   1525c:	dc400117 	ldw	r17,4(sp)
   15260:	dc000017 	ldw	r16,0(sp)
   15264:	dec00304 	addi	sp,sp,12
   15268:	f800283a 	ret
   1526c:	80c00017 	ldw	r3,0(r16)
   15270:	183ff926 	beq	r3,zero,15258 <_gp+0xffff5be8>
   15274:	88c00015 	stw	r3,0(r17)
   15278:	003ff706 	br	15258 <_gp+0xffff5be8>

0001527c <__divsi3>:
   1527c:	20001b16 	blt	r4,zero,152ec <__divsi3+0x70>
   15280:	000f883a 	mov	r7,zero
   15284:	28001616 	blt	r5,zero,152e0 <__divsi3+0x64>
   15288:	200d883a 	mov	r6,r4
   1528c:	29001a2e 	bgeu	r5,r4,152f8 <__divsi3+0x7c>
   15290:	00800804 	movi	r2,32
   15294:	00c00044 	movi	r3,1
   15298:	00000106 	br	152a0 <__divsi3+0x24>
   1529c:	10000d26 	beq	r2,zero,152d4 <__divsi3+0x58>
   152a0:	294b883a 	add	r5,r5,r5
   152a4:	10bfffc4 	addi	r2,r2,-1
   152a8:	18c7883a 	add	r3,r3,r3
   152ac:	293ffb36 	bltu	r5,r4,1529c <_gp+0xffff5c2c>
   152b0:	0005883a 	mov	r2,zero
   152b4:	18000726 	beq	r3,zero,152d4 <__divsi3+0x58>
   152b8:	0005883a 	mov	r2,zero
   152bc:	31400236 	bltu	r6,r5,152c8 <__divsi3+0x4c>
   152c0:	314dc83a 	sub	r6,r6,r5
   152c4:	10c4b03a 	or	r2,r2,r3
   152c8:	1806d07a 	srli	r3,r3,1
   152cc:	280ad07a 	srli	r5,r5,1
   152d0:	183ffa1e 	bne	r3,zero,152bc <_gp+0xffff5c4c>
   152d4:	38000126 	beq	r7,zero,152dc <__divsi3+0x60>
   152d8:	0085c83a 	sub	r2,zero,r2
   152dc:	f800283a 	ret
   152e0:	014bc83a 	sub	r5,zero,r5
   152e4:	39c0005c 	xori	r7,r7,1
   152e8:	003fe706 	br	15288 <_gp+0xffff5c18>
   152ec:	0109c83a 	sub	r4,zero,r4
   152f0:	01c00044 	movi	r7,1
   152f4:	003fe306 	br	15284 <_gp+0xffff5c14>
   152f8:	00c00044 	movi	r3,1
   152fc:	003fee06 	br	152b8 <_gp+0xffff5c48>

00015300 <__modsi3>:
   15300:	20001716 	blt	r4,zero,15360 <__modsi3+0x60>
   15304:	000f883a 	mov	r7,zero
   15308:	2005883a 	mov	r2,r4
   1530c:	28001216 	blt	r5,zero,15358 <__modsi3+0x58>
   15310:	2900162e 	bgeu	r5,r4,1536c <__modsi3+0x6c>
   15314:	01800804 	movi	r6,32
   15318:	00c00044 	movi	r3,1
   1531c:	00000106 	br	15324 <__modsi3+0x24>
   15320:	30000a26 	beq	r6,zero,1534c <__modsi3+0x4c>
   15324:	294b883a 	add	r5,r5,r5
   15328:	31bfffc4 	addi	r6,r6,-1
   1532c:	18c7883a 	add	r3,r3,r3
   15330:	293ffb36 	bltu	r5,r4,15320 <_gp+0xffff5cb0>
   15334:	18000526 	beq	r3,zero,1534c <__modsi3+0x4c>
   15338:	1806d07a 	srli	r3,r3,1
   1533c:	11400136 	bltu	r2,r5,15344 <__modsi3+0x44>
   15340:	1145c83a 	sub	r2,r2,r5
   15344:	280ad07a 	srli	r5,r5,1
   15348:	183ffb1e 	bne	r3,zero,15338 <_gp+0xffff5cc8>
   1534c:	38000126 	beq	r7,zero,15354 <__modsi3+0x54>
   15350:	0085c83a 	sub	r2,zero,r2
   15354:	f800283a 	ret
   15358:	014bc83a 	sub	r5,zero,r5
   1535c:	003fec06 	br	15310 <_gp+0xffff5ca0>
   15360:	0109c83a 	sub	r4,zero,r4
   15364:	01c00044 	movi	r7,1
   15368:	003fe706 	br	15308 <_gp+0xffff5c98>
   1536c:	00c00044 	movi	r3,1
   15370:	003ff106 	br	15338 <_gp+0xffff5cc8>

00015374 <__udivsi3>:
   15374:	200d883a 	mov	r6,r4
   15378:	2900152e 	bgeu	r5,r4,153d0 <__udivsi3+0x5c>
   1537c:	28001416 	blt	r5,zero,153d0 <__udivsi3+0x5c>
   15380:	00800804 	movi	r2,32
   15384:	00c00044 	movi	r3,1
   15388:	00000206 	br	15394 <__udivsi3+0x20>
   1538c:	10000e26 	beq	r2,zero,153c8 <__udivsi3+0x54>
   15390:	28000516 	blt	r5,zero,153a8 <__udivsi3+0x34>
   15394:	294b883a 	add	r5,r5,r5
   15398:	10bfffc4 	addi	r2,r2,-1
   1539c:	18c7883a 	add	r3,r3,r3
   153a0:	293ffa36 	bltu	r5,r4,1538c <_gp+0xffff5d1c>
   153a4:	18000826 	beq	r3,zero,153c8 <__udivsi3+0x54>
   153a8:	0005883a 	mov	r2,zero
   153ac:	31400236 	bltu	r6,r5,153b8 <__udivsi3+0x44>
   153b0:	314dc83a 	sub	r6,r6,r5
   153b4:	10c4b03a 	or	r2,r2,r3
   153b8:	1806d07a 	srli	r3,r3,1
   153bc:	280ad07a 	srli	r5,r5,1
   153c0:	183ffa1e 	bne	r3,zero,153ac <_gp+0xffff5d3c>
   153c4:	f800283a 	ret
   153c8:	0005883a 	mov	r2,zero
   153cc:	f800283a 	ret
   153d0:	00c00044 	movi	r3,1
   153d4:	003ff406 	br	153a8 <_gp+0xffff5d38>

000153d8 <__umodsi3>:
   153d8:	2005883a 	mov	r2,r4
   153dc:	2900122e 	bgeu	r5,r4,15428 <__umodsi3+0x50>
   153e0:	28001116 	blt	r5,zero,15428 <__umodsi3+0x50>
   153e4:	01800804 	movi	r6,32
   153e8:	00c00044 	movi	r3,1
   153ec:	00000206 	br	153f8 <__umodsi3+0x20>
   153f0:	30000c26 	beq	r6,zero,15424 <__umodsi3+0x4c>
   153f4:	28000516 	blt	r5,zero,1540c <__umodsi3+0x34>
   153f8:	294b883a 	add	r5,r5,r5
   153fc:	31bfffc4 	addi	r6,r6,-1
   15400:	18c7883a 	add	r3,r3,r3
   15404:	293ffa36 	bltu	r5,r4,153f0 <_gp+0xffff5d80>
   15408:	18000626 	beq	r3,zero,15424 <__umodsi3+0x4c>
   1540c:	1806d07a 	srli	r3,r3,1
   15410:	11400136 	bltu	r2,r5,15418 <__umodsi3+0x40>
   15414:	1145c83a 	sub	r2,r2,r5
   15418:	280ad07a 	srli	r5,r5,1
   1541c:	183ffb1e 	bne	r3,zero,1540c <_gp+0xffff5d9c>
   15420:	f800283a 	ret
   15424:	f800283a 	ret
   15428:	00c00044 	movi	r3,1
   1542c:	003ff706 	br	1540c <_gp+0xffff5d9c>

00015430 <__mulsi3>:
   15430:	0005883a 	mov	r2,zero
   15434:	20000726 	beq	r4,zero,15454 <__mulsi3+0x24>
   15438:	20c0004c 	andi	r3,r4,1
   1543c:	2008d07a 	srli	r4,r4,1
   15440:	18000126 	beq	r3,zero,15448 <__mulsi3+0x18>
   15444:	1145883a 	add	r2,r2,r5
   15448:	294b883a 	add	r5,r5,r5
   1544c:	203ffa1e 	bne	r4,zero,15438 <_gp+0xffff5dc8>
   15450:	f800283a 	ret
   15454:	f800283a 	ret

00015458 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   15458:	defffd04 	addi	sp,sp,-12
   1545c:	df000215 	stw	fp,8(sp)
   15460:	df000204 	addi	fp,sp,8
   15464:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   15468:	0001883a 	nop
   1546c:	e0bfff17 	ldw	r2,-4(fp)
   15470:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   15474:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   15478:	10000226 	beq	r2,zero,15484 <_exit+0x2c>
    ALT_SIM_FAIL();
   1547c:	002af070 	cmpltui	zero,zero,43969
   15480:	00000106 	br	15488 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   15484:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   15488:	003fff06 	br	15488 <_gp+0xffff5e18>

0001548c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1548c:	defffe04 	addi	sp,sp,-8
   15490:	dfc00115 	stw	ra,4(sp)
   15494:	df000015 	stw	fp,0(sp)
   15498:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1549c:	d0a00517 	ldw	r2,-32748(gp)
   154a0:	10000326 	beq	r2,zero,154b0 <alt_get_errno+0x24>
   154a4:	d0a00517 	ldw	r2,-32748(gp)
   154a8:	103ee83a 	callr	r2
   154ac:	00000106 	br	154b4 <alt_get_errno+0x28>
   154b0:	d0a6ec04 	addi	r2,gp,-25680
}
   154b4:	e037883a 	mov	sp,fp
   154b8:	dfc00117 	ldw	ra,4(sp)
   154bc:	df000017 	ldw	fp,0(sp)
   154c0:	dec00204 	addi	sp,sp,8
   154c4:	f800283a 	ret

000154c8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   154c8:	defffb04 	addi	sp,sp,-20
   154cc:	dfc00415 	stw	ra,16(sp)
   154d0:	df000315 	stw	fp,12(sp)
   154d4:	df000304 	addi	fp,sp,12
   154d8:	e13ffe15 	stw	r4,-8(fp)
   154dc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   154e0:	e0bffe17 	ldw	r2,-8(fp)
   154e4:	10000816 	blt	r2,zero,15508 <fstat+0x40>
   154e8:	01400304 	movi	r5,12
   154ec:	e13ffe17 	ldw	r4,-8(fp)
   154f0:	00154300 	call	15430 <__mulsi3>
   154f4:	1007883a 	mov	r3,r2
   154f8:	00800074 	movhi	r2,1
   154fc:	109b3104 	addi	r2,r2,27844
   15500:	1885883a 	add	r2,r3,r2
   15504:	00000106 	br	1550c <fstat+0x44>
   15508:	0005883a 	mov	r2,zero
   1550c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   15510:	e0bffd17 	ldw	r2,-12(fp)
   15514:	10001026 	beq	r2,zero,15558 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   15518:	e0bffd17 	ldw	r2,-12(fp)
   1551c:	10800017 	ldw	r2,0(r2)
   15520:	10800817 	ldw	r2,32(r2)
   15524:	10000726 	beq	r2,zero,15544 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   15528:	e0bffd17 	ldw	r2,-12(fp)
   1552c:	10800017 	ldw	r2,0(r2)
   15530:	10800817 	ldw	r2,32(r2)
   15534:	e17fff17 	ldw	r5,-4(fp)
   15538:	e13ffd17 	ldw	r4,-12(fp)
   1553c:	103ee83a 	callr	r2
   15540:	00000a06 	br	1556c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   15544:	e0bfff17 	ldw	r2,-4(fp)
   15548:	00c80004 	movi	r3,8192
   1554c:	10c00115 	stw	r3,4(r2)
      return 0;
   15550:	0005883a 	mov	r2,zero
   15554:	00000506 	br	1556c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   15558:	001548c0 	call	1548c <alt_get_errno>
   1555c:	1007883a 	mov	r3,r2
   15560:	00801444 	movi	r2,81
   15564:	18800015 	stw	r2,0(r3)
    return -1;
   15568:	00bfffc4 	movi	r2,-1
  }
}
   1556c:	e037883a 	mov	sp,fp
   15570:	dfc00117 	ldw	ra,4(sp)
   15574:	df000017 	ldw	fp,0(sp)
   15578:	dec00204 	addi	sp,sp,8
   1557c:	f800283a 	ret

00015580 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15580:	defffe04 	addi	sp,sp,-8
   15584:	dfc00115 	stw	ra,4(sp)
   15588:	df000015 	stw	fp,0(sp)
   1558c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15590:	d0a00517 	ldw	r2,-32748(gp)
   15594:	10000326 	beq	r2,zero,155a4 <alt_get_errno+0x24>
   15598:	d0a00517 	ldw	r2,-32748(gp)
   1559c:	103ee83a 	callr	r2
   155a0:	00000106 	br	155a8 <alt_get_errno+0x28>
   155a4:	d0a6ec04 	addi	r2,gp,-25680
}
   155a8:	e037883a 	mov	sp,fp
   155ac:	dfc00117 	ldw	ra,4(sp)
   155b0:	df000017 	ldw	fp,0(sp)
   155b4:	dec00204 	addi	sp,sp,8
   155b8:	f800283a 	ret

000155bc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   155bc:	deffed04 	addi	sp,sp,-76
   155c0:	dfc01215 	stw	ra,72(sp)
   155c4:	df001115 	stw	fp,68(sp)
   155c8:	df001104 	addi	fp,sp,68
   155cc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   155d0:	e0bfff17 	ldw	r2,-4(fp)
   155d4:	10000816 	blt	r2,zero,155f8 <isatty+0x3c>
   155d8:	01400304 	movi	r5,12
   155dc:	e13fff17 	ldw	r4,-4(fp)
   155e0:	00154300 	call	15430 <__mulsi3>
   155e4:	1007883a 	mov	r3,r2
   155e8:	00800074 	movhi	r2,1
   155ec:	109b3104 	addi	r2,r2,27844
   155f0:	1885883a 	add	r2,r3,r2
   155f4:	00000106 	br	155fc <isatty+0x40>
   155f8:	0005883a 	mov	r2,zero
   155fc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   15600:	e0bfef17 	ldw	r2,-68(fp)
   15604:	10000e26 	beq	r2,zero,15640 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   15608:	e0bfef17 	ldw	r2,-68(fp)
   1560c:	10800017 	ldw	r2,0(r2)
   15610:	10800817 	ldw	r2,32(r2)
   15614:	1000021e 	bne	r2,zero,15620 <isatty+0x64>
    {
      return 1;
   15618:	00800044 	movi	r2,1
   1561c:	00000d06 	br	15654 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   15620:	e0bff004 	addi	r2,fp,-64
   15624:	100b883a 	mov	r5,r2
   15628:	e13fff17 	ldw	r4,-4(fp)
   1562c:	00154c80 	call	154c8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   15630:	e0bff117 	ldw	r2,-60(fp)
   15634:	10880020 	cmpeqi	r2,r2,8192
   15638:	10803fcc 	andi	r2,r2,255
   1563c:	00000506 	br	15654 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   15640:	00155800 	call	15580 <alt_get_errno>
   15644:	1007883a 	mov	r3,r2
   15648:	00801444 	movi	r2,81
   1564c:	18800015 	stw	r2,0(r3)
    return 0;
   15650:	0005883a 	mov	r2,zero
  }
}
   15654:	e037883a 	mov	sp,fp
   15658:	dfc00117 	ldw	ra,4(sp)
   1565c:	df000017 	ldw	fp,0(sp)
   15660:	dec00204 	addi	sp,sp,8
   15664:	f800283a 	ret

00015668 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15668:	defffe04 	addi	sp,sp,-8
   1566c:	dfc00115 	stw	ra,4(sp)
   15670:	df000015 	stw	fp,0(sp)
   15674:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15678:	d0a00517 	ldw	r2,-32748(gp)
   1567c:	10000326 	beq	r2,zero,1568c <alt_get_errno+0x24>
   15680:	d0a00517 	ldw	r2,-32748(gp)
   15684:	103ee83a 	callr	r2
   15688:	00000106 	br	15690 <alt_get_errno+0x28>
   1568c:	d0a6ec04 	addi	r2,gp,-25680
}
   15690:	e037883a 	mov	sp,fp
   15694:	dfc00117 	ldw	ra,4(sp)
   15698:	df000017 	ldw	fp,0(sp)
   1569c:	dec00204 	addi	sp,sp,8
   156a0:	f800283a 	ret

000156a4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   156a4:	defff904 	addi	sp,sp,-28
   156a8:	dfc00615 	stw	ra,24(sp)
   156ac:	df000515 	stw	fp,20(sp)
   156b0:	df000504 	addi	fp,sp,20
   156b4:	e13ffd15 	stw	r4,-12(fp)
   156b8:	e17ffe15 	stw	r5,-8(fp)
   156bc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   156c0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   156c4:	e0bffd17 	ldw	r2,-12(fp)
   156c8:	10000816 	blt	r2,zero,156ec <lseek+0x48>
   156cc:	01400304 	movi	r5,12
   156d0:	e13ffd17 	ldw	r4,-12(fp)
   156d4:	00154300 	call	15430 <__mulsi3>
   156d8:	1007883a 	mov	r3,r2
   156dc:	00800074 	movhi	r2,1
   156e0:	109b3104 	addi	r2,r2,27844
   156e4:	1885883a 	add	r2,r3,r2
   156e8:	00000106 	br	156f0 <lseek+0x4c>
   156ec:	0005883a 	mov	r2,zero
   156f0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   156f4:	e0bffc17 	ldw	r2,-16(fp)
   156f8:	10001026 	beq	r2,zero,1573c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   156fc:	e0bffc17 	ldw	r2,-16(fp)
   15700:	10800017 	ldw	r2,0(r2)
   15704:	10800717 	ldw	r2,28(r2)
   15708:	10000926 	beq	r2,zero,15730 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1570c:	e0bffc17 	ldw	r2,-16(fp)
   15710:	10800017 	ldw	r2,0(r2)
   15714:	10800717 	ldw	r2,28(r2)
   15718:	e1bfff17 	ldw	r6,-4(fp)
   1571c:	e17ffe17 	ldw	r5,-8(fp)
   15720:	e13ffc17 	ldw	r4,-16(fp)
   15724:	103ee83a 	callr	r2
   15728:	e0bffb15 	stw	r2,-20(fp)
   1572c:	00000506 	br	15744 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   15730:	00bfde84 	movi	r2,-134
   15734:	e0bffb15 	stw	r2,-20(fp)
   15738:	00000206 	br	15744 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   1573c:	00bfebc4 	movi	r2,-81
   15740:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   15744:	e0bffb17 	ldw	r2,-20(fp)
   15748:	1000070e 	bge	r2,zero,15768 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   1574c:	00156680 	call	15668 <alt_get_errno>
   15750:	1007883a 	mov	r3,r2
   15754:	e0bffb17 	ldw	r2,-20(fp)
   15758:	0085c83a 	sub	r2,zero,r2
   1575c:	18800015 	stw	r2,0(r3)
    rc = -1;
   15760:	00bfffc4 	movi	r2,-1
   15764:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   15768:	e0bffb17 	ldw	r2,-20(fp)
}
   1576c:	e037883a 	mov	sp,fp
   15770:	dfc00117 	ldw	ra,4(sp)
   15774:	df000017 	ldw	fp,0(sp)
   15778:	dec00204 	addi	sp,sp,8
   1577c:	f800283a 	ret

00015780 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   15780:	defffe04 	addi	sp,sp,-8
   15784:	df000115 	stw	fp,4(sp)
   15788:	df000104 	addi	fp,sp,4
   1578c:	e13fff15 	stw	r4,-4(fp)
}
   15790:	0001883a 	nop
   15794:	e037883a 	mov	sp,fp
   15798:	df000017 	ldw	fp,0(sp)
   1579c:	dec00104 	addi	sp,sp,4
   157a0:	f800283a 	ret

000157a4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   157a4:	defffe04 	addi	sp,sp,-8
   157a8:	df000115 	stw	fp,4(sp)
   157ac:	df000104 	addi	fp,sp,4
   157b0:	e13fff15 	stw	r4,-4(fp)
}
   157b4:	0001883a 	nop
   157b8:	e037883a 	mov	sp,fp
   157bc:	df000017 	ldw	fp,0(sp)
   157c0:	dec00104 	addi	sp,sp,4
   157c4:	f800283a 	ret

000157c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   157c8:	defffe04 	addi	sp,sp,-8
   157cc:	dfc00115 	stw	ra,4(sp)
   157d0:	df000015 	stw	fp,0(sp)
   157d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   157d8:	d0a00517 	ldw	r2,-32748(gp)
   157dc:	10000326 	beq	r2,zero,157ec <alt_get_errno+0x24>
   157e0:	d0a00517 	ldw	r2,-32748(gp)
   157e4:	103ee83a 	callr	r2
   157e8:	00000106 	br	157f0 <alt_get_errno+0x28>
   157ec:	d0a6ec04 	addi	r2,gp,-25680
}
   157f0:	e037883a 	mov	sp,fp
   157f4:	dfc00117 	ldw	ra,4(sp)
   157f8:	df000017 	ldw	fp,0(sp)
   157fc:	dec00204 	addi	sp,sp,8
   15800:	f800283a 	ret

00015804 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   15804:	defff904 	addi	sp,sp,-28
   15808:	dfc00615 	stw	ra,24(sp)
   1580c:	df000515 	stw	fp,20(sp)
   15810:	df000504 	addi	fp,sp,20
   15814:	e13ffd15 	stw	r4,-12(fp)
   15818:	e17ffe15 	stw	r5,-8(fp)
   1581c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   15820:	e0bffd17 	ldw	r2,-12(fp)
   15824:	10000816 	blt	r2,zero,15848 <read+0x44>
   15828:	01400304 	movi	r5,12
   1582c:	e13ffd17 	ldw	r4,-12(fp)
   15830:	00154300 	call	15430 <__mulsi3>
   15834:	1007883a 	mov	r3,r2
   15838:	00800074 	movhi	r2,1
   1583c:	109b3104 	addi	r2,r2,27844
   15840:	1885883a 	add	r2,r3,r2
   15844:	00000106 	br	1584c <read+0x48>
   15848:	0005883a 	mov	r2,zero
   1584c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   15850:	e0bffb17 	ldw	r2,-20(fp)
   15854:	10002226 	beq	r2,zero,158e0 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   15858:	e0bffb17 	ldw	r2,-20(fp)
   1585c:	10800217 	ldw	r2,8(r2)
   15860:	108000cc 	andi	r2,r2,3
   15864:	10800060 	cmpeqi	r2,r2,1
   15868:	1000181e 	bne	r2,zero,158cc <read+0xc8>
        (fd->dev->read))
   1586c:	e0bffb17 	ldw	r2,-20(fp)
   15870:	10800017 	ldw	r2,0(r2)
   15874:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   15878:	10001426 	beq	r2,zero,158cc <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   1587c:	e0bffb17 	ldw	r2,-20(fp)
   15880:	10800017 	ldw	r2,0(r2)
   15884:	10800517 	ldw	r2,20(r2)
   15888:	e0ffff17 	ldw	r3,-4(fp)
   1588c:	180d883a 	mov	r6,r3
   15890:	e17ffe17 	ldw	r5,-8(fp)
   15894:	e13ffb17 	ldw	r4,-20(fp)
   15898:	103ee83a 	callr	r2
   1589c:	e0bffc15 	stw	r2,-16(fp)
   158a0:	e0bffc17 	ldw	r2,-16(fp)
   158a4:	1000070e 	bge	r2,zero,158c4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   158a8:	00157c80 	call	157c8 <alt_get_errno>
   158ac:	1007883a 	mov	r3,r2
   158b0:	e0bffc17 	ldw	r2,-16(fp)
   158b4:	0085c83a 	sub	r2,zero,r2
   158b8:	18800015 	stw	r2,0(r3)
          return -1;
   158bc:	00bfffc4 	movi	r2,-1
   158c0:	00000c06 	br	158f4 <read+0xf0>
        }
        return rval;
   158c4:	e0bffc17 	ldw	r2,-16(fp)
   158c8:	00000a06 	br	158f4 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   158cc:	00157c80 	call	157c8 <alt_get_errno>
   158d0:	1007883a 	mov	r3,r2
   158d4:	00800344 	movi	r2,13
   158d8:	18800015 	stw	r2,0(r3)
   158dc:	00000406 	br	158f0 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   158e0:	00157c80 	call	157c8 <alt_get_errno>
   158e4:	1007883a 	mov	r3,r2
   158e8:	00801444 	movi	r2,81
   158ec:	18800015 	stw	r2,0(r3)
  }
  return -1;
   158f0:	00bfffc4 	movi	r2,-1
}
   158f4:	e037883a 	mov	sp,fp
   158f8:	dfc00117 	ldw	ra,4(sp)
   158fc:	df000017 	ldw	fp,0(sp)
   15900:	dec00204 	addi	sp,sp,8
   15904:	f800283a 	ret

00015908 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   15908:	defff904 	addi	sp,sp,-28
   1590c:	df000615 	stw	fp,24(sp)
   15910:	df000604 	addi	fp,sp,24
   15914:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15918:	0005303a 	rdctl	r2,status
   1591c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15920:	e0fffe17 	ldw	r3,-8(fp)
   15924:	00bfff84 	movi	r2,-2
   15928:	1884703a 	and	r2,r3,r2
   1592c:	1001703a 	wrctl	status,r2
  
  return context;
   15930:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   15934:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   15938:	d0a00d17 	ldw	r2,-32716(gp)
   1593c:	10c000c4 	addi	r3,r2,3
   15940:	00bfff04 	movi	r2,-4
   15944:	1884703a 	and	r2,r3,r2
   15948:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1594c:	d0e00d17 	ldw	r3,-32716(gp)
   15950:	e0bfff17 	ldw	r2,-4(fp)
   15954:	1887883a 	add	r3,r3,r2
   15958:	008000b4 	movhi	r2,2
   1595c:	10a71004 	addi	r2,r2,-25536
   15960:	10c0062e 	bgeu	r2,r3,1597c <sbrk+0x74>
   15964:	e0bffb17 	ldw	r2,-20(fp)
   15968:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1596c:	e0bffa17 	ldw	r2,-24(fp)
   15970:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   15974:	00bfffc4 	movi	r2,-1
   15978:	00000b06 	br	159a8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   1597c:	d0a00d17 	ldw	r2,-32716(gp)
   15980:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   15984:	d0e00d17 	ldw	r3,-32716(gp)
   15988:	e0bfff17 	ldw	r2,-4(fp)
   1598c:	1885883a 	add	r2,r3,r2
   15990:	d0a00d15 	stw	r2,-32716(gp)
   15994:	e0bffb17 	ldw	r2,-20(fp)
   15998:	e0bffc15 	stw	r2,-16(fp)
   1599c:	e0bffc17 	ldw	r2,-16(fp)
   159a0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   159a4:	e0bffd17 	ldw	r2,-12(fp)
} 
   159a8:	e037883a 	mov	sp,fp
   159ac:	df000017 	ldw	fp,0(sp)
   159b0:	dec00104 	addi	sp,sp,4
   159b4:	f800283a 	ret

000159b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   159b8:	defffe04 	addi	sp,sp,-8
   159bc:	dfc00115 	stw	ra,4(sp)
   159c0:	df000015 	stw	fp,0(sp)
   159c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   159c8:	d0a00517 	ldw	r2,-32748(gp)
   159cc:	10000326 	beq	r2,zero,159dc <alt_get_errno+0x24>
   159d0:	d0a00517 	ldw	r2,-32748(gp)
   159d4:	103ee83a 	callr	r2
   159d8:	00000106 	br	159e0 <alt_get_errno+0x28>
   159dc:	d0a6ec04 	addi	r2,gp,-25680
}
   159e0:	e037883a 	mov	sp,fp
   159e4:	dfc00117 	ldw	ra,4(sp)
   159e8:	df000017 	ldw	fp,0(sp)
   159ec:	dec00204 	addi	sp,sp,8
   159f0:	f800283a 	ret

000159f4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   159f4:	defff904 	addi	sp,sp,-28
   159f8:	dfc00615 	stw	ra,24(sp)
   159fc:	df000515 	stw	fp,20(sp)
   15a00:	df000504 	addi	fp,sp,20
   15a04:	e13ffd15 	stw	r4,-12(fp)
   15a08:	e17ffe15 	stw	r5,-8(fp)
   15a0c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   15a10:	e0bffd17 	ldw	r2,-12(fp)
   15a14:	10000816 	blt	r2,zero,15a38 <write+0x44>
   15a18:	01400304 	movi	r5,12
   15a1c:	e13ffd17 	ldw	r4,-12(fp)
   15a20:	00154300 	call	15430 <__mulsi3>
   15a24:	1007883a 	mov	r3,r2
   15a28:	00800074 	movhi	r2,1
   15a2c:	109b3104 	addi	r2,r2,27844
   15a30:	1885883a 	add	r2,r3,r2
   15a34:	00000106 	br	15a3c <write+0x48>
   15a38:	0005883a 	mov	r2,zero
   15a3c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   15a40:	e0bffb17 	ldw	r2,-20(fp)
   15a44:	10002126 	beq	r2,zero,15acc <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   15a48:	e0bffb17 	ldw	r2,-20(fp)
   15a4c:	10800217 	ldw	r2,8(r2)
   15a50:	108000cc 	andi	r2,r2,3
   15a54:	10001826 	beq	r2,zero,15ab8 <write+0xc4>
   15a58:	e0bffb17 	ldw	r2,-20(fp)
   15a5c:	10800017 	ldw	r2,0(r2)
   15a60:	10800617 	ldw	r2,24(r2)
   15a64:	10001426 	beq	r2,zero,15ab8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   15a68:	e0bffb17 	ldw	r2,-20(fp)
   15a6c:	10800017 	ldw	r2,0(r2)
   15a70:	10800617 	ldw	r2,24(r2)
   15a74:	e0ffff17 	ldw	r3,-4(fp)
   15a78:	180d883a 	mov	r6,r3
   15a7c:	e17ffe17 	ldw	r5,-8(fp)
   15a80:	e13ffb17 	ldw	r4,-20(fp)
   15a84:	103ee83a 	callr	r2
   15a88:	e0bffc15 	stw	r2,-16(fp)
   15a8c:	e0bffc17 	ldw	r2,-16(fp)
   15a90:	1000070e 	bge	r2,zero,15ab0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   15a94:	00159b80 	call	159b8 <alt_get_errno>
   15a98:	1007883a 	mov	r3,r2
   15a9c:	e0bffc17 	ldw	r2,-16(fp)
   15aa0:	0085c83a 	sub	r2,zero,r2
   15aa4:	18800015 	stw	r2,0(r3)
        return -1;
   15aa8:	00bfffc4 	movi	r2,-1
   15aac:	00000c06 	br	15ae0 <write+0xec>
      }
      return rval;
   15ab0:	e0bffc17 	ldw	r2,-16(fp)
   15ab4:	00000a06 	br	15ae0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   15ab8:	00159b80 	call	159b8 <alt_get_errno>
   15abc:	1007883a 	mov	r3,r2
   15ac0:	00800344 	movi	r2,13
   15ac4:	18800015 	stw	r2,0(r3)
   15ac8:	00000406 	br	15adc <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   15acc:	00159b80 	call	159b8 <alt_get_errno>
   15ad0:	1007883a 	mov	r3,r2
   15ad4:	00801444 	movi	r2,81
   15ad8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   15adc:	00bfffc4 	movi	r2,-1
}
   15ae0:	e037883a 	mov	sp,fp
   15ae4:	dfc00117 	ldw	ra,4(sp)
   15ae8:	df000017 	ldw	fp,0(sp)
   15aec:	dec00204 	addi	sp,sp,8
   15af0:	f800283a 	ret
