
Ixtopor-2.elf:     file format elf32-littlenios2
Ixtopor-2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010234

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00005510 memsz 0x00005510 flags r-x
    LOAD off    0x00006530 vaddr 0x00015530 paddr 0x00016ff4 align 2**12
         filesz 0x00001ac4 memsz 0x00001ac4 flags rw-
    LOAD off    0x00008ab8 vaddr 0x00018ab8 paddr 0x00018ab8 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000214  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005294  00010234  00010234  00001234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000068  000154c8  000154c8  000064c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ac4  00015530  00016ff4  00006530  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00018ab8  00018ab8  00008ab8  2**2
                  ALLOC, SMALL_DATA
  6 .memoria      00000000  00018c0c  00018c0c  00007ff4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00007ff4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a58  00000000  00000000  00008018  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000163c1  00000000  00000000  00008a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000060a5  00000000  00000000  0001ee31  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000068cc  00000000  00000000  00024ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000016a4  00000000  00000000  0002b7a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002868  00000000  00000000  0002ce48  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003545  00000000  00000000  0002f6b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00032bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000530  00000000  00000000  00032c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000358b2  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000358b5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000358b8  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000358b9  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000358ba  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000358be  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000358c2  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000358c6  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000358cf  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000358d8  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  000358e1  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000016  00000000  00000000  000358e7  2**0
                  CONTENTS, READONLY
 29 .jdi          000036bf  00000000  00000000  000358fd  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000c4f1f  00000000  00000000  00038fbc  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010234 l    d  .text	00000000 .text
000154c8 l    d  .rodata	00000000 .rodata
00015530 l    d  .rwdata	00000000 .rwdata
00018ab8 l    d  .bss	00000000 .bss
00018c0c l    d  .memoria	00000000 .memoria
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Ixtopor-2_bsp//obj/HAL/src/crt0.o
0001026c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
00010328 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010728 l     F .text	00000034 alt_dev_reg
00015530 l     O .rwdata	00001060 jtag_uart
00016590 l     O .rwdata	0000002c adc_1
000165bc l     O .rwdata	0000002c uart_rs232
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00010a2c l     F .text	00000210 altera_avalon_jtag_uart_irq
00010c3c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00011274 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00011978 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00011aac l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00011ad8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00011d28 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00012008 l     F .text	0000003c alt_get_errno
00012044 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00016790 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0001333c l     F .text	00000008 __fp_unlock
00013350 l     F .text	0000019c __sinit.part.1
000134ec l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00014e60 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00014f54 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0001503c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0001519c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
00016ff0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0001538c l     F .text	0000003c alt_get_errno
00018ad0 g     O .bss	00000004 alt_instruction_exception_handler
00014b3c g     F .text	00000054 _isatty_r
00010414 g     F .text	0000007c alt_main
00018b0c g     O .bss	00000100 alt_irq
00014b90 g     F .text	00000060 _lseek_r
00016ff4 g       *ABS*	00000000 __flash_rwdata_start
00018c0c g       *ABS*	00000000 __alt_heap_start
000148c4 g     F .text	0000005c __sseek
0001369c g     F .text	00000010 __sinit
00012b50 g     F .text	00000140 __swbuf_r
000134f4 g     F .text	00000078 __sfmoreglue
00015178 g     F .text	00000024 __malloc_unlock
00011594 g     F .text	00000090 alt_up_rs232_read_fd
00013684 g     F .text	00000018 _cleanup
000124b4 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00014ae0 g     F .text	0000005c _fstat_r
00018ad4 g     O .bss	00000004 errno
00014840 g     F .text	00000008 __seofread
00018abc g     O .bss	00000004 alt_argv
0001efbc g       *ABS*	00000000 _gp
000106f8 g     F .text	00000030 usleep
00016610 g     O .rwdata	00000180 alt_fd_list
00011c78 g     F .text	00000090 alt_find_dev
00012808 g     F .text	00000148 memcpy
00013344 g     F .text	0000000c _cleanup_r
00011e0c g     F .text	0000007c alt_io_redirect
000154c8 g       *ABS*	00000000 __DTOR_END__
00011520 g     F .text	00000074 alt_up_rs232_read_data
000126a4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00010e34 g     F .text	0000021c altera_avalon_jtag_uart_read
00014d48 g     F .text	00000064 .hidden __udivsi3
00014f90 g     F .text	000000ac isatty
00018ae0 g     O .bss	00000004 __malloc_top_pad
00014798 g     F .text	00000054 _sbrk_r
00014bf0 g     F .text	00000060 _read_r
00016fcc g     O .rwdata	00000004 alt_max_fd
0001149c g     F .text	00000044 alt_up_rs232_check_parity
000149dc g     F .text	000000f0 _fclose_r
0001330c g     F .text	00000030 fflush
00018adc g     O .bss	00000004 __malloc_max_sbrked_mem
00011e88 g     F .text	00000180 alt_irq_register
00015078 g     F .text	000000dc lseek
00016fe0 g     O .rwdata	00000004 _global_impure_ptr
00018c0c g       *ABS*	00000000 __bss_end
000123ac g     F .text	00000108 alt_tick
000136bc g     F .text	00000018 __fp_lock_all
00012310 g     F .text	0000009c alt_alarm_stop
00018ac4 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000d8 alt_irq_handler
000165e8 g     O .rwdata	00000028 alt_dev_null
00011a8c g     F .text	00000020 alt_dcache_flush_all
00016ff4 g       *ABS*	00000000 __ram_rwdata_end
00016fc4 g     O .rwdata	00000008 alt_dev_list
000153c8 g     F .text	00000100 write
00012950 g     F .text	000000a0 _putc_r
00015530 g       *ABS*	00000000 __ram_rodata_end
00014e9c g     F .text	000000b8 fstat
00011624 g     F .text	00000094 alt_up_rs232_write_fd
00014dac g     F .text	00000058 .hidden __umodsi3
00018c0c g       *ABS*	00000000 end
00010978 g     F .text	000000b4 altera_avalon_jtag_uart_init
000101d4 g     F .exceptions	00000060 alt_instruction_exception_entry
000154c8 g       *ABS*	00000000 __CTOR_LIST__
0001c350 g       *ABS*	00000000 __alt_stack_pointer
000112f0 g     F .text	00000074 alt_avalon_timer_sc_init
00011050 g     F .text	00000224 altera_avalon_jtag_uart_write
000136ac g     F .text	00000004 __sfp_lock_acquire
00013810 g     F .text	00000310 _free_r
00010490 g     F .text	0000022c alt_printf
00012f14 g     F .text	00000180 __call_exitprocs
00016fe8 g     O .rwdata	00000004 __malloc_sbrk_base
00010234 g     F .text	0000003c _start
00018ac8 g     O .bss	00000004 _alt_tick_rate
00018acc g     O .bss	00000004 _alt_nticks
000151d8 g     F .text	00000104 read
00010794 g     F .text	00000080 alt_sys_init
00012dfc g     F .text	00000118 __register_exitproc
00011460 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00010cdc g     F .text	00000068 altera_avalon_jtag_uart_close
00014e04 g     F .text	00000028 .hidden __mulsi3
00015530 g       *ABS*	00000000 __ram_rwdata_start
000154c8 g       *ABS*	00000000 __ram_rodata_start
00018ae4 g     O .bss	00000028 __malloc_current_mallinfo
00010814 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000125e0 g     F .text	000000c4 alt_get_fd
00011820 g     F .text	00000158 alt_busy_sleep
00014988 g     F .text	00000054 _close_r
0001278c g     F .text	0000007c memcmp
000108d4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00018c0c g       *ABS*	00000000 __alt_stack_base
00010924 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00010000 g       *ABS*	00000000 __alt_mem_memoria
00012ca8 g     F .text	00000154 __swsetup_r
0001356c g     F .text	00000118 __sfp
00016bb4 g     O .rwdata	00000408 __malloc_av_
000136b8 g     F .text	00000004 __sinit_lock_release
000147ec g     F .text	00000054 __sread
000113c0 g     F .text	00000060 alt_up_rs232_disable_read_interrupt
000124d8 g     F .text	00000108 alt_find_file
00011b14 g     F .text	000000a4 alt_dev_llist_insert
00015154 g     F .text	00000024 __malloc_lock
000152dc g     F .text	000000b0 sbrk
000132b0 g     F .text	0000005c _fflush_r
00018ab8 g       *ABS*	00000000 __bss_start
00014670 g     F .text	00000128 memset
00010270 g     F .text	000000b8 main
00018ac0 g     O .bss	00000004 alt_envp
00018ad8 g     O .bss	00000004 __malloc_max_total_mem
00010874 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00012c90 g     F .text	00000018 __swbuf
00014920 g     F .text	00000008 __sclose
0001c350 g       *ABS*	00000000 __alt_heap_limit
00014acc g     F .text	00000014 fclose
00013e64 g     F .text	0000080c _malloc_r
00016fd0 g     O .rwdata	00000004 alt_errno
00013b20 g     F .text	000000c4 _fwalk
000129f0 g     F .text	000000c8 putc
00014c50 g     F .text	00000084 .hidden __divsi3
000136ec g     F .text	00000124 _malloc_trim_r
000154c8 g       *ABS*	00000000 __CTOR_END__
000154c8 g       *ABS*	00000000 __flash_rodata_start
000154c8 g       *ABS*	00000000 __DTOR_LIST__
000116b8 g     F .text	0000003c alt_up_rs232_open_dev
0001075c g     F .text	00000038 alt_irq_init
0001228c g     F .text	00000084 alt_release_fd
00012740 g     F .text	00000014 atexit
00014928 g     F .text	00000060 _write_r
00016fe4 g     O .rwdata	00000004 _impure_ptr
00018ab8 g     O .bss	00000004 alt_argc
00013094 g     F .text	0000021c __sflush_r
00011c18 g     F .text	00000060 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
000136d4 g     F .text	00000018 __fp_unlock_all
00016fbc g     O .rwdata	00000008 alt_fs_list
00011364 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
000114e0 g     F .text	00000040 alt_up_rs232_write_data
00010020 g       *ABS*	00000000 __ram_exceptions_start
00016ff4 g       *ABS*	00000000 _edata
00018c0c g       *ABS*	00000000 _end
00010234 g       *ABS*	00000000 __ram_exceptions_end
00010d44 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00014848 g     F .text	0000007c __swrite
00016fec g     O .rwdata	00000004 __malloc_trim_threshold
00012754 g     F .text	00000038 exit
00013be4 g     F .text	000000c4 _fwalk_reent
00014cd4 g     F .text	00000074 .hidden __modsi3
0001c350 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
000136b0 g     F .text	00000004 __sfp_lock_release
00014e2c g     F .text	00000034 _exit
000116f4 g     F .text	0000012c alt_alarm_start
00013ca8 g     F .text	000001bc __smakebuf_r
00012ab8 g     F .text	00000098 strlen
00012130 g     F .text	0000015c open
000106bc g     F .text	0000003c alt_putchar
00011d08 g     F .text	00000020 alt_icache_flush_all
00016fd4 g     O .rwdata	00000004 alt_priority_mask
00016fd8 g     O .rwdata	00000008 alt_alarm_list
00011bb8 g     F .text	00000060 _do_ctors
00011420 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
000119b4 g     F .text	000000d8 close
00010390 g     F .text	00000084 alt_load
000136b4 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408d14 	ori	at,at,564
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101d40 	call	101d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001526 	beq	r2,zero,10190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1013c:	008000b4 	movhi	r2,2
   10140:	10a2c304 	addi	r2,r2,-29940
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	008000b4 	movhi	r2,2
   10158:	10a2c304 	addi	r2,r2,-29940
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	e17ffd17 	ldw	r5,-12(fp)
   10174:	1009883a 	mov	r4,r2
   10178:	183ee83a 	callr	r3
#endif
        break;
   1017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10180:	0005313a 	rdctl	r2,ipending
   10184:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10188:	e0bfff17 	ldw	r2,-4(fp)
   1018c:	00000706 	br	101ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
   10190:	e0bffc17 	ldw	r2,-16(fp)
   10194:	1085883a 	add	r2,r2,r2
   10198:	e0bffc15 	stw	r2,-16(fp)
      i++;
   1019c:	e0bffd17 	ldw	r2,-12(fp)
   101a0:	10800044 	addi	r2,r2,1
   101a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a8:	003fe006 	br	1012c <_gp+0xffff1170>

    active = alt_irq_pending ();
   101ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101b0:	e0bffb17 	ldw	r2,-20(fp)
   101b4:	103fda1e 	bne	r2,zero,10120 <_gp+0xffff1164>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b8:	0001883a 	nop
}
   101bc:	0001883a 	nop
   101c0:	e037883a 	mov	sp,fp
   101c4:	dfc00117 	ldw	ra,4(sp)
   101c8:	df000017 	ldw	fp,0(sp)
   101cc:	dec00204 	addi	sp,sp,8
   101d0:	f800283a 	ret

000101d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101d4:	defffb04 	addi	sp,sp,-20
   101d8:	dfc00415 	stw	ra,16(sp)
   101dc:	df000315 	stw	fp,12(sp)
   101e0:	df000304 	addi	fp,sp,12
   101e4:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101e8:	00bfffc4 	movi	r2,-1
   101ec:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   101f0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101f4:	d0a6c517 	ldw	r2,-25836(gp)
   101f8:	10000726 	beq	r2,zero,10218 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101fc:	d0a6c517 	ldw	r2,-25836(gp)
   10200:	e0fffd17 	ldw	r3,-12(fp)
   10204:	e1bffe17 	ldw	r6,-8(fp)
   10208:	e17fff17 	ldw	r5,-4(fp)
   1020c:	1809883a 	mov	r4,r3
   10210:	103ee83a 	callr	r2
   10214:	00000206 	br	10220 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10218:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   1021c:	0005883a 	mov	r2,zero
}
   10220:	e037883a 	mov	sp,fp
   10224:	dfc00117 	ldw	ra,4(sp)
   10228:	df000017 	ldw	fp,0(sp)
   1022c:	dec00204 	addi	sp,sp,8
   10230:	f800283a 	ret

Disassembly of section .text:

00010234 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10234:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10238:	def0d414 	ori	sp,sp,50000
    movhi gp, %hi(_gp)
   1023c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   10240:	d6bbef14 	ori	gp,gp,61372
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10244:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10248:	10a2ae14 	ori	r2,r2,35512

    movhi r3, %hi(__bss_end)
   1024c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10250:	18e30314 	ori	r3,r3,35852

    beq r2, r3, 1f
   10254:	10c00326 	beq	r2,r3,10264 <_start+0x30>

0:
    stw zero, (r2)
   10258:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   1025c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10260:	10fffd36 	bltu	r2,r3,10258 <_gp+0xffff129c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10264:	00103900 	call	10390 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10268:	00104140 	call	10414 <alt_main>

0001026c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   1026c:	003fff06 	br	1026c <_gp+0xffff12b0>

00010270 <main>:
#define saida(porta, valor)	IOWR_ALTERA_AVALON_PIO_DATA(porta, valor)
#define leitura(porta) IORD_ALTERA_AVALON_PIO_DATA(porta)
#define delay(atraso)	usleep(atraso*1000)

int main()
{
   10270:	defffd04 	addi	sp,sp,-12
   10274:	dfc00215 	stw	ra,8(sp)
   10278:	df000115 	stw	fp,4(sp)
   1027c:	df000104 	addi	fp,sp,4

	saida(motorX,0x5FF4); //Reseta e manda os paramentros para andar na velocidade 0110 e 180 em decimal
   10280:	00d7fd04 	movi	r3,24564
   10284:	008000b4 	movhi	r2,2
   10288:	10845404 	addi	r2,r2,4432
   1028c:	10c00035 	stwio	r3,0(r2)
	saida(motorY,0x5FF4);
   10290:	00d7fd04 	movi	r3,24564
   10294:	008000b4 	movhi	r2,2
   10298:	10845004 	addi	r2,r2,4416
   1029c:	10c00035 	stwio	r3,0(r2)
	saida(motorA,0x6033);
   102a0:	00d80cc4 	movi	r3,24627
   102a4:	008000b4 	movhi	r2,2
   102a8:	10844804 	addi	r2,r2,4384
   102ac:	10c00035 	stwio	r3,0(r2)
	delay(100);
   102b0:	010000b4 	movhi	r4,2
   102b4:	2121a804 	addi	r4,r4,-31072
   102b8:	00106f80 	call	106f8 <usleep>
	saida(motorX,0x7FF4);
   102bc:	00dffd04 	movi	r3,32756
   102c0:	008000b4 	movhi	r2,2
   102c4:	10845404 	addi	r2,r2,4432
   102c8:	10c00035 	stwio	r3,0(r2)
	saida(motorY,0x7FF4);
   102cc:	00dffd04 	movi	r3,32756
   102d0:	008000b4 	movhi	r2,2
   102d4:	10845004 	addi	r2,r2,4416
   102d8:	10c00035 	stwio	r3,0(r2)
	saida(motorA,0x4033);
   102dc:	00d00cc4 	movi	r3,16435
   102e0:	008000b4 	movhi	r2,2
   102e4:	10844804 	addi	r2,r2,4384
   102e8:	10c00035 	stwio	r3,0(r2)
	alt_printf ("Motor X em movimento.");
   102ec:	01000074 	movhi	r4,1
   102f0:	21153204 	addi	r4,r4,21704
   102f4:	00104900 	call	10490 <alt_printf>
	while(1){
		int sig_busyY = leitura(sigBusy);
   102f8:	008000b4 	movhi	r2,2
   102fc:	10847804 	addi	r2,r2,4576
   10300:	10800037 	ldwio	r2,0(r2)
   10304:	e0bfff15 	stw	r2,-4(fp)
		alt_printf ("%x\n", sig_busyY);
   10308:	e17fff17 	ldw	r5,-4(fp)
   1030c:	01000074 	movhi	r4,1
   10310:	21153804 	addi	r4,r4,21728
   10314:	00104900 	call	10490 <alt_printf>
		delay(100);
   10318:	010000b4 	movhi	r4,2
   1031c:	2121a804 	addi	r4,r4,-31072
   10320:	00106f80 	call	106f8 <usleep>
	}
   10324:	003ff406 	br	102f8 <_gp+0xffff133c>

00010328 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   10328:	defffc04 	addi	sp,sp,-16
   1032c:	df000315 	stw	fp,12(sp)
   10330:	df000304 	addi	fp,sp,12
   10334:	e13ffd15 	stw	r4,-12(fp)
   10338:	e17ffe15 	stw	r5,-8(fp)
   1033c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   10340:	e0fffe17 	ldw	r3,-8(fp)
   10344:	e0bffd17 	ldw	r2,-12(fp)
   10348:	18800c26 	beq	r3,r2,1037c <alt_load_section+0x54>
  {
    while( to != end )
   1034c:	00000806 	br	10370 <alt_load_section+0x48>
    {
      *to++ = *from++;
   10350:	e0bffe17 	ldw	r2,-8(fp)
   10354:	10c00104 	addi	r3,r2,4
   10358:	e0fffe15 	stw	r3,-8(fp)
   1035c:	e0fffd17 	ldw	r3,-12(fp)
   10360:	19000104 	addi	r4,r3,4
   10364:	e13ffd15 	stw	r4,-12(fp)
   10368:	18c00017 	ldw	r3,0(r3)
   1036c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   10370:	e0fffe17 	ldw	r3,-8(fp)
   10374:	e0bfff17 	ldw	r2,-4(fp)
   10378:	18bff51e 	bne	r3,r2,10350 <_gp+0xffff1394>
    {
      *to++ = *from++;
    }
  }
}
   1037c:	0001883a 	nop
   10380:	e037883a 	mov	sp,fp
   10384:	df000017 	ldw	fp,0(sp)
   10388:	dec00104 	addi	sp,sp,4
   1038c:	f800283a 	ret

00010390 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10390:	defffe04 	addi	sp,sp,-8
   10394:	dfc00115 	stw	ra,4(sp)
   10398:	df000015 	stw	fp,0(sp)
   1039c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   103a0:	01800074 	movhi	r6,1
   103a4:	319bfd04 	addi	r6,r6,28660
   103a8:	01400074 	movhi	r5,1
   103ac:	29554c04 	addi	r5,r5,21808
   103b0:	01000074 	movhi	r4,1
   103b4:	211bfd04 	addi	r4,r4,28660
   103b8:	00103280 	call	10328 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   103bc:	01800074 	movhi	r6,1
   103c0:	31808d04 	addi	r6,r6,564
   103c4:	01400074 	movhi	r5,1
   103c8:	29400804 	addi	r5,r5,32
   103cc:	01000074 	movhi	r4,1
   103d0:	21000804 	addi	r4,r4,32
   103d4:	00103280 	call	10328 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   103d8:	01800074 	movhi	r6,1
   103dc:	31954c04 	addi	r6,r6,21808
   103e0:	01400074 	movhi	r5,1
   103e4:	29553204 	addi	r5,r5,21704
   103e8:	01000074 	movhi	r4,1
   103ec:	21153204 	addi	r4,r4,21704
   103f0:	00103280 	call	10328 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   103f4:	0011a8c0 	call	11a8c <alt_dcache_flush_all>
  alt_icache_flush_all();
   103f8:	0011d080 	call	11d08 <alt_icache_flush_all>
}
   103fc:	0001883a 	nop
   10400:	e037883a 	mov	sp,fp
   10404:	dfc00117 	ldw	ra,4(sp)
   10408:	df000017 	ldw	fp,0(sp)
   1040c:	dec00204 	addi	sp,sp,8
   10410:	f800283a 	ret

00010414 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10414:	defffd04 	addi	sp,sp,-12
   10418:	dfc00215 	stw	ra,8(sp)
   1041c:	df000115 	stw	fp,4(sp)
   10420:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10424:	0009883a 	mov	r4,zero
   10428:	001075c0 	call	1075c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   1042c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10430:	00107940 	call	10794 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   10434:	01800074 	movhi	r6,1
   10438:	31953904 	addi	r6,r6,21732
   1043c:	01400074 	movhi	r5,1
   10440:	29553904 	addi	r5,r5,21732
   10444:	01000074 	movhi	r4,1
   10448:	21153904 	addi	r4,r4,21732
   1044c:	0011e0c0 	call	11e0c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   10450:	0011bb80 	call	11bb8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   10454:	01000074 	movhi	r4,1
   10458:	21070604 	addi	r4,r4,7192
   1045c:	00127400 	call	12740 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   10460:	d0a6bf17 	ldw	r2,-25860(gp)
   10464:	d0e6c017 	ldw	r3,-25856(gp)
   10468:	d126c117 	ldw	r4,-25852(gp)
   1046c:	200d883a 	mov	r6,r4
   10470:	180b883a 	mov	r5,r3
   10474:	1009883a 	mov	r4,r2
   10478:	00102700 	call	10270 <main>
   1047c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   10480:	01000044 	movi	r4,1
   10484:	00119b40 	call	119b4 <close>
  exit (result);
   10488:	e13fff17 	ldw	r4,-4(fp)
   1048c:	00127540 	call	12754 <exit>

00010490 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   10490:	defff204 	addi	sp,sp,-56
   10494:	dfc00a15 	stw	ra,40(sp)
   10498:	df000915 	stw	fp,36(sp)
   1049c:	df000904 	addi	fp,sp,36
   104a0:	e13fff15 	stw	r4,-4(fp)
   104a4:	e1400215 	stw	r5,8(fp)
   104a8:	e1800315 	stw	r6,12(fp)
   104ac:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   104b0:	e0800204 	addi	r2,fp,8
   104b4:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   104b8:	e0bfff17 	ldw	r2,-4(fp)
   104bc:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   104c0:	00006f06 	br	10680 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   104c4:	e0bff807 	ldb	r2,-32(fp)
   104c8:	10800960 	cmpeqi	r2,r2,37
   104cc:	1000041e 	bne	r2,zero,104e0 <alt_printf+0x50>
        {
            alt_putchar(c);
   104d0:	e0bff807 	ldb	r2,-32(fp)
   104d4:	1009883a 	mov	r4,r2
   104d8:	00106bc0 	call	106bc <alt_putchar>
   104dc:	00006806 	br	10680 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   104e0:	e0bff717 	ldw	r2,-36(fp)
   104e4:	10c00044 	addi	r3,r2,1
   104e8:	e0fff715 	stw	r3,-36(fp)
   104ec:	10800003 	ldbu	r2,0(r2)
   104f0:	e0bff805 	stb	r2,-32(fp)
   104f4:	e0bff807 	ldb	r2,-32(fp)
   104f8:	10006926 	beq	r2,zero,106a0 <alt_printf+0x210>
            {
                if (c == '%')
   104fc:	e0bff807 	ldb	r2,-32(fp)
   10500:	10800958 	cmpnei	r2,r2,37
   10504:	1000041e 	bne	r2,zero,10518 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   10508:	e0bff807 	ldb	r2,-32(fp)
   1050c:	1009883a 	mov	r4,r2
   10510:	00106bc0 	call	106bc <alt_putchar>
   10514:	00005a06 	br	10680 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   10518:	e0bff807 	ldb	r2,-32(fp)
   1051c:	108018d8 	cmpnei	r2,r2,99
   10520:	1000081e 	bne	r2,zero,10544 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   10524:	e0bffe17 	ldw	r2,-8(fp)
   10528:	10c00104 	addi	r3,r2,4
   1052c:	e0fffe15 	stw	r3,-8(fp)
   10530:	10800017 	ldw	r2,0(r2)
   10534:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   10538:	e13ffd17 	ldw	r4,-12(fp)
   1053c:	00106bc0 	call	106bc <alt_putchar>
   10540:	00004f06 	br	10680 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   10544:	e0bff807 	ldb	r2,-32(fp)
   10548:	10801e18 	cmpnei	r2,r2,120
   1054c:	1000341e 	bne	r2,zero,10620 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   10550:	e0bffe17 	ldw	r2,-8(fp)
   10554:	10c00104 	addi	r3,r2,4
   10558:	e0fffe15 	stw	r3,-8(fp)
   1055c:	10800017 	ldw	r2,0(r2)
   10560:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   10564:	e0bffb17 	ldw	r2,-20(fp)
   10568:	1000031e 	bne	r2,zero,10578 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   1056c:	01000c04 	movi	r4,48
   10570:	00106bc0 	call	106bc <alt_putchar>
                        continue;
   10574:	00004206 	br	10680 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   10578:	00800704 	movi	r2,28
   1057c:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   10580:	00000306 	br	10590 <alt_printf+0x100>
                        digit_shift -= 4;
   10584:	e0bff917 	ldw	r2,-28(fp)
   10588:	10bfff04 	addi	r2,r2,-4
   1058c:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   10590:	00c003c4 	movi	r3,15
   10594:	e0bff917 	ldw	r2,-28(fp)
   10598:	1884983a 	sll	r2,r3,r2
   1059c:	1007883a 	mov	r3,r2
   105a0:	e0bffb17 	ldw	r2,-20(fp)
   105a4:	1884703a 	and	r2,r3,r2
   105a8:	103ff626 	beq	r2,zero,10584 <_gp+0xffff15c8>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   105ac:	00001906 	br	10614 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   105b0:	00c003c4 	movi	r3,15
   105b4:	e0bff917 	ldw	r2,-28(fp)
   105b8:	1884983a 	sll	r2,r3,r2
   105bc:	1007883a 	mov	r3,r2
   105c0:	e0bffb17 	ldw	r2,-20(fp)
   105c4:	1886703a 	and	r3,r3,r2
   105c8:	e0bff917 	ldw	r2,-28(fp)
   105cc:	1884d83a 	srl	r2,r3,r2
   105d0:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   105d4:	e0bffc17 	ldw	r2,-16(fp)
   105d8:	108002a8 	cmpgeui	r2,r2,10
   105dc:	1000041e 	bne	r2,zero,105f0 <alt_printf+0x160>
                            c = '0' + digit;
   105e0:	e0bffc17 	ldw	r2,-16(fp)
   105e4:	10800c04 	addi	r2,r2,48
   105e8:	e0bff805 	stb	r2,-32(fp)
   105ec:	00000306 	br	105fc <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   105f0:	e0bffc17 	ldw	r2,-16(fp)
   105f4:	108015c4 	addi	r2,r2,87
   105f8:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   105fc:	e0bff807 	ldb	r2,-32(fp)
   10600:	1009883a 	mov	r4,r2
   10604:	00106bc0 	call	106bc <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   10608:	e0bff917 	ldw	r2,-28(fp)
   1060c:	10bfff04 	addi	r2,r2,-4
   10610:	e0bff915 	stw	r2,-28(fp)
   10614:	e0bff917 	ldw	r2,-28(fp)
   10618:	103fe50e 	bge	r2,zero,105b0 <_gp+0xffff15f4>
   1061c:	00001806 	br	10680 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   10620:	e0bff807 	ldb	r2,-32(fp)
   10624:	10801cd8 	cmpnei	r2,r2,115
   10628:	1000151e 	bne	r2,zero,10680 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   1062c:	e0bffe17 	ldw	r2,-8(fp)
   10630:	10c00104 	addi	r3,r2,4
   10634:	e0fffe15 	stw	r3,-8(fp)
   10638:	10800017 	ldw	r2,0(r2)
   1063c:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   10640:	00000906 	br	10668 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   10644:	e0bffa17 	ldw	r2,-24(fp)
   10648:	10c00044 	addi	r3,r2,1
   1064c:	e0fffa15 	stw	r3,-24(fp)
   10650:	10800003 	ldbu	r2,0(r2)
   10654:	10803fcc 	andi	r2,r2,255
   10658:	1080201c 	xori	r2,r2,128
   1065c:	10bfe004 	addi	r2,r2,-128
   10660:	1009883a 	mov	r4,r2
   10664:	00106bc0 	call	106bc <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   10668:	e0bffa17 	ldw	r2,-24(fp)
   1066c:	10800003 	ldbu	r2,0(r2)
   10670:	10803fcc 	andi	r2,r2,255
   10674:	1080201c 	xori	r2,r2,128
   10678:	10bfe004 	addi	r2,r2,-128
   1067c:	103ff11e 	bne	r2,zero,10644 <_gp+0xffff1688>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   10680:	e0bff717 	ldw	r2,-36(fp)
   10684:	10c00044 	addi	r3,r2,1
   10688:	e0fff715 	stw	r3,-36(fp)
   1068c:	10800003 	ldbu	r2,0(r2)
   10690:	e0bff805 	stb	r2,-32(fp)
   10694:	e0bff807 	ldb	r2,-32(fp)
   10698:	103f8a1e 	bne	r2,zero,104c4 <_gp+0xffff1508>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   1069c:	00000106 	br	106a4 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   106a0:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   106a4:	0001883a 	nop
   106a8:	e037883a 	mov	sp,fp
   106ac:	dfc00117 	ldw	ra,4(sp)
   106b0:	df000017 	ldw	fp,0(sp)
   106b4:	dec00504 	addi	sp,sp,20
   106b8:	f800283a 	ret

000106bc <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   106bc:	defffd04 	addi	sp,sp,-12
   106c0:	dfc00215 	stw	ra,8(sp)
   106c4:	df000115 	stw	fp,4(sp)
   106c8:	df000104 	addi	fp,sp,4
   106cc:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   106d0:	d0a00a17 	ldw	r2,-32728(gp)
   106d4:	10800217 	ldw	r2,8(r2)
   106d8:	100b883a 	mov	r5,r2
   106dc:	e13fff17 	ldw	r4,-4(fp)
   106e0:	00129f00 	call	129f0 <putc>
#endif
#endif
}
   106e4:	e037883a 	mov	sp,fp
   106e8:	dfc00117 	ldw	ra,4(sp)
   106ec:	df000017 	ldw	fp,0(sp)
   106f0:	dec00204 	addi	sp,sp,8
   106f4:	f800283a 	ret

000106f8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   106f8:	defffd04 	addi	sp,sp,-12
   106fc:	dfc00215 	stw	ra,8(sp)
   10700:	df000115 	stw	fp,4(sp)
   10704:	df000104 	addi	fp,sp,4
   10708:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   1070c:	e13fff17 	ldw	r4,-4(fp)
   10710:	00118200 	call	11820 <alt_busy_sleep>
}
   10714:	e037883a 	mov	sp,fp
   10718:	dfc00117 	ldw	ra,4(sp)
   1071c:	df000017 	ldw	fp,0(sp)
   10720:	dec00204 	addi	sp,sp,8
   10724:	f800283a 	ret

00010728 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   10728:	defffd04 	addi	sp,sp,-12
   1072c:	dfc00215 	stw	ra,8(sp)
   10730:	df000115 	stw	fp,4(sp)
   10734:	df000104 	addi	fp,sp,4
   10738:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1073c:	d1600204 	addi	r5,gp,-32760
   10740:	e13fff17 	ldw	r4,-4(fp)
   10744:	0011b140 	call	11b14 <alt_dev_llist_insert>
}
   10748:	e037883a 	mov	sp,fp
   1074c:	dfc00117 	ldw	ra,4(sp)
   10750:	df000017 	ldw	fp,0(sp)
   10754:	dec00204 	addi	sp,sp,8
   10758:	f800283a 	ret

0001075c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1075c:	defffd04 	addi	sp,sp,-12
   10760:	dfc00215 	stw	ra,8(sp)
   10764:	df000115 	stw	fp,4(sp)
   10768:	df000104 	addi	fp,sp,4
   1076c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   10770:	00124b40 	call	124b4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10774:	00800044 	movi	r2,1
   10778:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1077c:	0001883a 	nop
   10780:	e037883a 	mov	sp,fp
   10784:	dfc00117 	ldw	ra,4(sp)
   10788:	df000017 	ldw	fp,0(sp)
   1078c:	dec00204 	addi	sp,sp,8
   10790:	f800283a 	ret

00010794 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10794:	defffe04 	addi	sp,sp,-8
   10798:	dfc00115 	stw	ra,4(sp)
   1079c:	df000015 	stw	fp,0(sp)
   107a0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
   107a4:	01c0fa04 	movi	r7,1000
   107a8:	01800144 	movi	r6,5
   107ac:	000b883a 	mov	r5,zero
   107b0:	010000b4 	movhi	r4,2
   107b4:	21042004 	addi	r4,r4,4224
   107b8:	00112f00 	call	112f0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_GERAL, timer_geral);
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP_TIMER, timestamp_timer);
    ALTERA_AVALON_TIMER_INIT ( WATCHDOG_TIMER, watchdog_timer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   107bc:	000d883a 	mov	r6,zero
   107c0:	000b883a 	mov	r5,zero
   107c4:	01000074 	movhi	r4,1
   107c8:	21155604 	addi	r4,r4,21848
   107cc:	00109780 	call	10978 <altera_avalon_jtag_uart_init>
   107d0:	01000074 	movhi	r4,1
   107d4:	21154c04 	addi	r4,r4,21808
   107d8:	00107280 	call	10728 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI, spi);
   107dc:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   107e0:	0001883a 	nop
    ALTERA_UP_AVALON_ADC_INIT ( ADC_1, adc_1);
   107e4:	01000074 	movhi	r4,1
   107e8:	21196404 	addi	r4,r4,26000
   107ec:	00107280 	call	10728 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( UART_RS232, uart_rs232);
   107f0:	01000074 	movhi	r4,1
   107f4:	21196f04 	addi	r4,r4,26044
   107f8:	00107280 	call	10728 <alt_dev_reg>
}
   107fc:	0001883a 	nop
   10800:	e037883a 	mov	sp,fp
   10804:	dfc00117 	ldw	ra,4(sp)
   10808:	df000017 	ldw	fp,0(sp)
   1080c:	dec00204 	addi	sp,sp,8
   10810:	f800283a 	ret

00010814 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   10814:	defffa04 	addi	sp,sp,-24
   10818:	dfc00515 	stw	ra,20(sp)
   1081c:	df000415 	stw	fp,16(sp)
   10820:	df000404 	addi	fp,sp,16
   10824:	e13ffd15 	stw	r4,-12(fp)
   10828:	e17ffe15 	stw	r5,-8(fp)
   1082c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10830:	e0bffd17 	ldw	r2,-12(fp)
   10834:	10800017 	ldw	r2,0(r2)
   10838:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1083c:	e0bffc17 	ldw	r2,-16(fp)
   10840:	10c00a04 	addi	r3,r2,40
   10844:	e0bffd17 	ldw	r2,-12(fp)
   10848:	10800217 	ldw	r2,8(r2)
   1084c:	100f883a 	mov	r7,r2
   10850:	e1bfff17 	ldw	r6,-4(fp)
   10854:	e17ffe17 	ldw	r5,-8(fp)
   10858:	1809883a 	mov	r4,r3
   1085c:	0010e340 	call	10e34 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   10860:	e037883a 	mov	sp,fp
   10864:	dfc00117 	ldw	ra,4(sp)
   10868:	df000017 	ldw	fp,0(sp)
   1086c:	dec00204 	addi	sp,sp,8
   10870:	f800283a 	ret

00010874 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   10874:	defffa04 	addi	sp,sp,-24
   10878:	dfc00515 	stw	ra,20(sp)
   1087c:	df000415 	stw	fp,16(sp)
   10880:	df000404 	addi	fp,sp,16
   10884:	e13ffd15 	stw	r4,-12(fp)
   10888:	e17ffe15 	stw	r5,-8(fp)
   1088c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10890:	e0bffd17 	ldw	r2,-12(fp)
   10894:	10800017 	ldw	r2,0(r2)
   10898:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1089c:	e0bffc17 	ldw	r2,-16(fp)
   108a0:	10c00a04 	addi	r3,r2,40
   108a4:	e0bffd17 	ldw	r2,-12(fp)
   108a8:	10800217 	ldw	r2,8(r2)
   108ac:	100f883a 	mov	r7,r2
   108b0:	e1bfff17 	ldw	r6,-4(fp)
   108b4:	e17ffe17 	ldw	r5,-8(fp)
   108b8:	1809883a 	mov	r4,r3
   108bc:	00110500 	call	11050 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   108c0:	e037883a 	mov	sp,fp
   108c4:	dfc00117 	ldw	ra,4(sp)
   108c8:	df000017 	ldw	fp,0(sp)
   108cc:	dec00204 	addi	sp,sp,8
   108d0:	f800283a 	ret

000108d4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   108d4:	defffc04 	addi	sp,sp,-16
   108d8:	dfc00315 	stw	ra,12(sp)
   108dc:	df000215 	stw	fp,8(sp)
   108e0:	df000204 	addi	fp,sp,8
   108e4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   108e8:	e0bfff17 	ldw	r2,-4(fp)
   108ec:	10800017 	ldw	r2,0(r2)
   108f0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   108f4:	e0bffe17 	ldw	r2,-8(fp)
   108f8:	10c00a04 	addi	r3,r2,40
   108fc:	e0bfff17 	ldw	r2,-4(fp)
   10900:	10800217 	ldw	r2,8(r2)
   10904:	100b883a 	mov	r5,r2
   10908:	1809883a 	mov	r4,r3
   1090c:	0010cdc0 	call	10cdc <altera_avalon_jtag_uart_close>
}
   10910:	e037883a 	mov	sp,fp
   10914:	dfc00117 	ldw	ra,4(sp)
   10918:	df000017 	ldw	fp,0(sp)
   1091c:	dec00204 	addi	sp,sp,8
   10920:	f800283a 	ret

00010924 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   10924:	defffa04 	addi	sp,sp,-24
   10928:	dfc00515 	stw	ra,20(sp)
   1092c:	df000415 	stw	fp,16(sp)
   10930:	df000404 	addi	fp,sp,16
   10934:	e13ffd15 	stw	r4,-12(fp)
   10938:	e17ffe15 	stw	r5,-8(fp)
   1093c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   10940:	e0bffd17 	ldw	r2,-12(fp)
   10944:	10800017 	ldw	r2,0(r2)
   10948:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1094c:	e0bffc17 	ldw	r2,-16(fp)
   10950:	10800a04 	addi	r2,r2,40
   10954:	e1bfff17 	ldw	r6,-4(fp)
   10958:	e17ffe17 	ldw	r5,-8(fp)
   1095c:	1009883a 	mov	r4,r2
   10960:	0010d440 	call	10d44 <altera_avalon_jtag_uart_ioctl>
}
   10964:	e037883a 	mov	sp,fp
   10968:	dfc00117 	ldw	ra,4(sp)
   1096c:	df000017 	ldw	fp,0(sp)
   10970:	dec00204 	addi	sp,sp,8
   10974:	f800283a 	ret

00010978 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   10978:	defffb04 	addi	sp,sp,-20
   1097c:	dfc00415 	stw	ra,16(sp)
   10980:	df000315 	stw	fp,12(sp)
   10984:	df000304 	addi	fp,sp,12
   10988:	e13ffd15 	stw	r4,-12(fp)
   1098c:	e17ffe15 	stw	r5,-8(fp)
   10990:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10994:	e0bffd17 	ldw	r2,-12(fp)
   10998:	00c00044 	movi	r3,1
   1099c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   109a0:	e0bffd17 	ldw	r2,-12(fp)
   109a4:	10800017 	ldw	r2,0(r2)
   109a8:	10800104 	addi	r2,r2,4
   109ac:	1007883a 	mov	r3,r2
   109b0:	e0bffd17 	ldw	r2,-12(fp)
   109b4:	10800817 	ldw	r2,32(r2)
   109b8:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   109bc:	e0bfff17 	ldw	r2,-4(fp)
   109c0:	01800074 	movhi	r6,1
   109c4:	31828b04 	addi	r6,r6,2604
   109c8:	e17ffd17 	ldw	r5,-12(fp)
   109cc:	1009883a 	mov	r4,r2
   109d0:	0011e880 	call	11e88 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   109d4:	e0bffd17 	ldw	r2,-12(fp)
   109d8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   109dc:	e0bffd17 	ldw	r2,-12(fp)
   109e0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   109e4:	d0e6c317 	ldw	r3,-25844(gp)
   109e8:	e1fffd17 	ldw	r7,-12(fp)
   109ec:	01800074 	movhi	r6,1
   109f0:	31830f04 	addi	r6,r6,3132
   109f4:	180b883a 	mov	r5,r3
   109f8:	1009883a 	mov	r4,r2
   109fc:	00116f40 	call	116f4 <alt_alarm_start>
   10a00:	1000040e 	bge	r2,zero,10a14 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   10a04:	e0fffd17 	ldw	r3,-12(fp)
   10a08:	00a00034 	movhi	r2,32768
   10a0c:	10bfffc4 	addi	r2,r2,-1
   10a10:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   10a14:	0001883a 	nop
   10a18:	e037883a 	mov	sp,fp
   10a1c:	dfc00117 	ldw	ra,4(sp)
   10a20:	df000017 	ldw	fp,0(sp)
   10a24:	dec00204 	addi	sp,sp,8
   10a28:	f800283a 	ret

00010a2c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   10a2c:	defff704 	addi	sp,sp,-36
   10a30:	df000815 	stw	fp,32(sp)
   10a34:	df000804 	addi	fp,sp,32
   10a38:	e13ffe15 	stw	r4,-8(fp)
   10a3c:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   10a40:	e0bffe17 	ldw	r2,-8(fp)
   10a44:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
   10a48:	e0bffa17 	ldw	r2,-24(fp)
   10a4c:	10800017 	ldw	r2,0(r2)
   10a50:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10a54:	e0bffb17 	ldw	r2,-20(fp)
   10a58:	10800104 	addi	r2,r2,4
   10a5c:	10800037 	ldwio	r2,0(r2)
   10a60:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   10a64:	e0bffc17 	ldw	r2,-16(fp)
   10a68:	1080c00c 	andi	r2,r2,768
   10a6c:	10006d26 	beq	r2,zero,10c24 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   10a70:	e0bffc17 	ldw	r2,-16(fp)
   10a74:	1080400c 	andi	r2,r2,256
   10a78:	10003526 	beq	r2,zero,10b50 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   10a7c:	00800074 	movhi	r2,1
   10a80:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10a84:	e0bffa17 	ldw	r2,-24(fp)
   10a88:	10800a17 	ldw	r2,40(r2)
   10a8c:	10800044 	addi	r2,r2,1
   10a90:	1081ffcc 	andi	r2,r2,2047
   10a94:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
   10a98:	e0bffa17 	ldw	r2,-24(fp)
   10a9c:	10c00b17 	ldw	r3,44(r2)
   10aa0:	e0bffd17 	ldw	r2,-12(fp)
   10aa4:	18801526 	beq	r3,r2,10afc <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   10aa8:	e0bffb17 	ldw	r2,-20(fp)
   10aac:	10800037 	ldwio	r2,0(r2)
   10ab0:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   10ab4:	e0bff817 	ldw	r2,-32(fp)
   10ab8:	10a0000c 	andi	r2,r2,32768
   10abc:	10001126 	beq	r2,zero,10b04 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   10ac0:	e0bffa17 	ldw	r2,-24(fp)
   10ac4:	10800a17 	ldw	r2,40(r2)
   10ac8:	e0fff817 	ldw	r3,-32(fp)
   10acc:	1809883a 	mov	r4,r3
   10ad0:	e0fffa17 	ldw	r3,-24(fp)
   10ad4:	1885883a 	add	r2,r3,r2
   10ad8:	10800e04 	addi	r2,r2,56
   10adc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10ae0:	e0bffa17 	ldw	r2,-24(fp)
   10ae4:	10800a17 	ldw	r2,40(r2)
   10ae8:	10800044 	addi	r2,r2,1
   10aec:	10c1ffcc 	andi	r3,r2,2047
   10af0:	e0bffa17 	ldw	r2,-24(fp)
   10af4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   10af8:	003fe206 	br	10a84 <_gp+0xffff1ac8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   10afc:	0001883a 	nop
   10b00:	00000106 	br	10b08 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   10b04:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   10b08:	e0bff817 	ldw	r2,-32(fp)
   10b0c:	10bfffec 	andhi	r2,r2,65535
   10b10:	10000f26 	beq	r2,zero,10b50 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10b14:	e0bffa17 	ldw	r2,-24(fp)
   10b18:	10c00817 	ldw	r3,32(r2)
   10b1c:	00bfff84 	movi	r2,-2
   10b20:	1886703a 	and	r3,r3,r2
   10b24:	e0bffa17 	ldw	r2,-24(fp)
   10b28:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   10b2c:	e0bffb17 	ldw	r2,-20(fp)
   10b30:	10800104 	addi	r2,r2,4
   10b34:	1007883a 	mov	r3,r2
   10b38:	e0bffa17 	ldw	r2,-24(fp)
   10b3c:	10800817 	ldw	r2,32(r2)
   10b40:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10b44:	e0bffb17 	ldw	r2,-20(fp)
   10b48:	10800104 	addi	r2,r2,4
   10b4c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   10b50:	e0bffc17 	ldw	r2,-16(fp)
   10b54:	1080800c 	andi	r2,r2,512
   10b58:	103fbe26 	beq	r2,zero,10a54 <_gp+0xffff1a98>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   10b5c:	e0bffc17 	ldw	r2,-16(fp)
   10b60:	1004d43a 	srli	r2,r2,16
   10b64:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   10b68:	00001406 	br	10bbc <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   10b6c:	e0bffb17 	ldw	r2,-20(fp)
   10b70:	e0fffa17 	ldw	r3,-24(fp)
   10b74:	18c00d17 	ldw	r3,52(r3)
   10b78:	e13ffa17 	ldw	r4,-24(fp)
   10b7c:	20c7883a 	add	r3,r4,r3
   10b80:	18c20e04 	addi	r3,r3,2104
   10b84:	18c00003 	ldbu	r3,0(r3)
   10b88:	18c03fcc 	andi	r3,r3,255
   10b8c:	18c0201c 	xori	r3,r3,128
   10b90:	18ffe004 	addi	r3,r3,-128
   10b94:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10b98:	e0bffa17 	ldw	r2,-24(fp)
   10b9c:	10800d17 	ldw	r2,52(r2)
   10ba0:	10800044 	addi	r2,r2,1
   10ba4:	10c1ffcc 	andi	r3,r2,2047
   10ba8:	e0bffa17 	ldw	r2,-24(fp)
   10bac:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   10bb0:	e0bff917 	ldw	r2,-28(fp)
   10bb4:	10bfffc4 	addi	r2,r2,-1
   10bb8:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   10bbc:	e0bff917 	ldw	r2,-28(fp)
   10bc0:	10000526 	beq	r2,zero,10bd8 <altera_avalon_jtag_uart_irq+0x1ac>
   10bc4:	e0bffa17 	ldw	r2,-24(fp)
   10bc8:	10c00d17 	ldw	r3,52(r2)
   10bcc:	e0bffa17 	ldw	r2,-24(fp)
   10bd0:	10800c17 	ldw	r2,48(r2)
   10bd4:	18bfe51e 	bne	r3,r2,10b6c <_gp+0xffff1bb0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   10bd8:	e0bff917 	ldw	r2,-28(fp)
   10bdc:	103f9d26 	beq	r2,zero,10a54 <_gp+0xffff1a98>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10be0:	e0bffa17 	ldw	r2,-24(fp)
   10be4:	10c00817 	ldw	r3,32(r2)
   10be8:	00bfff44 	movi	r2,-3
   10bec:	1886703a 	and	r3,r3,r2
   10bf0:	e0bffa17 	ldw	r2,-24(fp)
   10bf4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10bf8:	e0bffa17 	ldw	r2,-24(fp)
   10bfc:	10800017 	ldw	r2,0(r2)
   10c00:	10800104 	addi	r2,r2,4
   10c04:	1007883a 	mov	r3,r2
   10c08:	e0bffa17 	ldw	r2,-24(fp)
   10c0c:	10800817 	ldw	r2,32(r2)
   10c10:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10c14:	e0bffb17 	ldw	r2,-20(fp)
   10c18:	10800104 	addi	r2,r2,4
   10c1c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   10c20:	003f8c06 	br	10a54 <_gp+0xffff1a98>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   10c24:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   10c28:	0001883a 	nop
   10c2c:	e037883a 	mov	sp,fp
   10c30:	df000017 	ldw	fp,0(sp)
   10c34:	dec00104 	addi	sp,sp,4
   10c38:	f800283a 	ret

00010c3c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   10c3c:	defff804 	addi	sp,sp,-32
   10c40:	df000715 	stw	fp,28(sp)
   10c44:	df000704 	addi	fp,sp,28
   10c48:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   10c4c:	e0bffb17 	ldw	r2,-20(fp)
   10c50:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   10c54:	e0bff917 	ldw	r2,-28(fp)
   10c58:	10800017 	ldw	r2,0(r2)
   10c5c:	10800104 	addi	r2,r2,4
   10c60:	10800037 	ldwio	r2,0(r2)
   10c64:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   10c68:	e0bffa17 	ldw	r2,-24(fp)
   10c6c:	1081000c 	andi	r2,r2,1024
   10c70:	10000b26 	beq	r2,zero,10ca0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   10c74:	e0bff917 	ldw	r2,-28(fp)
   10c78:	10800017 	ldw	r2,0(r2)
   10c7c:	10800104 	addi	r2,r2,4
   10c80:	1007883a 	mov	r3,r2
   10c84:	e0bff917 	ldw	r2,-28(fp)
   10c88:	10800817 	ldw	r2,32(r2)
   10c8c:	10810014 	ori	r2,r2,1024
   10c90:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   10c94:	e0bff917 	ldw	r2,-28(fp)
   10c98:	10000915 	stw	zero,36(r2)
   10c9c:	00000a06 	br	10cc8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   10ca0:	e0bff917 	ldw	r2,-28(fp)
   10ca4:	10c00917 	ldw	r3,36(r2)
   10ca8:	00a00034 	movhi	r2,32768
   10cac:	10bfff04 	addi	r2,r2,-4
   10cb0:	10c00536 	bltu	r2,r3,10cc8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   10cb4:	e0bff917 	ldw	r2,-28(fp)
   10cb8:	10800917 	ldw	r2,36(r2)
   10cbc:	10c00044 	addi	r3,r2,1
   10cc0:	e0bff917 	ldw	r2,-28(fp)
   10cc4:	10c00915 	stw	r3,36(r2)
   10cc8:	d0a6c317 	ldw	r2,-25844(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   10ccc:	e037883a 	mov	sp,fp
   10cd0:	df000017 	ldw	fp,0(sp)
   10cd4:	dec00104 	addi	sp,sp,4
   10cd8:	f800283a 	ret

00010cdc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   10cdc:	defffd04 	addi	sp,sp,-12
   10ce0:	df000215 	stw	fp,8(sp)
   10ce4:	df000204 	addi	fp,sp,8
   10ce8:	e13ffe15 	stw	r4,-8(fp)
   10cec:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10cf0:	00000506 	br	10d08 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   10cf4:	e0bfff17 	ldw	r2,-4(fp)
   10cf8:	1090000c 	andi	r2,r2,16384
   10cfc:	10000226 	beq	r2,zero,10d08 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   10d00:	00bffd44 	movi	r2,-11
   10d04:	00000b06 	br	10d34 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10d08:	e0bffe17 	ldw	r2,-8(fp)
   10d0c:	10c00d17 	ldw	r3,52(r2)
   10d10:	e0bffe17 	ldw	r2,-8(fp)
   10d14:	10800c17 	ldw	r2,48(r2)
   10d18:	18800526 	beq	r3,r2,10d30 <altera_avalon_jtag_uart_close+0x54>
   10d1c:	e0bffe17 	ldw	r2,-8(fp)
   10d20:	10c00917 	ldw	r3,36(r2)
   10d24:	e0bffe17 	ldw	r2,-8(fp)
   10d28:	10800117 	ldw	r2,4(r2)
   10d2c:	18bff136 	bltu	r3,r2,10cf4 <_gp+0xffff1d38>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   10d30:	0005883a 	mov	r2,zero
}
   10d34:	e037883a 	mov	sp,fp
   10d38:	df000017 	ldw	fp,0(sp)
   10d3c:	dec00104 	addi	sp,sp,4
   10d40:	f800283a 	ret

00010d44 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   10d44:	defffa04 	addi	sp,sp,-24
   10d48:	df000515 	stw	fp,20(sp)
   10d4c:	df000504 	addi	fp,sp,20
   10d50:	e13ffd15 	stw	r4,-12(fp)
   10d54:	e17ffe15 	stw	r5,-8(fp)
   10d58:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   10d5c:	00bff9c4 	movi	r2,-25
   10d60:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   10d64:	e0bffe17 	ldw	r2,-8(fp)
   10d68:	10da8060 	cmpeqi	r3,r2,27137
   10d6c:	1800031e 	bne	r3,zero,10d7c <altera_avalon_jtag_uart_ioctl+0x38>
   10d70:	109a80a0 	cmpeqi	r2,r2,27138
   10d74:	1000181e 	bne	r2,zero,10dd8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   10d78:	00002906 	br	10e20 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   10d7c:	e0bffd17 	ldw	r2,-12(fp)
   10d80:	10c00117 	ldw	r3,4(r2)
   10d84:	00a00034 	movhi	r2,32768
   10d88:	10bfffc4 	addi	r2,r2,-1
   10d8c:	18802126 	beq	r3,r2,10e14 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   10d90:	e0bfff17 	ldw	r2,-4(fp)
   10d94:	10800017 	ldw	r2,0(r2)
   10d98:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   10d9c:	e0bffc17 	ldw	r2,-16(fp)
   10da0:	10800090 	cmplti	r2,r2,2
   10da4:	1000061e 	bne	r2,zero,10dc0 <altera_avalon_jtag_uart_ioctl+0x7c>
   10da8:	e0fffc17 	ldw	r3,-16(fp)
   10dac:	00a00034 	movhi	r2,32768
   10db0:	10bfffc4 	addi	r2,r2,-1
   10db4:	18800226 	beq	r3,r2,10dc0 <altera_avalon_jtag_uart_ioctl+0x7c>
   10db8:	e0bffc17 	ldw	r2,-16(fp)
   10dbc:	00000206 	br	10dc8 <altera_avalon_jtag_uart_ioctl+0x84>
   10dc0:	00a00034 	movhi	r2,32768
   10dc4:	10bfff84 	addi	r2,r2,-2
   10dc8:	e0fffd17 	ldw	r3,-12(fp)
   10dcc:	18800115 	stw	r2,4(r3)
      rc = 0;
   10dd0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10dd4:	00000f06 	br	10e14 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   10dd8:	e0bffd17 	ldw	r2,-12(fp)
   10ddc:	10c00117 	ldw	r3,4(r2)
   10de0:	00a00034 	movhi	r2,32768
   10de4:	10bfffc4 	addi	r2,r2,-1
   10de8:	18800c26 	beq	r3,r2,10e1c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   10dec:	e0bffd17 	ldw	r2,-12(fp)
   10df0:	10c00917 	ldw	r3,36(r2)
   10df4:	e0bffd17 	ldw	r2,-12(fp)
   10df8:	10800117 	ldw	r2,4(r2)
   10dfc:	1885803a 	cmpltu	r2,r3,r2
   10e00:	10c03fcc 	andi	r3,r2,255
   10e04:	e0bfff17 	ldw	r2,-4(fp)
   10e08:	10c00015 	stw	r3,0(r2)
      rc = 0;
   10e0c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10e10:	00000206 	br	10e1c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   10e14:	0001883a 	nop
   10e18:	00000106 	br	10e20 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   10e1c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   10e20:	e0bffb17 	ldw	r2,-20(fp)
}
   10e24:	e037883a 	mov	sp,fp
   10e28:	df000017 	ldw	fp,0(sp)
   10e2c:	dec00104 	addi	sp,sp,4
   10e30:	f800283a 	ret

00010e34 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   10e34:	defff304 	addi	sp,sp,-52
   10e38:	dfc00c15 	stw	ra,48(sp)
   10e3c:	df000b15 	stw	fp,44(sp)
   10e40:	df000b04 	addi	fp,sp,44
   10e44:	e13ffc15 	stw	r4,-16(fp)
   10e48:	e17ffd15 	stw	r5,-12(fp)
   10e4c:	e1bffe15 	stw	r6,-8(fp)
   10e50:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   10e54:	e0bffd17 	ldw	r2,-12(fp)
   10e58:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10e5c:	00004706 	br	10f7c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   10e60:	e0bffc17 	ldw	r2,-16(fp)
   10e64:	10800a17 	ldw	r2,40(r2)
   10e68:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   10e6c:	e0bffc17 	ldw	r2,-16(fp)
   10e70:	10800b17 	ldw	r2,44(r2)
   10e74:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   10e78:	e0fff717 	ldw	r3,-36(fp)
   10e7c:	e0bff817 	ldw	r2,-32(fp)
   10e80:	18800536 	bltu	r3,r2,10e98 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   10e84:	e0fff717 	ldw	r3,-36(fp)
   10e88:	e0bff817 	ldw	r2,-32(fp)
   10e8c:	1885c83a 	sub	r2,r3,r2
   10e90:	e0bff615 	stw	r2,-40(fp)
   10e94:	00000406 	br	10ea8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   10e98:	00c20004 	movi	r3,2048
   10e9c:	e0bff817 	ldw	r2,-32(fp)
   10ea0:	1885c83a 	sub	r2,r3,r2
   10ea4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10ea8:	e0bff617 	ldw	r2,-40(fp)
   10eac:	10001e26 	beq	r2,zero,10f28 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   10eb0:	e0fffe17 	ldw	r3,-8(fp)
   10eb4:	e0bff617 	ldw	r2,-40(fp)
   10eb8:	1880022e 	bgeu	r3,r2,10ec4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   10ebc:	e0bffe17 	ldw	r2,-8(fp)
   10ec0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   10ec4:	e0bffc17 	ldw	r2,-16(fp)
   10ec8:	10c00e04 	addi	r3,r2,56
   10ecc:	e0bff817 	ldw	r2,-32(fp)
   10ed0:	1885883a 	add	r2,r3,r2
   10ed4:	e1bff617 	ldw	r6,-40(fp)
   10ed8:	100b883a 	mov	r5,r2
   10edc:	e13ff517 	ldw	r4,-44(fp)
   10ee0:	00128080 	call	12808 <memcpy>
      ptr   += n;
   10ee4:	e0fff517 	ldw	r3,-44(fp)
   10ee8:	e0bff617 	ldw	r2,-40(fp)
   10eec:	1885883a 	add	r2,r3,r2
   10ef0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   10ef4:	e0fffe17 	ldw	r3,-8(fp)
   10ef8:	e0bff617 	ldw	r2,-40(fp)
   10efc:	1885c83a 	sub	r2,r3,r2
   10f00:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10f04:	e0fff817 	ldw	r3,-32(fp)
   10f08:	e0bff617 	ldw	r2,-40(fp)
   10f0c:	1885883a 	add	r2,r3,r2
   10f10:	10c1ffcc 	andi	r3,r2,2047
   10f14:	e0bffc17 	ldw	r2,-16(fp)
   10f18:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   10f1c:	e0bffe17 	ldw	r2,-8(fp)
   10f20:	00bfcf16 	blt	zero,r2,10e60 <_gp+0xffff1ea4>
   10f24:	00000106 	br	10f2c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   10f28:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   10f2c:	e0fff517 	ldw	r3,-44(fp)
   10f30:	e0bffd17 	ldw	r2,-12(fp)
   10f34:	1880141e 	bne	r3,r2,10f88 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   10f38:	e0bfff17 	ldw	r2,-4(fp)
   10f3c:	1090000c 	andi	r2,r2,16384
   10f40:	1000131e 	bne	r2,zero,10f90 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   10f44:	0001883a 	nop
   10f48:	e0bffc17 	ldw	r2,-16(fp)
   10f4c:	10c00a17 	ldw	r3,40(r2)
   10f50:	e0bff717 	ldw	r2,-36(fp)
   10f54:	1880051e 	bne	r3,r2,10f6c <altera_avalon_jtag_uart_read+0x138>
   10f58:	e0bffc17 	ldw	r2,-16(fp)
   10f5c:	10c00917 	ldw	r3,36(r2)
   10f60:	e0bffc17 	ldw	r2,-16(fp)
   10f64:	10800117 	ldw	r2,4(r2)
   10f68:	18bff736 	bltu	r3,r2,10f48 <_gp+0xffff1f8c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   10f6c:	e0bffc17 	ldw	r2,-16(fp)
   10f70:	10c00a17 	ldw	r3,40(r2)
   10f74:	e0bff717 	ldw	r2,-36(fp)
   10f78:	18800726 	beq	r3,r2,10f98 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10f7c:	e0bffe17 	ldw	r2,-8(fp)
   10f80:	00bfb716 	blt	zero,r2,10e60 <_gp+0xffff1ea4>
   10f84:	00000506 	br	10f9c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   10f88:	0001883a 	nop
   10f8c:	00000306 	br	10f9c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   10f90:	0001883a 	nop
   10f94:	00000106 	br	10f9c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   10f98:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   10f9c:	e0fff517 	ldw	r3,-44(fp)
   10fa0:	e0bffd17 	ldw	r2,-12(fp)
   10fa4:	18801826 	beq	r3,r2,11008 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10fa8:	0005303a 	rdctl	r2,status
   10fac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10fb0:	e0fffb17 	ldw	r3,-20(fp)
   10fb4:	00bfff84 	movi	r2,-2
   10fb8:	1884703a 	and	r2,r3,r2
   10fbc:	1001703a 	wrctl	status,r2
  
  return context;
   10fc0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   10fc4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10fc8:	e0bffc17 	ldw	r2,-16(fp)
   10fcc:	10800817 	ldw	r2,32(r2)
   10fd0:	10c00054 	ori	r3,r2,1
   10fd4:	e0bffc17 	ldw	r2,-16(fp)
   10fd8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10fdc:	e0bffc17 	ldw	r2,-16(fp)
   10fe0:	10800017 	ldw	r2,0(r2)
   10fe4:	10800104 	addi	r2,r2,4
   10fe8:	1007883a 	mov	r3,r2
   10fec:	e0bffc17 	ldw	r2,-16(fp)
   10ff0:	10800817 	ldw	r2,32(r2)
   10ff4:	18800035 	stwio	r2,0(r3)
   10ff8:	e0bffa17 	ldw	r2,-24(fp)
   10ffc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11000:	e0bff917 	ldw	r2,-28(fp)
   11004:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   11008:	e0fff517 	ldw	r3,-44(fp)
   1100c:	e0bffd17 	ldw	r2,-12(fp)
   11010:	18800426 	beq	r3,r2,11024 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   11014:	e0fff517 	ldw	r3,-44(fp)
   11018:	e0bffd17 	ldw	r2,-12(fp)
   1101c:	1885c83a 	sub	r2,r3,r2
   11020:	00000606 	br	1103c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   11024:	e0bfff17 	ldw	r2,-4(fp)
   11028:	1090000c 	andi	r2,r2,16384
   1102c:	10000226 	beq	r2,zero,11038 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   11030:	00bffd44 	movi	r2,-11
   11034:	00000106 	br	1103c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   11038:	00bffec4 	movi	r2,-5
}
   1103c:	e037883a 	mov	sp,fp
   11040:	dfc00117 	ldw	ra,4(sp)
   11044:	df000017 	ldw	fp,0(sp)
   11048:	dec00204 	addi	sp,sp,8
   1104c:	f800283a 	ret

00011050 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   11050:	defff304 	addi	sp,sp,-52
   11054:	dfc00c15 	stw	ra,48(sp)
   11058:	df000b15 	stw	fp,44(sp)
   1105c:	df000b04 	addi	fp,sp,44
   11060:	e13ffc15 	stw	r4,-16(fp)
   11064:	e17ffd15 	stw	r5,-12(fp)
   11068:	e1bffe15 	stw	r6,-8(fp)
   1106c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   11070:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   11074:	e0bffd17 	ldw	r2,-12(fp)
   11078:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1107c:	00003706 	br	1115c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   11080:	e0bffc17 	ldw	r2,-16(fp)
   11084:	10800c17 	ldw	r2,48(r2)
   11088:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   1108c:	e0bffc17 	ldw	r2,-16(fp)
   11090:	10800d17 	ldw	r2,52(r2)
   11094:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   11098:	e0fff917 	ldw	r3,-28(fp)
   1109c:	e0bff517 	ldw	r2,-44(fp)
   110a0:	1880062e 	bgeu	r3,r2,110bc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   110a4:	e0fff517 	ldw	r3,-44(fp)
   110a8:	e0bff917 	ldw	r2,-28(fp)
   110ac:	1885c83a 	sub	r2,r3,r2
   110b0:	10bfffc4 	addi	r2,r2,-1
   110b4:	e0bff615 	stw	r2,-40(fp)
   110b8:	00000b06 	br	110e8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   110bc:	e0bff517 	ldw	r2,-44(fp)
   110c0:	10000526 	beq	r2,zero,110d8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   110c4:	00c20004 	movi	r3,2048
   110c8:	e0bff917 	ldw	r2,-28(fp)
   110cc:	1885c83a 	sub	r2,r3,r2
   110d0:	e0bff615 	stw	r2,-40(fp)
   110d4:	00000406 	br	110e8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   110d8:	00c1ffc4 	movi	r3,2047
   110dc:	e0bff917 	ldw	r2,-28(fp)
   110e0:	1885c83a 	sub	r2,r3,r2
   110e4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   110e8:	e0bff617 	ldw	r2,-40(fp)
   110ec:	10001e26 	beq	r2,zero,11168 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   110f0:	e0fffe17 	ldw	r3,-8(fp)
   110f4:	e0bff617 	ldw	r2,-40(fp)
   110f8:	1880022e 	bgeu	r3,r2,11104 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   110fc:	e0bffe17 	ldw	r2,-8(fp)
   11100:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   11104:	e0bffc17 	ldw	r2,-16(fp)
   11108:	10c20e04 	addi	r3,r2,2104
   1110c:	e0bff917 	ldw	r2,-28(fp)
   11110:	1885883a 	add	r2,r3,r2
   11114:	e1bff617 	ldw	r6,-40(fp)
   11118:	e17ffd17 	ldw	r5,-12(fp)
   1111c:	1009883a 	mov	r4,r2
   11120:	00128080 	call	12808 <memcpy>
      ptr   += n;
   11124:	e0fffd17 	ldw	r3,-12(fp)
   11128:	e0bff617 	ldw	r2,-40(fp)
   1112c:	1885883a 	add	r2,r3,r2
   11130:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   11134:	e0fffe17 	ldw	r3,-8(fp)
   11138:	e0bff617 	ldw	r2,-40(fp)
   1113c:	1885c83a 	sub	r2,r3,r2
   11140:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11144:	e0fff917 	ldw	r3,-28(fp)
   11148:	e0bff617 	ldw	r2,-40(fp)
   1114c:	1885883a 	add	r2,r3,r2
   11150:	10c1ffcc 	andi	r3,r2,2047
   11154:	e0bffc17 	ldw	r2,-16(fp)
   11158:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1115c:	e0bffe17 	ldw	r2,-8(fp)
   11160:	00bfc716 	blt	zero,r2,11080 <_gp+0xffff20c4>
   11164:	00000106 	br	1116c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   11168:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1116c:	0005303a 	rdctl	r2,status
   11170:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11174:	e0fffb17 	ldw	r3,-20(fp)
   11178:	00bfff84 	movi	r2,-2
   1117c:	1884703a 	and	r2,r3,r2
   11180:	1001703a 	wrctl	status,r2
  
  return context;
   11184:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   11188:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1118c:	e0bffc17 	ldw	r2,-16(fp)
   11190:	10800817 	ldw	r2,32(r2)
   11194:	10c00094 	ori	r3,r2,2
   11198:	e0bffc17 	ldw	r2,-16(fp)
   1119c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   111a0:	e0bffc17 	ldw	r2,-16(fp)
   111a4:	10800017 	ldw	r2,0(r2)
   111a8:	10800104 	addi	r2,r2,4
   111ac:	1007883a 	mov	r3,r2
   111b0:	e0bffc17 	ldw	r2,-16(fp)
   111b4:	10800817 	ldw	r2,32(r2)
   111b8:	18800035 	stwio	r2,0(r3)
   111bc:	e0bffa17 	ldw	r2,-24(fp)
   111c0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   111c4:	e0bff817 	ldw	r2,-32(fp)
   111c8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   111cc:	e0bffe17 	ldw	r2,-8(fp)
   111d0:	0080100e 	bge	zero,r2,11214 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   111d4:	e0bfff17 	ldw	r2,-4(fp)
   111d8:	1090000c 	andi	r2,r2,16384
   111dc:	1000101e 	bne	r2,zero,11220 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   111e0:	0001883a 	nop
   111e4:	e0bffc17 	ldw	r2,-16(fp)
   111e8:	10c00d17 	ldw	r3,52(r2)
   111ec:	e0bff517 	ldw	r2,-44(fp)
   111f0:	1880051e 	bne	r3,r2,11208 <altera_avalon_jtag_uart_write+0x1b8>
   111f4:	e0bffc17 	ldw	r2,-16(fp)
   111f8:	10c00917 	ldw	r3,36(r2)
   111fc:	e0bffc17 	ldw	r2,-16(fp)
   11200:	10800117 	ldw	r2,4(r2)
   11204:	18bff736 	bltu	r3,r2,111e4 <_gp+0xffff2228>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   11208:	e0bffc17 	ldw	r2,-16(fp)
   1120c:	10800917 	ldw	r2,36(r2)
   11210:	1000051e 	bne	r2,zero,11228 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   11214:	e0bffe17 	ldw	r2,-8(fp)
   11218:	00bfd016 	blt	zero,r2,1115c <_gp+0xffff21a0>
   1121c:	00000306 	br	1122c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   11220:	0001883a 	nop
   11224:	00000106 	br	1122c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   11228:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   1122c:	e0fffd17 	ldw	r3,-12(fp)
   11230:	e0bff717 	ldw	r2,-36(fp)
   11234:	18800426 	beq	r3,r2,11248 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   11238:	e0fffd17 	ldw	r3,-12(fp)
   1123c:	e0bff717 	ldw	r2,-36(fp)
   11240:	1885c83a 	sub	r2,r3,r2
   11244:	00000606 	br	11260 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   11248:	e0bfff17 	ldw	r2,-4(fp)
   1124c:	1090000c 	andi	r2,r2,16384
   11250:	10000226 	beq	r2,zero,1125c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   11254:	00bffd44 	movi	r2,-11
   11258:	00000106 	br	11260 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1125c:	00bffec4 	movi	r2,-5
}
   11260:	e037883a 	mov	sp,fp
   11264:	dfc00117 	ldw	ra,4(sp)
   11268:	df000017 	ldw	fp,0(sp)
   1126c:	dec00204 	addi	sp,sp,8
   11270:	f800283a 	ret

00011274 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   11274:	defff904 	addi	sp,sp,-28
   11278:	dfc00615 	stw	ra,24(sp)
   1127c:	df000515 	stw	fp,20(sp)
   11280:	df000504 	addi	fp,sp,20
   11284:	e13ffe15 	stw	r4,-8(fp)
   11288:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1128c:	0007883a 	mov	r3,zero
   11290:	e0bffe17 	ldw	r2,-8(fp)
   11294:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   11298:	e0bffe17 	ldw	r2,-8(fp)
   1129c:	10800104 	addi	r2,r2,4
   112a0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   112a4:	0005303a 	rdctl	r2,status
   112a8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   112ac:	e0fffc17 	ldw	r3,-16(fp)
   112b0:	00bfff84 	movi	r2,-2
   112b4:	1884703a 	and	r2,r3,r2
   112b8:	1001703a 	wrctl	status,r2
  
  return context;
   112bc:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   112c0:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   112c4:	00123ac0 	call	123ac <alt_tick>
   112c8:	e0bffb17 	ldw	r2,-20(fp)
   112cc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   112d0:	e0bffd17 	ldw	r2,-12(fp)
   112d4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   112d8:	0001883a 	nop
   112dc:	e037883a 	mov	sp,fp
   112e0:	dfc00117 	ldw	ra,4(sp)
   112e4:	df000017 	ldw	fp,0(sp)
   112e8:	dec00204 	addi	sp,sp,8
   112ec:	f800283a 	ret

000112f0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   112f0:	defff904 	addi	sp,sp,-28
   112f4:	dfc00615 	stw	ra,24(sp)
   112f8:	df000515 	stw	fp,20(sp)
   112fc:	df000504 	addi	fp,sp,20
   11300:	e13ffc15 	stw	r4,-16(fp)
   11304:	e17ffd15 	stw	r5,-12(fp)
   11308:	e1bffe15 	stw	r6,-8(fp)
   1130c:	e1ffff15 	stw	r7,-4(fp)
   11310:	e0bfff17 	ldw	r2,-4(fp)
   11314:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   11318:	d0a6c317 	ldw	r2,-25844(gp)
   1131c:	1000021e 	bne	r2,zero,11328 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   11320:	e0bffb17 	ldw	r2,-20(fp)
   11324:	d0a6c315 	stw	r2,-25844(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   11328:	e0bffc17 	ldw	r2,-16(fp)
   1132c:	10800104 	addi	r2,r2,4
   11330:	00c001c4 	movi	r3,7
   11334:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   11338:	01800074 	movhi	r6,1
   1133c:	31849d04 	addi	r6,r6,4724
   11340:	e17ffc17 	ldw	r5,-16(fp)
   11344:	e13ffe17 	ldw	r4,-8(fp)
   11348:	0011e880 	call	11e88 <alt_irq_register>
#endif  
}
   1134c:	0001883a 	nop
   11350:	e037883a 	mov	sp,fp
   11354:	dfc00117 	ldw	ra,4(sp)
   11358:	df000017 	ldw	fp,0(sp)
   1135c:	dec00204 	addi	sp,sp,8
   11360:	f800283a 	ret

00011364 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   11364:	defffd04 	addi	sp,sp,-12
   11368:	df000215 	stw	fp,8(sp)
   1136c:	df000204 	addi	fp,sp,8
   11370:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   11374:	e0bfff17 	ldw	r2,-4(fp)
   11378:	10800a17 	ldw	r2,40(r2)
   1137c:	10800104 	addi	r2,r2,4
   11380:	10800037 	ldwio	r2,0(r2)
   11384:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   11388:	e0bffe17 	ldw	r2,-8(fp)
   1138c:	10800054 	ori	r2,r2,1
   11390:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   11394:	e0bfff17 	ldw	r2,-4(fp)
   11398:	10800a17 	ldw	r2,40(r2)
   1139c:	10800104 	addi	r2,r2,4
   113a0:	1007883a 	mov	r3,r2
   113a4:	e0bffe17 	ldw	r2,-8(fp)
   113a8:	18800035 	stwio	r2,0(r3)
}
   113ac:	0001883a 	nop
   113b0:	e037883a 	mov	sp,fp
   113b4:	df000017 	ldw	fp,0(sp)
   113b8:	dec00104 	addi	sp,sp,4
   113bc:	f800283a 	ret

000113c0 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   113c0:	defffd04 	addi	sp,sp,-12
   113c4:	df000215 	stw	fp,8(sp)
   113c8:	df000204 	addi	fp,sp,8
   113cc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   113d0:	e0bfff17 	ldw	r2,-4(fp)
   113d4:	10800a17 	ldw	r2,40(r2)
   113d8:	10800104 	addi	r2,r2,4
   113dc:	10800037 	ldwio	r2,0(r2)
   113e0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   113e4:	e0fffe17 	ldw	r3,-8(fp)
   113e8:	00bfff84 	movi	r2,-2
   113ec:	1884703a 	and	r2,r3,r2
   113f0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   113f4:	e0bfff17 	ldw	r2,-4(fp)
   113f8:	10800a17 	ldw	r2,40(r2)
   113fc:	10800104 	addi	r2,r2,4
   11400:	1007883a 	mov	r3,r2
   11404:	e0bffe17 	ldw	r2,-8(fp)
   11408:	18800035 	stwio	r2,0(r3)
}
   1140c:	0001883a 	nop
   11410:	e037883a 	mov	sp,fp
   11414:	df000017 	ldw	fp,0(sp)
   11418:	dec00104 	addi	sp,sp,4
   1141c:	f800283a 	ret

00011420 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   11420:	defffd04 	addi	sp,sp,-12
   11424:	df000215 	stw	fp,8(sp)
   11428:	df000204 	addi	fp,sp,8
   1142c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   11430:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   11434:	e0bfff17 	ldw	r2,-4(fp)
   11438:	10800a17 	ldw	r2,40(r2)
   1143c:	10800084 	addi	r2,r2,2
   11440:	1080002b 	ldhuio	r2,0(r2)
   11444:	10bfffcc 	andi	r2,r2,65535
   11448:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   1144c:	e0bffe0b 	ldhu	r2,-8(fp)
}
   11450:	e037883a 	mov	sp,fp
   11454:	df000017 	ldw	fp,0(sp)
   11458:	dec00104 	addi	sp,sp,4
   1145c:	f800283a 	ret

00011460 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   11460:	defffd04 	addi	sp,sp,-12
   11464:	df000215 	stw	fp,8(sp)
   11468:	df000204 	addi	fp,sp,8
   1146c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   11470:	e0bfff17 	ldw	r2,-4(fp)
   11474:	10800a17 	ldw	r2,40(r2)
   11478:	10800104 	addi	r2,r2,4
   1147c:	10800037 	ldwio	r2,0(r2)
   11480:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   11484:	e0bffe17 	ldw	r2,-8(fp)
   11488:	1004d43a 	srli	r2,r2,16
}
   1148c:	e037883a 	mov	sp,fp
   11490:	df000017 	ldw	fp,0(sp)
   11494:	dec00104 	addi	sp,sp,4
   11498:	f800283a 	ret

0001149c <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   1149c:	defffd04 	addi	sp,sp,-12
   114a0:	df000215 	stw	fp,8(sp)
   114a4:	df000204 	addi	fp,sp,8
   114a8:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   114ac:	e0bfff17 	ldw	r2,-4(fp)
   114b0:	1080800c 	andi	r2,r2,512
   114b4:	1004d27a 	srli	r2,r2,9
   114b8:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   114bc:	e0bffe17 	ldw	r2,-8(fp)
   114c0:	10000226 	beq	r2,zero,114cc <alt_up_rs232_check_parity+0x30>
   114c4:	00bfffc4 	movi	r2,-1
   114c8:	00000106 	br	114d0 <alt_up_rs232_check_parity+0x34>
   114cc:	0005883a 	mov	r2,zero
}
   114d0:	e037883a 	mov	sp,fp
   114d4:	df000017 	ldw	fp,0(sp)
   114d8:	dec00104 	addi	sp,sp,4
   114dc:	f800283a 	ret

000114e0 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   114e0:	defffd04 	addi	sp,sp,-12
   114e4:	df000215 	stw	fp,8(sp)
   114e8:	df000204 	addi	fp,sp,8
   114ec:	e13ffe15 	stw	r4,-8(fp)
   114f0:	2805883a 	mov	r2,r5
   114f4:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   114f8:	e0bffe17 	ldw	r2,-8(fp)
   114fc:	10800a17 	ldw	r2,40(r2)
   11500:	1007883a 	mov	r3,r2
   11504:	e0bfff03 	ldbu	r2,-4(fp)
   11508:	18800035 	stwio	r2,0(r3)
	return 0;
   1150c:	0005883a 	mov	r2,zero
}
   11510:	e037883a 	mov	sp,fp
   11514:	df000017 	ldw	fp,0(sp)
   11518:	dec00104 	addi	sp,sp,4
   1151c:	f800283a 	ret

00011520 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   11520:	defffa04 	addi	sp,sp,-24
   11524:	dfc00515 	stw	ra,20(sp)
   11528:	df000415 	stw	fp,16(sp)
   1152c:	df000404 	addi	fp,sp,16
   11530:	e13ffd15 	stw	r4,-12(fp)
   11534:	e17ffe15 	stw	r5,-8(fp)
   11538:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   1153c:	e0bffd17 	ldw	r2,-12(fp)
   11540:	10800a17 	ldw	r2,40(r2)
   11544:	10800037 	ldwio	r2,0(r2)
   11548:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   1154c:	e0bffc17 	ldw	r2,-16(fp)
   11550:	1007883a 	mov	r3,r2
   11554:	e0bffe17 	ldw	r2,-8(fp)
   11558:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   1155c:	e13ffc17 	ldw	r4,-16(fp)
   11560:	001149c0 	call	1149c <alt_up_rs232_check_parity>
   11564:	1007883a 	mov	r3,r2
   11568:	e0bfff17 	ldw	r2,-4(fp)
   1156c:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   11570:	e0bffc17 	ldw	r2,-16(fp)
   11574:	10a0000c 	andi	r2,r2,32768
   11578:	1004d3fa 	srli	r2,r2,15
   1157c:	10bfffc4 	addi	r2,r2,-1
}
   11580:	e037883a 	mov	sp,fp
   11584:	dfc00117 	ldw	ra,4(sp)
   11588:	df000017 	ldw	fp,0(sp)
   1158c:	dec00204 	addi	sp,sp,8
   11590:	f800283a 	ret

00011594 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   11594:	defff804 	addi	sp,sp,-32
   11598:	dfc00715 	stw	ra,28(sp)
   1159c:	df000615 	stw	fp,24(sp)
   115a0:	df000604 	addi	fp,sp,24
   115a4:	e13ffd15 	stw	r4,-12(fp)
   115a8:	e17ffe15 	stw	r5,-8(fp)
   115ac:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   115b0:	e0bffd17 	ldw	r2,-12(fp)
   115b4:	10800017 	ldw	r2,0(r2)
   115b8:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   115bc:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   115c0:	00000c06 	br	115f4 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   115c4:	e0bffe17 	ldw	r2,-8(fp)
   115c8:	10c00044 	addi	r3,r2,1
   115cc:	e0fffe15 	stw	r3,-8(fp)
   115d0:	e0fffc04 	addi	r3,fp,-16
   115d4:	180d883a 	mov	r6,r3
   115d8:	100b883a 	mov	r5,r2
   115dc:	e13ffb17 	ldw	r4,-20(fp)
   115e0:	00115200 	call	11520 <alt_up_rs232_read_data>
   115e4:	1000081e 	bne	r2,zero,11608 <alt_up_rs232_read_fd+0x74>
			count++;
   115e8:	e0bffa17 	ldw	r2,-24(fp)
   115ec:	10800044 	addi	r2,r2,1
   115f0:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   115f4:	e0bfff17 	ldw	r2,-4(fp)
   115f8:	10ffffc4 	addi	r3,r2,-1
   115fc:	e0ffff15 	stw	r3,-4(fp)
   11600:	103ff01e 	bne	r2,zero,115c4 <_gp+0xffff2608>
   11604:	00000106 	br	1160c <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   11608:	0001883a 	nop
	}
	return count;
   1160c:	e0bffa17 	ldw	r2,-24(fp)
}
   11610:	e037883a 	mov	sp,fp
   11614:	dfc00117 	ldw	ra,4(sp)
   11618:	df000017 	ldw	fp,0(sp)
   1161c:	dec00204 	addi	sp,sp,8
   11620:	f800283a 	ret

00011624 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   11624:	defff904 	addi	sp,sp,-28
   11628:	dfc00615 	stw	ra,24(sp)
   1162c:	df000515 	stw	fp,20(sp)
   11630:	df000504 	addi	fp,sp,20
   11634:	e13ffd15 	stw	r4,-12(fp)
   11638:	e17ffe15 	stw	r5,-8(fp)
   1163c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   11640:	e0bffd17 	ldw	r2,-12(fp)
   11644:	10800017 	ldw	r2,0(r2)
   11648:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1164c:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   11650:	00000d06 	br	11688 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   11654:	e0bffe17 	ldw	r2,-8(fp)
   11658:	10800003 	ldbu	r2,0(r2)
   1165c:	10803fcc 	andi	r2,r2,255
   11660:	100b883a 	mov	r5,r2
   11664:	e13ffc17 	ldw	r4,-16(fp)
   11668:	00114e00 	call	114e0 <alt_up_rs232_write_data>
   1166c:	10000b1e 	bne	r2,zero,1169c <alt_up_rs232_write_fd+0x78>
		{
			count++;
   11670:	e0bffb17 	ldw	r2,-20(fp)
   11674:	10800044 	addi	r2,r2,1
   11678:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   1167c:	e0bffe17 	ldw	r2,-8(fp)
   11680:	10800044 	addi	r2,r2,1
   11684:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   11688:	e0bfff17 	ldw	r2,-4(fp)
   1168c:	10ffffc4 	addi	r3,r2,-1
   11690:	e0ffff15 	stw	r3,-4(fp)
   11694:	103fef1e 	bne	r2,zero,11654 <_gp+0xffff2698>
   11698:	00000106 	br	116a0 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
   1169c:	0001883a 	nop
	}
	return count;
   116a0:	e0bffb17 	ldw	r2,-20(fp)
}
   116a4:	e037883a 	mov	sp,fp
   116a8:	dfc00117 	ldw	ra,4(sp)
   116ac:	df000017 	ldw	fp,0(sp)
   116b0:	dec00204 	addi	sp,sp,8
   116b4:	f800283a 	ret

000116b8 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   116b8:	defffc04 	addi	sp,sp,-16
   116bc:	dfc00315 	stw	ra,12(sp)
   116c0:	df000215 	stw	fp,8(sp)
   116c4:	df000204 	addi	fp,sp,8
   116c8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   116cc:	d1600204 	addi	r5,gp,-32760
   116d0:	e13fff17 	ldw	r4,-4(fp)
   116d4:	0011c780 	call	11c78 <alt_find_dev>
   116d8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   116dc:	e0bffe17 	ldw	r2,-8(fp)
}
   116e0:	e037883a 	mov	sp,fp
   116e4:	dfc00117 	ldw	ra,4(sp)
   116e8:	df000017 	ldw	fp,0(sp)
   116ec:	dec00204 	addi	sp,sp,8
   116f0:	f800283a 	ret

000116f4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   116f4:	defff504 	addi	sp,sp,-44
   116f8:	df000a15 	stw	fp,40(sp)
   116fc:	df000a04 	addi	fp,sp,40
   11700:	e13ffc15 	stw	r4,-16(fp)
   11704:	e17ffd15 	stw	r5,-12(fp)
   11708:	e1bffe15 	stw	r6,-8(fp)
   1170c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   11710:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   11714:	d0a6c317 	ldw	r2,-25844(gp)
  
  if (alt_ticks_per_second ())
   11718:	10003c26 	beq	r2,zero,1180c <alt_alarm_start+0x118>
  {
    if (alarm)
   1171c:	e0bffc17 	ldw	r2,-16(fp)
   11720:	10003826 	beq	r2,zero,11804 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   11724:	e0bffc17 	ldw	r2,-16(fp)
   11728:	e0fffe17 	ldw	r3,-8(fp)
   1172c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   11730:	e0bffc17 	ldw	r2,-16(fp)
   11734:	e0ffff17 	ldw	r3,-4(fp)
   11738:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1173c:	0005303a 	rdctl	r2,status
   11740:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11744:	e0fff917 	ldw	r3,-28(fp)
   11748:	00bfff84 	movi	r2,-2
   1174c:	1884703a 	and	r2,r3,r2
   11750:	1001703a 	wrctl	status,r2
  
  return context;
   11754:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   11758:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1175c:	d0a6c417 	ldw	r2,-25840(gp)
      
      current_nticks = alt_nticks();
   11760:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   11764:	e0fffd17 	ldw	r3,-12(fp)
   11768:	e0bff617 	ldw	r2,-40(fp)
   1176c:	1885883a 	add	r2,r3,r2
   11770:	10c00044 	addi	r3,r2,1
   11774:	e0bffc17 	ldw	r2,-16(fp)
   11778:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1177c:	e0bffc17 	ldw	r2,-16(fp)
   11780:	10c00217 	ldw	r3,8(r2)
   11784:	e0bff617 	ldw	r2,-40(fp)
   11788:	1880042e 	bgeu	r3,r2,1179c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   1178c:	e0bffc17 	ldw	r2,-16(fp)
   11790:	00c00044 	movi	r3,1
   11794:	10c00405 	stb	r3,16(r2)
   11798:	00000206 	br	117a4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   1179c:	e0bffc17 	ldw	r2,-16(fp)
   117a0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   117a4:	e0bffc17 	ldw	r2,-16(fp)
   117a8:	d0e00704 	addi	r3,gp,-32740
   117ac:	e0fffa15 	stw	r3,-24(fp)
   117b0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   117b4:	e0bffb17 	ldw	r2,-20(fp)
   117b8:	e0fffa17 	ldw	r3,-24(fp)
   117bc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   117c0:	e0bffa17 	ldw	r2,-24(fp)
   117c4:	10c00017 	ldw	r3,0(r2)
   117c8:	e0bffb17 	ldw	r2,-20(fp)
   117cc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   117d0:	e0bffa17 	ldw	r2,-24(fp)
   117d4:	10800017 	ldw	r2,0(r2)
   117d8:	e0fffb17 	ldw	r3,-20(fp)
   117dc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   117e0:	e0bffa17 	ldw	r2,-24(fp)
   117e4:	e0fffb17 	ldw	r3,-20(fp)
   117e8:	10c00015 	stw	r3,0(r2)
   117ec:	e0bff817 	ldw	r2,-32(fp)
   117f0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   117f4:	e0bff717 	ldw	r2,-36(fp)
   117f8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   117fc:	0005883a 	mov	r2,zero
   11800:	00000306 	br	11810 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   11804:	00bffa84 	movi	r2,-22
   11808:	00000106 	br	11810 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   1180c:	00bfde84 	movi	r2,-134
  }
}
   11810:	e037883a 	mov	sp,fp
   11814:	df000017 	ldw	fp,0(sp)
   11818:	dec00104 	addi	sp,sp,4
   1181c:	f800283a 	ret

00011820 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   11820:	defffa04 	addi	sp,sp,-24
   11824:	dfc00515 	stw	ra,20(sp)
   11828:	df000415 	stw	fp,16(sp)
   1182c:	df000404 	addi	fp,sp,16
   11830:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   11834:	00800244 	movi	r2,9
   11838:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   1183c:	014003f4 	movhi	r5,15
   11840:	29509004 	addi	r5,r5,16960
   11844:	e13ffd17 	ldw	r4,-12(fp)
   11848:	0014e040 	call	14e04 <__mulsi3>
   1184c:	100b883a 	mov	r5,r2
   11850:	0100bef4 	movhi	r4,763
   11854:	213c2004 	addi	r4,r4,-3968
   11858:	0014d480 	call	14d48 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   1185c:	100b883a 	mov	r5,r2
   11860:	01200034 	movhi	r4,32768
   11864:	213fffc4 	addi	r4,r4,-1
   11868:	0014d480 	call	14d48 <__udivsi3>
   1186c:	100b883a 	mov	r5,r2
   11870:	e13fff17 	ldw	r4,-4(fp)
   11874:	0014d480 	call	14d48 <__udivsi3>
   11878:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   1187c:	e0bffe17 	ldw	r2,-8(fp)
   11880:	10002a26 	beq	r2,zero,1192c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   11884:	e03ffc15 	stw	zero,-16(fp)
   11888:	00001706 	br	118e8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   1188c:	00a00034 	movhi	r2,32768
   11890:	10bfffc4 	addi	r2,r2,-1
   11894:	10bfffc4 	addi	r2,r2,-1
   11898:	103ffe1e 	bne	r2,zero,11894 <_gp+0xffff28d8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   1189c:	014003f4 	movhi	r5,15
   118a0:	29509004 	addi	r5,r5,16960
   118a4:	e13ffd17 	ldw	r4,-12(fp)
   118a8:	0014e040 	call	14e04 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   118ac:	100b883a 	mov	r5,r2
   118b0:	0100bef4 	movhi	r4,763
   118b4:	213c2004 	addi	r4,r4,-3968
   118b8:	0014d480 	call	14d48 <__udivsi3>
   118bc:	100b883a 	mov	r5,r2
   118c0:	01200034 	movhi	r4,32768
   118c4:	213fffc4 	addi	r4,r4,-1
   118c8:	0014d480 	call	14d48 <__udivsi3>
   118cc:	1007883a 	mov	r3,r2
   118d0:	e0bfff17 	ldw	r2,-4(fp)
   118d4:	10c5c83a 	sub	r2,r2,r3
   118d8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   118dc:	e0bffc17 	ldw	r2,-16(fp)
   118e0:	10800044 	addi	r2,r2,1
   118e4:	e0bffc15 	stw	r2,-16(fp)
   118e8:	e0fffc17 	ldw	r3,-16(fp)
   118ec:	e0bffe17 	ldw	r2,-8(fp)
   118f0:	18bfe616 	blt	r3,r2,1188c <_gp+0xffff28d0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   118f4:	014003f4 	movhi	r5,15
   118f8:	29509004 	addi	r5,r5,16960
   118fc:	e13ffd17 	ldw	r4,-12(fp)
   11900:	0014e040 	call	14e04 <__mulsi3>
   11904:	100b883a 	mov	r5,r2
   11908:	0100bef4 	movhi	r4,763
   1190c:	213c2004 	addi	r4,r4,-3968
   11910:	0014d480 	call	14d48 <__udivsi3>
   11914:	e17fff17 	ldw	r5,-4(fp)
   11918:	1009883a 	mov	r4,r2
   1191c:	0014e040 	call	14e04 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11920:	10bfffc4 	addi	r2,r2,-1
   11924:	103ffe1e 	bne	r2,zero,11920 <_gp+0xffff2964>
   11928:	00000d06 	br	11960 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   1192c:	014003f4 	movhi	r5,15
   11930:	29509004 	addi	r5,r5,16960
   11934:	e13ffd17 	ldw	r4,-12(fp)
   11938:	0014e040 	call	14e04 <__mulsi3>
   1193c:	100b883a 	mov	r5,r2
   11940:	0100bef4 	movhi	r4,763
   11944:	213c2004 	addi	r4,r4,-3968
   11948:	0014d480 	call	14d48 <__udivsi3>
   1194c:	e17fff17 	ldw	r5,-4(fp)
   11950:	1009883a 	mov	r4,r2
   11954:	0014e040 	call	14e04 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11958:	10bfffc4 	addi	r2,r2,-1
   1195c:	00bffe16 	blt	zero,r2,11958 <_gp+0xffff299c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   11960:	0005883a 	mov	r2,zero
}
   11964:	e037883a 	mov	sp,fp
   11968:	dfc00117 	ldw	ra,4(sp)
   1196c:	df000017 	ldw	fp,0(sp)
   11970:	dec00204 	addi	sp,sp,8
   11974:	f800283a 	ret

00011978 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11978:	defffe04 	addi	sp,sp,-8
   1197c:	dfc00115 	stw	ra,4(sp)
   11980:	df000015 	stw	fp,0(sp)
   11984:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11988:	d0a00517 	ldw	r2,-32748(gp)
   1198c:	10000326 	beq	r2,zero,1199c <alt_get_errno+0x24>
   11990:	d0a00517 	ldw	r2,-32748(gp)
   11994:	103ee83a 	callr	r2
   11998:	00000106 	br	119a0 <alt_get_errno+0x28>
   1199c:	d0a6c604 	addi	r2,gp,-25832
}
   119a0:	e037883a 	mov	sp,fp
   119a4:	dfc00117 	ldw	ra,4(sp)
   119a8:	df000017 	ldw	fp,0(sp)
   119ac:	dec00204 	addi	sp,sp,8
   119b0:	f800283a 	ret

000119b4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   119b4:	defffb04 	addi	sp,sp,-20
   119b8:	dfc00415 	stw	ra,16(sp)
   119bc:	df000315 	stw	fp,12(sp)
   119c0:	df000304 	addi	fp,sp,12
   119c4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   119c8:	e0bfff17 	ldw	r2,-4(fp)
   119cc:	10000816 	blt	r2,zero,119f0 <close+0x3c>
   119d0:	01400304 	movi	r5,12
   119d4:	e13fff17 	ldw	r4,-4(fp)
   119d8:	0014e040 	call	14e04 <__mulsi3>
   119dc:	1007883a 	mov	r3,r2
   119e0:	00800074 	movhi	r2,1
   119e4:	10998404 	addi	r2,r2,26128
   119e8:	1885883a 	add	r2,r3,r2
   119ec:	00000106 	br	119f4 <close+0x40>
   119f0:	0005883a 	mov	r2,zero
   119f4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   119f8:	e0bffd17 	ldw	r2,-12(fp)
   119fc:	10001926 	beq	r2,zero,11a64 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   11a00:	e0bffd17 	ldw	r2,-12(fp)
   11a04:	10800017 	ldw	r2,0(r2)
   11a08:	10800417 	ldw	r2,16(r2)
   11a0c:	10000626 	beq	r2,zero,11a28 <close+0x74>
   11a10:	e0bffd17 	ldw	r2,-12(fp)
   11a14:	10800017 	ldw	r2,0(r2)
   11a18:	10800417 	ldw	r2,16(r2)
   11a1c:	e13ffd17 	ldw	r4,-12(fp)
   11a20:	103ee83a 	callr	r2
   11a24:	00000106 	br	11a2c <close+0x78>
   11a28:	0005883a 	mov	r2,zero
   11a2c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   11a30:	e13fff17 	ldw	r4,-4(fp)
   11a34:	001228c0 	call	1228c <alt_release_fd>
    if (rval < 0)
   11a38:	e0bffe17 	ldw	r2,-8(fp)
   11a3c:	1000070e 	bge	r2,zero,11a5c <close+0xa8>
    {
      ALT_ERRNO = -rval;
   11a40:	00119780 	call	11978 <alt_get_errno>
   11a44:	1007883a 	mov	r3,r2
   11a48:	e0bffe17 	ldw	r2,-8(fp)
   11a4c:	0085c83a 	sub	r2,zero,r2
   11a50:	18800015 	stw	r2,0(r3)
      return -1;
   11a54:	00bfffc4 	movi	r2,-1
   11a58:	00000706 	br	11a78 <close+0xc4>
    }
    return 0;
   11a5c:	0005883a 	mov	r2,zero
   11a60:	00000506 	br	11a78 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11a64:	00119780 	call	11978 <alt_get_errno>
   11a68:	1007883a 	mov	r3,r2
   11a6c:	00801444 	movi	r2,81
   11a70:	18800015 	stw	r2,0(r3)
    return -1;
   11a74:	00bfffc4 	movi	r2,-1
  }
}
   11a78:	e037883a 	mov	sp,fp
   11a7c:	dfc00117 	ldw	ra,4(sp)
   11a80:	df000017 	ldw	fp,0(sp)
   11a84:	dec00204 	addi	sp,sp,8
   11a88:	f800283a 	ret

00011a8c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11a8c:	deffff04 	addi	sp,sp,-4
   11a90:	df000015 	stw	fp,0(sp)
   11a94:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   11a98:	0001883a 	nop
   11a9c:	e037883a 	mov	sp,fp
   11aa0:	df000017 	ldw	fp,0(sp)
   11aa4:	dec00104 	addi	sp,sp,4
   11aa8:	f800283a 	ret

00011aac <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   11aac:	defffc04 	addi	sp,sp,-16
   11ab0:	df000315 	stw	fp,12(sp)
   11ab4:	df000304 	addi	fp,sp,12
   11ab8:	e13ffd15 	stw	r4,-12(fp)
   11abc:	e17ffe15 	stw	r5,-8(fp)
   11ac0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   11ac4:	e0bfff17 	ldw	r2,-4(fp)
}
   11ac8:	e037883a 	mov	sp,fp
   11acc:	df000017 	ldw	fp,0(sp)
   11ad0:	dec00104 	addi	sp,sp,4
   11ad4:	f800283a 	ret

00011ad8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11ad8:	defffe04 	addi	sp,sp,-8
   11adc:	dfc00115 	stw	ra,4(sp)
   11ae0:	df000015 	stw	fp,0(sp)
   11ae4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11ae8:	d0a00517 	ldw	r2,-32748(gp)
   11aec:	10000326 	beq	r2,zero,11afc <alt_get_errno+0x24>
   11af0:	d0a00517 	ldw	r2,-32748(gp)
   11af4:	103ee83a 	callr	r2
   11af8:	00000106 	br	11b00 <alt_get_errno+0x28>
   11afc:	d0a6c604 	addi	r2,gp,-25832
}
   11b00:	e037883a 	mov	sp,fp
   11b04:	dfc00117 	ldw	ra,4(sp)
   11b08:	df000017 	ldw	fp,0(sp)
   11b0c:	dec00204 	addi	sp,sp,8
   11b10:	f800283a 	ret

00011b14 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   11b14:	defffa04 	addi	sp,sp,-24
   11b18:	dfc00515 	stw	ra,20(sp)
   11b1c:	df000415 	stw	fp,16(sp)
   11b20:	df000404 	addi	fp,sp,16
   11b24:	e13ffe15 	stw	r4,-8(fp)
   11b28:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11b2c:	e0bffe17 	ldw	r2,-8(fp)
   11b30:	10000326 	beq	r2,zero,11b40 <alt_dev_llist_insert+0x2c>
   11b34:	e0bffe17 	ldw	r2,-8(fp)
   11b38:	10800217 	ldw	r2,8(r2)
   11b3c:	1000061e 	bne	r2,zero,11b58 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   11b40:	0011ad80 	call	11ad8 <alt_get_errno>
   11b44:	1007883a 	mov	r3,r2
   11b48:	00800584 	movi	r2,22
   11b4c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   11b50:	00bffa84 	movi	r2,-22
   11b54:	00001306 	br	11ba4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   11b58:	e0bffe17 	ldw	r2,-8(fp)
   11b5c:	e0ffff17 	ldw	r3,-4(fp)
   11b60:	e0fffc15 	stw	r3,-16(fp)
   11b64:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11b68:	e0bffd17 	ldw	r2,-12(fp)
   11b6c:	e0fffc17 	ldw	r3,-16(fp)
   11b70:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11b74:	e0bffc17 	ldw	r2,-16(fp)
   11b78:	10c00017 	ldw	r3,0(r2)
   11b7c:	e0bffd17 	ldw	r2,-12(fp)
   11b80:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11b84:	e0bffc17 	ldw	r2,-16(fp)
   11b88:	10800017 	ldw	r2,0(r2)
   11b8c:	e0fffd17 	ldw	r3,-12(fp)
   11b90:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11b94:	e0bffc17 	ldw	r2,-16(fp)
   11b98:	e0fffd17 	ldw	r3,-12(fp)
   11b9c:	10c00015 	stw	r3,0(r2)

  return 0;  
   11ba0:	0005883a 	mov	r2,zero
}
   11ba4:	e037883a 	mov	sp,fp
   11ba8:	dfc00117 	ldw	ra,4(sp)
   11bac:	df000017 	ldw	fp,0(sp)
   11bb0:	dec00204 	addi	sp,sp,8
   11bb4:	f800283a 	ret

00011bb8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   11bb8:	defffd04 	addi	sp,sp,-12
   11bbc:	dfc00215 	stw	ra,8(sp)
   11bc0:	df000115 	stw	fp,4(sp)
   11bc4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11bc8:	00800074 	movhi	r2,1
   11bcc:	10953104 	addi	r2,r2,21700
   11bd0:	e0bfff15 	stw	r2,-4(fp)
   11bd4:	00000606 	br	11bf0 <_do_ctors+0x38>
        (*ctor) (); 
   11bd8:	e0bfff17 	ldw	r2,-4(fp)
   11bdc:	10800017 	ldw	r2,0(r2)
   11be0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11be4:	e0bfff17 	ldw	r2,-4(fp)
   11be8:	10bfff04 	addi	r2,r2,-4
   11bec:	e0bfff15 	stw	r2,-4(fp)
   11bf0:	e0ffff17 	ldw	r3,-4(fp)
   11bf4:	00800074 	movhi	r2,1
   11bf8:	10953204 	addi	r2,r2,21704
   11bfc:	18bff62e 	bgeu	r3,r2,11bd8 <_gp+0xffff2c1c>
        (*ctor) (); 
}
   11c00:	0001883a 	nop
   11c04:	e037883a 	mov	sp,fp
   11c08:	dfc00117 	ldw	ra,4(sp)
   11c0c:	df000017 	ldw	fp,0(sp)
   11c10:	dec00204 	addi	sp,sp,8
   11c14:	f800283a 	ret

00011c18 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   11c18:	defffd04 	addi	sp,sp,-12
   11c1c:	dfc00215 	stw	ra,8(sp)
   11c20:	df000115 	stw	fp,4(sp)
   11c24:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11c28:	00800074 	movhi	r2,1
   11c2c:	10953104 	addi	r2,r2,21700
   11c30:	e0bfff15 	stw	r2,-4(fp)
   11c34:	00000606 	br	11c50 <_do_dtors+0x38>
        (*dtor) (); 
   11c38:	e0bfff17 	ldw	r2,-4(fp)
   11c3c:	10800017 	ldw	r2,0(r2)
   11c40:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11c44:	e0bfff17 	ldw	r2,-4(fp)
   11c48:	10bfff04 	addi	r2,r2,-4
   11c4c:	e0bfff15 	stw	r2,-4(fp)
   11c50:	e0ffff17 	ldw	r3,-4(fp)
   11c54:	00800074 	movhi	r2,1
   11c58:	10953204 	addi	r2,r2,21704
   11c5c:	18bff62e 	bgeu	r3,r2,11c38 <_gp+0xffff2c7c>
        (*dtor) (); 
}
   11c60:	0001883a 	nop
   11c64:	e037883a 	mov	sp,fp
   11c68:	dfc00117 	ldw	ra,4(sp)
   11c6c:	df000017 	ldw	fp,0(sp)
   11c70:	dec00204 	addi	sp,sp,8
   11c74:	f800283a 	ret

00011c78 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11c78:	defffa04 	addi	sp,sp,-24
   11c7c:	dfc00515 	stw	ra,20(sp)
   11c80:	df000415 	stw	fp,16(sp)
   11c84:	df000404 	addi	fp,sp,16
   11c88:	e13ffe15 	stw	r4,-8(fp)
   11c8c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11c90:	e0bfff17 	ldw	r2,-4(fp)
   11c94:	10800017 	ldw	r2,0(r2)
   11c98:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11c9c:	e13ffe17 	ldw	r4,-8(fp)
   11ca0:	0012ab80 	call	12ab8 <strlen>
   11ca4:	10800044 	addi	r2,r2,1
   11ca8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11cac:	00000d06 	br	11ce4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11cb0:	e0bffc17 	ldw	r2,-16(fp)
   11cb4:	10800217 	ldw	r2,8(r2)
   11cb8:	e0fffd17 	ldw	r3,-12(fp)
   11cbc:	180d883a 	mov	r6,r3
   11cc0:	e17ffe17 	ldw	r5,-8(fp)
   11cc4:	1009883a 	mov	r4,r2
   11cc8:	001278c0 	call	1278c <memcmp>
   11ccc:	1000021e 	bne	r2,zero,11cd8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   11cd0:	e0bffc17 	ldw	r2,-16(fp)
   11cd4:	00000706 	br	11cf4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   11cd8:	e0bffc17 	ldw	r2,-16(fp)
   11cdc:	10800017 	ldw	r2,0(r2)
   11ce0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11ce4:	e0fffc17 	ldw	r3,-16(fp)
   11ce8:	e0bfff17 	ldw	r2,-4(fp)
   11cec:	18bff01e 	bne	r3,r2,11cb0 <_gp+0xffff2cf4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   11cf0:	0005883a 	mov	r2,zero
}
   11cf4:	e037883a 	mov	sp,fp
   11cf8:	dfc00117 	ldw	ra,4(sp)
   11cfc:	df000017 	ldw	fp,0(sp)
   11d00:	dec00204 	addi	sp,sp,8
   11d04:	f800283a 	ret

00011d08 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11d08:	deffff04 	addi	sp,sp,-4
   11d0c:	df000015 	stw	fp,0(sp)
   11d10:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   11d14:	0001883a 	nop
   11d18:	e037883a 	mov	sp,fp
   11d1c:	df000017 	ldw	fp,0(sp)
   11d20:	dec00104 	addi	sp,sp,4
   11d24:	f800283a 	ret

00011d28 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   11d28:	defff804 	addi	sp,sp,-32
   11d2c:	dfc00715 	stw	ra,28(sp)
   11d30:	df000615 	stw	fp,24(sp)
   11d34:	dc000515 	stw	r16,20(sp)
   11d38:	df000604 	addi	fp,sp,24
   11d3c:	e13ffb15 	stw	r4,-20(fp)
   11d40:	e17ffc15 	stw	r5,-16(fp)
   11d44:	e1bffd15 	stw	r6,-12(fp)
   11d48:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   11d4c:	e1bffe17 	ldw	r6,-8(fp)
   11d50:	e17ffd17 	ldw	r5,-12(fp)
   11d54:	e13ffc17 	ldw	r4,-16(fp)
   11d58:	00121300 	call	12130 <open>
   11d5c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   11d60:	e0bffa17 	ldw	r2,-24(fp)
   11d64:	10002216 	blt	r2,zero,11df0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   11d68:	04000074 	movhi	r16,1
   11d6c:	84198404 	addi	r16,r16,26128
   11d70:	e0bffa17 	ldw	r2,-24(fp)
   11d74:	01400304 	movi	r5,12
   11d78:	1009883a 	mov	r4,r2
   11d7c:	0014e040 	call	14e04 <__mulsi3>
   11d80:	8085883a 	add	r2,r16,r2
   11d84:	10c00017 	ldw	r3,0(r2)
   11d88:	e0bffb17 	ldw	r2,-20(fp)
   11d8c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   11d90:	04000074 	movhi	r16,1
   11d94:	84198404 	addi	r16,r16,26128
   11d98:	e0bffa17 	ldw	r2,-24(fp)
   11d9c:	01400304 	movi	r5,12
   11da0:	1009883a 	mov	r4,r2
   11da4:	0014e040 	call	14e04 <__mulsi3>
   11da8:	8085883a 	add	r2,r16,r2
   11dac:	10800104 	addi	r2,r2,4
   11db0:	10c00017 	ldw	r3,0(r2)
   11db4:	e0bffb17 	ldw	r2,-20(fp)
   11db8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   11dbc:	04000074 	movhi	r16,1
   11dc0:	84198404 	addi	r16,r16,26128
   11dc4:	e0bffa17 	ldw	r2,-24(fp)
   11dc8:	01400304 	movi	r5,12
   11dcc:	1009883a 	mov	r4,r2
   11dd0:	0014e040 	call	14e04 <__mulsi3>
   11dd4:	8085883a 	add	r2,r16,r2
   11dd8:	10800204 	addi	r2,r2,8
   11ddc:	10c00017 	ldw	r3,0(r2)
   11de0:	e0bffb17 	ldw	r2,-20(fp)
   11de4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   11de8:	e13ffa17 	ldw	r4,-24(fp)
   11dec:	001228c0 	call	1228c <alt_release_fd>
  }
} 
   11df0:	0001883a 	nop
   11df4:	e6ffff04 	addi	sp,fp,-4
   11df8:	dfc00217 	ldw	ra,8(sp)
   11dfc:	df000117 	ldw	fp,4(sp)
   11e00:	dc000017 	ldw	r16,0(sp)
   11e04:	dec00304 	addi	sp,sp,12
   11e08:	f800283a 	ret

00011e0c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   11e0c:	defffb04 	addi	sp,sp,-20
   11e10:	dfc00415 	stw	ra,16(sp)
   11e14:	df000315 	stw	fp,12(sp)
   11e18:	df000304 	addi	fp,sp,12
   11e1c:	e13ffd15 	stw	r4,-12(fp)
   11e20:	e17ffe15 	stw	r5,-8(fp)
   11e24:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   11e28:	01c07fc4 	movi	r7,511
   11e2c:	01800044 	movi	r6,1
   11e30:	e17ffd17 	ldw	r5,-12(fp)
   11e34:	01000074 	movhi	r4,1
   11e38:	21198704 	addi	r4,r4,26140
   11e3c:	0011d280 	call	11d28 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   11e40:	01c07fc4 	movi	r7,511
   11e44:	000d883a 	mov	r6,zero
   11e48:	e17ffe17 	ldw	r5,-8(fp)
   11e4c:	01000074 	movhi	r4,1
   11e50:	21198404 	addi	r4,r4,26128
   11e54:	0011d280 	call	11d28 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   11e58:	01c07fc4 	movi	r7,511
   11e5c:	01800044 	movi	r6,1
   11e60:	e17fff17 	ldw	r5,-4(fp)
   11e64:	01000074 	movhi	r4,1
   11e68:	21198a04 	addi	r4,r4,26152
   11e6c:	0011d280 	call	11d28 <alt_open_fd>
}  
   11e70:	0001883a 	nop
   11e74:	e037883a 	mov	sp,fp
   11e78:	dfc00117 	ldw	ra,4(sp)
   11e7c:	df000017 	ldw	fp,0(sp)
   11e80:	dec00204 	addi	sp,sp,8
   11e84:	f800283a 	ret

00011e88 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   11e88:	defff004 	addi	sp,sp,-64
   11e8c:	df000f15 	stw	fp,60(sp)
   11e90:	df000f04 	addi	fp,sp,60
   11e94:	e13ffd15 	stw	r4,-12(fp)
   11e98:	e17ffe15 	stw	r5,-8(fp)
   11e9c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   11ea0:	00bffa84 	movi	r2,-22
   11ea4:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11ea8:	e0bffd17 	ldw	r2,-12(fp)
   11eac:	10800828 	cmpgeui	r2,r2,32
   11eb0:	1000501e 	bne	r2,zero,11ff4 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11eb4:	0005303a 	rdctl	r2,status
   11eb8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11ebc:	e0fff617 	ldw	r3,-40(fp)
   11ec0:	00bfff84 	movi	r2,-2
   11ec4:	1884703a 	and	r2,r3,r2
   11ec8:	1001703a 	wrctl	status,r2
  
  return context;
   11ecc:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   11ed0:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   11ed4:	008000b4 	movhi	r2,2
   11ed8:	10a2c304 	addi	r2,r2,-29940
   11edc:	e0fffd17 	ldw	r3,-12(fp)
   11ee0:	180690fa 	slli	r3,r3,3
   11ee4:	10c5883a 	add	r2,r2,r3
   11ee8:	e0ffff17 	ldw	r3,-4(fp)
   11eec:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   11ef0:	008000b4 	movhi	r2,2
   11ef4:	10a2c304 	addi	r2,r2,-29940
   11ef8:	e0fffd17 	ldw	r3,-12(fp)
   11efc:	180690fa 	slli	r3,r3,3
   11f00:	10c5883a 	add	r2,r2,r3
   11f04:	10800104 	addi	r2,r2,4
   11f08:	e0fffe17 	ldw	r3,-8(fp)
   11f0c:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   11f10:	e0bfff17 	ldw	r2,-4(fp)
   11f14:	10001926 	beq	r2,zero,11f7c <alt_irq_register+0xf4>
   11f18:	e0bffd17 	ldw	r2,-12(fp)
   11f1c:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11f20:	0005303a 	rdctl	r2,status
   11f24:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11f28:	e0fff717 	ldw	r3,-36(fp)
   11f2c:	00bfff84 	movi	r2,-2
   11f30:	1884703a 	and	r2,r3,r2
   11f34:	1001703a 	wrctl	status,r2
  
  return context;
   11f38:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11f3c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   11f40:	00c00044 	movi	r3,1
   11f44:	e0bff217 	ldw	r2,-56(fp)
   11f48:	1884983a 	sll	r2,r3,r2
   11f4c:	1007883a 	mov	r3,r2
   11f50:	d0a6c217 	ldw	r2,-25848(gp)
   11f54:	1884b03a 	or	r2,r3,r2
   11f58:	d0a6c215 	stw	r2,-25848(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11f5c:	d0a6c217 	ldw	r2,-25848(gp)
   11f60:	100170fa 	wrctl	ienable,r2
   11f64:	e0bff817 	ldw	r2,-32(fp)
   11f68:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11f6c:	e0bff917 	ldw	r2,-28(fp)
   11f70:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11f74:	0005883a 	mov	r2,zero
   11f78:	00001906 	br	11fe0 <alt_irq_register+0x158>
   11f7c:	e0bffd17 	ldw	r2,-12(fp)
   11f80:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11f84:	0005303a 	rdctl	r2,status
   11f88:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11f8c:	e0fffa17 	ldw	r3,-24(fp)
   11f90:	00bfff84 	movi	r2,-2
   11f94:	1884703a 	and	r2,r3,r2
   11f98:	1001703a 	wrctl	status,r2
  
  return context;
   11f9c:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11fa0:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   11fa4:	00c00044 	movi	r3,1
   11fa8:	e0bff417 	ldw	r2,-48(fp)
   11fac:	1884983a 	sll	r2,r3,r2
   11fb0:	0084303a 	nor	r2,zero,r2
   11fb4:	1007883a 	mov	r3,r2
   11fb8:	d0a6c217 	ldw	r2,-25848(gp)
   11fbc:	1884703a 	and	r2,r3,r2
   11fc0:	d0a6c215 	stw	r2,-25848(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11fc4:	d0a6c217 	ldw	r2,-25848(gp)
   11fc8:	100170fa 	wrctl	ienable,r2
   11fcc:	e0bffb17 	ldw	r2,-20(fp)
   11fd0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11fd4:	e0bffc17 	ldw	r2,-16(fp)
   11fd8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11fdc:	0005883a 	mov	r2,zero
   11fe0:	e0bff115 	stw	r2,-60(fp)
   11fe4:	e0bff317 	ldw	r2,-52(fp)
   11fe8:	e0bff515 	stw	r2,-44(fp)
   11fec:	e0bff517 	ldw	r2,-44(fp)
   11ff0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   11ff4:	e0bff117 	ldw	r2,-60(fp)
}
   11ff8:	e037883a 	mov	sp,fp
   11ffc:	df000017 	ldw	fp,0(sp)
   12000:	dec00104 	addi	sp,sp,4
   12004:	f800283a 	ret

00012008 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12008:	defffe04 	addi	sp,sp,-8
   1200c:	dfc00115 	stw	ra,4(sp)
   12010:	df000015 	stw	fp,0(sp)
   12014:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12018:	d0a00517 	ldw	r2,-32748(gp)
   1201c:	10000326 	beq	r2,zero,1202c <alt_get_errno+0x24>
   12020:	d0a00517 	ldw	r2,-32748(gp)
   12024:	103ee83a 	callr	r2
   12028:	00000106 	br	12030 <alt_get_errno+0x28>
   1202c:	d0a6c604 	addi	r2,gp,-25832
}
   12030:	e037883a 	mov	sp,fp
   12034:	dfc00117 	ldw	ra,4(sp)
   12038:	df000017 	ldw	fp,0(sp)
   1203c:	dec00204 	addi	sp,sp,8
   12040:	f800283a 	ret

00012044 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   12044:	defffb04 	addi	sp,sp,-20
   12048:	dfc00415 	stw	ra,16(sp)
   1204c:	df000315 	stw	fp,12(sp)
   12050:	dc000215 	stw	r16,8(sp)
   12054:	df000304 	addi	fp,sp,12
   12058:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1205c:	e0bffe17 	ldw	r2,-8(fp)
   12060:	10800217 	ldw	r2,8(r2)
   12064:	10d00034 	orhi	r3,r2,16384
   12068:	e0bffe17 	ldw	r2,-8(fp)
   1206c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   12070:	e03ffd15 	stw	zero,-12(fp)
   12074:	00002306 	br	12104 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   12078:	04000074 	movhi	r16,1
   1207c:	84198404 	addi	r16,r16,26128
   12080:	e0bffd17 	ldw	r2,-12(fp)
   12084:	01400304 	movi	r5,12
   12088:	1009883a 	mov	r4,r2
   1208c:	0014e040 	call	14e04 <__mulsi3>
   12090:	8085883a 	add	r2,r16,r2
   12094:	10c00017 	ldw	r3,0(r2)
   12098:	e0bffe17 	ldw	r2,-8(fp)
   1209c:	10800017 	ldw	r2,0(r2)
   120a0:	1880151e 	bne	r3,r2,120f8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   120a4:	04000074 	movhi	r16,1
   120a8:	84198404 	addi	r16,r16,26128
   120ac:	e0bffd17 	ldw	r2,-12(fp)
   120b0:	01400304 	movi	r5,12
   120b4:	1009883a 	mov	r4,r2
   120b8:	0014e040 	call	14e04 <__mulsi3>
   120bc:	8085883a 	add	r2,r16,r2
   120c0:	10800204 	addi	r2,r2,8
   120c4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   120c8:	10000b0e 	bge	r2,zero,120f8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   120cc:	01400304 	movi	r5,12
   120d0:	e13ffd17 	ldw	r4,-12(fp)
   120d4:	0014e040 	call	14e04 <__mulsi3>
   120d8:	1007883a 	mov	r3,r2
   120dc:	00800074 	movhi	r2,1
   120e0:	10998404 	addi	r2,r2,26128
   120e4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   120e8:	e0bffe17 	ldw	r2,-8(fp)
   120ec:	18800226 	beq	r3,r2,120f8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   120f0:	00bffcc4 	movi	r2,-13
   120f4:	00000806 	br	12118 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   120f8:	e0bffd17 	ldw	r2,-12(fp)
   120fc:	10800044 	addi	r2,r2,1
   12100:	e0bffd15 	stw	r2,-12(fp)
   12104:	d0a00417 	ldw	r2,-32752(gp)
   12108:	1007883a 	mov	r3,r2
   1210c:	e0bffd17 	ldw	r2,-12(fp)
   12110:	18bfd92e 	bgeu	r3,r2,12078 <_gp+0xffff30bc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   12114:	0005883a 	mov	r2,zero
}
   12118:	e6ffff04 	addi	sp,fp,-4
   1211c:	dfc00217 	ldw	ra,8(sp)
   12120:	df000117 	ldw	fp,4(sp)
   12124:	dc000017 	ldw	r16,0(sp)
   12128:	dec00304 	addi	sp,sp,12
   1212c:	f800283a 	ret

00012130 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   12130:	defff604 	addi	sp,sp,-40
   12134:	dfc00915 	stw	ra,36(sp)
   12138:	df000815 	stw	fp,32(sp)
   1213c:	df000804 	addi	fp,sp,32
   12140:	e13ffd15 	stw	r4,-12(fp)
   12144:	e17ffe15 	stw	r5,-8(fp)
   12148:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1214c:	00bfffc4 	movi	r2,-1
   12150:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   12154:	00bffb44 	movi	r2,-19
   12158:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1215c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   12160:	d1600204 	addi	r5,gp,-32760
   12164:	e13ffd17 	ldw	r4,-12(fp)
   12168:	0011c780 	call	11c78 <alt_find_dev>
   1216c:	e0bff815 	stw	r2,-32(fp)
   12170:	e0bff817 	ldw	r2,-32(fp)
   12174:	1000051e 	bne	r2,zero,1218c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   12178:	e13ffd17 	ldw	r4,-12(fp)
   1217c:	00124d80 	call	124d8 <alt_find_file>
   12180:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   12184:	00800044 	movi	r2,1
   12188:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1218c:	e0bff817 	ldw	r2,-32(fp)
   12190:	10002b26 	beq	r2,zero,12240 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   12194:	e13ff817 	ldw	r4,-32(fp)
   12198:	00125e00 	call	125e0 <alt_get_fd>
   1219c:	e0bff915 	stw	r2,-28(fp)
   121a0:	e0bff917 	ldw	r2,-28(fp)
   121a4:	1000030e 	bge	r2,zero,121b4 <open+0x84>
    {
      status = index;
   121a8:	e0bff917 	ldw	r2,-28(fp)
   121ac:	e0bffa15 	stw	r2,-24(fp)
   121b0:	00002506 	br	12248 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   121b4:	01400304 	movi	r5,12
   121b8:	e13ff917 	ldw	r4,-28(fp)
   121bc:	0014e040 	call	14e04 <__mulsi3>
   121c0:	1007883a 	mov	r3,r2
   121c4:	00800074 	movhi	r2,1
   121c8:	10998404 	addi	r2,r2,26128
   121cc:	1885883a 	add	r2,r3,r2
   121d0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   121d4:	e0fffe17 	ldw	r3,-8(fp)
   121d8:	00900034 	movhi	r2,16384
   121dc:	10bfffc4 	addi	r2,r2,-1
   121e0:	1886703a 	and	r3,r3,r2
   121e4:	e0bffc17 	ldw	r2,-16(fp)
   121e8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   121ec:	e0bffb17 	ldw	r2,-20(fp)
   121f0:	1000051e 	bne	r2,zero,12208 <open+0xd8>
   121f4:	e13ffc17 	ldw	r4,-16(fp)
   121f8:	00120440 	call	12044 <alt_file_locked>
   121fc:	e0bffa15 	stw	r2,-24(fp)
   12200:	e0bffa17 	ldw	r2,-24(fp)
   12204:	10001016 	blt	r2,zero,12248 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   12208:	e0bff817 	ldw	r2,-32(fp)
   1220c:	10800317 	ldw	r2,12(r2)
   12210:	10000826 	beq	r2,zero,12234 <open+0x104>
   12214:	e0bff817 	ldw	r2,-32(fp)
   12218:	10800317 	ldw	r2,12(r2)
   1221c:	e1ffff17 	ldw	r7,-4(fp)
   12220:	e1bffe17 	ldw	r6,-8(fp)
   12224:	e17ffd17 	ldw	r5,-12(fp)
   12228:	e13ffc17 	ldw	r4,-16(fp)
   1222c:	103ee83a 	callr	r2
   12230:	00000106 	br	12238 <open+0x108>
   12234:	0005883a 	mov	r2,zero
   12238:	e0bffa15 	stw	r2,-24(fp)
   1223c:	00000206 	br	12248 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   12240:	00bffb44 	movi	r2,-19
   12244:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   12248:	e0bffa17 	ldw	r2,-24(fp)
   1224c:	1000090e 	bge	r2,zero,12274 <open+0x144>
  {
    alt_release_fd (index);  
   12250:	e13ff917 	ldw	r4,-28(fp)
   12254:	001228c0 	call	1228c <alt_release_fd>
    ALT_ERRNO = -status;
   12258:	00120080 	call	12008 <alt_get_errno>
   1225c:	1007883a 	mov	r3,r2
   12260:	e0bffa17 	ldw	r2,-24(fp)
   12264:	0085c83a 	sub	r2,zero,r2
   12268:	18800015 	stw	r2,0(r3)
    return -1;
   1226c:	00bfffc4 	movi	r2,-1
   12270:	00000106 	br	12278 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   12274:	e0bff917 	ldw	r2,-28(fp)
}
   12278:	e037883a 	mov	sp,fp
   1227c:	dfc00117 	ldw	ra,4(sp)
   12280:	df000017 	ldw	fp,0(sp)
   12284:	dec00204 	addi	sp,sp,8
   12288:	f800283a 	ret

0001228c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1228c:	defffc04 	addi	sp,sp,-16
   12290:	dfc00315 	stw	ra,12(sp)
   12294:	df000215 	stw	fp,8(sp)
   12298:	dc000115 	stw	r16,4(sp)
   1229c:	df000204 	addi	fp,sp,8
   122a0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   122a4:	e0bffe17 	ldw	r2,-8(fp)
   122a8:	108000d0 	cmplti	r2,r2,3
   122ac:	1000111e 	bne	r2,zero,122f4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   122b0:	04000074 	movhi	r16,1
   122b4:	84198404 	addi	r16,r16,26128
   122b8:	e0bffe17 	ldw	r2,-8(fp)
   122bc:	01400304 	movi	r5,12
   122c0:	1009883a 	mov	r4,r2
   122c4:	0014e040 	call	14e04 <__mulsi3>
   122c8:	8085883a 	add	r2,r16,r2
   122cc:	10800204 	addi	r2,r2,8
   122d0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   122d4:	04000074 	movhi	r16,1
   122d8:	84198404 	addi	r16,r16,26128
   122dc:	e0bffe17 	ldw	r2,-8(fp)
   122e0:	01400304 	movi	r5,12
   122e4:	1009883a 	mov	r4,r2
   122e8:	0014e040 	call	14e04 <__mulsi3>
   122ec:	8085883a 	add	r2,r16,r2
   122f0:	10000015 	stw	zero,0(r2)
  }
}
   122f4:	0001883a 	nop
   122f8:	e6ffff04 	addi	sp,fp,-4
   122fc:	dfc00217 	ldw	ra,8(sp)
   12300:	df000117 	ldw	fp,4(sp)
   12304:	dc000017 	ldw	r16,0(sp)
   12308:	dec00304 	addi	sp,sp,12
   1230c:	f800283a 	ret

00012310 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   12310:	defffa04 	addi	sp,sp,-24
   12314:	df000515 	stw	fp,20(sp)
   12318:	df000504 	addi	fp,sp,20
   1231c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12320:	0005303a 	rdctl	r2,status
   12324:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12328:	e0fffc17 	ldw	r3,-16(fp)
   1232c:	00bfff84 	movi	r2,-2
   12330:	1884703a 	and	r2,r3,r2
   12334:	1001703a 	wrctl	status,r2
  
  return context;
   12338:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1233c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   12340:	e0bfff17 	ldw	r2,-4(fp)
   12344:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   12348:	e0bffd17 	ldw	r2,-12(fp)
   1234c:	10800017 	ldw	r2,0(r2)
   12350:	e0fffd17 	ldw	r3,-12(fp)
   12354:	18c00117 	ldw	r3,4(r3)
   12358:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1235c:	e0bffd17 	ldw	r2,-12(fp)
   12360:	10800117 	ldw	r2,4(r2)
   12364:	e0fffd17 	ldw	r3,-12(fp)
   12368:	18c00017 	ldw	r3,0(r3)
   1236c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   12370:	e0bffd17 	ldw	r2,-12(fp)
   12374:	e0fffd17 	ldw	r3,-12(fp)
   12378:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1237c:	e0bffd17 	ldw	r2,-12(fp)
   12380:	e0fffd17 	ldw	r3,-12(fp)
   12384:	10c00015 	stw	r3,0(r2)
   12388:	e0bffb17 	ldw	r2,-20(fp)
   1238c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12390:	e0bffe17 	ldw	r2,-8(fp)
   12394:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   12398:	0001883a 	nop
   1239c:	e037883a 	mov	sp,fp
   123a0:	df000017 	ldw	fp,0(sp)
   123a4:	dec00104 	addi	sp,sp,4
   123a8:	f800283a 	ret

000123ac <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   123ac:	defffb04 	addi	sp,sp,-20
   123b0:	dfc00415 	stw	ra,16(sp)
   123b4:	df000315 	stw	fp,12(sp)
   123b8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   123bc:	d0a00717 	ldw	r2,-32740(gp)
   123c0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   123c4:	d0a6c417 	ldw	r2,-25840(gp)
   123c8:	10800044 	addi	r2,r2,1
   123cc:	d0a6c415 	stw	r2,-25840(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   123d0:	00002e06 	br	1248c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   123d4:	e0bffd17 	ldw	r2,-12(fp)
   123d8:	10800017 	ldw	r2,0(r2)
   123dc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   123e0:	e0bffd17 	ldw	r2,-12(fp)
   123e4:	10800403 	ldbu	r2,16(r2)
   123e8:	10803fcc 	andi	r2,r2,255
   123ec:	10000426 	beq	r2,zero,12400 <alt_tick+0x54>
   123f0:	d0a6c417 	ldw	r2,-25840(gp)
   123f4:	1000021e 	bne	r2,zero,12400 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   123f8:	e0bffd17 	ldw	r2,-12(fp)
   123fc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   12400:	e0bffd17 	ldw	r2,-12(fp)
   12404:	10800217 	ldw	r2,8(r2)
   12408:	d0e6c417 	ldw	r3,-25840(gp)
   1240c:	18801d36 	bltu	r3,r2,12484 <alt_tick+0xd8>
   12410:	e0bffd17 	ldw	r2,-12(fp)
   12414:	10800403 	ldbu	r2,16(r2)
   12418:	10803fcc 	andi	r2,r2,255
   1241c:	1000191e 	bne	r2,zero,12484 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   12420:	e0bffd17 	ldw	r2,-12(fp)
   12424:	10800317 	ldw	r2,12(r2)
   12428:	e0fffd17 	ldw	r3,-12(fp)
   1242c:	18c00517 	ldw	r3,20(r3)
   12430:	1809883a 	mov	r4,r3
   12434:	103ee83a 	callr	r2
   12438:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1243c:	e0bfff17 	ldw	r2,-4(fp)
   12440:	1000031e 	bne	r2,zero,12450 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   12444:	e13ffd17 	ldw	r4,-12(fp)
   12448:	00123100 	call	12310 <alt_alarm_stop>
   1244c:	00000d06 	br	12484 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   12450:	e0bffd17 	ldw	r2,-12(fp)
   12454:	10c00217 	ldw	r3,8(r2)
   12458:	e0bfff17 	ldw	r2,-4(fp)
   1245c:	1887883a 	add	r3,r3,r2
   12460:	e0bffd17 	ldw	r2,-12(fp)
   12464:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   12468:	e0bffd17 	ldw	r2,-12(fp)
   1246c:	10c00217 	ldw	r3,8(r2)
   12470:	d0a6c417 	ldw	r2,-25840(gp)
   12474:	1880032e 	bgeu	r3,r2,12484 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   12478:	e0bffd17 	ldw	r2,-12(fp)
   1247c:	00c00044 	movi	r3,1
   12480:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   12484:	e0bffe17 	ldw	r2,-8(fp)
   12488:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1248c:	e0fffd17 	ldw	r3,-12(fp)
   12490:	d0a00704 	addi	r2,gp,-32740
   12494:	18bfcf1e 	bne	r3,r2,123d4 <_gp+0xffff3418>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   12498:	0001883a 	nop
}
   1249c:	0001883a 	nop
   124a0:	e037883a 	mov	sp,fp
   124a4:	dfc00117 	ldw	ra,4(sp)
   124a8:	df000017 	ldw	fp,0(sp)
   124ac:	dec00204 	addi	sp,sp,8
   124b0:	f800283a 	ret

000124b4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   124b4:	deffff04 	addi	sp,sp,-4
   124b8:	df000015 	stw	fp,0(sp)
   124bc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   124c0:	000170fa 	wrctl	ienable,zero
}
   124c4:	0001883a 	nop
   124c8:	e037883a 	mov	sp,fp
   124cc:	df000017 	ldw	fp,0(sp)
   124d0:	dec00104 	addi	sp,sp,4
   124d4:	f800283a 	ret

000124d8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   124d8:	defffb04 	addi	sp,sp,-20
   124dc:	dfc00415 	stw	ra,16(sp)
   124e0:	df000315 	stw	fp,12(sp)
   124e4:	df000304 	addi	fp,sp,12
   124e8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   124ec:	d0a00017 	ldw	r2,-32768(gp)
   124f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   124f4:	00003106 	br	125bc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   124f8:	e0bffd17 	ldw	r2,-12(fp)
   124fc:	10800217 	ldw	r2,8(r2)
   12500:	1009883a 	mov	r4,r2
   12504:	0012ab80 	call	12ab8 <strlen>
   12508:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1250c:	e0bffd17 	ldw	r2,-12(fp)
   12510:	10c00217 	ldw	r3,8(r2)
   12514:	e0bffe17 	ldw	r2,-8(fp)
   12518:	10bfffc4 	addi	r2,r2,-1
   1251c:	1885883a 	add	r2,r3,r2
   12520:	10800003 	ldbu	r2,0(r2)
   12524:	10803fcc 	andi	r2,r2,255
   12528:	1080201c 	xori	r2,r2,128
   1252c:	10bfe004 	addi	r2,r2,-128
   12530:	10800bd8 	cmpnei	r2,r2,47
   12534:	1000031e 	bne	r2,zero,12544 <alt_find_file+0x6c>
    {
      len -= 1;
   12538:	e0bffe17 	ldw	r2,-8(fp)
   1253c:	10bfffc4 	addi	r2,r2,-1
   12540:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   12544:	e0bffe17 	ldw	r2,-8(fp)
   12548:	e0ffff17 	ldw	r3,-4(fp)
   1254c:	1885883a 	add	r2,r3,r2
   12550:	10800003 	ldbu	r2,0(r2)
   12554:	10803fcc 	andi	r2,r2,255
   12558:	1080201c 	xori	r2,r2,128
   1255c:	10bfe004 	addi	r2,r2,-128
   12560:	10800be0 	cmpeqi	r2,r2,47
   12564:	1000081e 	bne	r2,zero,12588 <alt_find_file+0xb0>
   12568:	e0bffe17 	ldw	r2,-8(fp)
   1256c:	e0ffff17 	ldw	r3,-4(fp)
   12570:	1885883a 	add	r2,r3,r2
   12574:	10800003 	ldbu	r2,0(r2)
   12578:	10803fcc 	andi	r2,r2,255
   1257c:	1080201c 	xori	r2,r2,128
   12580:	10bfe004 	addi	r2,r2,-128
   12584:	10000a1e 	bne	r2,zero,125b0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   12588:	e0bffd17 	ldw	r2,-12(fp)
   1258c:	10800217 	ldw	r2,8(r2)
   12590:	e0fffe17 	ldw	r3,-8(fp)
   12594:	180d883a 	mov	r6,r3
   12598:	e17fff17 	ldw	r5,-4(fp)
   1259c:	1009883a 	mov	r4,r2
   125a0:	001278c0 	call	1278c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   125a4:	1000021e 	bne	r2,zero,125b0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   125a8:	e0bffd17 	ldw	r2,-12(fp)
   125ac:	00000706 	br	125cc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   125b0:	e0bffd17 	ldw	r2,-12(fp)
   125b4:	10800017 	ldw	r2,0(r2)
   125b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   125bc:	e0fffd17 	ldw	r3,-12(fp)
   125c0:	d0a00004 	addi	r2,gp,-32768
   125c4:	18bfcc1e 	bne	r3,r2,124f8 <_gp+0xffff353c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   125c8:	0005883a 	mov	r2,zero
}
   125cc:	e037883a 	mov	sp,fp
   125d0:	dfc00117 	ldw	ra,4(sp)
   125d4:	df000017 	ldw	fp,0(sp)
   125d8:	dec00204 	addi	sp,sp,8
   125dc:	f800283a 	ret

000125e0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   125e0:	defffa04 	addi	sp,sp,-24
   125e4:	dfc00515 	stw	ra,20(sp)
   125e8:	df000415 	stw	fp,16(sp)
   125ec:	dc000315 	stw	r16,12(sp)
   125f0:	df000404 	addi	fp,sp,16
   125f4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   125f8:	00bffa04 	movi	r2,-24
   125fc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12600:	e03ffc15 	stw	zero,-16(fp)
   12604:	00001d06 	br	1267c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   12608:	04000074 	movhi	r16,1
   1260c:	84198404 	addi	r16,r16,26128
   12610:	e0bffc17 	ldw	r2,-16(fp)
   12614:	01400304 	movi	r5,12
   12618:	1009883a 	mov	r4,r2
   1261c:	0014e040 	call	14e04 <__mulsi3>
   12620:	8085883a 	add	r2,r16,r2
   12624:	10800017 	ldw	r2,0(r2)
   12628:	1000111e 	bne	r2,zero,12670 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   1262c:	04000074 	movhi	r16,1
   12630:	84198404 	addi	r16,r16,26128
   12634:	e0bffc17 	ldw	r2,-16(fp)
   12638:	01400304 	movi	r5,12
   1263c:	1009883a 	mov	r4,r2
   12640:	0014e040 	call	14e04 <__mulsi3>
   12644:	8085883a 	add	r2,r16,r2
   12648:	e0fffe17 	ldw	r3,-8(fp)
   1264c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   12650:	d0e00417 	ldw	r3,-32752(gp)
   12654:	e0bffc17 	ldw	r2,-16(fp)
   12658:	1880020e 	bge	r3,r2,12664 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   1265c:	e0bffc17 	ldw	r2,-16(fp)
   12660:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
   12664:	e0bffc17 	ldw	r2,-16(fp)
   12668:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   1266c:	00000606 	br	12688 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12670:	e0bffc17 	ldw	r2,-16(fp)
   12674:	10800044 	addi	r2,r2,1
   12678:	e0bffc15 	stw	r2,-16(fp)
   1267c:	e0bffc17 	ldw	r2,-16(fp)
   12680:	10800810 	cmplti	r2,r2,32
   12684:	103fe01e 	bne	r2,zero,12608 <_gp+0xffff364c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   12688:	e0bffd17 	ldw	r2,-12(fp)
}
   1268c:	e6ffff04 	addi	sp,fp,-4
   12690:	dfc00217 	ldw	ra,8(sp)
   12694:	df000117 	ldw	fp,4(sp)
   12698:	dc000017 	ldw	r16,0(sp)
   1269c:	dec00304 	addi	sp,sp,12
   126a0:	f800283a 	ret

000126a4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   126a4:	defffe04 	addi	sp,sp,-8
   126a8:	df000115 	stw	fp,4(sp)
   126ac:	df000104 	addi	fp,sp,4
   126b0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   126b4:	e0bfff17 	ldw	r2,-4(fp)
   126b8:	10bffe84 	addi	r2,r2,-6
   126bc:	10c00428 	cmpgeui	r3,r2,16
   126c0:	18001a1e 	bne	r3,zero,1272c <alt_exception_cause_generated_bad_addr+0x88>
   126c4:	100690ba 	slli	r3,r2,2
   126c8:	00800074 	movhi	r2,1
   126cc:	1089b704 	addi	r2,r2,9948
   126d0:	1885883a 	add	r2,r3,r2
   126d4:	10800017 	ldw	r2,0(r2)
   126d8:	1000683a 	jmp	r2
   126dc:	0001271c 	xori	zero,zero,1180
   126e0:	0001271c 	xori	zero,zero,1180
   126e4:	0001272c 	andhi	zero,zero,1180
   126e8:	0001272c 	andhi	zero,zero,1180
   126ec:	0001272c 	andhi	zero,zero,1180
   126f0:	0001271c 	xori	zero,zero,1180
   126f4:	00012724 	muli	zero,zero,1180
   126f8:	0001272c 	andhi	zero,zero,1180
   126fc:	0001271c 	xori	zero,zero,1180
   12700:	0001271c 	xori	zero,zero,1180
   12704:	0001272c 	andhi	zero,zero,1180
   12708:	0001271c 	xori	zero,zero,1180
   1270c:	00012724 	muli	zero,zero,1180
   12710:	0001272c 	andhi	zero,zero,1180
   12714:	0001272c 	andhi	zero,zero,1180
   12718:	0001271c 	xori	zero,zero,1180
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1271c:	00800044 	movi	r2,1
   12720:	00000306 	br	12730 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   12724:	0005883a 	mov	r2,zero
   12728:	00000106 	br	12730 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1272c:	0005883a 	mov	r2,zero
  }
}
   12730:	e037883a 	mov	sp,fp
   12734:	df000017 	ldw	fp,0(sp)
   12738:	dec00104 	addi	sp,sp,4
   1273c:	f800283a 	ret

00012740 <atexit>:
   12740:	200b883a 	mov	r5,r4
   12744:	000f883a 	mov	r7,zero
   12748:	000d883a 	mov	r6,zero
   1274c:	0009883a 	mov	r4,zero
   12750:	0012dfc1 	jmpi	12dfc <__register_exitproc>

00012754 <exit>:
   12754:	defffe04 	addi	sp,sp,-8
   12758:	000b883a 	mov	r5,zero
   1275c:	dc000015 	stw	r16,0(sp)
   12760:	dfc00115 	stw	ra,4(sp)
   12764:	2021883a 	mov	r16,r4
   12768:	0012f140 	call	12f14 <__call_exitprocs>
   1276c:	00800074 	movhi	r2,1
   12770:	109bf804 	addi	r2,r2,28640
   12774:	11000017 	ldw	r4,0(r2)
   12778:	20800f17 	ldw	r2,60(r4)
   1277c:	10000126 	beq	r2,zero,12784 <exit+0x30>
   12780:	103ee83a 	callr	r2
   12784:	8009883a 	mov	r4,r16
   12788:	0014e2c0 	call	14e2c <_exit>

0001278c <memcmp>:
   1278c:	01c000c4 	movi	r7,3
   12790:	3980192e 	bgeu	r7,r6,127f8 <memcmp+0x6c>
   12794:	2144b03a 	or	r2,r4,r5
   12798:	11c4703a 	and	r2,r2,r7
   1279c:	10000f26 	beq	r2,zero,127dc <memcmp+0x50>
   127a0:	20800003 	ldbu	r2,0(r4)
   127a4:	28c00003 	ldbu	r3,0(r5)
   127a8:	10c0151e 	bne	r2,r3,12800 <memcmp+0x74>
   127ac:	31bfff84 	addi	r6,r6,-2
   127b0:	01ffffc4 	movi	r7,-1
   127b4:	00000406 	br	127c8 <memcmp+0x3c>
   127b8:	20800003 	ldbu	r2,0(r4)
   127bc:	28c00003 	ldbu	r3,0(r5)
   127c0:	31bfffc4 	addi	r6,r6,-1
   127c4:	10c00e1e 	bne	r2,r3,12800 <memcmp+0x74>
   127c8:	21000044 	addi	r4,r4,1
   127cc:	29400044 	addi	r5,r5,1
   127d0:	31fff91e 	bne	r6,r7,127b8 <_gp+0xffff37fc>
   127d4:	0005883a 	mov	r2,zero
   127d8:	f800283a 	ret
   127dc:	20c00017 	ldw	r3,0(r4)
   127e0:	28800017 	ldw	r2,0(r5)
   127e4:	18bfee1e 	bne	r3,r2,127a0 <_gp+0xffff37e4>
   127e8:	31bfff04 	addi	r6,r6,-4
   127ec:	21000104 	addi	r4,r4,4
   127f0:	29400104 	addi	r5,r5,4
   127f4:	39bff936 	bltu	r7,r6,127dc <_gp+0xffff3820>
   127f8:	303fe91e 	bne	r6,zero,127a0 <_gp+0xffff37e4>
   127fc:	003ff506 	br	127d4 <_gp+0xffff3818>
   12800:	10c5c83a 	sub	r2,r2,r3
   12804:	f800283a 	ret

00012808 <memcpy>:
   12808:	defffd04 	addi	sp,sp,-12
   1280c:	dfc00215 	stw	ra,8(sp)
   12810:	dc400115 	stw	r17,4(sp)
   12814:	dc000015 	stw	r16,0(sp)
   12818:	00c003c4 	movi	r3,15
   1281c:	2005883a 	mov	r2,r4
   12820:	1980452e 	bgeu	r3,r6,12938 <memcpy+0x130>
   12824:	2906b03a 	or	r3,r5,r4
   12828:	18c000cc 	andi	r3,r3,3
   1282c:	1800441e 	bne	r3,zero,12940 <memcpy+0x138>
   12830:	347ffc04 	addi	r17,r6,-16
   12834:	8822d13a 	srli	r17,r17,4
   12838:	28c00104 	addi	r3,r5,4
   1283c:	23400104 	addi	r13,r4,4
   12840:	8820913a 	slli	r16,r17,4
   12844:	2b000204 	addi	r12,r5,8
   12848:	22c00204 	addi	r11,r4,8
   1284c:	84000504 	addi	r16,r16,20
   12850:	2a800304 	addi	r10,r5,12
   12854:	22400304 	addi	r9,r4,12
   12858:	2c21883a 	add	r16,r5,r16
   1285c:	2811883a 	mov	r8,r5
   12860:	200f883a 	mov	r7,r4
   12864:	41000017 	ldw	r4,0(r8)
   12868:	1fc00017 	ldw	ra,0(r3)
   1286c:	63c00017 	ldw	r15,0(r12)
   12870:	39000015 	stw	r4,0(r7)
   12874:	53800017 	ldw	r14,0(r10)
   12878:	6fc00015 	stw	ra,0(r13)
   1287c:	5bc00015 	stw	r15,0(r11)
   12880:	4b800015 	stw	r14,0(r9)
   12884:	18c00404 	addi	r3,r3,16
   12888:	39c00404 	addi	r7,r7,16
   1288c:	42000404 	addi	r8,r8,16
   12890:	6b400404 	addi	r13,r13,16
   12894:	63000404 	addi	r12,r12,16
   12898:	5ac00404 	addi	r11,r11,16
   1289c:	52800404 	addi	r10,r10,16
   128a0:	4a400404 	addi	r9,r9,16
   128a4:	1c3fef1e 	bne	r3,r16,12864 <_gp+0xffff38a8>
   128a8:	89c00044 	addi	r7,r17,1
   128ac:	380e913a 	slli	r7,r7,4
   128b0:	310003cc 	andi	r4,r6,15
   128b4:	02c000c4 	movi	r11,3
   128b8:	11c7883a 	add	r3,r2,r7
   128bc:	29cb883a 	add	r5,r5,r7
   128c0:	5900212e 	bgeu	r11,r4,12948 <memcpy+0x140>
   128c4:	1813883a 	mov	r9,r3
   128c8:	2811883a 	mov	r8,r5
   128cc:	200f883a 	mov	r7,r4
   128d0:	42800017 	ldw	r10,0(r8)
   128d4:	4a400104 	addi	r9,r9,4
   128d8:	39ffff04 	addi	r7,r7,-4
   128dc:	4abfff15 	stw	r10,-4(r9)
   128e0:	42000104 	addi	r8,r8,4
   128e4:	59fffa36 	bltu	r11,r7,128d0 <_gp+0xffff3914>
   128e8:	213fff04 	addi	r4,r4,-4
   128ec:	2008d0ba 	srli	r4,r4,2
   128f0:	318000cc 	andi	r6,r6,3
   128f4:	21000044 	addi	r4,r4,1
   128f8:	2109883a 	add	r4,r4,r4
   128fc:	2109883a 	add	r4,r4,r4
   12900:	1907883a 	add	r3,r3,r4
   12904:	290b883a 	add	r5,r5,r4
   12908:	30000626 	beq	r6,zero,12924 <memcpy+0x11c>
   1290c:	198d883a 	add	r6,r3,r6
   12910:	29c00003 	ldbu	r7,0(r5)
   12914:	18c00044 	addi	r3,r3,1
   12918:	29400044 	addi	r5,r5,1
   1291c:	19ffffc5 	stb	r7,-1(r3)
   12920:	19bffb1e 	bne	r3,r6,12910 <_gp+0xffff3954>
   12924:	dfc00217 	ldw	ra,8(sp)
   12928:	dc400117 	ldw	r17,4(sp)
   1292c:	dc000017 	ldw	r16,0(sp)
   12930:	dec00304 	addi	sp,sp,12
   12934:	f800283a 	ret
   12938:	2007883a 	mov	r3,r4
   1293c:	003ff206 	br	12908 <_gp+0xffff394c>
   12940:	2007883a 	mov	r3,r4
   12944:	003ff106 	br	1290c <_gp+0xffff3950>
   12948:	200d883a 	mov	r6,r4
   1294c:	003fee06 	br	12908 <_gp+0xffff394c>

00012950 <_putc_r>:
   12950:	defffc04 	addi	sp,sp,-16
   12954:	dc000215 	stw	r16,8(sp)
   12958:	dfc00315 	stw	ra,12(sp)
   1295c:	2021883a 	mov	r16,r4
   12960:	20000226 	beq	r4,zero,1296c <_putc_r+0x1c>
   12964:	20800e17 	ldw	r2,56(r4)
   12968:	10001b26 	beq	r2,zero,129d8 <_putc_r+0x88>
   1296c:	30800217 	ldw	r2,8(r6)
   12970:	10bfffc4 	addi	r2,r2,-1
   12974:	30800215 	stw	r2,8(r6)
   12978:	10000a16 	blt	r2,zero,129a4 <_putc_r+0x54>
   1297c:	30800017 	ldw	r2,0(r6)
   12980:	11400005 	stb	r5,0(r2)
   12984:	30800017 	ldw	r2,0(r6)
   12988:	10c00044 	addi	r3,r2,1
   1298c:	30c00015 	stw	r3,0(r6)
   12990:	10800003 	ldbu	r2,0(r2)
   12994:	dfc00317 	ldw	ra,12(sp)
   12998:	dc000217 	ldw	r16,8(sp)
   1299c:	dec00404 	addi	sp,sp,16
   129a0:	f800283a 	ret
   129a4:	30c00617 	ldw	r3,24(r6)
   129a8:	10c00616 	blt	r2,r3,129c4 <_putc_r+0x74>
   129ac:	30800017 	ldw	r2,0(r6)
   129b0:	00c00284 	movi	r3,10
   129b4:	11400005 	stb	r5,0(r2)
   129b8:	30800017 	ldw	r2,0(r6)
   129bc:	11400003 	ldbu	r5,0(r2)
   129c0:	28fff11e 	bne	r5,r3,12988 <_gp+0xffff39cc>
   129c4:	8009883a 	mov	r4,r16
   129c8:	dfc00317 	ldw	ra,12(sp)
   129cc:	dc000217 	ldw	r16,8(sp)
   129d0:	dec00404 	addi	sp,sp,16
   129d4:	0012b501 	jmpi	12b50 <__swbuf_r>
   129d8:	d9400015 	stw	r5,0(sp)
   129dc:	d9800115 	stw	r6,4(sp)
   129e0:	001369c0 	call	1369c <__sinit>
   129e4:	d9800117 	ldw	r6,4(sp)
   129e8:	d9400017 	ldw	r5,0(sp)
   129ec:	003fdf06 	br	1296c <_gp+0xffff39b0>

000129f0 <putc>:
   129f0:	00800074 	movhi	r2,1
   129f4:	defffc04 	addi	sp,sp,-16
   129f8:	109bf904 	addi	r2,r2,28644
   129fc:	dc000115 	stw	r16,4(sp)
   12a00:	14000017 	ldw	r16,0(r2)
   12a04:	dc400215 	stw	r17,8(sp)
   12a08:	dfc00315 	stw	ra,12(sp)
   12a0c:	2023883a 	mov	r17,r4
   12a10:	80000226 	beq	r16,zero,12a1c <putc+0x2c>
   12a14:	80800e17 	ldw	r2,56(r16)
   12a18:	10001a26 	beq	r2,zero,12a84 <putc+0x94>
   12a1c:	28800217 	ldw	r2,8(r5)
   12a20:	10bfffc4 	addi	r2,r2,-1
   12a24:	28800215 	stw	r2,8(r5)
   12a28:	10000b16 	blt	r2,zero,12a58 <putc+0x68>
   12a2c:	28800017 	ldw	r2,0(r5)
   12a30:	14400005 	stb	r17,0(r2)
   12a34:	28800017 	ldw	r2,0(r5)
   12a38:	10c00044 	addi	r3,r2,1
   12a3c:	28c00015 	stw	r3,0(r5)
   12a40:	10800003 	ldbu	r2,0(r2)
   12a44:	dfc00317 	ldw	ra,12(sp)
   12a48:	dc400217 	ldw	r17,8(sp)
   12a4c:	dc000117 	ldw	r16,4(sp)
   12a50:	dec00404 	addi	sp,sp,16
   12a54:	f800283a 	ret
   12a58:	28c00617 	ldw	r3,24(r5)
   12a5c:	10c00e16 	blt	r2,r3,12a98 <putc+0xa8>
   12a60:	28800017 	ldw	r2,0(r5)
   12a64:	01000284 	movi	r4,10
   12a68:	14400005 	stb	r17,0(r2)
   12a6c:	28800017 	ldw	r2,0(r5)
   12a70:	10c00003 	ldbu	r3,0(r2)
   12a74:	193ff01e 	bne	r3,r4,12a38 <_gp+0xffff3a7c>
   12a78:	280d883a 	mov	r6,r5
   12a7c:	180b883a 	mov	r5,r3
   12a80:	00000706 	br	12aa0 <putc+0xb0>
   12a84:	8009883a 	mov	r4,r16
   12a88:	d9400015 	stw	r5,0(sp)
   12a8c:	001369c0 	call	1369c <__sinit>
   12a90:	d9400017 	ldw	r5,0(sp)
   12a94:	003fe106 	br	12a1c <_gp+0xffff3a60>
   12a98:	280d883a 	mov	r6,r5
   12a9c:	880b883a 	mov	r5,r17
   12aa0:	8009883a 	mov	r4,r16
   12aa4:	dfc00317 	ldw	ra,12(sp)
   12aa8:	dc400217 	ldw	r17,8(sp)
   12aac:	dc000117 	ldw	r16,4(sp)
   12ab0:	dec00404 	addi	sp,sp,16
   12ab4:	0012b501 	jmpi	12b50 <__swbuf_r>

00012ab8 <strlen>:
   12ab8:	208000cc 	andi	r2,r4,3
   12abc:	10002026 	beq	r2,zero,12b40 <strlen+0x88>
   12ac0:	20800007 	ldb	r2,0(r4)
   12ac4:	10002026 	beq	r2,zero,12b48 <strlen+0x90>
   12ac8:	2005883a 	mov	r2,r4
   12acc:	00000206 	br	12ad8 <strlen+0x20>
   12ad0:	10c00007 	ldb	r3,0(r2)
   12ad4:	18001826 	beq	r3,zero,12b38 <strlen+0x80>
   12ad8:	10800044 	addi	r2,r2,1
   12adc:	10c000cc 	andi	r3,r2,3
   12ae0:	183ffb1e 	bne	r3,zero,12ad0 <_gp+0xffff3b14>
   12ae4:	10c00017 	ldw	r3,0(r2)
   12ae8:	01ffbff4 	movhi	r7,65279
   12aec:	39ffbfc4 	addi	r7,r7,-257
   12af0:	00ca303a 	nor	r5,zero,r3
   12af4:	01a02074 	movhi	r6,32897
   12af8:	19c7883a 	add	r3,r3,r7
   12afc:	31a02004 	addi	r6,r6,-32640
   12b00:	1946703a 	and	r3,r3,r5
   12b04:	1986703a 	and	r3,r3,r6
   12b08:	1800091e 	bne	r3,zero,12b30 <strlen+0x78>
   12b0c:	10800104 	addi	r2,r2,4
   12b10:	10c00017 	ldw	r3,0(r2)
   12b14:	19cb883a 	add	r5,r3,r7
   12b18:	00c6303a 	nor	r3,zero,r3
   12b1c:	28c6703a 	and	r3,r5,r3
   12b20:	1986703a 	and	r3,r3,r6
   12b24:	183ff926 	beq	r3,zero,12b0c <_gp+0xffff3b50>
   12b28:	00000106 	br	12b30 <strlen+0x78>
   12b2c:	10800044 	addi	r2,r2,1
   12b30:	10c00007 	ldb	r3,0(r2)
   12b34:	183ffd1e 	bne	r3,zero,12b2c <_gp+0xffff3b70>
   12b38:	1105c83a 	sub	r2,r2,r4
   12b3c:	f800283a 	ret
   12b40:	2005883a 	mov	r2,r4
   12b44:	003fe706 	br	12ae4 <_gp+0xffff3b28>
   12b48:	0005883a 	mov	r2,zero
   12b4c:	f800283a 	ret

00012b50 <__swbuf_r>:
   12b50:	defffb04 	addi	sp,sp,-20
   12b54:	dcc00315 	stw	r19,12(sp)
   12b58:	dc800215 	stw	r18,8(sp)
   12b5c:	dc000015 	stw	r16,0(sp)
   12b60:	dfc00415 	stw	ra,16(sp)
   12b64:	dc400115 	stw	r17,4(sp)
   12b68:	2025883a 	mov	r18,r4
   12b6c:	2827883a 	mov	r19,r5
   12b70:	3021883a 	mov	r16,r6
   12b74:	20000226 	beq	r4,zero,12b80 <__swbuf_r+0x30>
   12b78:	20800e17 	ldw	r2,56(r4)
   12b7c:	10004226 	beq	r2,zero,12c88 <__swbuf_r+0x138>
   12b80:	80800617 	ldw	r2,24(r16)
   12b84:	8100030b 	ldhu	r4,12(r16)
   12b88:	80800215 	stw	r2,8(r16)
   12b8c:	2080020c 	andi	r2,r4,8
   12b90:	10003626 	beq	r2,zero,12c6c <__swbuf_r+0x11c>
   12b94:	80c00417 	ldw	r3,16(r16)
   12b98:	18003426 	beq	r3,zero,12c6c <__swbuf_r+0x11c>
   12b9c:	2088000c 	andi	r2,r4,8192
   12ba0:	9c403fcc 	andi	r17,r19,255
   12ba4:	10001a26 	beq	r2,zero,12c10 <__swbuf_r+0xc0>
   12ba8:	80800017 	ldw	r2,0(r16)
   12bac:	81000517 	ldw	r4,20(r16)
   12bb0:	10c7c83a 	sub	r3,r2,r3
   12bb4:	1900200e 	bge	r3,r4,12c38 <__swbuf_r+0xe8>
   12bb8:	18c00044 	addi	r3,r3,1
   12bbc:	81000217 	ldw	r4,8(r16)
   12bc0:	11400044 	addi	r5,r2,1
   12bc4:	81400015 	stw	r5,0(r16)
   12bc8:	213fffc4 	addi	r4,r4,-1
   12bcc:	81000215 	stw	r4,8(r16)
   12bd0:	14c00005 	stb	r19,0(r2)
   12bd4:	80800517 	ldw	r2,20(r16)
   12bd8:	10c01e26 	beq	r2,r3,12c54 <__swbuf_r+0x104>
   12bdc:	8080030b 	ldhu	r2,12(r16)
   12be0:	1080004c 	andi	r2,r2,1
   12be4:	10000226 	beq	r2,zero,12bf0 <__swbuf_r+0xa0>
   12be8:	00800284 	movi	r2,10
   12bec:	88801926 	beq	r17,r2,12c54 <__swbuf_r+0x104>
   12bf0:	8805883a 	mov	r2,r17
   12bf4:	dfc00417 	ldw	ra,16(sp)
   12bf8:	dcc00317 	ldw	r19,12(sp)
   12bfc:	dc800217 	ldw	r18,8(sp)
   12c00:	dc400117 	ldw	r17,4(sp)
   12c04:	dc000017 	ldw	r16,0(sp)
   12c08:	dec00504 	addi	sp,sp,20
   12c0c:	f800283a 	ret
   12c10:	81401917 	ldw	r5,100(r16)
   12c14:	00b7ffc4 	movi	r2,-8193
   12c18:	21080014 	ori	r4,r4,8192
   12c1c:	2884703a 	and	r2,r5,r2
   12c20:	80801915 	stw	r2,100(r16)
   12c24:	80800017 	ldw	r2,0(r16)
   12c28:	8100030d 	sth	r4,12(r16)
   12c2c:	81000517 	ldw	r4,20(r16)
   12c30:	10c7c83a 	sub	r3,r2,r3
   12c34:	193fe016 	blt	r3,r4,12bb8 <_gp+0xffff3bfc>
   12c38:	800b883a 	mov	r5,r16
   12c3c:	9009883a 	mov	r4,r18
   12c40:	00132b00 	call	132b0 <_fflush_r>
   12c44:	1000071e 	bne	r2,zero,12c64 <__swbuf_r+0x114>
   12c48:	80800017 	ldw	r2,0(r16)
   12c4c:	00c00044 	movi	r3,1
   12c50:	003fda06 	br	12bbc <_gp+0xffff3c00>
   12c54:	800b883a 	mov	r5,r16
   12c58:	9009883a 	mov	r4,r18
   12c5c:	00132b00 	call	132b0 <_fflush_r>
   12c60:	103fe326 	beq	r2,zero,12bf0 <_gp+0xffff3c34>
   12c64:	00bfffc4 	movi	r2,-1
   12c68:	003fe206 	br	12bf4 <_gp+0xffff3c38>
   12c6c:	800b883a 	mov	r5,r16
   12c70:	9009883a 	mov	r4,r18
   12c74:	0012ca80 	call	12ca8 <__swsetup_r>
   12c78:	103ffa1e 	bne	r2,zero,12c64 <_gp+0xffff3ca8>
   12c7c:	8100030b 	ldhu	r4,12(r16)
   12c80:	80c00417 	ldw	r3,16(r16)
   12c84:	003fc506 	br	12b9c <_gp+0xffff3be0>
   12c88:	001369c0 	call	1369c <__sinit>
   12c8c:	003fbc06 	br	12b80 <_gp+0xffff3bc4>

00012c90 <__swbuf>:
   12c90:	00800074 	movhi	r2,1
   12c94:	109bf904 	addi	r2,r2,28644
   12c98:	280d883a 	mov	r6,r5
   12c9c:	200b883a 	mov	r5,r4
   12ca0:	11000017 	ldw	r4,0(r2)
   12ca4:	0012b501 	jmpi	12b50 <__swbuf_r>

00012ca8 <__swsetup_r>:
   12ca8:	00800074 	movhi	r2,1
   12cac:	defffd04 	addi	sp,sp,-12
   12cb0:	109bf904 	addi	r2,r2,28644
   12cb4:	dc400115 	stw	r17,4(sp)
   12cb8:	2023883a 	mov	r17,r4
   12cbc:	11000017 	ldw	r4,0(r2)
   12cc0:	dc000015 	stw	r16,0(sp)
   12cc4:	dfc00215 	stw	ra,8(sp)
   12cc8:	2821883a 	mov	r16,r5
   12ccc:	20000226 	beq	r4,zero,12cd8 <__swsetup_r+0x30>
   12cd0:	20800e17 	ldw	r2,56(r4)
   12cd4:	10003126 	beq	r2,zero,12d9c <__swsetup_r+0xf4>
   12cd8:	8080030b 	ldhu	r2,12(r16)
   12cdc:	10c0020c 	andi	r3,r2,8
   12ce0:	1009883a 	mov	r4,r2
   12ce4:	18000f26 	beq	r3,zero,12d24 <__swsetup_r+0x7c>
   12ce8:	80c00417 	ldw	r3,16(r16)
   12cec:	18001526 	beq	r3,zero,12d44 <__swsetup_r+0x9c>
   12cf0:	1100004c 	andi	r4,r2,1
   12cf4:	20001c1e 	bne	r4,zero,12d68 <__swsetup_r+0xc0>
   12cf8:	1080008c 	andi	r2,r2,2
   12cfc:	1000291e 	bne	r2,zero,12da4 <__swsetup_r+0xfc>
   12d00:	80800517 	ldw	r2,20(r16)
   12d04:	80800215 	stw	r2,8(r16)
   12d08:	18001c26 	beq	r3,zero,12d7c <__swsetup_r+0xd4>
   12d0c:	0005883a 	mov	r2,zero
   12d10:	dfc00217 	ldw	ra,8(sp)
   12d14:	dc400117 	ldw	r17,4(sp)
   12d18:	dc000017 	ldw	r16,0(sp)
   12d1c:	dec00304 	addi	sp,sp,12
   12d20:	f800283a 	ret
   12d24:	2080040c 	andi	r2,r4,16
   12d28:	10002e26 	beq	r2,zero,12de4 <__swsetup_r+0x13c>
   12d2c:	2080010c 	andi	r2,r4,4
   12d30:	10001e1e 	bne	r2,zero,12dac <__swsetup_r+0x104>
   12d34:	80c00417 	ldw	r3,16(r16)
   12d38:	20800214 	ori	r2,r4,8
   12d3c:	8080030d 	sth	r2,12(r16)
   12d40:	183feb1e 	bne	r3,zero,12cf0 <_gp+0xffff3d34>
   12d44:	1100a00c 	andi	r4,r2,640
   12d48:	01408004 	movi	r5,512
   12d4c:	217fe826 	beq	r4,r5,12cf0 <_gp+0xffff3d34>
   12d50:	800b883a 	mov	r5,r16
   12d54:	8809883a 	mov	r4,r17
   12d58:	0013ca80 	call	13ca8 <__smakebuf_r>
   12d5c:	8080030b 	ldhu	r2,12(r16)
   12d60:	80c00417 	ldw	r3,16(r16)
   12d64:	003fe206 	br	12cf0 <_gp+0xffff3d34>
   12d68:	80800517 	ldw	r2,20(r16)
   12d6c:	80000215 	stw	zero,8(r16)
   12d70:	0085c83a 	sub	r2,zero,r2
   12d74:	80800615 	stw	r2,24(r16)
   12d78:	183fe41e 	bne	r3,zero,12d0c <_gp+0xffff3d50>
   12d7c:	80c0030b 	ldhu	r3,12(r16)
   12d80:	0005883a 	mov	r2,zero
   12d84:	1900200c 	andi	r4,r3,128
   12d88:	203fe126 	beq	r4,zero,12d10 <_gp+0xffff3d54>
   12d8c:	18c01014 	ori	r3,r3,64
   12d90:	80c0030d 	sth	r3,12(r16)
   12d94:	00bfffc4 	movi	r2,-1
   12d98:	003fdd06 	br	12d10 <_gp+0xffff3d54>
   12d9c:	001369c0 	call	1369c <__sinit>
   12da0:	003fcd06 	br	12cd8 <_gp+0xffff3d1c>
   12da4:	0005883a 	mov	r2,zero
   12da8:	003fd606 	br	12d04 <_gp+0xffff3d48>
   12dac:	81400c17 	ldw	r5,48(r16)
   12db0:	28000626 	beq	r5,zero,12dcc <__swsetup_r+0x124>
   12db4:	80801004 	addi	r2,r16,64
   12db8:	28800326 	beq	r5,r2,12dc8 <__swsetup_r+0x120>
   12dbc:	8809883a 	mov	r4,r17
   12dc0:	00138100 	call	13810 <_free_r>
   12dc4:	8100030b 	ldhu	r4,12(r16)
   12dc8:	80000c15 	stw	zero,48(r16)
   12dcc:	80c00417 	ldw	r3,16(r16)
   12dd0:	00bff6c4 	movi	r2,-37
   12dd4:	1108703a 	and	r4,r2,r4
   12dd8:	80000115 	stw	zero,4(r16)
   12ddc:	80c00015 	stw	r3,0(r16)
   12de0:	003fd506 	br	12d38 <_gp+0xffff3d7c>
   12de4:	00800244 	movi	r2,9
   12de8:	88800015 	stw	r2,0(r17)
   12dec:	20801014 	ori	r2,r4,64
   12df0:	8080030d 	sth	r2,12(r16)
   12df4:	00bfffc4 	movi	r2,-1
   12df8:	003fc506 	br	12d10 <_gp+0xffff3d54>

00012dfc <__register_exitproc>:
   12dfc:	defffa04 	addi	sp,sp,-24
   12e00:	dc000315 	stw	r16,12(sp)
   12e04:	04000074 	movhi	r16,1
   12e08:	841bf804 	addi	r16,r16,28640
   12e0c:	80c00017 	ldw	r3,0(r16)
   12e10:	dc400415 	stw	r17,16(sp)
   12e14:	dfc00515 	stw	ra,20(sp)
   12e18:	18805217 	ldw	r2,328(r3)
   12e1c:	2023883a 	mov	r17,r4
   12e20:	10003726 	beq	r2,zero,12f00 <__register_exitproc+0x104>
   12e24:	10c00117 	ldw	r3,4(r2)
   12e28:	010007c4 	movi	r4,31
   12e2c:	20c00e16 	blt	r4,r3,12e68 <__register_exitproc+0x6c>
   12e30:	1a000044 	addi	r8,r3,1
   12e34:	8800221e 	bne	r17,zero,12ec0 <__register_exitproc+0xc4>
   12e38:	18c00084 	addi	r3,r3,2
   12e3c:	18c7883a 	add	r3,r3,r3
   12e40:	18c7883a 	add	r3,r3,r3
   12e44:	12000115 	stw	r8,4(r2)
   12e48:	10c7883a 	add	r3,r2,r3
   12e4c:	19400015 	stw	r5,0(r3)
   12e50:	0005883a 	mov	r2,zero
   12e54:	dfc00517 	ldw	ra,20(sp)
   12e58:	dc400417 	ldw	r17,16(sp)
   12e5c:	dc000317 	ldw	r16,12(sp)
   12e60:	dec00604 	addi	sp,sp,24
   12e64:	f800283a 	ret
   12e68:	00800034 	movhi	r2,0
   12e6c:	10800004 	addi	r2,r2,0
   12e70:	10002626 	beq	r2,zero,12f0c <__register_exitproc+0x110>
   12e74:	01006404 	movi	r4,400
   12e78:	d9400015 	stw	r5,0(sp)
   12e7c:	d9800115 	stw	r6,4(sp)
   12e80:	d9c00215 	stw	r7,8(sp)
   12e84:	00000000 	call	0 <__alt_mem_memoria-0x10000>
   12e88:	d9400017 	ldw	r5,0(sp)
   12e8c:	d9800117 	ldw	r6,4(sp)
   12e90:	d9c00217 	ldw	r7,8(sp)
   12e94:	10001d26 	beq	r2,zero,12f0c <__register_exitproc+0x110>
   12e98:	81000017 	ldw	r4,0(r16)
   12e9c:	10000115 	stw	zero,4(r2)
   12ea0:	02000044 	movi	r8,1
   12ea4:	22405217 	ldw	r9,328(r4)
   12ea8:	0007883a 	mov	r3,zero
   12eac:	12400015 	stw	r9,0(r2)
   12eb0:	20805215 	stw	r2,328(r4)
   12eb4:	10006215 	stw	zero,392(r2)
   12eb8:	10006315 	stw	zero,396(r2)
   12ebc:	883fde26 	beq	r17,zero,12e38 <_gp+0xffff3e7c>
   12ec0:	18c9883a 	add	r4,r3,r3
   12ec4:	2109883a 	add	r4,r4,r4
   12ec8:	1109883a 	add	r4,r2,r4
   12ecc:	21802215 	stw	r6,136(r4)
   12ed0:	01800044 	movi	r6,1
   12ed4:	12406217 	ldw	r9,392(r2)
   12ed8:	30cc983a 	sll	r6,r6,r3
   12edc:	4992b03a 	or	r9,r9,r6
   12ee0:	12406215 	stw	r9,392(r2)
   12ee4:	21c04215 	stw	r7,264(r4)
   12ee8:	01000084 	movi	r4,2
   12eec:	893fd21e 	bne	r17,r4,12e38 <_gp+0xffff3e7c>
   12ef0:	11006317 	ldw	r4,396(r2)
   12ef4:	218cb03a 	or	r6,r4,r6
   12ef8:	11806315 	stw	r6,396(r2)
   12efc:	003fce06 	br	12e38 <_gp+0xffff3e7c>
   12f00:	18805304 	addi	r2,r3,332
   12f04:	18805215 	stw	r2,328(r3)
   12f08:	003fc606 	br	12e24 <_gp+0xffff3e68>
   12f0c:	00bfffc4 	movi	r2,-1
   12f10:	003fd006 	br	12e54 <_gp+0xffff3e98>

00012f14 <__call_exitprocs>:
   12f14:	defff504 	addi	sp,sp,-44
   12f18:	df000915 	stw	fp,36(sp)
   12f1c:	dd400615 	stw	r21,24(sp)
   12f20:	dc800315 	stw	r18,12(sp)
   12f24:	dfc00a15 	stw	ra,40(sp)
   12f28:	ddc00815 	stw	r23,32(sp)
   12f2c:	dd800715 	stw	r22,28(sp)
   12f30:	dd000515 	stw	r20,20(sp)
   12f34:	dcc00415 	stw	r19,16(sp)
   12f38:	dc400215 	stw	r17,8(sp)
   12f3c:	dc000115 	stw	r16,4(sp)
   12f40:	d9000015 	stw	r4,0(sp)
   12f44:	2839883a 	mov	fp,r5
   12f48:	04800044 	movi	r18,1
   12f4c:	057fffc4 	movi	r21,-1
   12f50:	00800074 	movhi	r2,1
   12f54:	109bf804 	addi	r2,r2,28640
   12f58:	12000017 	ldw	r8,0(r2)
   12f5c:	45005217 	ldw	r20,328(r8)
   12f60:	44c05204 	addi	r19,r8,328
   12f64:	a0001c26 	beq	r20,zero,12fd8 <__call_exitprocs+0xc4>
   12f68:	a0800117 	ldw	r2,4(r20)
   12f6c:	15ffffc4 	addi	r23,r2,-1
   12f70:	b8000d16 	blt	r23,zero,12fa8 <__call_exitprocs+0x94>
   12f74:	14000044 	addi	r16,r2,1
   12f78:	8421883a 	add	r16,r16,r16
   12f7c:	8421883a 	add	r16,r16,r16
   12f80:	84402004 	addi	r17,r16,128
   12f84:	a463883a 	add	r17,r20,r17
   12f88:	a421883a 	add	r16,r20,r16
   12f8c:	e0001e26 	beq	fp,zero,13008 <__call_exitprocs+0xf4>
   12f90:	80804017 	ldw	r2,256(r16)
   12f94:	e0801c26 	beq	fp,r2,13008 <__call_exitprocs+0xf4>
   12f98:	bdffffc4 	addi	r23,r23,-1
   12f9c:	843fff04 	addi	r16,r16,-4
   12fa0:	8c7fff04 	addi	r17,r17,-4
   12fa4:	bd7ff91e 	bne	r23,r21,12f8c <_gp+0xffff3fd0>
   12fa8:	00800034 	movhi	r2,0
   12fac:	10800004 	addi	r2,r2,0
   12fb0:	10000926 	beq	r2,zero,12fd8 <__call_exitprocs+0xc4>
   12fb4:	a0800117 	ldw	r2,4(r20)
   12fb8:	1000301e 	bne	r2,zero,1307c <__call_exitprocs+0x168>
   12fbc:	a0800017 	ldw	r2,0(r20)
   12fc0:	10003226 	beq	r2,zero,1308c <__call_exitprocs+0x178>
   12fc4:	a009883a 	mov	r4,r20
   12fc8:	98800015 	stw	r2,0(r19)
   12fcc:	00000000 	call	0 <__alt_mem_memoria-0x10000>
   12fd0:	9d000017 	ldw	r20,0(r19)
   12fd4:	a03fe41e 	bne	r20,zero,12f68 <_gp+0xffff3fac>
   12fd8:	dfc00a17 	ldw	ra,40(sp)
   12fdc:	df000917 	ldw	fp,36(sp)
   12fe0:	ddc00817 	ldw	r23,32(sp)
   12fe4:	dd800717 	ldw	r22,28(sp)
   12fe8:	dd400617 	ldw	r21,24(sp)
   12fec:	dd000517 	ldw	r20,20(sp)
   12ff0:	dcc00417 	ldw	r19,16(sp)
   12ff4:	dc800317 	ldw	r18,12(sp)
   12ff8:	dc400217 	ldw	r17,8(sp)
   12ffc:	dc000117 	ldw	r16,4(sp)
   13000:	dec00b04 	addi	sp,sp,44
   13004:	f800283a 	ret
   13008:	a0800117 	ldw	r2,4(r20)
   1300c:	80c00017 	ldw	r3,0(r16)
   13010:	10bfffc4 	addi	r2,r2,-1
   13014:	15c01426 	beq	r2,r23,13068 <__call_exitprocs+0x154>
   13018:	80000015 	stw	zero,0(r16)
   1301c:	183fde26 	beq	r3,zero,12f98 <_gp+0xffff3fdc>
   13020:	95c8983a 	sll	r4,r18,r23
   13024:	a0806217 	ldw	r2,392(r20)
   13028:	a5800117 	ldw	r22,4(r20)
   1302c:	2084703a 	and	r2,r4,r2
   13030:	10000b26 	beq	r2,zero,13060 <__call_exitprocs+0x14c>
   13034:	a0806317 	ldw	r2,396(r20)
   13038:	2088703a 	and	r4,r4,r2
   1303c:	20000c1e 	bne	r4,zero,13070 <__call_exitprocs+0x15c>
   13040:	89400017 	ldw	r5,0(r17)
   13044:	d9000017 	ldw	r4,0(sp)
   13048:	183ee83a 	callr	r3
   1304c:	a0800117 	ldw	r2,4(r20)
   13050:	15bfbf1e 	bne	r2,r22,12f50 <_gp+0xffff3f94>
   13054:	98800017 	ldw	r2,0(r19)
   13058:	153fcf26 	beq	r2,r20,12f98 <_gp+0xffff3fdc>
   1305c:	003fbc06 	br	12f50 <_gp+0xffff3f94>
   13060:	183ee83a 	callr	r3
   13064:	003ff906 	br	1304c <_gp+0xffff4090>
   13068:	a5c00115 	stw	r23,4(r20)
   1306c:	003feb06 	br	1301c <_gp+0xffff4060>
   13070:	89000017 	ldw	r4,0(r17)
   13074:	183ee83a 	callr	r3
   13078:	003ff406 	br	1304c <_gp+0xffff4090>
   1307c:	a0800017 	ldw	r2,0(r20)
   13080:	a027883a 	mov	r19,r20
   13084:	1029883a 	mov	r20,r2
   13088:	003fb606 	br	12f64 <_gp+0xffff3fa8>
   1308c:	0005883a 	mov	r2,zero
   13090:	003ffb06 	br	13080 <_gp+0xffff40c4>

00013094 <__sflush_r>:
   13094:	2880030b 	ldhu	r2,12(r5)
   13098:	defffb04 	addi	sp,sp,-20
   1309c:	dcc00315 	stw	r19,12(sp)
   130a0:	dc400115 	stw	r17,4(sp)
   130a4:	dfc00415 	stw	ra,16(sp)
   130a8:	dc800215 	stw	r18,8(sp)
   130ac:	dc000015 	stw	r16,0(sp)
   130b0:	10c0020c 	andi	r3,r2,8
   130b4:	2823883a 	mov	r17,r5
   130b8:	2027883a 	mov	r19,r4
   130bc:	1800311e 	bne	r3,zero,13184 <__sflush_r+0xf0>
   130c0:	28c00117 	ldw	r3,4(r5)
   130c4:	10820014 	ori	r2,r2,2048
   130c8:	2880030d 	sth	r2,12(r5)
   130cc:	00c04b0e 	bge	zero,r3,131fc <__sflush_r+0x168>
   130d0:	8a000a17 	ldw	r8,40(r17)
   130d4:	40002326 	beq	r8,zero,13164 <__sflush_r+0xd0>
   130d8:	9c000017 	ldw	r16,0(r19)
   130dc:	10c4000c 	andi	r3,r2,4096
   130e0:	98000015 	stw	zero,0(r19)
   130e4:	18004826 	beq	r3,zero,13208 <__sflush_r+0x174>
   130e8:	89801417 	ldw	r6,80(r17)
   130ec:	10c0010c 	andi	r3,r2,4
   130f0:	18000626 	beq	r3,zero,1310c <__sflush_r+0x78>
   130f4:	88c00117 	ldw	r3,4(r17)
   130f8:	88800c17 	ldw	r2,48(r17)
   130fc:	30cdc83a 	sub	r6,r6,r3
   13100:	10000226 	beq	r2,zero,1310c <__sflush_r+0x78>
   13104:	88800f17 	ldw	r2,60(r17)
   13108:	308dc83a 	sub	r6,r6,r2
   1310c:	89400717 	ldw	r5,28(r17)
   13110:	000f883a 	mov	r7,zero
   13114:	9809883a 	mov	r4,r19
   13118:	403ee83a 	callr	r8
   1311c:	00ffffc4 	movi	r3,-1
   13120:	10c04426 	beq	r2,r3,13234 <__sflush_r+0x1a0>
   13124:	88c0030b 	ldhu	r3,12(r17)
   13128:	89000417 	ldw	r4,16(r17)
   1312c:	88000115 	stw	zero,4(r17)
   13130:	197dffcc 	andi	r5,r3,63487
   13134:	8940030d 	sth	r5,12(r17)
   13138:	89000015 	stw	r4,0(r17)
   1313c:	18c4000c 	andi	r3,r3,4096
   13140:	18002c1e 	bne	r3,zero,131f4 <__sflush_r+0x160>
   13144:	89400c17 	ldw	r5,48(r17)
   13148:	9c000015 	stw	r16,0(r19)
   1314c:	28000526 	beq	r5,zero,13164 <__sflush_r+0xd0>
   13150:	88801004 	addi	r2,r17,64
   13154:	28800226 	beq	r5,r2,13160 <__sflush_r+0xcc>
   13158:	9809883a 	mov	r4,r19
   1315c:	00138100 	call	13810 <_free_r>
   13160:	88000c15 	stw	zero,48(r17)
   13164:	0005883a 	mov	r2,zero
   13168:	dfc00417 	ldw	ra,16(sp)
   1316c:	dcc00317 	ldw	r19,12(sp)
   13170:	dc800217 	ldw	r18,8(sp)
   13174:	dc400117 	ldw	r17,4(sp)
   13178:	dc000017 	ldw	r16,0(sp)
   1317c:	dec00504 	addi	sp,sp,20
   13180:	f800283a 	ret
   13184:	2c800417 	ldw	r18,16(r5)
   13188:	903ff626 	beq	r18,zero,13164 <_gp+0xffff41a8>
   1318c:	2c000017 	ldw	r16,0(r5)
   13190:	108000cc 	andi	r2,r2,3
   13194:	2c800015 	stw	r18,0(r5)
   13198:	84a1c83a 	sub	r16,r16,r18
   1319c:	1000131e 	bne	r2,zero,131ec <__sflush_r+0x158>
   131a0:	28800517 	ldw	r2,20(r5)
   131a4:	88800215 	stw	r2,8(r17)
   131a8:	04000316 	blt	zero,r16,131b8 <__sflush_r+0x124>
   131ac:	003fed06 	br	13164 <_gp+0xffff41a8>
   131b0:	90a5883a 	add	r18,r18,r2
   131b4:	043feb0e 	bge	zero,r16,13164 <_gp+0xffff41a8>
   131b8:	88800917 	ldw	r2,36(r17)
   131bc:	89400717 	ldw	r5,28(r17)
   131c0:	800f883a 	mov	r7,r16
   131c4:	900d883a 	mov	r6,r18
   131c8:	9809883a 	mov	r4,r19
   131cc:	103ee83a 	callr	r2
   131d0:	80a1c83a 	sub	r16,r16,r2
   131d4:	00bff616 	blt	zero,r2,131b0 <_gp+0xffff41f4>
   131d8:	88c0030b 	ldhu	r3,12(r17)
   131dc:	00bfffc4 	movi	r2,-1
   131e0:	18c01014 	ori	r3,r3,64
   131e4:	88c0030d 	sth	r3,12(r17)
   131e8:	003fdf06 	br	13168 <_gp+0xffff41ac>
   131ec:	0005883a 	mov	r2,zero
   131f0:	003fec06 	br	131a4 <_gp+0xffff41e8>
   131f4:	88801415 	stw	r2,80(r17)
   131f8:	003fd206 	br	13144 <_gp+0xffff4188>
   131fc:	28c00f17 	ldw	r3,60(r5)
   13200:	00ffb316 	blt	zero,r3,130d0 <_gp+0xffff4114>
   13204:	003fd706 	br	13164 <_gp+0xffff41a8>
   13208:	89400717 	ldw	r5,28(r17)
   1320c:	000d883a 	mov	r6,zero
   13210:	01c00044 	movi	r7,1
   13214:	9809883a 	mov	r4,r19
   13218:	403ee83a 	callr	r8
   1321c:	100d883a 	mov	r6,r2
   13220:	00bfffc4 	movi	r2,-1
   13224:	30801426 	beq	r6,r2,13278 <__sflush_r+0x1e4>
   13228:	8880030b 	ldhu	r2,12(r17)
   1322c:	8a000a17 	ldw	r8,40(r17)
   13230:	003fae06 	br	130ec <_gp+0xffff4130>
   13234:	98c00017 	ldw	r3,0(r19)
   13238:	183fba26 	beq	r3,zero,13124 <_gp+0xffff4168>
   1323c:	01000744 	movi	r4,29
   13240:	19000626 	beq	r3,r4,1325c <__sflush_r+0x1c8>
   13244:	01000584 	movi	r4,22
   13248:	19000426 	beq	r3,r4,1325c <__sflush_r+0x1c8>
   1324c:	88c0030b 	ldhu	r3,12(r17)
   13250:	18c01014 	ori	r3,r3,64
   13254:	88c0030d 	sth	r3,12(r17)
   13258:	003fc306 	br	13168 <_gp+0xffff41ac>
   1325c:	8880030b 	ldhu	r2,12(r17)
   13260:	88c00417 	ldw	r3,16(r17)
   13264:	88000115 	stw	zero,4(r17)
   13268:	10bdffcc 	andi	r2,r2,63487
   1326c:	8880030d 	sth	r2,12(r17)
   13270:	88c00015 	stw	r3,0(r17)
   13274:	003fb306 	br	13144 <_gp+0xffff4188>
   13278:	98800017 	ldw	r2,0(r19)
   1327c:	103fea26 	beq	r2,zero,13228 <_gp+0xffff426c>
   13280:	00c00744 	movi	r3,29
   13284:	10c00226 	beq	r2,r3,13290 <__sflush_r+0x1fc>
   13288:	00c00584 	movi	r3,22
   1328c:	10c0031e 	bne	r2,r3,1329c <__sflush_r+0x208>
   13290:	9c000015 	stw	r16,0(r19)
   13294:	0005883a 	mov	r2,zero
   13298:	003fb306 	br	13168 <_gp+0xffff41ac>
   1329c:	88c0030b 	ldhu	r3,12(r17)
   132a0:	3005883a 	mov	r2,r6
   132a4:	18c01014 	ori	r3,r3,64
   132a8:	88c0030d 	sth	r3,12(r17)
   132ac:	003fae06 	br	13168 <_gp+0xffff41ac>

000132b0 <_fflush_r>:
   132b0:	defffd04 	addi	sp,sp,-12
   132b4:	dc000115 	stw	r16,4(sp)
   132b8:	dfc00215 	stw	ra,8(sp)
   132bc:	2021883a 	mov	r16,r4
   132c0:	20000226 	beq	r4,zero,132cc <_fflush_r+0x1c>
   132c4:	20800e17 	ldw	r2,56(r4)
   132c8:	10000c26 	beq	r2,zero,132fc <_fflush_r+0x4c>
   132cc:	2880030f 	ldh	r2,12(r5)
   132d0:	1000051e 	bne	r2,zero,132e8 <_fflush_r+0x38>
   132d4:	0005883a 	mov	r2,zero
   132d8:	dfc00217 	ldw	ra,8(sp)
   132dc:	dc000117 	ldw	r16,4(sp)
   132e0:	dec00304 	addi	sp,sp,12
   132e4:	f800283a 	ret
   132e8:	8009883a 	mov	r4,r16
   132ec:	dfc00217 	ldw	ra,8(sp)
   132f0:	dc000117 	ldw	r16,4(sp)
   132f4:	dec00304 	addi	sp,sp,12
   132f8:	00130941 	jmpi	13094 <__sflush_r>
   132fc:	d9400015 	stw	r5,0(sp)
   13300:	001369c0 	call	1369c <__sinit>
   13304:	d9400017 	ldw	r5,0(sp)
   13308:	003ff006 	br	132cc <_gp+0xffff4310>

0001330c <fflush>:
   1330c:	20000526 	beq	r4,zero,13324 <fflush+0x18>
   13310:	00800074 	movhi	r2,1
   13314:	109bf904 	addi	r2,r2,28644
   13318:	200b883a 	mov	r5,r4
   1331c:	11000017 	ldw	r4,0(r2)
   13320:	00132b01 	jmpi	132b0 <_fflush_r>
   13324:	00800074 	movhi	r2,1
   13328:	109bf804 	addi	r2,r2,28640
   1332c:	11000017 	ldw	r4,0(r2)
   13330:	01400074 	movhi	r5,1
   13334:	294cac04 	addi	r5,r5,12976
   13338:	0013be41 	jmpi	13be4 <_fwalk_reent>

0001333c <__fp_unlock>:
   1333c:	0005883a 	mov	r2,zero
   13340:	f800283a 	ret

00013344 <_cleanup_r>:
   13344:	01400074 	movhi	r5,1
   13348:	29527704 	addi	r5,r5,18908
   1334c:	0013be41 	jmpi	13be4 <_fwalk_reent>

00013350 <__sinit.part.1>:
   13350:	defff704 	addi	sp,sp,-36
   13354:	00c00074 	movhi	r3,1
   13358:	dfc00815 	stw	ra,32(sp)
   1335c:	ddc00715 	stw	r23,28(sp)
   13360:	dd800615 	stw	r22,24(sp)
   13364:	dd400515 	stw	r21,20(sp)
   13368:	dd000415 	stw	r20,16(sp)
   1336c:	dcc00315 	stw	r19,12(sp)
   13370:	dc800215 	stw	r18,8(sp)
   13374:	dc400115 	stw	r17,4(sp)
   13378:	dc000015 	stw	r16,0(sp)
   1337c:	18ccd104 	addi	r3,r3,13124
   13380:	24000117 	ldw	r16,4(r4)
   13384:	20c00f15 	stw	r3,60(r4)
   13388:	2080bb04 	addi	r2,r4,748
   1338c:	00c000c4 	movi	r3,3
   13390:	20c0b915 	stw	r3,740(r4)
   13394:	2080ba15 	stw	r2,744(r4)
   13398:	2000b815 	stw	zero,736(r4)
   1339c:	05c00204 	movi	r23,8
   133a0:	00800104 	movi	r2,4
   133a4:	2025883a 	mov	r18,r4
   133a8:	b80d883a 	mov	r6,r23
   133ac:	81001704 	addi	r4,r16,92
   133b0:	000b883a 	mov	r5,zero
   133b4:	80000015 	stw	zero,0(r16)
   133b8:	80000115 	stw	zero,4(r16)
   133bc:	80000215 	stw	zero,8(r16)
   133c0:	8080030d 	sth	r2,12(r16)
   133c4:	80001915 	stw	zero,100(r16)
   133c8:	8000038d 	sth	zero,14(r16)
   133cc:	80000415 	stw	zero,16(r16)
   133d0:	80000515 	stw	zero,20(r16)
   133d4:	80000615 	stw	zero,24(r16)
   133d8:	00146700 	call	14670 <memset>
   133dc:	05800074 	movhi	r22,1
   133e0:	94400217 	ldw	r17,8(r18)
   133e4:	05400074 	movhi	r21,1
   133e8:	05000074 	movhi	r20,1
   133ec:	04c00074 	movhi	r19,1
   133f0:	b591fb04 	addi	r22,r22,18412
   133f4:	ad521204 	addi	r21,r21,18504
   133f8:	a5123104 	addi	r20,r20,18628
   133fc:	9cd24804 	addi	r19,r19,18720
   13400:	85800815 	stw	r22,32(r16)
   13404:	85400915 	stw	r21,36(r16)
   13408:	85000a15 	stw	r20,40(r16)
   1340c:	84c00b15 	stw	r19,44(r16)
   13410:	84000715 	stw	r16,28(r16)
   13414:	00800284 	movi	r2,10
   13418:	8880030d 	sth	r2,12(r17)
   1341c:	00800044 	movi	r2,1
   13420:	b80d883a 	mov	r6,r23
   13424:	89001704 	addi	r4,r17,92
   13428:	000b883a 	mov	r5,zero
   1342c:	88000015 	stw	zero,0(r17)
   13430:	88000115 	stw	zero,4(r17)
   13434:	88000215 	stw	zero,8(r17)
   13438:	88001915 	stw	zero,100(r17)
   1343c:	8880038d 	sth	r2,14(r17)
   13440:	88000415 	stw	zero,16(r17)
   13444:	88000515 	stw	zero,20(r17)
   13448:	88000615 	stw	zero,24(r17)
   1344c:	00146700 	call	14670 <memset>
   13450:	94000317 	ldw	r16,12(r18)
   13454:	00800484 	movi	r2,18
   13458:	8c400715 	stw	r17,28(r17)
   1345c:	8d800815 	stw	r22,32(r17)
   13460:	8d400915 	stw	r21,36(r17)
   13464:	8d000a15 	stw	r20,40(r17)
   13468:	8cc00b15 	stw	r19,44(r17)
   1346c:	8080030d 	sth	r2,12(r16)
   13470:	00800084 	movi	r2,2
   13474:	80000015 	stw	zero,0(r16)
   13478:	80000115 	stw	zero,4(r16)
   1347c:	80000215 	stw	zero,8(r16)
   13480:	80001915 	stw	zero,100(r16)
   13484:	8080038d 	sth	r2,14(r16)
   13488:	80000415 	stw	zero,16(r16)
   1348c:	80000515 	stw	zero,20(r16)
   13490:	80000615 	stw	zero,24(r16)
   13494:	b80d883a 	mov	r6,r23
   13498:	000b883a 	mov	r5,zero
   1349c:	81001704 	addi	r4,r16,92
   134a0:	00146700 	call	14670 <memset>
   134a4:	00800044 	movi	r2,1
   134a8:	84000715 	stw	r16,28(r16)
   134ac:	85800815 	stw	r22,32(r16)
   134b0:	85400915 	stw	r21,36(r16)
   134b4:	85000a15 	stw	r20,40(r16)
   134b8:	84c00b15 	stw	r19,44(r16)
   134bc:	90800e15 	stw	r2,56(r18)
   134c0:	dfc00817 	ldw	ra,32(sp)
   134c4:	ddc00717 	ldw	r23,28(sp)
   134c8:	dd800617 	ldw	r22,24(sp)
   134cc:	dd400517 	ldw	r21,20(sp)
   134d0:	dd000417 	ldw	r20,16(sp)
   134d4:	dcc00317 	ldw	r19,12(sp)
   134d8:	dc800217 	ldw	r18,8(sp)
   134dc:	dc400117 	ldw	r17,4(sp)
   134e0:	dc000017 	ldw	r16,0(sp)
   134e4:	dec00904 	addi	sp,sp,36
   134e8:	f800283a 	ret

000134ec <__fp_lock>:
   134ec:	0005883a 	mov	r2,zero
   134f0:	f800283a 	ret

000134f4 <__sfmoreglue>:
   134f4:	defffc04 	addi	sp,sp,-16
   134f8:	dc800215 	stw	r18,8(sp)
   134fc:	2825883a 	mov	r18,r5
   13500:	dc000015 	stw	r16,0(sp)
   13504:	01401a04 	movi	r5,104
   13508:	2021883a 	mov	r16,r4
   1350c:	913fffc4 	addi	r4,r18,-1
   13510:	dfc00315 	stw	ra,12(sp)
   13514:	dc400115 	stw	r17,4(sp)
   13518:	0014e040 	call	14e04 <__mulsi3>
   1351c:	8009883a 	mov	r4,r16
   13520:	11401d04 	addi	r5,r2,116
   13524:	1023883a 	mov	r17,r2
   13528:	0013e640 	call	13e64 <_malloc_r>
   1352c:	1021883a 	mov	r16,r2
   13530:	10000726 	beq	r2,zero,13550 <__sfmoreglue+0x5c>
   13534:	11000304 	addi	r4,r2,12
   13538:	10000015 	stw	zero,0(r2)
   1353c:	14800115 	stw	r18,4(r2)
   13540:	11000215 	stw	r4,8(r2)
   13544:	89801a04 	addi	r6,r17,104
   13548:	000b883a 	mov	r5,zero
   1354c:	00146700 	call	14670 <memset>
   13550:	8005883a 	mov	r2,r16
   13554:	dfc00317 	ldw	ra,12(sp)
   13558:	dc800217 	ldw	r18,8(sp)
   1355c:	dc400117 	ldw	r17,4(sp)
   13560:	dc000017 	ldw	r16,0(sp)
   13564:	dec00404 	addi	sp,sp,16
   13568:	f800283a 	ret

0001356c <__sfp>:
   1356c:	defffb04 	addi	sp,sp,-20
   13570:	dc000015 	stw	r16,0(sp)
   13574:	04000074 	movhi	r16,1
   13578:	841bf804 	addi	r16,r16,28640
   1357c:	dcc00315 	stw	r19,12(sp)
   13580:	2027883a 	mov	r19,r4
   13584:	81000017 	ldw	r4,0(r16)
   13588:	dfc00415 	stw	ra,16(sp)
   1358c:	dc800215 	stw	r18,8(sp)
   13590:	20800e17 	ldw	r2,56(r4)
   13594:	dc400115 	stw	r17,4(sp)
   13598:	1000021e 	bne	r2,zero,135a4 <__sfp+0x38>
   1359c:	00133500 	call	13350 <__sinit.part.1>
   135a0:	81000017 	ldw	r4,0(r16)
   135a4:	2480b804 	addi	r18,r4,736
   135a8:	047fffc4 	movi	r17,-1
   135ac:	91000117 	ldw	r4,4(r18)
   135b0:	94000217 	ldw	r16,8(r18)
   135b4:	213fffc4 	addi	r4,r4,-1
   135b8:	20000a16 	blt	r4,zero,135e4 <__sfp+0x78>
   135bc:	8080030f 	ldh	r2,12(r16)
   135c0:	10000c26 	beq	r2,zero,135f4 <__sfp+0x88>
   135c4:	80c01d04 	addi	r3,r16,116
   135c8:	00000206 	br	135d4 <__sfp+0x68>
   135cc:	18bfe60f 	ldh	r2,-104(r3)
   135d0:	10000826 	beq	r2,zero,135f4 <__sfp+0x88>
   135d4:	213fffc4 	addi	r4,r4,-1
   135d8:	1c3ffd04 	addi	r16,r3,-12
   135dc:	18c01a04 	addi	r3,r3,104
   135e0:	247ffa1e 	bne	r4,r17,135cc <_gp+0xffff4610>
   135e4:	90800017 	ldw	r2,0(r18)
   135e8:	10001d26 	beq	r2,zero,13660 <__sfp+0xf4>
   135ec:	1025883a 	mov	r18,r2
   135f0:	003fee06 	br	135ac <_gp+0xffff45f0>
   135f4:	00bfffc4 	movi	r2,-1
   135f8:	8080038d 	sth	r2,14(r16)
   135fc:	00800044 	movi	r2,1
   13600:	8080030d 	sth	r2,12(r16)
   13604:	80001915 	stw	zero,100(r16)
   13608:	80000015 	stw	zero,0(r16)
   1360c:	80000215 	stw	zero,8(r16)
   13610:	80000115 	stw	zero,4(r16)
   13614:	80000415 	stw	zero,16(r16)
   13618:	80000515 	stw	zero,20(r16)
   1361c:	80000615 	stw	zero,24(r16)
   13620:	01800204 	movi	r6,8
   13624:	000b883a 	mov	r5,zero
   13628:	81001704 	addi	r4,r16,92
   1362c:	00146700 	call	14670 <memset>
   13630:	8005883a 	mov	r2,r16
   13634:	80000c15 	stw	zero,48(r16)
   13638:	80000d15 	stw	zero,52(r16)
   1363c:	80001115 	stw	zero,68(r16)
   13640:	80001215 	stw	zero,72(r16)
   13644:	dfc00417 	ldw	ra,16(sp)
   13648:	dcc00317 	ldw	r19,12(sp)
   1364c:	dc800217 	ldw	r18,8(sp)
   13650:	dc400117 	ldw	r17,4(sp)
   13654:	dc000017 	ldw	r16,0(sp)
   13658:	dec00504 	addi	sp,sp,20
   1365c:	f800283a 	ret
   13660:	01400104 	movi	r5,4
   13664:	9809883a 	mov	r4,r19
   13668:	00134f40 	call	134f4 <__sfmoreglue>
   1366c:	90800015 	stw	r2,0(r18)
   13670:	103fde1e 	bne	r2,zero,135ec <_gp+0xffff4630>
   13674:	00800304 	movi	r2,12
   13678:	98800015 	stw	r2,0(r19)
   1367c:	0005883a 	mov	r2,zero
   13680:	003ff006 	br	13644 <_gp+0xffff4688>

00013684 <_cleanup>:
   13684:	00800074 	movhi	r2,1
   13688:	109bf804 	addi	r2,r2,28640
   1368c:	11000017 	ldw	r4,0(r2)
   13690:	01400074 	movhi	r5,1
   13694:	29527704 	addi	r5,r5,18908
   13698:	0013be41 	jmpi	13be4 <_fwalk_reent>

0001369c <__sinit>:
   1369c:	20800e17 	ldw	r2,56(r4)
   136a0:	10000126 	beq	r2,zero,136a8 <__sinit+0xc>
   136a4:	f800283a 	ret
   136a8:	00133501 	jmpi	13350 <__sinit.part.1>

000136ac <__sfp_lock_acquire>:
   136ac:	f800283a 	ret

000136b0 <__sfp_lock_release>:
   136b0:	f800283a 	ret

000136b4 <__sinit_lock_acquire>:
   136b4:	f800283a 	ret

000136b8 <__sinit_lock_release>:
   136b8:	f800283a 	ret

000136bc <__fp_lock_all>:
   136bc:	00800074 	movhi	r2,1
   136c0:	109bf904 	addi	r2,r2,28644
   136c4:	11000017 	ldw	r4,0(r2)
   136c8:	01400074 	movhi	r5,1
   136cc:	294d3b04 	addi	r5,r5,13548
   136d0:	0013b201 	jmpi	13b20 <_fwalk>

000136d4 <__fp_unlock_all>:
   136d4:	00800074 	movhi	r2,1
   136d8:	109bf904 	addi	r2,r2,28644
   136dc:	11000017 	ldw	r4,0(r2)
   136e0:	01400074 	movhi	r5,1
   136e4:	294ccf04 	addi	r5,r5,13116
   136e8:	0013b201 	jmpi	13b20 <_fwalk>

000136ec <_malloc_trim_r>:
   136ec:	defffb04 	addi	sp,sp,-20
   136f0:	dcc00315 	stw	r19,12(sp)
   136f4:	04c00074 	movhi	r19,1
   136f8:	dc800215 	stw	r18,8(sp)
   136fc:	dc400115 	stw	r17,4(sp)
   13700:	dc000015 	stw	r16,0(sp)
   13704:	dfc00415 	stw	ra,16(sp)
   13708:	2821883a 	mov	r16,r5
   1370c:	9cdaed04 	addi	r19,r19,27572
   13710:	2025883a 	mov	r18,r4
   13714:	00151540 	call	15154 <__malloc_lock>
   13718:	98800217 	ldw	r2,8(r19)
   1371c:	14400117 	ldw	r17,4(r2)
   13720:	00bfff04 	movi	r2,-4
   13724:	88a2703a 	and	r17,r17,r2
   13728:	8c21c83a 	sub	r16,r17,r16
   1372c:	8403fbc4 	addi	r16,r16,4079
   13730:	8020d33a 	srli	r16,r16,12
   13734:	0083ffc4 	movi	r2,4095
   13738:	843fffc4 	addi	r16,r16,-1
   1373c:	8020933a 	slli	r16,r16,12
   13740:	1400060e 	bge	r2,r16,1375c <_malloc_trim_r+0x70>
   13744:	000b883a 	mov	r5,zero
   13748:	9009883a 	mov	r4,r18
   1374c:	00147980 	call	14798 <_sbrk_r>
   13750:	98c00217 	ldw	r3,8(r19)
   13754:	1c47883a 	add	r3,r3,r17
   13758:	10c00a26 	beq	r2,r3,13784 <_malloc_trim_r+0x98>
   1375c:	9009883a 	mov	r4,r18
   13760:	00151780 	call	15178 <__malloc_unlock>
   13764:	0005883a 	mov	r2,zero
   13768:	dfc00417 	ldw	ra,16(sp)
   1376c:	dcc00317 	ldw	r19,12(sp)
   13770:	dc800217 	ldw	r18,8(sp)
   13774:	dc400117 	ldw	r17,4(sp)
   13778:	dc000017 	ldw	r16,0(sp)
   1377c:	dec00504 	addi	sp,sp,20
   13780:	f800283a 	ret
   13784:	040bc83a 	sub	r5,zero,r16
   13788:	9009883a 	mov	r4,r18
   1378c:	00147980 	call	14798 <_sbrk_r>
   13790:	00ffffc4 	movi	r3,-1
   13794:	10c00d26 	beq	r2,r3,137cc <_malloc_trim_r+0xe0>
   13798:	00c000b4 	movhi	r3,2
   1379c:	18e2b904 	addi	r3,r3,-29980
   137a0:	18800017 	ldw	r2,0(r3)
   137a4:	99000217 	ldw	r4,8(r19)
   137a8:	8c23c83a 	sub	r17,r17,r16
   137ac:	8c400054 	ori	r17,r17,1
   137b0:	1421c83a 	sub	r16,r2,r16
   137b4:	24400115 	stw	r17,4(r4)
   137b8:	9009883a 	mov	r4,r18
   137bc:	1c000015 	stw	r16,0(r3)
   137c0:	00151780 	call	15178 <__malloc_unlock>
   137c4:	00800044 	movi	r2,1
   137c8:	003fe706 	br	13768 <_gp+0xffff47ac>
   137cc:	000b883a 	mov	r5,zero
   137d0:	9009883a 	mov	r4,r18
   137d4:	00147980 	call	14798 <_sbrk_r>
   137d8:	99000217 	ldw	r4,8(r19)
   137dc:	014003c4 	movi	r5,15
   137e0:	1107c83a 	sub	r3,r2,r4
   137e4:	28ffdd0e 	bge	r5,r3,1375c <_gp+0xffff47a0>
   137e8:	01400074 	movhi	r5,1
   137ec:	295bfa04 	addi	r5,r5,28648
   137f0:	29400017 	ldw	r5,0(r5)
   137f4:	18c00054 	ori	r3,r3,1
   137f8:	20c00115 	stw	r3,4(r4)
   137fc:	00c000b4 	movhi	r3,2
   13800:	1145c83a 	sub	r2,r2,r5
   13804:	18e2b904 	addi	r3,r3,-29980
   13808:	18800015 	stw	r2,0(r3)
   1380c:	003fd306 	br	1375c <_gp+0xffff47a0>

00013810 <_free_r>:
   13810:	28004126 	beq	r5,zero,13918 <_free_r+0x108>
   13814:	defffd04 	addi	sp,sp,-12
   13818:	dc400115 	stw	r17,4(sp)
   1381c:	dc000015 	stw	r16,0(sp)
   13820:	2023883a 	mov	r17,r4
   13824:	2821883a 	mov	r16,r5
   13828:	dfc00215 	stw	ra,8(sp)
   1382c:	00151540 	call	15154 <__malloc_lock>
   13830:	81ffff17 	ldw	r7,-4(r16)
   13834:	00bfff84 	movi	r2,-2
   13838:	01000074 	movhi	r4,1
   1383c:	81bffe04 	addi	r6,r16,-8
   13840:	3884703a 	and	r2,r7,r2
   13844:	211aed04 	addi	r4,r4,27572
   13848:	308b883a 	add	r5,r6,r2
   1384c:	2a400117 	ldw	r9,4(r5)
   13850:	22000217 	ldw	r8,8(r4)
   13854:	00ffff04 	movi	r3,-4
   13858:	48c6703a 	and	r3,r9,r3
   1385c:	2a005726 	beq	r5,r8,139bc <_free_r+0x1ac>
   13860:	28c00115 	stw	r3,4(r5)
   13864:	39c0004c 	andi	r7,r7,1
   13868:	3800091e 	bne	r7,zero,13890 <_free_r+0x80>
   1386c:	823ffe17 	ldw	r8,-8(r16)
   13870:	22400204 	addi	r9,r4,8
   13874:	320dc83a 	sub	r6,r6,r8
   13878:	31c00217 	ldw	r7,8(r6)
   1387c:	1205883a 	add	r2,r2,r8
   13880:	3a406526 	beq	r7,r9,13a18 <_free_r+0x208>
   13884:	32000317 	ldw	r8,12(r6)
   13888:	3a000315 	stw	r8,12(r7)
   1388c:	41c00215 	stw	r7,8(r8)
   13890:	28cf883a 	add	r7,r5,r3
   13894:	39c00117 	ldw	r7,4(r7)
   13898:	39c0004c 	andi	r7,r7,1
   1389c:	38003a26 	beq	r7,zero,13988 <_free_r+0x178>
   138a0:	10c00054 	ori	r3,r2,1
   138a4:	30c00115 	stw	r3,4(r6)
   138a8:	3087883a 	add	r3,r6,r2
   138ac:	18800015 	stw	r2,0(r3)
   138b0:	00c07fc4 	movi	r3,511
   138b4:	18801936 	bltu	r3,r2,1391c <_free_r+0x10c>
   138b8:	1004d0fa 	srli	r2,r2,3
   138bc:	01c00044 	movi	r7,1
   138c0:	21400117 	ldw	r5,4(r4)
   138c4:	10c00044 	addi	r3,r2,1
   138c8:	18c7883a 	add	r3,r3,r3
   138cc:	1005d0ba 	srai	r2,r2,2
   138d0:	18c7883a 	add	r3,r3,r3
   138d4:	18c7883a 	add	r3,r3,r3
   138d8:	1907883a 	add	r3,r3,r4
   138dc:	3884983a 	sll	r2,r7,r2
   138e0:	19c00017 	ldw	r7,0(r3)
   138e4:	1a3ffe04 	addi	r8,r3,-8
   138e8:	1144b03a 	or	r2,r2,r5
   138ec:	32000315 	stw	r8,12(r6)
   138f0:	31c00215 	stw	r7,8(r6)
   138f4:	20800115 	stw	r2,4(r4)
   138f8:	19800015 	stw	r6,0(r3)
   138fc:	39800315 	stw	r6,12(r7)
   13900:	8809883a 	mov	r4,r17
   13904:	dfc00217 	ldw	ra,8(sp)
   13908:	dc400117 	ldw	r17,4(sp)
   1390c:	dc000017 	ldw	r16,0(sp)
   13910:	dec00304 	addi	sp,sp,12
   13914:	00151781 	jmpi	15178 <__malloc_unlock>
   13918:	f800283a 	ret
   1391c:	100ad27a 	srli	r5,r2,9
   13920:	00c00104 	movi	r3,4
   13924:	19404a36 	bltu	r3,r5,13a50 <_free_r+0x240>
   13928:	100ad1ba 	srli	r5,r2,6
   1392c:	28c00e44 	addi	r3,r5,57
   13930:	18c7883a 	add	r3,r3,r3
   13934:	29400e04 	addi	r5,r5,56
   13938:	18c7883a 	add	r3,r3,r3
   1393c:	18c7883a 	add	r3,r3,r3
   13940:	1909883a 	add	r4,r3,r4
   13944:	20c00017 	ldw	r3,0(r4)
   13948:	01c00074 	movhi	r7,1
   1394c:	213ffe04 	addi	r4,r4,-8
   13950:	39daed04 	addi	r7,r7,27572
   13954:	20c04426 	beq	r4,r3,13a68 <_free_r+0x258>
   13958:	01ffff04 	movi	r7,-4
   1395c:	19400117 	ldw	r5,4(r3)
   13960:	29ca703a 	and	r5,r5,r7
   13964:	1140022e 	bgeu	r2,r5,13970 <_free_r+0x160>
   13968:	18c00217 	ldw	r3,8(r3)
   1396c:	20fffb1e 	bne	r4,r3,1395c <_gp+0xffff49a0>
   13970:	19000317 	ldw	r4,12(r3)
   13974:	31000315 	stw	r4,12(r6)
   13978:	30c00215 	stw	r3,8(r6)
   1397c:	21800215 	stw	r6,8(r4)
   13980:	19800315 	stw	r6,12(r3)
   13984:	003fde06 	br	13900 <_gp+0xffff4944>
   13988:	29c00217 	ldw	r7,8(r5)
   1398c:	10c5883a 	add	r2,r2,r3
   13990:	00c00074 	movhi	r3,1
   13994:	18daef04 	addi	r3,r3,27580
   13998:	38c03b26 	beq	r7,r3,13a88 <_free_r+0x278>
   1399c:	2a000317 	ldw	r8,12(r5)
   139a0:	11400054 	ori	r5,r2,1
   139a4:	3087883a 	add	r3,r6,r2
   139a8:	3a000315 	stw	r8,12(r7)
   139ac:	41c00215 	stw	r7,8(r8)
   139b0:	31400115 	stw	r5,4(r6)
   139b4:	18800015 	stw	r2,0(r3)
   139b8:	003fbd06 	br	138b0 <_gp+0xffff48f4>
   139bc:	39c0004c 	andi	r7,r7,1
   139c0:	10c5883a 	add	r2,r2,r3
   139c4:	3800071e 	bne	r7,zero,139e4 <_free_r+0x1d4>
   139c8:	81fffe17 	ldw	r7,-8(r16)
   139cc:	31cdc83a 	sub	r6,r6,r7
   139d0:	30c00317 	ldw	r3,12(r6)
   139d4:	31400217 	ldw	r5,8(r6)
   139d8:	11c5883a 	add	r2,r2,r7
   139dc:	28c00315 	stw	r3,12(r5)
   139e0:	19400215 	stw	r5,8(r3)
   139e4:	10c00054 	ori	r3,r2,1
   139e8:	30c00115 	stw	r3,4(r6)
   139ec:	00c00074 	movhi	r3,1
   139f0:	18dbfb04 	addi	r3,r3,28652
   139f4:	18c00017 	ldw	r3,0(r3)
   139f8:	21800215 	stw	r6,8(r4)
   139fc:	10ffc036 	bltu	r2,r3,13900 <_gp+0xffff4944>
   13a00:	008000b4 	movhi	r2,2
   13a04:	10a2b804 	addi	r2,r2,-29984
   13a08:	11400017 	ldw	r5,0(r2)
   13a0c:	8809883a 	mov	r4,r17
   13a10:	00136ec0 	call	136ec <_malloc_trim_r>
   13a14:	003fba06 	br	13900 <_gp+0xffff4944>
   13a18:	28c9883a 	add	r4,r5,r3
   13a1c:	21000117 	ldw	r4,4(r4)
   13a20:	2100004c 	andi	r4,r4,1
   13a24:	2000391e 	bne	r4,zero,13b0c <_free_r+0x2fc>
   13a28:	29c00217 	ldw	r7,8(r5)
   13a2c:	29000317 	ldw	r4,12(r5)
   13a30:	1885883a 	add	r2,r3,r2
   13a34:	10c00054 	ori	r3,r2,1
   13a38:	39000315 	stw	r4,12(r7)
   13a3c:	21c00215 	stw	r7,8(r4)
   13a40:	30c00115 	stw	r3,4(r6)
   13a44:	308d883a 	add	r6,r6,r2
   13a48:	30800015 	stw	r2,0(r6)
   13a4c:	003fac06 	br	13900 <_gp+0xffff4944>
   13a50:	00c00504 	movi	r3,20
   13a54:	19401536 	bltu	r3,r5,13aac <_free_r+0x29c>
   13a58:	28c01704 	addi	r3,r5,92
   13a5c:	18c7883a 	add	r3,r3,r3
   13a60:	294016c4 	addi	r5,r5,91
   13a64:	003fb406 	br	13938 <_gp+0xffff497c>
   13a68:	280bd0ba 	srai	r5,r5,2
   13a6c:	00c00044 	movi	r3,1
   13a70:	38800117 	ldw	r2,4(r7)
   13a74:	194a983a 	sll	r5,r3,r5
   13a78:	2007883a 	mov	r3,r4
   13a7c:	2884b03a 	or	r2,r5,r2
   13a80:	38800115 	stw	r2,4(r7)
   13a84:	003fbb06 	br	13974 <_gp+0xffff49b8>
   13a88:	21800515 	stw	r6,20(r4)
   13a8c:	21800415 	stw	r6,16(r4)
   13a90:	10c00054 	ori	r3,r2,1
   13a94:	31c00315 	stw	r7,12(r6)
   13a98:	31c00215 	stw	r7,8(r6)
   13a9c:	30c00115 	stw	r3,4(r6)
   13aa0:	308d883a 	add	r6,r6,r2
   13aa4:	30800015 	stw	r2,0(r6)
   13aa8:	003f9506 	br	13900 <_gp+0xffff4944>
   13aac:	00c01504 	movi	r3,84
   13ab0:	19400536 	bltu	r3,r5,13ac8 <_free_r+0x2b8>
   13ab4:	100ad33a 	srli	r5,r2,12
   13ab8:	28c01bc4 	addi	r3,r5,111
   13abc:	18c7883a 	add	r3,r3,r3
   13ac0:	29401b84 	addi	r5,r5,110
   13ac4:	003f9c06 	br	13938 <_gp+0xffff497c>
   13ac8:	00c05504 	movi	r3,340
   13acc:	19400536 	bltu	r3,r5,13ae4 <_free_r+0x2d4>
   13ad0:	100ad3fa 	srli	r5,r2,15
   13ad4:	28c01e04 	addi	r3,r5,120
   13ad8:	18c7883a 	add	r3,r3,r3
   13adc:	29401dc4 	addi	r5,r5,119
   13ae0:	003f9506 	br	13938 <_gp+0xffff497c>
   13ae4:	00c15504 	movi	r3,1364
   13ae8:	19400536 	bltu	r3,r5,13b00 <_free_r+0x2f0>
   13aec:	100ad4ba 	srli	r5,r2,18
   13af0:	28c01f44 	addi	r3,r5,125
   13af4:	18c7883a 	add	r3,r3,r3
   13af8:	29401f04 	addi	r5,r5,124
   13afc:	003f8e06 	br	13938 <_gp+0xffff497c>
   13b00:	00c03f84 	movi	r3,254
   13b04:	01401f84 	movi	r5,126
   13b08:	003f8b06 	br	13938 <_gp+0xffff497c>
   13b0c:	10c00054 	ori	r3,r2,1
   13b10:	30c00115 	stw	r3,4(r6)
   13b14:	308d883a 	add	r6,r6,r2
   13b18:	30800015 	stw	r2,0(r6)
   13b1c:	003f7806 	br	13900 <_gp+0xffff4944>

00013b20 <_fwalk>:
   13b20:	defff704 	addi	sp,sp,-36
   13b24:	dd000415 	stw	r20,16(sp)
   13b28:	dfc00815 	stw	ra,32(sp)
   13b2c:	ddc00715 	stw	r23,28(sp)
   13b30:	dd800615 	stw	r22,24(sp)
   13b34:	dd400515 	stw	r21,20(sp)
   13b38:	dcc00315 	stw	r19,12(sp)
   13b3c:	dc800215 	stw	r18,8(sp)
   13b40:	dc400115 	stw	r17,4(sp)
   13b44:	dc000015 	stw	r16,0(sp)
   13b48:	2500b804 	addi	r20,r4,736
   13b4c:	a0002326 	beq	r20,zero,13bdc <_fwalk+0xbc>
   13b50:	282b883a 	mov	r21,r5
   13b54:	002f883a 	mov	r23,zero
   13b58:	05800044 	movi	r22,1
   13b5c:	04ffffc4 	movi	r19,-1
   13b60:	a4400117 	ldw	r17,4(r20)
   13b64:	a4800217 	ldw	r18,8(r20)
   13b68:	8c7fffc4 	addi	r17,r17,-1
   13b6c:	88000d16 	blt	r17,zero,13ba4 <_fwalk+0x84>
   13b70:	94000304 	addi	r16,r18,12
   13b74:	94800384 	addi	r18,r18,14
   13b78:	8080000b 	ldhu	r2,0(r16)
   13b7c:	8c7fffc4 	addi	r17,r17,-1
   13b80:	813ffd04 	addi	r4,r16,-12
   13b84:	b080042e 	bgeu	r22,r2,13b98 <_fwalk+0x78>
   13b88:	9080000f 	ldh	r2,0(r18)
   13b8c:	14c00226 	beq	r2,r19,13b98 <_fwalk+0x78>
   13b90:	a83ee83a 	callr	r21
   13b94:	b8aeb03a 	or	r23,r23,r2
   13b98:	84001a04 	addi	r16,r16,104
   13b9c:	94801a04 	addi	r18,r18,104
   13ba0:	8cfff51e 	bne	r17,r19,13b78 <_gp+0xffff4bbc>
   13ba4:	a5000017 	ldw	r20,0(r20)
   13ba8:	a03fed1e 	bne	r20,zero,13b60 <_gp+0xffff4ba4>
   13bac:	b805883a 	mov	r2,r23
   13bb0:	dfc00817 	ldw	ra,32(sp)
   13bb4:	ddc00717 	ldw	r23,28(sp)
   13bb8:	dd800617 	ldw	r22,24(sp)
   13bbc:	dd400517 	ldw	r21,20(sp)
   13bc0:	dd000417 	ldw	r20,16(sp)
   13bc4:	dcc00317 	ldw	r19,12(sp)
   13bc8:	dc800217 	ldw	r18,8(sp)
   13bcc:	dc400117 	ldw	r17,4(sp)
   13bd0:	dc000017 	ldw	r16,0(sp)
   13bd4:	dec00904 	addi	sp,sp,36
   13bd8:	f800283a 	ret
   13bdc:	002f883a 	mov	r23,zero
   13be0:	003ff206 	br	13bac <_gp+0xffff4bf0>

00013be4 <_fwalk_reent>:
   13be4:	defff704 	addi	sp,sp,-36
   13be8:	dd000415 	stw	r20,16(sp)
   13bec:	dfc00815 	stw	ra,32(sp)
   13bf0:	ddc00715 	stw	r23,28(sp)
   13bf4:	dd800615 	stw	r22,24(sp)
   13bf8:	dd400515 	stw	r21,20(sp)
   13bfc:	dcc00315 	stw	r19,12(sp)
   13c00:	dc800215 	stw	r18,8(sp)
   13c04:	dc400115 	stw	r17,4(sp)
   13c08:	dc000015 	stw	r16,0(sp)
   13c0c:	2500b804 	addi	r20,r4,736
   13c10:	a0002326 	beq	r20,zero,13ca0 <_fwalk_reent+0xbc>
   13c14:	282b883a 	mov	r21,r5
   13c18:	2027883a 	mov	r19,r4
   13c1c:	002f883a 	mov	r23,zero
   13c20:	05800044 	movi	r22,1
   13c24:	04bfffc4 	movi	r18,-1
   13c28:	a4400117 	ldw	r17,4(r20)
   13c2c:	a4000217 	ldw	r16,8(r20)
   13c30:	8c7fffc4 	addi	r17,r17,-1
   13c34:	88000c16 	blt	r17,zero,13c68 <_fwalk_reent+0x84>
   13c38:	84000304 	addi	r16,r16,12
   13c3c:	8080000b 	ldhu	r2,0(r16)
   13c40:	8c7fffc4 	addi	r17,r17,-1
   13c44:	817ffd04 	addi	r5,r16,-12
   13c48:	b080052e 	bgeu	r22,r2,13c60 <_fwalk_reent+0x7c>
   13c4c:	8080008f 	ldh	r2,2(r16)
   13c50:	9809883a 	mov	r4,r19
   13c54:	14800226 	beq	r2,r18,13c60 <_fwalk_reent+0x7c>
   13c58:	a83ee83a 	callr	r21
   13c5c:	b8aeb03a 	or	r23,r23,r2
   13c60:	84001a04 	addi	r16,r16,104
   13c64:	8cbff51e 	bne	r17,r18,13c3c <_gp+0xffff4c80>
   13c68:	a5000017 	ldw	r20,0(r20)
   13c6c:	a03fee1e 	bne	r20,zero,13c28 <_gp+0xffff4c6c>
   13c70:	b805883a 	mov	r2,r23
   13c74:	dfc00817 	ldw	ra,32(sp)
   13c78:	ddc00717 	ldw	r23,28(sp)
   13c7c:	dd800617 	ldw	r22,24(sp)
   13c80:	dd400517 	ldw	r21,20(sp)
   13c84:	dd000417 	ldw	r20,16(sp)
   13c88:	dcc00317 	ldw	r19,12(sp)
   13c8c:	dc800217 	ldw	r18,8(sp)
   13c90:	dc400117 	ldw	r17,4(sp)
   13c94:	dc000017 	ldw	r16,0(sp)
   13c98:	dec00904 	addi	sp,sp,36
   13c9c:	f800283a 	ret
   13ca0:	002f883a 	mov	r23,zero
   13ca4:	003ff206 	br	13c70 <_gp+0xffff4cb4>

00013ca8 <__smakebuf_r>:
   13ca8:	2880030b 	ldhu	r2,12(r5)
   13cac:	10c0008c 	andi	r3,r2,2
   13cb0:	1800411e 	bne	r3,zero,13db8 <__smakebuf_r+0x110>
   13cb4:	deffec04 	addi	sp,sp,-80
   13cb8:	dc000f15 	stw	r16,60(sp)
   13cbc:	2821883a 	mov	r16,r5
   13cc0:	2940038f 	ldh	r5,14(r5)
   13cc4:	dc401015 	stw	r17,64(sp)
   13cc8:	dfc01315 	stw	ra,76(sp)
   13ccc:	dcc01215 	stw	r19,72(sp)
   13cd0:	dc801115 	stw	r18,68(sp)
   13cd4:	2023883a 	mov	r17,r4
   13cd8:	28001c16 	blt	r5,zero,13d4c <__smakebuf_r+0xa4>
   13cdc:	d80d883a 	mov	r6,sp
   13ce0:	0014ae00 	call	14ae0 <_fstat_r>
   13ce4:	10001816 	blt	r2,zero,13d48 <__smakebuf_r+0xa0>
   13ce8:	d8800117 	ldw	r2,4(sp)
   13cec:	00e00014 	movui	r3,32768
   13cf0:	10bc000c 	andi	r2,r2,61440
   13cf4:	14c80020 	cmpeqi	r19,r2,8192
   13cf8:	10c03726 	beq	r2,r3,13dd8 <__smakebuf_r+0x130>
   13cfc:	80c0030b 	ldhu	r3,12(r16)
   13d00:	18c20014 	ori	r3,r3,2048
   13d04:	80c0030d 	sth	r3,12(r16)
   13d08:	00c80004 	movi	r3,8192
   13d0c:	10c0521e 	bne	r2,r3,13e58 <__smakebuf_r+0x1b0>
   13d10:	8140038f 	ldh	r5,14(r16)
   13d14:	8809883a 	mov	r4,r17
   13d18:	0014b3c0 	call	14b3c <_isatty_r>
   13d1c:	10004c26 	beq	r2,zero,13e50 <__smakebuf_r+0x1a8>
   13d20:	8080030b 	ldhu	r2,12(r16)
   13d24:	80c010c4 	addi	r3,r16,67
   13d28:	80c00015 	stw	r3,0(r16)
   13d2c:	10800054 	ori	r2,r2,1
   13d30:	8080030d 	sth	r2,12(r16)
   13d34:	00800044 	movi	r2,1
   13d38:	80c00415 	stw	r3,16(r16)
   13d3c:	80800515 	stw	r2,20(r16)
   13d40:	04810004 	movi	r18,1024
   13d44:	00000706 	br	13d64 <__smakebuf_r+0xbc>
   13d48:	8080030b 	ldhu	r2,12(r16)
   13d4c:	10c0200c 	andi	r3,r2,128
   13d50:	18001f1e 	bne	r3,zero,13dd0 <__smakebuf_r+0x128>
   13d54:	04810004 	movi	r18,1024
   13d58:	10820014 	ori	r2,r2,2048
   13d5c:	8080030d 	sth	r2,12(r16)
   13d60:	0027883a 	mov	r19,zero
   13d64:	900b883a 	mov	r5,r18
   13d68:	8809883a 	mov	r4,r17
   13d6c:	0013e640 	call	13e64 <_malloc_r>
   13d70:	10002c26 	beq	r2,zero,13e24 <__smakebuf_r+0x17c>
   13d74:	80c0030b 	ldhu	r3,12(r16)
   13d78:	01000074 	movhi	r4,1
   13d7c:	210cd104 	addi	r4,r4,13124
   13d80:	89000f15 	stw	r4,60(r17)
   13d84:	18c02014 	ori	r3,r3,128
   13d88:	80c0030d 	sth	r3,12(r16)
   13d8c:	80800015 	stw	r2,0(r16)
   13d90:	80800415 	stw	r2,16(r16)
   13d94:	84800515 	stw	r18,20(r16)
   13d98:	98001a1e 	bne	r19,zero,13e04 <__smakebuf_r+0x15c>
   13d9c:	dfc01317 	ldw	ra,76(sp)
   13da0:	dcc01217 	ldw	r19,72(sp)
   13da4:	dc801117 	ldw	r18,68(sp)
   13da8:	dc401017 	ldw	r17,64(sp)
   13dac:	dc000f17 	ldw	r16,60(sp)
   13db0:	dec01404 	addi	sp,sp,80
   13db4:	f800283a 	ret
   13db8:	288010c4 	addi	r2,r5,67
   13dbc:	28800015 	stw	r2,0(r5)
   13dc0:	28800415 	stw	r2,16(r5)
   13dc4:	00800044 	movi	r2,1
   13dc8:	28800515 	stw	r2,20(r5)
   13dcc:	f800283a 	ret
   13dd0:	04801004 	movi	r18,64
   13dd4:	003fe006 	br	13d58 <_gp+0xffff4d9c>
   13dd8:	81000a17 	ldw	r4,40(r16)
   13ddc:	00c00074 	movhi	r3,1
   13de0:	18d23104 	addi	r3,r3,18628
   13de4:	20ffc51e 	bne	r4,r3,13cfc <_gp+0xffff4d40>
   13de8:	8080030b 	ldhu	r2,12(r16)
   13dec:	04810004 	movi	r18,1024
   13df0:	84801315 	stw	r18,76(r16)
   13df4:	1484b03a 	or	r2,r2,r18
   13df8:	8080030d 	sth	r2,12(r16)
   13dfc:	0027883a 	mov	r19,zero
   13e00:	003fd806 	br	13d64 <_gp+0xffff4da8>
   13e04:	8140038f 	ldh	r5,14(r16)
   13e08:	8809883a 	mov	r4,r17
   13e0c:	0014b3c0 	call	14b3c <_isatty_r>
   13e10:	103fe226 	beq	r2,zero,13d9c <_gp+0xffff4de0>
   13e14:	8080030b 	ldhu	r2,12(r16)
   13e18:	10800054 	ori	r2,r2,1
   13e1c:	8080030d 	sth	r2,12(r16)
   13e20:	003fde06 	br	13d9c <_gp+0xffff4de0>
   13e24:	8080030b 	ldhu	r2,12(r16)
   13e28:	10c0800c 	andi	r3,r2,512
   13e2c:	183fdb1e 	bne	r3,zero,13d9c <_gp+0xffff4de0>
   13e30:	10800094 	ori	r2,r2,2
   13e34:	80c010c4 	addi	r3,r16,67
   13e38:	8080030d 	sth	r2,12(r16)
   13e3c:	00800044 	movi	r2,1
   13e40:	80c00015 	stw	r3,0(r16)
   13e44:	80c00415 	stw	r3,16(r16)
   13e48:	80800515 	stw	r2,20(r16)
   13e4c:	003fd306 	br	13d9c <_gp+0xffff4de0>
   13e50:	04810004 	movi	r18,1024
   13e54:	003fc306 	br	13d64 <_gp+0xffff4da8>
   13e58:	0027883a 	mov	r19,zero
   13e5c:	04810004 	movi	r18,1024
   13e60:	003fc006 	br	13d64 <_gp+0xffff4da8>

00013e64 <_malloc_r>:
   13e64:	defff504 	addi	sp,sp,-44
   13e68:	dc800315 	stw	r18,12(sp)
   13e6c:	dfc00a15 	stw	ra,40(sp)
   13e70:	df000915 	stw	fp,36(sp)
   13e74:	ddc00815 	stw	r23,32(sp)
   13e78:	dd800715 	stw	r22,28(sp)
   13e7c:	dd400615 	stw	r21,24(sp)
   13e80:	dd000515 	stw	r20,20(sp)
   13e84:	dcc00415 	stw	r19,16(sp)
   13e88:	dc400215 	stw	r17,8(sp)
   13e8c:	dc000115 	stw	r16,4(sp)
   13e90:	288002c4 	addi	r2,r5,11
   13e94:	00c00584 	movi	r3,22
   13e98:	2025883a 	mov	r18,r4
   13e9c:	18807f2e 	bgeu	r3,r2,1409c <_malloc_r+0x238>
   13ea0:	047ffe04 	movi	r17,-8
   13ea4:	1462703a 	and	r17,r2,r17
   13ea8:	8800a316 	blt	r17,zero,14138 <_malloc_r+0x2d4>
   13eac:	8940a236 	bltu	r17,r5,14138 <_malloc_r+0x2d4>
   13eb0:	00151540 	call	15154 <__malloc_lock>
   13eb4:	00807dc4 	movi	r2,503
   13eb8:	1441e92e 	bgeu	r2,r17,14660 <_malloc_r+0x7fc>
   13ebc:	8804d27a 	srli	r2,r17,9
   13ec0:	1000a126 	beq	r2,zero,14148 <_malloc_r+0x2e4>
   13ec4:	00c00104 	movi	r3,4
   13ec8:	18811e36 	bltu	r3,r2,14344 <_malloc_r+0x4e0>
   13ecc:	8804d1ba 	srli	r2,r17,6
   13ed0:	12000e44 	addi	r8,r2,57
   13ed4:	11c00e04 	addi	r7,r2,56
   13ed8:	4209883a 	add	r4,r8,r8
   13edc:	04c00074 	movhi	r19,1
   13ee0:	2109883a 	add	r4,r4,r4
   13ee4:	9cdaed04 	addi	r19,r19,27572
   13ee8:	2109883a 	add	r4,r4,r4
   13eec:	9909883a 	add	r4,r19,r4
   13ef0:	24000117 	ldw	r16,4(r4)
   13ef4:	213ffe04 	addi	r4,r4,-8
   13ef8:	24009726 	beq	r4,r16,14158 <_malloc_r+0x2f4>
   13efc:	80800117 	ldw	r2,4(r16)
   13f00:	01bfff04 	movi	r6,-4
   13f04:	014003c4 	movi	r5,15
   13f08:	1184703a 	and	r2,r2,r6
   13f0c:	1447c83a 	sub	r3,r2,r17
   13f10:	28c00716 	blt	r5,r3,13f30 <_malloc_r+0xcc>
   13f14:	1800920e 	bge	r3,zero,14160 <_malloc_r+0x2fc>
   13f18:	84000317 	ldw	r16,12(r16)
   13f1c:	24008e26 	beq	r4,r16,14158 <_malloc_r+0x2f4>
   13f20:	80800117 	ldw	r2,4(r16)
   13f24:	1184703a 	and	r2,r2,r6
   13f28:	1447c83a 	sub	r3,r2,r17
   13f2c:	28fff90e 	bge	r5,r3,13f14 <_gp+0xffff4f58>
   13f30:	3809883a 	mov	r4,r7
   13f34:	01800074 	movhi	r6,1
   13f38:	9c000417 	ldw	r16,16(r19)
   13f3c:	319aed04 	addi	r6,r6,27572
   13f40:	32000204 	addi	r8,r6,8
   13f44:	82013426 	beq	r16,r8,14418 <_malloc_r+0x5b4>
   13f48:	80c00117 	ldw	r3,4(r16)
   13f4c:	00bfff04 	movi	r2,-4
   13f50:	188e703a 	and	r7,r3,r2
   13f54:	3c45c83a 	sub	r2,r7,r17
   13f58:	00c003c4 	movi	r3,15
   13f5c:	18811f16 	blt	r3,r2,143dc <_malloc_r+0x578>
   13f60:	32000515 	stw	r8,20(r6)
   13f64:	32000415 	stw	r8,16(r6)
   13f68:	10007f0e 	bge	r2,zero,14168 <_malloc_r+0x304>
   13f6c:	00807fc4 	movi	r2,511
   13f70:	11c0fd36 	bltu	r2,r7,14368 <_malloc_r+0x504>
   13f74:	3806d0fa 	srli	r3,r7,3
   13f78:	01c00044 	movi	r7,1
   13f7c:	30800117 	ldw	r2,4(r6)
   13f80:	19400044 	addi	r5,r3,1
   13f84:	294b883a 	add	r5,r5,r5
   13f88:	1807d0ba 	srai	r3,r3,2
   13f8c:	294b883a 	add	r5,r5,r5
   13f90:	294b883a 	add	r5,r5,r5
   13f94:	298b883a 	add	r5,r5,r6
   13f98:	38c6983a 	sll	r3,r7,r3
   13f9c:	29c00017 	ldw	r7,0(r5)
   13fa0:	2a7ffe04 	addi	r9,r5,-8
   13fa4:	1886b03a 	or	r3,r3,r2
   13fa8:	82400315 	stw	r9,12(r16)
   13fac:	81c00215 	stw	r7,8(r16)
   13fb0:	30c00115 	stw	r3,4(r6)
   13fb4:	2c000015 	stw	r16,0(r5)
   13fb8:	3c000315 	stw	r16,12(r7)
   13fbc:	2005d0ba 	srai	r2,r4,2
   13fc0:	01400044 	movi	r5,1
   13fc4:	288a983a 	sll	r5,r5,r2
   13fc8:	19406f36 	bltu	r3,r5,14188 <_malloc_r+0x324>
   13fcc:	28c4703a 	and	r2,r5,r3
   13fd0:	10000a1e 	bne	r2,zero,13ffc <_malloc_r+0x198>
   13fd4:	00bfff04 	movi	r2,-4
   13fd8:	294b883a 	add	r5,r5,r5
   13fdc:	2088703a 	and	r4,r4,r2
   13fe0:	28c4703a 	and	r2,r5,r3
   13fe4:	21000104 	addi	r4,r4,4
   13fe8:	1000041e 	bne	r2,zero,13ffc <_malloc_r+0x198>
   13fec:	294b883a 	add	r5,r5,r5
   13ff0:	28c4703a 	and	r2,r5,r3
   13ff4:	21000104 	addi	r4,r4,4
   13ff8:	103ffc26 	beq	r2,zero,13fec <_gp+0xffff5030>
   13ffc:	02bfff04 	movi	r10,-4
   14000:	024003c4 	movi	r9,15
   14004:	21800044 	addi	r6,r4,1
   14008:	318d883a 	add	r6,r6,r6
   1400c:	318d883a 	add	r6,r6,r6
   14010:	318d883a 	add	r6,r6,r6
   14014:	998d883a 	add	r6,r19,r6
   14018:	333ffe04 	addi	r12,r6,-8
   1401c:	2017883a 	mov	r11,r4
   14020:	31800104 	addi	r6,r6,4
   14024:	34000017 	ldw	r16,0(r6)
   14028:	31fffd04 	addi	r7,r6,-12
   1402c:	81c0041e 	bne	r16,r7,14040 <_malloc_r+0x1dc>
   14030:	0000fb06 	br	14420 <_malloc_r+0x5bc>
   14034:	1801030e 	bge	r3,zero,14444 <_malloc_r+0x5e0>
   14038:	84000317 	ldw	r16,12(r16)
   1403c:	81c0f826 	beq	r16,r7,14420 <_malloc_r+0x5bc>
   14040:	80800117 	ldw	r2,4(r16)
   14044:	1284703a 	and	r2,r2,r10
   14048:	1447c83a 	sub	r3,r2,r17
   1404c:	48fff90e 	bge	r9,r3,14034 <_gp+0xffff5078>
   14050:	80800317 	ldw	r2,12(r16)
   14054:	81000217 	ldw	r4,8(r16)
   14058:	89400054 	ori	r5,r17,1
   1405c:	81400115 	stw	r5,4(r16)
   14060:	20800315 	stw	r2,12(r4)
   14064:	11000215 	stw	r4,8(r2)
   14068:	8463883a 	add	r17,r16,r17
   1406c:	9c400515 	stw	r17,20(r19)
   14070:	9c400415 	stw	r17,16(r19)
   14074:	18800054 	ori	r2,r3,1
   14078:	88800115 	stw	r2,4(r17)
   1407c:	8a000315 	stw	r8,12(r17)
   14080:	8a000215 	stw	r8,8(r17)
   14084:	88e3883a 	add	r17,r17,r3
   14088:	88c00015 	stw	r3,0(r17)
   1408c:	9009883a 	mov	r4,r18
   14090:	00151780 	call	15178 <__malloc_unlock>
   14094:	80800204 	addi	r2,r16,8
   14098:	00001b06 	br	14108 <_malloc_r+0x2a4>
   1409c:	04400404 	movi	r17,16
   140a0:	89402536 	bltu	r17,r5,14138 <_malloc_r+0x2d4>
   140a4:	00151540 	call	15154 <__malloc_lock>
   140a8:	00800184 	movi	r2,6
   140ac:	01000084 	movi	r4,2
   140b0:	04c00074 	movhi	r19,1
   140b4:	1085883a 	add	r2,r2,r2
   140b8:	9cdaed04 	addi	r19,r19,27572
   140bc:	1085883a 	add	r2,r2,r2
   140c0:	9885883a 	add	r2,r19,r2
   140c4:	14000117 	ldw	r16,4(r2)
   140c8:	10fffe04 	addi	r3,r2,-8
   140cc:	80c0d926 	beq	r16,r3,14434 <_malloc_r+0x5d0>
   140d0:	80c00117 	ldw	r3,4(r16)
   140d4:	81000317 	ldw	r4,12(r16)
   140d8:	00bfff04 	movi	r2,-4
   140dc:	1884703a 	and	r2,r3,r2
   140e0:	81400217 	ldw	r5,8(r16)
   140e4:	8085883a 	add	r2,r16,r2
   140e8:	10c00117 	ldw	r3,4(r2)
   140ec:	29000315 	stw	r4,12(r5)
   140f0:	21400215 	stw	r5,8(r4)
   140f4:	18c00054 	ori	r3,r3,1
   140f8:	10c00115 	stw	r3,4(r2)
   140fc:	9009883a 	mov	r4,r18
   14100:	00151780 	call	15178 <__malloc_unlock>
   14104:	80800204 	addi	r2,r16,8
   14108:	dfc00a17 	ldw	ra,40(sp)
   1410c:	df000917 	ldw	fp,36(sp)
   14110:	ddc00817 	ldw	r23,32(sp)
   14114:	dd800717 	ldw	r22,28(sp)
   14118:	dd400617 	ldw	r21,24(sp)
   1411c:	dd000517 	ldw	r20,20(sp)
   14120:	dcc00417 	ldw	r19,16(sp)
   14124:	dc800317 	ldw	r18,12(sp)
   14128:	dc400217 	ldw	r17,8(sp)
   1412c:	dc000117 	ldw	r16,4(sp)
   14130:	dec00b04 	addi	sp,sp,44
   14134:	f800283a 	ret
   14138:	00800304 	movi	r2,12
   1413c:	90800015 	stw	r2,0(r18)
   14140:	0005883a 	mov	r2,zero
   14144:	003ff006 	br	14108 <_gp+0xffff514c>
   14148:	01002004 	movi	r4,128
   1414c:	02001004 	movi	r8,64
   14150:	01c00fc4 	movi	r7,63
   14154:	003f6106 	br	13edc <_gp+0xffff4f20>
   14158:	4009883a 	mov	r4,r8
   1415c:	003f7506 	br	13f34 <_gp+0xffff4f78>
   14160:	81000317 	ldw	r4,12(r16)
   14164:	003fde06 	br	140e0 <_gp+0xffff5124>
   14168:	81c5883a 	add	r2,r16,r7
   1416c:	11400117 	ldw	r5,4(r2)
   14170:	9009883a 	mov	r4,r18
   14174:	29400054 	ori	r5,r5,1
   14178:	11400115 	stw	r5,4(r2)
   1417c:	00151780 	call	15178 <__malloc_unlock>
   14180:	80800204 	addi	r2,r16,8
   14184:	003fe006 	br	14108 <_gp+0xffff514c>
   14188:	9c000217 	ldw	r16,8(r19)
   1418c:	00bfff04 	movi	r2,-4
   14190:	85800117 	ldw	r22,4(r16)
   14194:	b0ac703a 	and	r22,r22,r2
   14198:	b4400336 	bltu	r22,r17,141a8 <_malloc_r+0x344>
   1419c:	b445c83a 	sub	r2,r22,r17
   141a0:	00c003c4 	movi	r3,15
   141a4:	18805d16 	blt	r3,r2,1431c <_malloc_r+0x4b8>
   141a8:	05c00074 	movhi	r23,1
   141ac:	008000b4 	movhi	r2,2
   141b0:	10a2b804 	addi	r2,r2,-29984
   141b4:	bddbfa04 	addi	r23,r23,28648
   141b8:	15400017 	ldw	r21,0(r2)
   141bc:	b8c00017 	ldw	r3,0(r23)
   141c0:	00bfffc4 	movi	r2,-1
   141c4:	858d883a 	add	r6,r16,r22
   141c8:	8d6b883a 	add	r21,r17,r21
   141cc:	1880ea26 	beq	r3,r2,14578 <_malloc_r+0x714>
   141d0:	ad4403c4 	addi	r21,r21,4111
   141d4:	00bc0004 	movi	r2,-4096
   141d8:	a8aa703a 	and	r21,r21,r2
   141dc:	a80b883a 	mov	r5,r21
   141e0:	9009883a 	mov	r4,r18
   141e4:	d9800015 	stw	r6,0(sp)
   141e8:	00147980 	call	14798 <_sbrk_r>
   141ec:	1029883a 	mov	r20,r2
   141f0:	00bfffc4 	movi	r2,-1
   141f4:	d9800017 	ldw	r6,0(sp)
   141f8:	a080e826 	beq	r20,r2,1459c <_malloc_r+0x738>
   141fc:	a180a636 	bltu	r20,r6,14498 <_malloc_r+0x634>
   14200:	070000b4 	movhi	fp,2
   14204:	e722b904 	addi	fp,fp,-29980
   14208:	e0800017 	ldw	r2,0(fp)
   1420c:	a887883a 	add	r3,r21,r2
   14210:	e0c00015 	stw	r3,0(fp)
   14214:	3500e626 	beq	r6,r20,145b0 <_malloc_r+0x74c>
   14218:	b9000017 	ldw	r4,0(r23)
   1421c:	00bfffc4 	movi	r2,-1
   14220:	2080ee26 	beq	r4,r2,145dc <_malloc_r+0x778>
   14224:	a185c83a 	sub	r2,r20,r6
   14228:	10c5883a 	add	r2,r2,r3
   1422c:	e0800015 	stw	r2,0(fp)
   14230:	a0c001cc 	andi	r3,r20,7
   14234:	1800bc26 	beq	r3,zero,14528 <_malloc_r+0x6c4>
   14238:	a0e9c83a 	sub	r20,r20,r3
   1423c:	00840204 	movi	r2,4104
   14240:	a5000204 	addi	r20,r20,8
   14244:	10c7c83a 	sub	r3,r2,r3
   14248:	a545883a 	add	r2,r20,r21
   1424c:	1083ffcc 	andi	r2,r2,4095
   14250:	18abc83a 	sub	r21,r3,r2
   14254:	a80b883a 	mov	r5,r21
   14258:	9009883a 	mov	r4,r18
   1425c:	00147980 	call	14798 <_sbrk_r>
   14260:	00ffffc4 	movi	r3,-1
   14264:	10c0e126 	beq	r2,r3,145ec <_malloc_r+0x788>
   14268:	1505c83a 	sub	r2,r2,r20
   1426c:	1545883a 	add	r2,r2,r21
   14270:	10800054 	ori	r2,r2,1
   14274:	e0c00017 	ldw	r3,0(fp)
   14278:	9d000215 	stw	r20,8(r19)
   1427c:	a0800115 	stw	r2,4(r20)
   14280:	a8c7883a 	add	r3,r21,r3
   14284:	e0c00015 	stw	r3,0(fp)
   14288:	84c00e26 	beq	r16,r19,142c4 <_malloc_r+0x460>
   1428c:	018003c4 	movi	r6,15
   14290:	3580a72e 	bgeu	r6,r22,14530 <_malloc_r+0x6cc>
   14294:	81400117 	ldw	r5,4(r16)
   14298:	013ffe04 	movi	r4,-8
   1429c:	b0bffd04 	addi	r2,r22,-12
   142a0:	1104703a 	and	r2,r2,r4
   142a4:	2900004c 	andi	r4,r5,1
   142a8:	2088b03a 	or	r4,r4,r2
   142ac:	81000115 	stw	r4,4(r16)
   142b0:	01400144 	movi	r5,5
   142b4:	8089883a 	add	r4,r16,r2
   142b8:	21400115 	stw	r5,4(r4)
   142bc:	21400215 	stw	r5,8(r4)
   142c0:	3080cd36 	bltu	r6,r2,145f8 <_malloc_r+0x794>
   142c4:	008000b4 	movhi	r2,2
   142c8:	10a2b704 	addi	r2,r2,-29988
   142cc:	11000017 	ldw	r4,0(r2)
   142d0:	20c0012e 	bgeu	r4,r3,142d8 <_malloc_r+0x474>
   142d4:	10c00015 	stw	r3,0(r2)
   142d8:	008000b4 	movhi	r2,2
   142dc:	10a2b604 	addi	r2,r2,-29992
   142e0:	11000017 	ldw	r4,0(r2)
   142e4:	9c000217 	ldw	r16,8(r19)
   142e8:	20c0012e 	bgeu	r4,r3,142f0 <_malloc_r+0x48c>
   142ec:	10c00015 	stw	r3,0(r2)
   142f0:	80c00117 	ldw	r3,4(r16)
   142f4:	00bfff04 	movi	r2,-4
   142f8:	1886703a 	and	r3,r3,r2
   142fc:	1c45c83a 	sub	r2,r3,r17
   14300:	1c400236 	bltu	r3,r17,1430c <_malloc_r+0x4a8>
   14304:	00c003c4 	movi	r3,15
   14308:	18800416 	blt	r3,r2,1431c <_malloc_r+0x4b8>
   1430c:	9009883a 	mov	r4,r18
   14310:	00151780 	call	15178 <__malloc_unlock>
   14314:	0005883a 	mov	r2,zero
   14318:	003f7b06 	br	14108 <_gp+0xffff514c>
   1431c:	88c00054 	ori	r3,r17,1
   14320:	80c00115 	stw	r3,4(r16)
   14324:	8463883a 	add	r17,r16,r17
   14328:	10800054 	ori	r2,r2,1
   1432c:	9c400215 	stw	r17,8(r19)
   14330:	88800115 	stw	r2,4(r17)
   14334:	9009883a 	mov	r4,r18
   14338:	00151780 	call	15178 <__malloc_unlock>
   1433c:	80800204 	addi	r2,r16,8
   14340:	003f7106 	br	14108 <_gp+0xffff514c>
   14344:	00c00504 	movi	r3,20
   14348:	18804a2e 	bgeu	r3,r2,14474 <_malloc_r+0x610>
   1434c:	00c01504 	movi	r3,84
   14350:	18806e36 	bltu	r3,r2,1450c <_malloc_r+0x6a8>
   14354:	8804d33a 	srli	r2,r17,12
   14358:	12001bc4 	addi	r8,r2,111
   1435c:	11c01b84 	addi	r7,r2,110
   14360:	4209883a 	add	r4,r8,r8
   14364:	003edd06 	br	13edc <_gp+0xffff4f20>
   14368:	3804d27a 	srli	r2,r7,9
   1436c:	00c00104 	movi	r3,4
   14370:	1880442e 	bgeu	r3,r2,14484 <_malloc_r+0x620>
   14374:	00c00504 	movi	r3,20
   14378:	18808136 	bltu	r3,r2,14580 <_malloc_r+0x71c>
   1437c:	11401704 	addi	r5,r2,92
   14380:	10c016c4 	addi	r3,r2,91
   14384:	294b883a 	add	r5,r5,r5
   14388:	294b883a 	add	r5,r5,r5
   1438c:	294b883a 	add	r5,r5,r5
   14390:	994b883a 	add	r5,r19,r5
   14394:	28800017 	ldw	r2,0(r5)
   14398:	01800074 	movhi	r6,1
   1439c:	297ffe04 	addi	r5,r5,-8
   143a0:	319aed04 	addi	r6,r6,27572
   143a4:	28806526 	beq	r5,r2,1453c <_malloc_r+0x6d8>
   143a8:	01bfff04 	movi	r6,-4
   143ac:	10c00117 	ldw	r3,4(r2)
   143b0:	1986703a 	and	r3,r3,r6
   143b4:	38c0022e 	bgeu	r7,r3,143c0 <_malloc_r+0x55c>
   143b8:	10800217 	ldw	r2,8(r2)
   143bc:	28bffb1e 	bne	r5,r2,143ac <_gp+0xffff53f0>
   143c0:	11400317 	ldw	r5,12(r2)
   143c4:	98c00117 	ldw	r3,4(r19)
   143c8:	81400315 	stw	r5,12(r16)
   143cc:	80800215 	stw	r2,8(r16)
   143d0:	2c000215 	stw	r16,8(r5)
   143d4:	14000315 	stw	r16,12(r2)
   143d8:	003ef806 	br	13fbc <_gp+0xffff5000>
   143dc:	88c00054 	ori	r3,r17,1
   143e0:	80c00115 	stw	r3,4(r16)
   143e4:	8463883a 	add	r17,r16,r17
   143e8:	34400515 	stw	r17,20(r6)
   143ec:	34400415 	stw	r17,16(r6)
   143f0:	10c00054 	ori	r3,r2,1
   143f4:	8a000315 	stw	r8,12(r17)
   143f8:	8a000215 	stw	r8,8(r17)
   143fc:	88c00115 	stw	r3,4(r17)
   14400:	88a3883a 	add	r17,r17,r2
   14404:	88800015 	stw	r2,0(r17)
   14408:	9009883a 	mov	r4,r18
   1440c:	00151780 	call	15178 <__malloc_unlock>
   14410:	80800204 	addi	r2,r16,8
   14414:	003f3c06 	br	14108 <_gp+0xffff514c>
   14418:	30c00117 	ldw	r3,4(r6)
   1441c:	003ee706 	br	13fbc <_gp+0xffff5000>
   14420:	5ac00044 	addi	r11,r11,1
   14424:	588000cc 	andi	r2,r11,3
   14428:	31800204 	addi	r6,r6,8
   1442c:	103efd1e 	bne	r2,zero,14024 <_gp+0xffff5068>
   14430:	00002406 	br	144c4 <_malloc_r+0x660>
   14434:	14000317 	ldw	r16,12(r2)
   14438:	143f251e 	bne	r2,r16,140d0 <_gp+0xffff5114>
   1443c:	21000084 	addi	r4,r4,2
   14440:	003ebc06 	br	13f34 <_gp+0xffff4f78>
   14444:	8085883a 	add	r2,r16,r2
   14448:	10c00117 	ldw	r3,4(r2)
   1444c:	81000317 	ldw	r4,12(r16)
   14450:	81400217 	ldw	r5,8(r16)
   14454:	18c00054 	ori	r3,r3,1
   14458:	10c00115 	stw	r3,4(r2)
   1445c:	29000315 	stw	r4,12(r5)
   14460:	21400215 	stw	r5,8(r4)
   14464:	9009883a 	mov	r4,r18
   14468:	00151780 	call	15178 <__malloc_unlock>
   1446c:	80800204 	addi	r2,r16,8
   14470:	003f2506 	br	14108 <_gp+0xffff514c>
   14474:	12001704 	addi	r8,r2,92
   14478:	11c016c4 	addi	r7,r2,91
   1447c:	4209883a 	add	r4,r8,r8
   14480:	003e9606 	br	13edc <_gp+0xffff4f20>
   14484:	3804d1ba 	srli	r2,r7,6
   14488:	11400e44 	addi	r5,r2,57
   1448c:	10c00e04 	addi	r3,r2,56
   14490:	294b883a 	add	r5,r5,r5
   14494:	003fbc06 	br	14388 <_gp+0xffff53cc>
   14498:	84ff5926 	beq	r16,r19,14200 <_gp+0xffff5244>
   1449c:	00800074 	movhi	r2,1
   144a0:	109aed04 	addi	r2,r2,27572
   144a4:	14000217 	ldw	r16,8(r2)
   144a8:	00bfff04 	movi	r2,-4
   144ac:	80c00117 	ldw	r3,4(r16)
   144b0:	1886703a 	and	r3,r3,r2
   144b4:	003f9106 	br	142fc <_gp+0xffff5340>
   144b8:	60800217 	ldw	r2,8(r12)
   144bc:	213fffc4 	addi	r4,r4,-1
   144c0:	1300651e 	bne	r2,r12,14658 <_malloc_r+0x7f4>
   144c4:	208000cc 	andi	r2,r4,3
   144c8:	633ffe04 	addi	r12,r12,-8
   144cc:	103ffa1e 	bne	r2,zero,144b8 <_gp+0xffff54fc>
   144d0:	98800117 	ldw	r2,4(r19)
   144d4:	0146303a 	nor	r3,zero,r5
   144d8:	1884703a 	and	r2,r3,r2
   144dc:	98800115 	stw	r2,4(r19)
   144e0:	294b883a 	add	r5,r5,r5
   144e4:	117f2836 	bltu	r2,r5,14188 <_gp+0xffff51cc>
   144e8:	283f2726 	beq	r5,zero,14188 <_gp+0xffff51cc>
   144ec:	2886703a 	and	r3,r5,r2
   144f0:	5809883a 	mov	r4,r11
   144f4:	183ec31e 	bne	r3,zero,14004 <_gp+0xffff5048>
   144f8:	294b883a 	add	r5,r5,r5
   144fc:	2886703a 	and	r3,r5,r2
   14500:	21000104 	addi	r4,r4,4
   14504:	183ffc26 	beq	r3,zero,144f8 <_gp+0xffff553c>
   14508:	003ebe06 	br	14004 <_gp+0xffff5048>
   1450c:	00c05504 	movi	r3,340
   14510:	18801236 	bltu	r3,r2,1455c <_malloc_r+0x6f8>
   14514:	8804d3fa 	srli	r2,r17,15
   14518:	12001e04 	addi	r8,r2,120
   1451c:	11c01dc4 	addi	r7,r2,119
   14520:	4209883a 	add	r4,r8,r8
   14524:	003e6d06 	br	13edc <_gp+0xffff4f20>
   14528:	00c40004 	movi	r3,4096
   1452c:	003f4606 	br	14248 <_gp+0xffff528c>
   14530:	00800044 	movi	r2,1
   14534:	a0800115 	stw	r2,4(r20)
   14538:	003f7406 	br	1430c <_gp+0xffff5350>
   1453c:	1805d0ba 	srai	r2,r3,2
   14540:	01c00044 	movi	r7,1
   14544:	30c00117 	ldw	r3,4(r6)
   14548:	388e983a 	sll	r7,r7,r2
   1454c:	2805883a 	mov	r2,r5
   14550:	38c6b03a 	or	r3,r7,r3
   14554:	30c00115 	stw	r3,4(r6)
   14558:	003f9b06 	br	143c8 <_gp+0xffff540c>
   1455c:	00c15504 	movi	r3,1364
   14560:	18801a36 	bltu	r3,r2,145cc <_malloc_r+0x768>
   14564:	8804d4ba 	srli	r2,r17,18
   14568:	12001f44 	addi	r8,r2,125
   1456c:	11c01f04 	addi	r7,r2,124
   14570:	4209883a 	add	r4,r8,r8
   14574:	003e5906 	br	13edc <_gp+0xffff4f20>
   14578:	ad400404 	addi	r21,r21,16
   1457c:	003f1706 	br	141dc <_gp+0xffff5220>
   14580:	00c01504 	movi	r3,84
   14584:	18802336 	bltu	r3,r2,14614 <_malloc_r+0x7b0>
   14588:	3804d33a 	srli	r2,r7,12
   1458c:	11401bc4 	addi	r5,r2,111
   14590:	10c01b84 	addi	r3,r2,110
   14594:	294b883a 	add	r5,r5,r5
   14598:	003f7b06 	br	14388 <_gp+0xffff53cc>
   1459c:	9c000217 	ldw	r16,8(r19)
   145a0:	00bfff04 	movi	r2,-4
   145a4:	80c00117 	ldw	r3,4(r16)
   145a8:	1886703a 	and	r3,r3,r2
   145ac:	003f5306 	br	142fc <_gp+0xffff5340>
   145b0:	3083ffcc 	andi	r2,r6,4095
   145b4:	103f181e 	bne	r2,zero,14218 <_gp+0xffff525c>
   145b8:	99000217 	ldw	r4,8(r19)
   145bc:	b545883a 	add	r2,r22,r21
   145c0:	10800054 	ori	r2,r2,1
   145c4:	20800115 	stw	r2,4(r4)
   145c8:	003f3e06 	br	142c4 <_gp+0xffff5308>
   145cc:	01003f84 	movi	r4,254
   145d0:	02001fc4 	movi	r8,127
   145d4:	01c01f84 	movi	r7,126
   145d8:	003e4006 	br	13edc <_gp+0xffff4f20>
   145dc:	00800074 	movhi	r2,1
   145e0:	109bfa04 	addi	r2,r2,28648
   145e4:	15000015 	stw	r20,0(r2)
   145e8:	003f1106 	br	14230 <_gp+0xffff5274>
   145ec:	00800044 	movi	r2,1
   145f0:	002b883a 	mov	r21,zero
   145f4:	003f1f06 	br	14274 <_gp+0xffff52b8>
   145f8:	81400204 	addi	r5,r16,8
   145fc:	9009883a 	mov	r4,r18
   14600:	00138100 	call	13810 <_free_r>
   14604:	008000b4 	movhi	r2,2
   14608:	10a2b904 	addi	r2,r2,-29980
   1460c:	10c00017 	ldw	r3,0(r2)
   14610:	003f2c06 	br	142c4 <_gp+0xffff5308>
   14614:	00c05504 	movi	r3,340
   14618:	18800536 	bltu	r3,r2,14630 <_malloc_r+0x7cc>
   1461c:	3804d3fa 	srli	r2,r7,15
   14620:	11401e04 	addi	r5,r2,120
   14624:	10c01dc4 	addi	r3,r2,119
   14628:	294b883a 	add	r5,r5,r5
   1462c:	003f5606 	br	14388 <_gp+0xffff53cc>
   14630:	00c15504 	movi	r3,1364
   14634:	18800536 	bltu	r3,r2,1464c <_malloc_r+0x7e8>
   14638:	3804d4ba 	srli	r2,r7,18
   1463c:	11401f44 	addi	r5,r2,125
   14640:	10c01f04 	addi	r3,r2,124
   14644:	294b883a 	add	r5,r5,r5
   14648:	003f4f06 	br	14388 <_gp+0xffff53cc>
   1464c:	01403f84 	movi	r5,254
   14650:	00c01f84 	movi	r3,126
   14654:	003f4c06 	br	14388 <_gp+0xffff53cc>
   14658:	98800117 	ldw	r2,4(r19)
   1465c:	003fa006 	br	144e0 <_gp+0xffff5524>
   14660:	8808d0fa 	srli	r4,r17,3
   14664:	20800044 	addi	r2,r4,1
   14668:	1085883a 	add	r2,r2,r2
   1466c:	003e9006 	br	140b0 <_gp+0xffff50f4>

00014670 <memset>:
   14670:	20c000cc 	andi	r3,r4,3
   14674:	2005883a 	mov	r2,r4
   14678:	18004426 	beq	r3,zero,1478c <memset+0x11c>
   1467c:	31ffffc4 	addi	r7,r6,-1
   14680:	30004026 	beq	r6,zero,14784 <memset+0x114>
   14684:	2813883a 	mov	r9,r5
   14688:	200d883a 	mov	r6,r4
   1468c:	2007883a 	mov	r3,r4
   14690:	00000406 	br	146a4 <memset+0x34>
   14694:	3a3fffc4 	addi	r8,r7,-1
   14698:	31800044 	addi	r6,r6,1
   1469c:	38003926 	beq	r7,zero,14784 <memset+0x114>
   146a0:	400f883a 	mov	r7,r8
   146a4:	18c00044 	addi	r3,r3,1
   146a8:	32400005 	stb	r9,0(r6)
   146ac:	1a0000cc 	andi	r8,r3,3
   146b0:	403ff81e 	bne	r8,zero,14694 <_gp+0xffff56d8>
   146b4:	010000c4 	movi	r4,3
   146b8:	21c02d2e 	bgeu	r4,r7,14770 <memset+0x100>
   146bc:	29003fcc 	andi	r4,r5,255
   146c0:	200c923a 	slli	r6,r4,8
   146c4:	3108b03a 	or	r4,r6,r4
   146c8:	200c943a 	slli	r6,r4,16
   146cc:	218cb03a 	or	r6,r4,r6
   146d0:	010003c4 	movi	r4,15
   146d4:	21c0182e 	bgeu	r4,r7,14738 <memset+0xc8>
   146d8:	3b3ffc04 	addi	r12,r7,-16
   146dc:	6018d13a 	srli	r12,r12,4
   146e0:	1a000104 	addi	r8,r3,4
   146e4:	1ac00204 	addi	r11,r3,8
   146e8:	6008913a 	slli	r4,r12,4
   146ec:	1a800304 	addi	r10,r3,12
   146f0:	1813883a 	mov	r9,r3
   146f4:	21000504 	addi	r4,r4,20
   146f8:	1909883a 	add	r4,r3,r4
   146fc:	49800015 	stw	r6,0(r9)
   14700:	41800015 	stw	r6,0(r8)
   14704:	59800015 	stw	r6,0(r11)
   14708:	51800015 	stw	r6,0(r10)
   1470c:	42000404 	addi	r8,r8,16
   14710:	4a400404 	addi	r9,r9,16
   14714:	5ac00404 	addi	r11,r11,16
   14718:	52800404 	addi	r10,r10,16
   1471c:	413ff71e 	bne	r8,r4,146fc <_gp+0xffff5740>
   14720:	63000044 	addi	r12,r12,1
   14724:	6018913a 	slli	r12,r12,4
   14728:	39c003cc 	andi	r7,r7,15
   1472c:	010000c4 	movi	r4,3
   14730:	1b07883a 	add	r3,r3,r12
   14734:	21c00e2e 	bgeu	r4,r7,14770 <memset+0x100>
   14738:	1813883a 	mov	r9,r3
   1473c:	3811883a 	mov	r8,r7
   14740:	010000c4 	movi	r4,3
   14744:	49800015 	stw	r6,0(r9)
   14748:	423fff04 	addi	r8,r8,-4
   1474c:	4a400104 	addi	r9,r9,4
   14750:	223ffc36 	bltu	r4,r8,14744 <_gp+0xffff5788>
   14754:	393fff04 	addi	r4,r7,-4
   14758:	2008d0ba 	srli	r4,r4,2
   1475c:	39c000cc 	andi	r7,r7,3
   14760:	21000044 	addi	r4,r4,1
   14764:	2109883a 	add	r4,r4,r4
   14768:	2109883a 	add	r4,r4,r4
   1476c:	1907883a 	add	r3,r3,r4
   14770:	38000526 	beq	r7,zero,14788 <memset+0x118>
   14774:	19cf883a 	add	r7,r3,r7
   14778:	19400005 	stb	r5,0(r3)
   1477c:	18c00044 	addi	r3,r3,1
   14780:	38fffd1e 	bne	r7,r3,14778 <_gp+0xffff57bc>
   14784:	f800283a 	ret
   14788:	f800283a 	ret
   1478c:	2007883a 	mov	r3,r4
   14790:	300f883a 	mov	r7,r6
   14794:	003fc706 	br	146b4 <_gp+0xffff56f8>

00014798 <_sbrk_r>:
   14798:	defffd04 	addi	sp,sp,-12
   1479c:	dc000015 	stw	r16,0(sp)
   147a0:	040000b4 	movhi	r16,2
   147a4:	dc400115 	stw	r17,4(sp)
   147a8:	8422b504 	addi	r16,r16,-29996
   147ac:	2023883a 	mov	r17,r4
   147b0:	2809883a 	mov	r4,r5
   147b4:	dfc00215 	stw	ra,8(sp)
   147b8:	80000015 	stw	zero,0(r16)
   147bc:	00152dc0 	call	152dc <sbrk>
   147c0:	00ffffc4 	movi	r3,-1
   147c4:	10c00526 	beq	r2,r3,147dc <_sbrk_r+0x44>
   147c8:	dfc00217 	ldw	ra,8(sp)
   147cc:	dc400117 	ldw	r17,4(sp)
   147d0:	dc000017 	ldw	r16,0(sp)
   147d4:	dec00304 	addi	sp,sp,12
   147d8:	f800283a 	ret
   147dc:	80c00017 	ldw	r3,0(r16)
   147e0:	183ff926 	beq	r3,zero,147c8 <_gp+0xffff580c>
   147e4:	88c00015 	stw	r3,0(r17)
   147e8:	003ff706 	br	147c8 <_gp+0xffff580c>

000147ec <__sread>:
   147ec:	defffe04 	addi	sp,sp,-8
   147f0:	dc000015 	stw	r16,0(sp)
   147f4:	2821883a 	mov	r16,r5
   147f8:	2940038f 	ldh	r5,14(r5)
   147fc:	dfc00115 	stw	ra,4(sp)
   14800:	0014bf00 	call	14bf0 <_read_r>
   14804:	10000716 	blt	r2,zero,14824 <__sread+0x38>
   14808:	80c01417 	ldw	r3,80(r16)
   1480c:	1887883a 	add	r3,r3,r2
   14810:	80c01415 	stw	r3,80(r16)
   14814:	dfc00117 	ldw	ra,4(sp)
   14818:	dc000017 	ldw	r16,0(sp)
   1481c:	dec00204 	addi	sp,sp,8
   14820:	f800283a 	ret
   14824:	80c0030b 	ldhu	r3,12(r16)
   14828:	18fbffcc 	andi	r3,r3,61439
   1482c:	80c0030d 	sth	r3,12(r16)
   14830:	dfc00117 	ldw	ra,4(sp)
   14834:	dc000017 	ldw	r16,0(sp)
   14838:	dec00204 	addi	sp,sp,8
   1483c:	f800283a 	ret

00014840 <__seofread>:
   14840:	0005883a 	mov	r2,zero
   14844:	f800283a 	ret

00014848 <__swrite>:
   14848:	2880030b 	ldhu	r2,12(r5)
   1484c:	defffb04 	addi	sp,sp,-20
   14850:	dcc00315 	stw	r19,12(sp)
   14854:	dc800215 	stw	r18,8(sp)
   14858:	dc400115 	stw	r17,4(sp)
   1485c:	dc000015 	stw	r16,0(sp)
   14860:	dfc00415 	stw	ra,16(sp)
   14864:	10c0400c 	andi	r3,r2,256
   14868:	2821883a 	mov	r16,r5
   1486c:	2023883a 	mov	r17,r4
   14870:	3025883a 	mov	r18,r6
   14874:	3827883a 	mov	r19,r7
   14878:	18000526 	beq	r3,zero,14890 <__swrite+0x48>
   1487c:	2940038f 	ldh	r5,14(r5)
   14880:	01c00084 	movi	r7,2
   14884:	000d883a 	mov	r6,zero
   14888:	0014b900 	call	14b90 <_lseek_r>
   1488c:	8080030b 	ldhu	r2,12(r16)
   14890:	8140038f 	ldh	r5,14(r16)
   14894:	10bbffcc 	andi	r2,r2,61439
   14898:	980f883a 	mov	r7,r19
   1489c:	900d883a 	mov	r6,r18
   148a0:	8809883a 	mov	r4,r17
   148a4:	8080030d 	sth	r2,12(r16)
   148a8:	dfc00417 	ldw	ra,16(sp)
   148ac:	dcc00317 	ldw	r19,12(sp)
   148b0:	dc800217 	ldw	r18,8(sp)
   148b4:	dc400117 	ldw	r17,4(sp)
   148b8:	dc000017 	ldw	r16,0(sp)
   148bc:	dec00504 	addi	sp,sp,20
   148c0:	00149281 	jmpi	14928 <_write_r>

000148c4 <__sseek>:
   148c4:	defffe04 	addi	sp,sp,-8
   148c8:	dc000015 	stw	r16,0(sp)
   148cc:	2821883a 	mov	r16,r5
   148d0:	2940038f 	ldh	r5,14(r5)
   148d4:	dfc00115 	stw	ra,4(sp)
   148d8:	0014b900 	call	14b90 <_lseek_r>
   148dc:	00ffffc4 	movi	r3,-1
   148e0:	10c00826 	beq	r2,r3,14904 <__sseek+0x40>
   148e4:	80c0030b 	ldhu	r3,12(r16)
   148e8:	80801415 	stw	r2,80(r16)
   148ec:	18c40014 	ori	r3,r3,4096
   148f0:	80c0030d 	sth	r3,12(r16)
   148f4:	dfc00117 	ldw	ra,4(sp)
   148f8:	dc000017 	ldw	r16,0(sp)
   148fc:	dec00204 	addi	sp,sp,8
   14900:	f800283a 	ret
   14904:	80c0030b 	ldhu	r3,12(r16)
   14908:	18fbffcc 	andi	r3,r3,61439
   1490c:	80c0030d 	sth	r3,12(r16)
   14910:	dfc00117 	ldw	ra,4(sp)
   14914:	dc000017 	ldw	r16,0(sp)
   14918:	dec00204 	addi	sp,sp,8
   1491c:	f800283a 	ret

00014920 <__sclose>:
   14920:	2940038f 	ldh	r5,14(r5)
   14924:	00149881 	jmpi	14988 <_close_r>

00014928 <_write_r>:
   14928:	defffd04 	addi	sp,sp,-12
   1492c:	2805883a 	mov	r2,r5
   14930:	dc000015 	stw	r16,0(sp)
   14934:	040000b4 	movhi	r16,2
   14938:	dc400115 	stw	r17,4(sp)
   1493c:	300b883a 	mov	r5,r6
   14940:	8422b504 	addi	r16,r16,-29996
   14944:	2023883a 	mov	r17,r4
   14948:	380d883a 	mov	r6,r7
   1494c:	1009883a 	mov	r4,r2
   14950:	dfc00215 	stw	ra,8(sp)
   14954:	80000015 	stw	zero,0(r16)
   14958:	00153c80 	call	153c8 <write>
   1495c:	00ffffc4 	movi	r3,-1
   14960:	10c00526 	beq	r2,r3,14978 <_write_r+0x50>
   14964:	dfc00217 	ldw	ra,8(sp)
   14968:	dc400117 	ldw	r17,4(sp)
   1496c:	dc000017 	ldw	r16,0(sp)
   14970:	dec00304 	addi	sp,sp,12
   14974:	f800283a 	ret
   14978:	80c00017 	ldw	r3,0(r16)
   1497c:	183ff926 	beq	r3,zero,14964 <_gp+0xffff59a8>
   14980:	88c00015 	stw	r3,0(r17)
   14984:	003ff706 	br	14964 <_gp+0xffff59a8>

00014988 <_close_r>:
   14988:	defffd04 	addi	sp,sp,-12
   1498c:	dc000015 	stw	r16,0(sp)
   14990:	040000b4 	movhi	r16,2
   14994:	dc400115 	stw	r17,4(sp)
   14998:	8422b504 	addi	r16,r16,-29996
   1499c:	2023883a 	mov	r17,r4
   149a0:	2809883a 	mov	r4,r5
   149a4:	dfc00215 	stw	ra,8(sp)
   149a8:	80000015 	stw	zero,0(r16)
   149ac:	00119b40 	call	119b4 <close>
   149b0:	00ffffc4 	movi	r3,-1
   149b4:	10c00526 	beq	r2,r3,149cc <_close_r+0x44>
   149b8:	dfc00217 	ldw	ra,8(sp)
   149bc:	dc400117 	ldw	r17,4(sp)
   149c0:	dc000017 	ldw	r16,0(sp)
   149c4:	dec00304 	addi	sp,sp,12
   149c8:	f800283a 	ret
   149cc:	80c00017 	ldw	r3,0(r16)
   149d0:	183ff926 	beq	r3,zero,149b8 <_gp+0xffff59fc>
   149d4:	88c00015 	stw	r3,0(r17)
   149d8:	003ff706 	br	149b8 <_gp+0xffff59fc>

000149dc <_fclose_r>:
   149dc:	28003926 	beq	r5,zero,14ac4 <_fclose_r+0xe8>
   149e0:	defffc04 	addi	sp,sp,-16
   149e4:	dc400115 	stw	r17,4(sp)
   149e8:	dc000015 	stw	r16,0(sp)
   149ec:	dfc00315 	stw	ra,12(sp)
   149f0:	dc800215 	stw	r18,8(sp)
   149f4:	2023883a 	mov	r17,r4
   149f8:	2821883a 	mov	r16,r5
   149fc:	20000226 	beq	r4,zero,14a08 <_fclose_r+0x2c>
   14a00:	20800e17 	ldw	r2,56(r4)
   14a04:	10002726 	beq	r2,zero,14aa4 <_fclose_r+0xc8>
   14a08:	8080030f 	ldh	r2,12(r16)
   14a0c:	1000071e 	bne	r2,zero,14a2c <_fclose_r+0x50>
   14a10:	0005883a 	mov	r2,zero
   14a14:	dfc00317 	ldw	ra,12(sp)
   14a18:	dc800217 	ldw	r18,8(sp)
   14a1c:	dc400117 	ldw	r17,4(sp)
   14a20:	dc000017 	ldw	r16,0(sp)
   14a24:	dec00404 	addi	sp,sp,16
   14a28:	f800283a 	ret
   14a2c:	800b883a 	mov	r5,r16
   14a30:	8809883a 	mov	r4,r17
   14a34:	00130940 	call	13094 <__sflush_r>
   14a38:	1025883a 	mov	r18,r2
   14a3c:	80800b17 	ldw	r2,44(r16)
   14a40:	10000426 	beq	r2,zero,14a54 <_fclose_r+0x78>
   14a44:	81400717 	ldw	r5,28(r16)
   14a48:	8809883a 	mov	r4,r17
   14a4c:	103ee83a 	callr	r2
   14a50:	10001616 	blt	r2,zero,14aac <_fclose_r+0xd0>
   14a54:	8080030b 	ldhu	r2,12(r16)
   14a58:	1080200c 	andi	r2,r2,128
   14a5c:	1000151e 	bne	r2,zero,14ab4 <_fclose_r+0xd8>
   14a60:	81400c17 	ldw	r5,48(r16)
   14a64:	28000526 	beq	r5,zero,14a7c <_fclose_r+0xa0>
   14a68:	80801004 	addi	r2,r16,64
   14a6c:	28800226 	beq	r5,r2,14a78 <_fclose_r+0x9c>
   14a70:	8809883a 	mov	r4,r17
   14a74:	00138100 	call	13810 <_free_r>
   14a78:	80000c15 	stw	zero,48(r16)
   14a7c:	81401117 	ldw	r5,68(r16)
   14a80:	28000326 	beq	r5,zero,14a90 <_fclose_r+0xb4>
   14a84:	8809883a 	mov	r4,r17
   14a88:	00138100 	call	13810 <_free_r>
   14a8c:	80001115 	stw	zero,68(r16)
   14a90:	00136ac0 	call	136ac <__sfp_lock_acquire>
   14a94:	8000030d 	sth	zero,12(r16)
   14a98:	00136b00 	call	136b0 <__sfp_lock_release>
   14a9c:	9005883a 	mov	r2,r18
   14aa0:	003fdc06 	br	14a14 <_gp+0xffff5a58>
   14aa4:	001369c0 	call	1369c <__sinit>
   14aa8:	003fd706 	br	14a08 <_gp+0xffff5a4c>
   14aac:	04bfffc4 	movi	r18,-1
   14ab0:	003fe806 	br	14a54 <_gp+0xffff5a98>
   14ab4:	81400417 	ldw	r5,16(r16)
   14ab8:	8809883a 	mov	r4,r17
   14abc:	00138100 	call	13810 <_free_r>
   14ac0:	003fe706 	br	14a60 <_gp+0xffff5aa4>
   14ac4:	0005883a 	mov	r2,zero
   14ac8:	f800283a 	ret

00014acc <fclose>:
   14acc:	00800074 	movhi	r2,1
   14ad0:	109bf904 	addi	r2,r2,28644
   14ad4:	200b883a 	mov	r5,r4
   14ad8:	11000017 	ldw	r4,0(r2)
   14adc:	00149dc1 	jmpi	149dc <_fclose_r>

00014ae0 <_fstat_r>:
   14ae0:	defffd04 	addi	sp,sp,-12
   14ae4:	2805883a 	mov	r2,r5
   14ae8:	dc000015 	stw	r16,0(sp)
   14aec:	040000b4 	movhi	r16,2
   14af0:	dc400115 	stw	r17,4(sp)
   14af4:	8422b504 	addi	r16,r16,-29996
   14af8:	2023883a 	mov	r17,r4
   14afc:	300b883a 	mov	r5,r6
   14b00:	1009883a 	mov	r4,r2
   14b04:	dfc00215 	stw	ra,8(sp)
   14b08:	80000015 	stw	zero,0(r16)
   14b0c:	0014e9c0 	call	14e9c <fstat>
   14b10:	00ffffc4 	movi	r3,-1
   14b14:	10c00526 	beq	r2,r3,14b2c <_fstat_r+0x4c>
   14b18:	dfc00217 	ldw	ra,8(sp)
   14b1c:	dc400117 	ldw	r17,4(sp)
   14b20:	dc000017 	ldw	r16,0(sp)
   14b24:	dec00304 	addi	sp,sp,12
   14b28:	f800283a 	ret
   14b2c:	80c00017 	ldw	r3,0(r16)
   14b30:	183ff926 	beq	r3,zero,14b18 <_gp+0xffff5b5c>
   14b34:	88c00015 	stw	r3,0(r17)
   14b38:	003ff706 	br	14b18 <_gp+0xffff5b5c>

00014b3c <_isatty_r>:
   14b3c:	defffd04 	addi	sp,sp,-12
   14b40:	dc000015 	stw	r16,0(sp)
   14b44:	040000b4 	movhi	r16,2
   14b48:	dc400115 	stw	r17,4(sp)
   14b4c:	8422b504 	addi	r16,r16,-29996
   14b50:	2023883a 	mov	r17,r4
   14b54:	2809883a 	mov	r4,r5
   14b58:	dfc00215 	stw	ra,8(sp)
   14b5c:	80000015 	stw	zero,0(r16)
   14b60:	0014f900 	call	14f90 <isatty>
   14b64:	00ffffc4 	movi	r3,-1
   14b68:	10c00526 	beq	r2,r3,14b80 <_isatty_r+0x44>
   14b6c:	dfc00217 	ldw	ra,8(sp)
   14b70:	dc400117 	ldw	r17,4(sp)
   14b74:	dc000017 	ldw	r16,0(sp)
   14b78:	dec00304 	addi	sp,sp,12
   14b7c:	f800283a 	ret
   14b80:	80c00017 	ldw	r3,0(r16)
   14b84:	183ff926 	beq	r3,zero,14b6c <_gp+0xffff5bb0>
   14b88:	88c00015 	stw	r3,0(r17)
   14b8c:	003ff706 	br	14b6c <_gp+0xffff5bb0>

00014b90 <_lseek_r>:
   14b90:	defffd04 	addi	sp,sp,-12
   14b94:	2805883a 	mov	r2,r5
   14b98:	dc000015 	stw	r16,0(sp)
   14b9c:	040000b4 	movhi	r16,2
   14ba0:	dc400115 	stw	r17,4(sp)
   14ba4:	300b883a 	mov	r5,r6
   14ba8:	8422b504 	addi	r16,r16,-29996
   14bac:	2023883a 	mov	r17,r4
   14bb0:	380d883a 	mov	r6,r7
   14bb4:	1009883a 	mov	r4,r2
   14bb8:	dfc00215 	stw	ra,8(sp)
   14bbc:	80000015 	stw	zero,0(r16)
   14bc0:	00150780 	call	15078 <lseek>
   14bc4:	00ffffc4 	movi	r3,-1
   14bc8:	10c00526 	beq	r2,r3,14be0 <_lseek_r+0x50>
   14bcc:	dfc00217 	ldw	ra,8(sp)
   14bd0:	dc400117 	ldw	r17,4(sp)
   14bd4:	dc000017 	ldw	r16,0(sp)
   14bd8:	dec00304 	addi	sp,sp,12
   14bdc:	f800283a 	ret
   14be0:	80c00017 	ldw	r3,0(r16)
   14be4:	183ff926 	beq	r3,zero,14bcc <_gp+0xffff5c10>
   14be8:	88c00015 	stw	r3,0(r17)
   14bec:	003ff706 	br	14bcc <_gp+0xffff5c10>

00014bf0 <_read_r>:
   14bf0:	defffd04 	addi	sp,sp,-12
   14bf4:	2805883a 	mov	r2,r5
   14bf8:	dc000015 	stw	r16,0(sp)
   14bfc:	040000b4 	movhi	r16,2
   14c00:	dc400115 	stw	r17,4(sp)
   14c04:	300b883a 	mov	r5,r6
   14c08:	8422b504 	addi	r16,r16,-29996
   14c0c:	2023883a 	mov	r17,r4
   14c10:	380d883a 	mov	r6,r7
   14c14:	1009883a 	mov	r4,r2
   14c18:	dfc00215 	stw	ra,8(sp)
   14c1c:	80000015 	stw	zero,0(r16)
   14c20:	00151d80 	call	151d8 <read>
   14c24:	00ffffc4 	movi	r3,-1
   14c28:	10c00526 	beq	r2,r3,14c40 <_read_r+0x50>
   14c2c:	dfc00217 	ldw	ra,8(sp)
   14c30:	dc400117 	ldw	r17,4(sp)
   14c34:	dc000017 	ldw	r16,0(sp)
   14c38:	dec00304 	addi	sp,sp,12
   14c3c:	f800283a 	ret
   14c40:	80c00017 	ldw	r3,0(r16)
   14c44:	183ff926 	beq	r3,zero,14c2c <_gp+0xffff5c70>
   14c48:	88c00015 	stw	r3,0(r17)
   14c4c:	003ff706 	br	14c2c <_gp+0xffff5c70>

00014c50 <__divsi3>:
   14c50:	20001b16 	blt	r4,zero,14cc0 <__divsi3+0x70>
   14c54:	000f883a 	mov	r7,zero
   14c58:	28001616 	blt	r5,zero,14cb4 <__divsi3+0x64>
   14c5c:	200d883a 	mov	r6,r4
   14c60:	29001a2e 	bgeu	r5,r4,14ccc <__divsi3+0x7c>
   14c64:	00800804 	movi	r2,32
   14c68:	00c00044 	movi	r3,1
   14c6c:	00000106 	br	14c74 <__divsi3+0x24>
   14c70:	10000d26 	beq	r2,zero,14ca8 <__divsi3+0x58>
   14c74:	294b883a 	add	r5,r5,r5
   14c78:	10bfffc4 	addi	r2,r2,-1
   14c7c:	18c7883a 	add	r3,r3,r3
   14c80:	293ffb36 	bltu	r5,r4,14c70 <_gp+0xffff5cb4>
   14c84:	0005883a 	mov	r2,zero
   14c88:	18000726 	beq	r3,zero,14ca8 <__divsi3+0x58>
   14c8c:	0005883a 	mov	r2,zero
   14c90:	31400236 	bltu	r6,r5,14c9c <__divsi3+0x4c>
   14c94:	314dc83a 	sub	r6,r6,r5
   14c98:	10c4b03a 	or	r2,r2,r3
   14c9c:	1806d07a 	srli	r3,r3,1
   14ca0:	280ad07a 	srli	r5,r5,1
   14ca4:	183ffa1e 	bne	r3,zero,14c90 <_gp+0xffff5cd4>
   14ca8:	38000126 	beq	r7,zero,14cb0 <__divsi3+0x60>
   14cac:	0085c83a 	sub	r2,zero,r2
   14cb0:	f800283a 	ret
   14cb4:	014bc83a 	sub	r5,zero,r5
   14cb8:	39c0005c 	xori	r7,r7,1
   14cbc:	003fe706 	br	14c5c <_gp+0xffff5ca0>
   14cc0:	0109c83a 	sub	r4,zero,r4
   14cc4:	01c00044 	movi	r7,1
   14cc8:	003fe306 	br	14c58 <_gp+0xffff5c9c>
   14ccc:	00c00044 	movi	r3,1
   14cd0:	003fee06 	br	14c8c <_gp+0xffff5cd0>

00014cd4 <__modsi3>:
   14cd4:	20001716 	blt	r4,zero,14d34 <__modsi3+0x60>
   14cd8:	000f883a 	mov	r7,zero
   14cdc:	2005883a 	mov	r2,r4
   14ce0:	28001216 	blt	r5,zero,14d2c <__modsi3+0x58>
   14ce4:	2900162e 	bgeu	r5,r4,14d40 <__modsi3+0x6c>
   14ce8:	01800804 	movi	r6,32
   14cec:	00c00044 	movi	r3,1
   14cf0:	00000106 	br	14cf8 <__modsi3+0x24>
   14cf4:	30000a26 	beq	r6,zero,14d20 <__modsi3+0x4c>
   14cf8:	294b883a 	add	r5,r5,r5
   14cfc:	31bfffc4 	addi	r6,r6,-1
   14d00:	18c7883a 	add	r3,r3,r3
   14d04:	293ffb36 	bltu	r5,r4,14cf4 <_gp+0xffff5d38>
   14d08:	18000526 	beq	r3,zero,14d20 <__modsi3+0x4c>
   14d0c:	1806d07a 	srli	r3,r3,1
   14d10:	11400136 	bltu	r2,r5,14d18 <__modsi3+0x44>
   14d14:	1145c83a 	sub	r2,r2,r5
   14d18:	280ad07a 	srli	r5,r5,1
   14d1c:	183ffb1e 	bne	r3,zero,14d0c <_gp+0xffff5d50>
   14d20:	38000126 	beq	r7,zero,14d28 <__modsi3+0x54>
   14d24:	0085c83a 	sub	r2,zero,r2
   14d28:	f800283a 	ret
   14d2c:	014bc83a 	sub	r5,zero,r5
   14d30:	003fec06 	br	14ce4 <_gp+0xffff5d28>
   14d34:	0109c83a 	sub	r4,zero,r4
   14d38:	01c00044 	movi	r7,1
   14d3c:	003fe706 	br	14cdc <_gp+0xffff5d20>
   14d40:	00c00044 	movi	r3,1
   14d44:	003ff106 	br	14d0c <_gp+0xffff5d50>

00014d48 <__udivsi3>:
   14d48:	200d883a 	mov	r6,r4
   14d4c:	2900152e 	bgeu	r5,r4,14da4 <__udivsi3+0x5c>
   14d50:	28001416 	blt	r5,zero,14da4 <__udivsi3+0x5c>
   14d54:	00800804 	movi	r2,32
   14d58:	00c00044 	movi	r3,1
   14d5c:	00000206 	br	14d68 <__udivsi3+0x20>
   14d60:	10000e26 	beq	r2,zero,14d9c <__udivsi3+0x54>
   14d64:	28000516 	blt	r5,zero,14d7c <__udivsi3+0x34>
   14d68:	294b883a 	add	r5,r5,r5
   14d6c:	10bfffc4 	addi	r2,r2,-1
   14d70:	18c7883a 	add	r3,r3,r3
   14d74:	293ffa36 	bltu	r5,r4,14d60 <_gp+0xffff5da4>
   14d78:	18000826 	beq	r3,zero,14d9c <__udivsi3+0x54>
   14d7c:	0005883a 	mov	r2,zero
   14d80:	31400236 	bltu	r6,r5,14d8c <__udivsi3+0x44>
   14d84:	314dc83a 	sub	r6,r6,r5
   14d88:	10c4b03a 	or	r2,r2,r3
   14d8c:	1806d07a 	srli	r3,r3,1
   14d90:	280ad07a 	srli	r5,r5,1
   14d94:	183ffa1e 	bne	r3,zero,14d80 <_gp+0xffff5dc4>
   14d98:	f800283a 	ret
   14d9c:	0005883a 	mov	r2,zero
   14da0:	f800283a 	ret
   14da4:	00c00044 	movi	r3,1
   14da8:	003ff406 	br	14d7c <_gp+0xffff5dc0>

00014dac <__umodsi3>:
   14dac:	2005883a 	mov	r2,r4
   14db0:	2900122e 	bgeu	r5,r4,14dfc <__umodsi3+0x50>
   14db4:	28001116 	blt	r5,zero,14dfc <__umodsi3+0x50>
   14db8:	01800804 	movi	r6,32
   14dbc:	00c00044 	movi	r3,1
   14dc0:	00000206 	br	14dcc <__umodsi3+0x20>
   14dc4:	30000c26 	beq	r6,zero,14df8 <__umodsi3+0x4c>
   14dc8:	28000516 	blt	r5,zero,14de0 <__umodsi3+0x34>
   14dcc:	294b883a 	add	r5,r5,r5
   14dd0:	31bfffc4 	addi	r6,r6,-1
   14dd4:	18c7883a 	add	r3,r3,r3
   14dd8:	293ffa36 	bltu	r5,r4,14dc4 <_gp+0xffff5e08>
   14ddc:	18000626 	beq	r3,zero,14df8 <__umodsi3+0x4c>
   14de0:	1806d07a 	srli	r3,r3,1
   14de4:	11400136 	bltu	r2,r5,14dec <__umodsi3+0x40>
   14de8:	1145c83a 	sub	r2,r2,r5
   14dec:	280ad07a 	srli	r5,r5,1
   14df0:	183ffb1e 	bne	r3,zero,14de0 <_gp+0xffff5e24>
   14df4:	f800283a 	ret
   14df8:	f800283a 	ret
   14dfc:	00c00044 	movi	r3,1
   14e00:	003ff706 	br	14de0 <_gp+0xffff5e24>

00014e04 <__mulsi3>:
   14e04:	0005883a 	mov	r2,zero
   14e08:	20000726 	beq	r4,zero,14e28 <__mulsi3+0x24>
   14e0c:	20c0004c 	andi	r3,r4,1
   14e10:	2008d07a 	srli	r4,r4,1
   14e14:	18000126 	beq	r3,zero,14e1c <__mulsi3+0x18>
   14e18:	1145883a 	add	r2,r2,r5
   14e1c:	294b883a 	add	r5,r5,r5
   14e20:	203ffa1e 	bne	r4,zero,14e0c <_gp+0xffff5e50>
   14e24:	f800283a 	ret
   14e28:	f800283a 	ret

00014e2c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   14e2c:	defffd04 	addi	sp,sp,-12
   14e30:	df000215 	stw	fp,8(sp)
   14e34:	df000204 	addi	fp,sp,8
   14e38:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   14e3c:	0001883a 	nop
   14e40:	e0bfff17 	ldw	r2,-4(fp)
   14e44:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   14e48:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   14e4c:	10000226 	beq	r2,zero,14e58 <_exit+0x2c>
    ALT_SIM_FAIL();
   14e50:	002af070 	cmpltui	zero,zero,43969
   14e54:	00000106 	br	14e5c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   14e58:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   14e5c:	003fff06 	br	14e5c <_gp+0xffff5ea0>

00014e60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14e60:	defffe04 	addi	sp,sp,-8
   14e64:	dfc00115 	stw	ra,4(sp)
   14e68:	df000015 	stw	fp,0(sp)
   14e6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14e70:	d0a00517 	ldw	r2,-32748(gp)
   14e74:	10000326 	beq	r2,zero,14e84 <alt_get_errno+0x24>
   14e78:	d0a00517 	ldw	r2,-32748(gp)
   14e7c:	103ee83a 	callr	r2
   14e80:	00000106 	br	14e88 <alt_get_errno+0x28>
   14e84:	d0a6c604 	addi	r2,gp,-25832
}
   14e88:	e037883a 	mov	sp,fp
   14e8c:	dfc00117 	ldw	ra,4(sp)
   14e90:	df000017 	ldw	fp,0(sp)
   14e94:	dec00204 	addi	sp,sp,8
   14e98:	f800283a 	ret

00014e9c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   14e9c:	defffb04 	addi	sp,sp,-20
   14ea0:	dfc00415 	stw	ra,16(sp)
   14ea4:	df000315 	stw	fp,12(sp)
   14ea8:	df000304 	addi	fp,sp,12
   14eac:	e13ffe15 	stw	r4,-8(fp)
   14eb0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14eb4:	e0bffe17 	ldw	r2,-8(fp)
   14eb8:	10000816 	blt	r2,zero,14edc <fstat+0x40>
   14ebc:	01400304 	movi	r5,12
   14ec0:	e13ffe17 	ldw	r4,-8(fp)
   14ec4:	0014e040 	call	14e04 <__mulsi3>
   14ec8:	1007883a 	mov	r3,r2
   14ecc:	00800074 	movhi	r2,1
   14ed0:	10998404 	addi	r2,r2,26128
   14ed4:	1885883a 	add	r2,r3,r2
   14ed8:	00000106 	br	14ee0 <fstat+0x44>
   14edc:	0005883a 	mov	r2,zero
   14ee0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   14ee4:	e0bffd17 	ldw	r2,-12(fp)
   14ee8:	10001026 	beq	r2,zero,14f2c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   14eec:	e0bffd17 	ldw	r2,-12(fp)
   14ef0:	10800017 	ldw	r2,0(r2)
   14ef4:	10800817 	ldw	r2,32(r2)
   14ef8:	10000726 	beq	r2,zero,14f18 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   14efc:	e0bffd17 	ldw	r2,-12(fp)
   14f00:	10800017 	ldw	r2,0(r2)
   14f04:	10800817 	ldw	r2,32(r2)
   14f08:	e17fff17 	ldw	r5,-4(fp)
   14f0c:	e13ffd17 	ldw	r4,-12(fp)
   14f10:	103ee83a 	callr	r2
   14f14:	00000a06 	br	14f40 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   14f18:	e0bfff17 	ldw	r2,-4(fp)
   14f1c:	00c80004 	movi	r3,8192
   14f20:	10c00115 	stw	r3,4(r2)
      return 0;
   14f24:	0005883a 	mov	r2,zero
   14f28:	00000506 	br	14f40 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   14f2c:	0014e600 	call	14e60 <alt_get_errno>
   14f30:	1007883a 	mov	r3,r2
   14f34:	00801444 	movi	r2,81
   14f38:	18800015 	stw	r2,0(r3)
    return -1;
   14f3c:	00bfffc4 	movi	r2,-1
  }
}
   14f40:	e037883a 	mov	sp,fp
   14f44:	dfc00117 	ldw	ra,4(sp)
   14f48:	df000017 	ldw	fp,0(sp)
   14f4c:	dec00204 	addi	sp,sp,8
   14f50:	f800283a 	ret

00014f54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14f54:	defffe04 	addi	sp,sp,-8
   14f58:	dfc00115 	stw	ra,4(sp)
   14f5c:	df000015 	stw	fp,0(sp)
   14f60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14f64:	d0a00517 	ldw	r2,-32748(gp)
   14f68:	10000326 	beq	r2,zero,14f78 <alt_get_errno+0x24>
   14f6c:	d0a00517 	ldw	r2,-32748(gp)
   14f70:	103ee83a 	callr	r2
   14f74:	00000106 	br	14f7c <alt_get_errno+0x28>
   14f78:	d0a6c604 	addi	r2,gp,-25832
}
   14f7c:	e037883a 	mov	sp,fp
   14f80:	dfc00117 	ldw	ra,4(sp)
   14f84:	df000017 	ldw	fp,0(sp)
   14f88:	dec00204 	addi	sp,sp,8
   14f8c:	f800283a 	ret

00014f90 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   14f90:	deffed04 	addi	sp,sp,-76
   14f94:	dfc01215 	stw	ra,72(sp)
   14f98:	df001115 	stw	fp,68(sp)
   14f9c:	df001104 	addi	fp,sp,68
   14fa0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14fa4:	e0bfff17 	ldw	r2,-4(fp)
   14fa8:	10000816 	blt	r2,zero,14fcc <isatty+0x3c>
   14fac:	01400304 	movi	r5,12
   14fb0:	e13fff17 	ldw	r4,-4(fp)
   14fb4:	0014e040 	call	14e04 <__mulsi3>
   14fb8:	1007883a 	mov	r3,r2
   14fbc:	00800074 	movhi	r2,1
   14fc0:	10998404 	addi	r2,r2,26128
   14fc4:	1885883a 	add	r2,r3,r2
   14fc8:	00000106 	br	14fd0 <isatty+0x40>
   14fcc:	0005883a 	mov	r2,zero
   14fd0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   14fd4:	e0bfef17 	ldw	r2,-68(fp)
   14fd8:	10000e26 	beq	r2,zero,15014 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   14fdc:	e0bfef17 	ldw	r2,-68(fp)
   14fe0:	10800017 	ldw	r2,0(r2)
   14fe4:	10800817 	ldw	r2,32(r2)
   14fe8:	1000021e 	bne	r2,zero,14ff4 <isatty+0x64>
    {
      return 1;
   14fec:	00800044 	movi	r2,1
   14ff0:	00000d06 	br	15028 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   14ff4:	e0bff004 	addi	r2,fp,-64
   14ff8:	100b883a 	mov	r5,r2
   14ffc:	e13fff17 	ldw	r4,-4(fp)
   15000:	0014e9c0 	call	14e9c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   15004:	e0bff117 	ldw	r2,-60(fp)
   15008:	10880020 	cmpeqi	r2,r2,8192
   1500c:	10803fcc 	andi	r2,r2,255
   15010:	00000506 	br	15028 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   15014:	0014f540 	call	14f54 <alt_get_errno>
   15018:	1007883a 	mov	r3,r2
   1501c:	00801444 	movi	r2,81
   15020:	18800015 	stw	r2,0(r3)
    return 0;
   15024:	0005883a 	mov	r2,zero
  }
}
   15028:	e037883a 	mov	sp,fp
   1502c:	dfc00117 	ldw	ra,4(sp)
   15030:	df000017 	ldw	fp,0(sp)
   15034:	dec00204 	addi	sp,sp,8
   15038:	f800283a 	ret

0001503c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1503c:	defffe04 	addi	sp,sp,-8
   15040:	dfc00115 	stw	ra,4(sp)
   15044:	df000015 	stw	fp,0(sp)
   15048:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1504c:	d0a00517 	ldw	r2,-32748(gp)
   15050:	10000326 	beq	r2,zero,15060 <alt_get_errno+0x24>
   15054:	d0a00517 	ldw	r2,-32748(gp)
   15058:	103ee83a 	callr	r2
   1505c:	00000106 	br	15064 <alt_get_errno+0x28>
   15060:	d0a6c604 	addi	r2,gp,-25832
}
   15064:	e037883a 	mov	sp,fp
   15068:	dfc00117 	ldw	ra,4(sp)
   1506c:	df000017 	ldw	fp,0(sp)
   15070:	dec00204 	addi	sp,sp,8
   15074:	f800283a 	ret

00015078 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   15078:	defff904 	addi	sp,sp,-28
   1507c:	dfc00615 	stw	ra,24(sp)
   15080:	df000515 	stw	fp,20(sp)
   15084:	df000504 	addi	fp,sp,20
   15088:	e13ffd15 	stw	r4,-12(fp)
   1508c:	e17ffe15 	stw	r5,-8(fp)
   15090:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   15094:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   15098:	e0bffd17 	ldw	r2,-12(fp)
   1509c:	10000816 	blt	r2,zero,150c0 <lseek+0x48>
   150a0:	01400304 	movi	r5,12
   150a4:	e13ffd17 	ldw	r4,-12(fp)
   150a8:	0014e040 	call	14e04 <__mulsi3>
   150ac:	1007883a 	mov	r3,r2
   150b0:	00800074 	movhi	r2,1
   150b4:	10998404 	addi	r2,r2,26128
   150b8:	1885883a 	add	r2,r3,r2
   150bc:	00000106 	br	150c4 <lseek+0x4c>
   150c0:	0005883a 	mov	r2,zero
   150c4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   150c8:	e0bffc17 	ldw	r2,-16(fp)
   150cc:	10001026 	beq	r2,zero,15110 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   150d0:	e0bffc17 	ldw	r2,-16(fp)
   150d4:	10800017 	ldw	r2,0(r2)
   150d8:	10800717 	ldw	r2,28(r2)
   150dc:	10000926 	beq	r2,zero,15104 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   150e0:	e0bffc17 	ldw	r2,-16(fp)
   150e4:	10800017 	ldw	r2,0(r2)
   150e8:	10800717 	ldw	r2,28(r2)
   150ec:	e1bfff17 	ldw	r6,-4(fp)
   150f0:	e17ffe17 	ldw	r5,-8(fp)
   150f4:	e13ffc17 	ldw	r4,-16(fp)
   150f8:	103ee83a 	callr	r2
   150fc:	e0bffb15 	stw	r2,-20(fp)
   15100:	00000506 	br	15118 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   15104:	00bfde84 	movi	r2,-134
   15108:	e0bffb15 	stw	r2,-20(fp)
   1510c:	00000206 	br	15118 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   15110:	00bfebc4 	movi	r2,-81
   15114:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   15118:	e0bffb17 	ldw	r2,-20(fp)
   1511c:	1000070e 	bge	r2,zero,1513c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   15120:	001503c0 	call	1503c <alt_get_errno>
   15124:	1007883a 	mov	r3,r2
   15128:	e0bffb17 	ldw	r2,-20(fp)
   1512c:	0085c83a 	sub	r2,zero,r2
   15130:	18800015 	stw	r2,0(r3)
    rc = -1;
   15134:	00bfffc4 	movi	r2,-1
   15138:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   1513c:	e0bffb17 	ldw	r2,-20(fp)
}
   15140:	e037883a 	mov	sp,fp
   15144:	dfc00117 	ldw	ra,4(sp)
   15148:	df000017 	ldw	fp,0(sp)
   1514c:	dec00204 	addi	sp,sp,8
   15150:	f800283a 	ret

00015154 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   15154:	defffe04 	addi	sp,sp,-8
   15158:	df000115 	stw	fp,4(sp)
   1515c:	df000104 	addi	fp,sp,4
   15160:	e13fff15 	stw	r4,-4(fp)
}
   15164:	0001883a 	nop
   15168:	e037883a 	mov	sp,fp
   1516c:	df000017 	ldw	fp,0(sp)
   15170:	dec00104 	addi	sp,sp,4
   15174:	f800283a 	ret

00015178 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   15178:	defffe04 	addi	sp,sp,-8
   1517c:	df000115 	stw	fp,4(sp)
   15180:	df000104 	addi	fp,sp,4
   15184:	e13fff15 	stw	r4,-4(fp)
}
   15188:	0001883a 	nop
   1518c:	e037883a 	mov	sp,fp
   15190:	df000017 	ldw	fp,0(sp)
   15194:	dec00104 	addi	sp,sp,4
   15198:	f800283a 	ret

0001519c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1519c:	defffe04 	addi	sp,sp,-8
   151a0:	dfc00115 	stw	ra,4(sp)
   151a4:	df000015 	stw	fp,0(sp)
   151a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   151ac:	d0a00517 	ldw	r2,-32748(gp)
   151b0:	10000326 	beq	r2,zero,151c0 <alt_get_errno+0x24>
   151b4:	d0a00517 	ldw	r2,-32748(gp)
   151b8:	103ee83a 	callr	r2
   151bc:	00000106 	br	151c4 <alt_get_errno+0x28>
   151c0:	d0a6c604 	addi	r2,gp,-25832
}
   151c4:	e037883a 	mov	sp,fp
   151c8:	dfc00117 	ldw	ra,4(sp)
   151cc:	df000017 	ldw	fp,0(sp)
   151d0:	dec00204 	addi	sp,sp,8
   151d4:	f800283a 	ret

000151d8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   151d8:	defff904 	addi	sp,sp,-28
   151dc:	dfc00615 	stw	ra,24(sp)
   151e0:	df000515 	stw	fp,20(sp)
   151e4:	df000504 	addi	fp,sp,20
   151e8:	e13ffd15 	stw	r4,-12(fp)
   151ec:	e17ffe15 	stw	r5,-8(fp)
   151f0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   151f4:	e0bffd17 	ldw	r2,-12(fp)
   151f8:	10000816 	blt	r2,zero,1521c <read+0x44>
   151fc:	01400304 	movi	r5,12
   15200:	e13ffd17 	ldw	r4,-12(fp)
   15204:	0014e040 	call	14e04 <__mulsi3>
   15208:	1007883a 	mov	r3,r2
   1520c:	00800074 	movhi	r2,1
   15210:	10998404 	addi	r2,r2,26128
   15214:	1885883a 	add	r2,r3,r2
   15218:	00000106 	br	15220 <read+0x48>
   1521c:	0005883a 	mov	r2,zero
   15220:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   15224:	e0bffb17 	ldw	r2,-20(fp)
   15228:	10002226 	beq	r2,zero,152b4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1522c:	e0bffb17 	ldw	r2,-20(fp)
   15230:	10800217 	ldw	r2,8(r2)
   15234:	108000cc 	andi	r2,r2,3
   15238:	10800060 	cmpeqi	r2,r2,1
   1523c:	1000181e 	bne	r2,zero,152a0 <read+0xc8>
        (fd->dev->read))
   15240:	e0bffb17 	ldw	r2,-20(fp)
   15244:	10800017 	ldw	r2,0(r2)
   15248:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1524c:	10001426 	beq	r2,zero,152a0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   15250:	e0bffb17 	ldw	r2,-20(fp)
   15254:	10800017 	ldw	r2,0(r2)
   15258:	10800517 	ldw	r2,20(r2)
   1525c:	e0ffff17 	ldw	r3,-4(fp)
   15260:	180d883a 	mov	r6,r3
   15264:	e17ffe17 	ldw	r5,-8(fp)
   15268:	e13ffb17 	ldw	r4,-20(fp)
   1526c:	103ee83a 	callr	r2
   15270:	e0bffc15 	stw	r2,-16(fp)
   15274:	e0bffc17 	ldw	r2,-16(fp)
   15278:	1000070e 	bge	r2,zero,15298 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   1527c:	001519c0 	call	1519c <alt_get_errno>
   15280:	1007883a 	mov	r3,r2
   15284:	e0bffc17 	ldw	r2,-16(fp)
   15288:	0085c83a 	sub	r2,zero,r2
   1528c:	18800015 	stw	r2,0(r3)
          return -1;
   15290:	00bfffc4 	movi	r2,-1
   15294:	00000c06 	br	152c8 <read+0xf0>
        }
        return rval;
   15298:	e0bffc17 	ldw	r2,-16(fp)
   1529c:	00000a06 	br	152c8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   152a0:	001519c0 	call	1519c <alt_get_errno>
   152a4:	1007883a 	mov	r3,r2
   152a8:	00800344 	movi	r2,13
   152ac:	18800015 	stw	r2,0(r3)
   152b0:	00000406 	br	152c4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   152b4:	001519c0 	call	1519c <alt_get_errno>
   152b8:	1007883a 	mov	r3,r2
   152bc:	00801444 	movi	r2,81
   152c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   152c4:	00bfffc4 	movi	r2,-1
}
   152c8:	e037883a 	mov	sp,fp
   152cc:	dfc00117 	ldw	ra,4(sp)
   152d0:	df000017 	ldw	fp,0(sp)
   152d4:	dec00204 	addi	sp,sp,8
   152d8:	f800283a 	ret

000152dc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   152dc:	defff904 	addi	sp,sp,-28
   152e0:	df000615 	stw	fp,24(sp)
   152e4:	df000604 	addi	fp,sp,24
   152e8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   152ec:	0005303a 	rdctl	r2,status
   152f0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   152f4:	e0fffe17 	ldw	r3,-8(fp)
   152f8:	00bfff84 	movi	r2,-2
   152fc:	1884703a 	and	r2,r3,r2
   15300:	1001703a 	wrctl	status,r2
  
  return context;
   15304:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   15308:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1530c:	d0a00d17 	ldw	r2,-32716(gp)
   15310:	10c000c4 	addi	r3,r2,3
   15314:	00bfff04 	movi	r2,-4
   15318:	1884703a 	and	r2,r3,r2
   1531c:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   15320:	d0e00d17 	ldw	r3,-32716(gp)
   15324:	e0bfff17 	ldw	r2,-4(fp)
   15328:	1887883a 	add	r3,r3,r2
   1532c:	008000b4 	movhi	r2,2
   15330:	10b0d404 	addi	r2,r2,-15536
   15334:	10c0062e 	bgeu	r2,r3,15350 <sbrk+0x74>
   15338:	e0bffb17 	ldw	r2,-20(fp)
   1533c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15340:	e0bffa17 	ldw	r2,-24(fp)
   15344:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   15348:	00bfffc4 	movi	r2,-1
   1534c:	00000b06 	br	1537c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   15350:	d0a00d17 	ldw	r2,-32716(gp)
   15354:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   15358:	d0e00d17 	ldw	r3,-32716(gp)
   1535c:	e0bfff17 	ldw	r2,-4(fp)
   15360:	1885883a 	add	r2,r3,r2
   15364:	d0a00d15 	stw	r2,-32716(gp)
   15368:	e0bffb17 	ldw	r2,-20(fp)
   1536c:	e0bffc15 	stw	r2,-16(fp)
   15370:	e0bffc17 	ldw	r2,-16(fp)
   15374:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   15378:	e0bffd17 	ldw	r2,-12(fp)
} 
   1537c:	e037883a 	mov	sp,fp
   15380:	df000017 	ldw	fp,0(sp)
   15384:	dec00104 	addi	sp,sp,4
   15388:	f800283a 	ret

0001538c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1538c:	defffe04 	addi	sp,sp,-8
   15390:	dfc00115 	stw	ra,4(sp)
   15394:	df000015 	stw	fp,0(sp)
   15398:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1539c:	d0a00517 	ldw	r2,-32748(gp)
   153a0:	10000326 	beq	r2,zero,153b0 <alt_get_errno+0x24>
   153a4:	d0a00517 	ldw	r2,-32748(gp)
   153a8:	103ee83a 	callr	r2
   153ac:	00000106 	br	153b4 <alt_get_errno+0x28>
   153b0:	d0a6c604 	addi	r2,gp,-25832
}
   153b4:	e037883a 	mov	sp,fp
   153b8:	dfc00117 	ldw	ra,4(sp)
   153bc:	df000017 	ldw	fp,0(sp)
   153c0:	dec00204 	addi	sp,sp,8
   153c4:	f800283a 	ret

000153c8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   153c8:	defff904 	addi	sp,sp,-28
   153cc:	dfc00615 	stw	ra,24(sp)
   153d0:	df000515 	stw	fp,20(sp)
   153d4:	df000504 	addi	fp,sp,20
   153d8:	e13ffd15 	stw	r4,-12(fp)
   153dc:	e17ffe15 	stw	r5,-8(fp)
   153e0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   153e4:	e0bffd17 	ldw	r2,-12(fp)
   153e8:	10000816 	blt	r2,zero,1540c <write+0x44>
   153ec:	01400304 	movi	r5,12
   153f0:	e13ffd17 	ldw	r4,-12(fp)
   153f4:	0014e040 	call	14e04 <__mulsi3>
   153f8:	1007883a 	mov	r3,r2
   153fc:	00800074 	movhi	r2,1
   15400:	10998404 	addi	r2,r2,26128
   15404:	1885883a 	add	r2,r3,r2
   15408:	00000106 	br	15410 <write+0x48>
   1540c:	0005883a 	mov	r2,zero
   15410:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   15414:	e0bffb17 	ldw	r2,-20(fp)
   15418:	10002126 	beq	r2,zero,154a0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1541c:	e0bffb17 	ldw	r2,-20(fp)
   15420:	10800217 	ldw	r2,8(r2)
   15424:	108000cc 	andi	r2,r2,3
   15428:	10001826 	beq	r2,zero,1548c <write+0xc4>
   1542c:	e0bffb17 	ldw	r2,-20(fp)
   15430:	10800017 	ldw	r2,0(r2)
   15434:	10800617 	ldw	r2,24(r2)
   15438:	10001426 	beq	r2,zero,1548c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1543c:	e0bffb17 	ldw	r2,-20(fp)
   15440:	10800017 	ldw	r2,0(r2)
   15444:	10800617 	ldw	r2,24(r2)
   15448:	e0ffff17 	ldw	r3,-4(fp)
   1544c:	180d883a 	mov	r6,r3
   15450:	e17ffe17 	ldw	r5,-8(fp)
   15454:	e13ffb17 	ldw	r4,-20(fp)
   15458:	103ee83a 	callr	r2
   1545c:	e0bffc15 	stw	r2,-16(fp)
   15460:	e0bffc17 	ldw	r2,-16(fp)
   15464:	1000070e 	bge	r2,zero,15484 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   15468:	001538c0 	call	1538c <alt_get_errno>
   1546c:	1007883a 	mov	r3,r2
   15470:	e0bffc17 	ldw	r2,-16(fp)
   15474:	0085c83a 	sub	r2,zero,r2
   15478:	18800015 	stw	r2,0(r3)
        return -1;
   1547c:	00bfffc4 	movi	r2,-1
   15480:	00000c06 	br	154b4 <write+0xec>
      }
      return rval;
   15484:	e0bffc17 	ldw	r2,-16(fp)
   15488:	00000a06 	br	154b4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1548c:	001538c0 	call	1538c <alt_get_errno>
   15490:	1007883a 	mov	r3,r2
   15494:	00800344 	movi	r2,13
   15498:	18800015 	stw	r2,0(r3)
   1549c:	00000406 	br	154b0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   154a0:	001538c0 	call	1538c <alt_get_errno>
   154a4:	1007883a 	mov	r3,r2
   154a8:	00801444 	movi	r2,81
   154ac:	18800015 	stw	r2,0(r3)
  }
  return -1;
   154b0:	00bfffc4 	movi	r2,-1
}
   154b4:	e037883a 	mov	sp,fp
   154b8:	dfc00117 	ldw	ra,4(sp)
   154bc:	df000017 	ldw	fp,0(sp)
   154c0:	dec00204 	addi	sp,sp,8
   154c4:	f800283a 	ret
