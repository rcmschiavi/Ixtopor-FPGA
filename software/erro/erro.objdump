
erro.elf:     file format elf32-littlenios2
erro.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010234

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00005b18 memsz 0x00005b18 flags r-x
    LOAD off    0x00006b38 vaddr 0x00015b38 paddr 0x000175fc align 2**12
         filesz 0x00001ac4 memsz 0x00001ac4 flags rw-
    LOAD off    0x000090c0 vaddr 0x000190c0 paddr 0x000190c0 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000214  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000058a0  00010234  00010234  00001234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000064  00015ad4  00015ad4  00006ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ac4  00015b38  000175fc  00006b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  000190c0  000190c0  000090c0  2**2
                  ALLOC, SMALL_DATA
  6 .memoria      00000000  00019214  00019214  000085fc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000085fc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a30  00000000  00000000  00008620  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000169a6  00000000  00000000  00009050  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006098  00000000  00000000  0001f9f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006be3  00000000  00000000  00025a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001680  00000000  00000000  0002c674  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000028d2  00000000  00000000  0002dcf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004ada  00000000  00000000  000305c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000350a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000680  00000000  00000000  000350b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00037e0a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00037e0d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00037e10  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00037e11  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00037e12  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00037e16  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00037e1a  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00037e1e  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00037e27  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00037e30  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  00037e39  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000016  00000000  00000000  00037e3f  2**0
                  CONTENTS, READONLY
 29 .jdi          000036bf  00000000  00000000  00037e55  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000c4f1f  00000000  00000000  0003b514  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010234 l    d  .text	00000000 .text
00015ad4 l    d  .rodata	00000000 .rodata
00015b38 l    d  .rwdata	00000000 .rwdata
000190c0 l    d  .bss	00000000 .bss
00019214 l    d  .memoria	00000000 .memoria
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Ixtopor_bsp//obj/HAL/src/crt0.o
0001026c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00010410 l     F .text	00000008 __fp_unlock
00010424 l     F .text	0000019c __sinit.part.1
000105c0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00015b38 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
000130b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000131c4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000131f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000132e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000133cc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000134b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00013694 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000175ec l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00013908 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00013a44 l     F .text	00000034 alt_dev_reg
0001650c l     O .rwdata	00001060 jtag_uart
0001756c l     O .rwdata	0000002c adc_1
00017598 l     O .rwdata	0000002c uart_rs232
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00013d48 l     F .text	00000210 altera_avalon_jtag_uart_irq
00013f58 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00014590 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00014b5c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00014dac l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001508c l     F .text	0000003c alt_get_errno
000150c8 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000190e8 g     O .bss	00000004 alt_instruction_exception_handler
00012e80 g     F .text	00000054 _isatty_r
000135d0 g     F .text	0000007c alt_main
000102a4 g     F .text	000000c0 _puts_r
00019114 g     O .bss	00000100 alt_irq
00012ba8 g     F .text	00000060 _lseek_r
000175fc g       *ABS*	00000000 __flash_rwdata_start
00019214 g       *ABS*	00000000 __alt_heap_start
0001215c g     F .text	0000005c __sseek
00010770 g     F .text	00000010 __sinit
000105c8 g     F .text	00000078 __sfmoreglue
00013670 g     F .text	00000024 __malloc_unlock
000148b0 g     F .text	00000090 alt_up_rs232_read_fd
00011848 g     F .text	0000015c memmove
00010758 g     F .text	00000018 _cleanup
000154b4 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00012e24 g     F .text	0000005c _fstat_r
000190cc g     O .bss	00000004 errno
000120d8 g     F .text	00000008 __seofread
000190d4 g     O .bss	00000004 alt_argv
0001f5c4 g       *ABS*	00000000 _gp
0001638c g     O .rwdata	00000180 alt_fd_list
00014cfc g     F .text	00000090 alt_find_dev
00011700 g     F .text	00000148 memcpy
00010418 g     F .text	0000000c _cleanup_r
00014e90 g     F .text	0000007c alt_io_redirect
00015ad4 g       *ABS*	00000000 __DTOR_END__
0001483c g     F .text	00000074 alt_up_rs232_read_data
00010364 g     F .text	00000014 puts
000156a4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00014150 g     F .text	0000021c altera_avalon_jtag_uart_read
00012fcc g     F .text	00000064 .hidden __udivsi3
00013320 g     F .text	000000ac isatty
000190c8 g     O .bss	00000004 __malloc_top_pad
000107c0 g     F .text	000004c8 __sfvwrite_r
00012030 g     F .text	00000054 _sbrk_r
00012dc4 g     F .text	00000060 _read_r
000175e4 g     O .rwdata	00000004 alt_max_fd
000147b8 g     F .text	00000044 alt_up_rs232_check_parity
000123c8 g     F .text	000000f0 _fclose_r
00012744 g     F .text	00000030 fflush
000190c4 g     O .bss	00000004 __malloc_max_sbrked_mem
00014f0c g     F .text	00000180 alt_irq_register
000134f4 g     F .text	000000dc lseek
000175c4 g     O .rwdata	00000004 _global_impure_ptr
00011acc g     F .text	00000564 _realloc_r
00019214 g       *ABS*	00000000 __bss_end
000153ac g     F .text	00000108 alt_tick
00010790 g     F .text	00000018 __fp_lock_all
00015310 g     F .text	0000009c alt_alarm_stop
000190dc g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000d8 alt_irq_handler
00016364 g     O .rwdata	00000028 alt_dev_null
00014b3c g     F .text	00000020 alt_dcache_flush_all
000175fc g       *ABS*	00000000 __ram_rwdata_end
000175dc g     O .rwdata	00000008 alt_dev_list
00013944 g     F .text	00000100 write
00015b38 g       *ABS*	00000000 __ram_rodata_end
0001322c g     F .text	000000b8 fstat
00014940 g     F .text	00000094 alt_up_rs232_write_fd
00013030 g     F .text	00000058 .hidden __umodsi3
00019214 g       *ABS*	00000000 end
00013c94 g     F .text	000000b4 altera_avalon_jtag_uart_init
000101d4 g     F .exceptions	00000060 alt_instruction_exception_entry
00015ad4 g       *ABS*	00000000 __CTOR_LIST__
00019c40 g       *ABS*	00000000 __alt_stack_pointer
0001460c g     F .text	00000074 alt_avalon_timer_sc_init
0001436c g     F .text	00000224 altera_avalon_jtag_uart_write
00010780 g     F .text	00000004 __sfp_lock_acquire
0001161c g     F .text	000000e4 memchr
00012898 g     F .text	00000310 _free_r
00015920 g     F .text	00000180 __call_exitprocs
000175cc g     O .rwdata	00000004 __malloc_sbrk_base
00010234 g     F .text	0000003c _start
000190e0 g     O .bss	00000004 _alt_tick_rate
000190e4 g     O .bss	00000004 _alt_nticks
000136d0 g     F .text	00000104 read
00013ab0 g     F .text	00000080 alt_sys_init
00015808 g     F .text	00000118 __register_exitproc
0001477c g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00013ff8 g     F .text	00000068 altera_avalon_jtag_uart_close
00013088 g     F .text	00000028 .hidden __mulsi3
00015b38 g       *ABS*	00000000 __ram_rwdata_start
00015ad4 g       *ABS*	00000000 __ram_rodata_start
000190ec g     O .bss	00000028 __malloc_current_mallinfo
00013b30 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000155e0 g     F .text	000000c4 alt_get_fd
00012374 g     F .text	00000054 _close_r
0001578c g     F .text	0000007c memcmp
00013bf0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00019214 g       *ABS*	00000000 __alt_stack_base
00013c40 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00010000 g       *ABS*	00000000 __alt_mem_memoria
00012220 g     F .text	00000154 __swsetup_r
00010640 g     F .text	00000118 __sfp
00015f5c g     O .rwdata	00000408 __malloc_av_
0001078c g     F .text	00000004 __sinit_lock_release
00012084 g     F .text	00000054 __sread
000146dc g     F .text	00000060 alt_up_rs232_disable_read_interrupt
000154d8 g     F .text	00000108 alt_find_file
00014b98 g     F .text	000000a4 alt_dev_llist_insert
0001364c g     F .text	00000024 __malloc_lock
00013858 g     F .text	000000b0 sbrk
000126e8 g     F .text	0000005c _fflush_r
000190c0 g       *ABS*	00000000 __bss_start
000119a4 g     F .text	00000128 memset
00010270 g     F .text	00000034 main
000190d8 g     O .bss	00000004 alt_envp
000190c0 g     O .bss	00000004 __malloc_max_total_mem
00013b90 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000121b8 g     F .text	00000008 __sclose
00019c40 g       *ABS*	00000000 __alt_heap_limit
000124b8 g     F .text	00000014 fclose
00010e10 g     F .text	0000080c _malloc_r
000175e8 g     O .rwdata	00000004 alt_errno
00010c88 g     F .text	000000c4 _fwalk
00012ed4 g     F .text	00000084 .hidden __divsi3
00012774 g     F .text	00000124 _malloc_trim_r
00015ad4 g       *ABS*	00000000 __CTOR_END__
00015ad4 g       *ABS*	00000000 __flash_rodata_start
00015ad4 g       *ABS*	00000000 __DTOR_LIST__
000149d4 g     F .text	0000003c alt_up_rs232_open_dev
00013a78 g     F .text	00000038 alt_irq_init
000137d4 g     F .text	00000084 alt_release_fd
00015740 g     F .text	00000014 atexit
000121c0 g     F .text	00000060 _write_r
000175c8 g     O .rwdata	00000004 _impure_ptr
000190d0 g     O .bss	00000004 alt_argc
000124cc g     F .text	0000021c __sflush_r
00014c9c g     F .text	00000060 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
000107a8 g     F .text	00000018 __fp_unlock_all
000175d4 g     O .rwdata	00000008 alt_fs_list
00014680 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
000147fc g     F .text	00000040 alt_up_rs232_write_data
00010020 g       *ABS*	00000000 __ram_exceptions_start
000175fc g       *ABS*	00000000 _edata
00019214 g       *ABS*	00000000 _end
00010234 g       *ABS*	00000000 __ram_exceptions_end
00014060 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000120e0 g     F .text	0000007c __swrite
000175d0 g     O .rwdata	00000004 __malloc_trim_threshold
00015754 g     F .text	00000038 exit
00010d4c g     F .text	000000c4 _fwalk_reent
00012f58 g     F .text	00000074 .hidden __modsi3
00019c40 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00010784 g     F .text	00000004 __sfp_lock_release
00015aa0 g     F .text	00000034 _exit
00014a10 g     F .text	0000012c alt_alarm_start
00012c08 g     F .text	000001bc __smakebuf_r
00010378 g     F .text	00000098 strlen
000151b4 g     F .text	0000015c open
00014d8c g     F .text	00000020 alt_icache_flush_all
000175f0 g     O .rwdata	00000004 alt_priority_mask
000175f4 g     O .rwdata	00000008 alt_alarm_list
00014c3c g     F .text	00000060 _do_ctors
0001473c g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
000130ec g     F .text	000000d8 close
00013434 g     F .text	00000084 alt_load
00010788 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408d14 	ori	at,at,564
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101d40 	call	101d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001526 	beq	r2,zero,10190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1013c:	008000b4 	movhi	r2,2
   10140:	10a44504 	addi	r2,r2,-28396
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	008000b4 	movhi	r2,2
   10158:	10a44504 	addi	r2,r2,-28396
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	e17ffd17 	ldw	r5,-12(fp)
   10174:	1009883a 	mov	r4,r2
   10178:	183ee83a 	callr	r3
#endif
        break;
   1017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10180:	0005313a 	rdctl	r2,ipending
   10184:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10188:	e0bfff17 	ldw	r2,-4(fp)
   1018c:	00000706 	br	101ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
   10190:	e0bffc17 	ldw	r2,-16(fp)
   10194:	1085883a 	add	r2,r2,r2
   10198:	e0bffc15 	stw	r2,-16(fp)
      i++;
   1019c:	e0bffd17 	ldw	r2,-12(fp)
   101a0:	10800044 	addi	r2,r2,1
   101a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a8:	003fe006 	br	1012c <_gp+0xffff0b68>

    active = alt_irq_pending ();
   101ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101b0:	e0bffb17 	ldw	r2,-20(fp)
   101b4:	103fda1e 	bne	r2,zero,10120 <_gp+0xffff0b5c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b8:	0001883a 	nop
}
   101bc:	0001883a 	nop
   101c0:	e037883a 	mov	sp,fp
   101c4:	dfc00117 	ldw	ra,4(sp)
   101c8:	df000017 	ldw	fp,0(sp)
   101cc:	dec00204 	addi	sp,sp,8
   101d0:	f800283a 	ret

000101d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101d4:	defffb04 	addi	sp,sp,-20
   101d8:	dfc00415 	stw	ra,16(sp)
   101dc:	df000315 	stw	fp,12(sp)
   101e0:	df000304 	addi	fp,sp,12
   101e4:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101e8:	00bfffc4 	movi	r2,-1
   101ec:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   101f0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101f4:	d0a6c917 	ldw	r2,-25820(gp)
   101f8:	10000726 	beq	r2,zero,10218 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101fc:	d0a6c917 	ldw	r2,-25820(gp)
   10200:	e0fffd17 	ldw	r3,-12(fp)
   10204:	e1bffe17 	ldw	r6,-8(fp)
   10208:	e17fff17 	ldw	r5,-4(fp)
   1020c:	1809883a 	mov	r4,r3
   10210:	103ee83a 	callr	r2
   10214:	00000206 	br	10220 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10218:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   1021c:	0005883a 	mov	r2,zero
}
   10220:	e037883a 	mov	sp,fp
   10224:	dfc00117 	ldw	ra,4(sp)
   10228:	df000017 	ldw	fp,0(sp)
   1022c:	dec00204 	addi	sp,sp,8
   10230:	f800283a 	ret

Disassembly of section .text:

00010234 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10234:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10238:	dee71014 	ori	sp,sp,40000
    movhi gp, %hi(_gp)
   1023c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   10240:	d6bd7114 	ori	gp,gp,62916
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10244:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10248:	10a43014 	ori	r2,r2,37056

    movhi r3, %hi(__bss_end)
   1024c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10250:	18e48514 	ori	r3,r3,37396

    beq r2, r3, 1f
   10254:	10c00326 	beq	r2,r3,10264 <_start+0x30>

0:
    stw zero, (r2)
   10258:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   1025c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10260:	10fffd36 	bltu	r2,r3,10258 <_gp+0xffff0c94>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10264:	00134340 	call	13434 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10268:	00135d00 	call	135d0 <alt_main>

0001026c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   1026c:	003fff06 	br	1026c <_gp+0xffff0ca8>

00010270 <main>:
 */

#include <stdio.h>

int main()
{
   10270:	defffe04 	addi	sp,sp,-8
   10274:	dfc00115 	stw	ra,4(sp)
   10278:	df000015 	stw	fp,0(sp)
   1027c:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
   10280:	01000074 	movhi	r4,1
   10284:	2116b504 	addi	r4,r4,23252
   10288:	00103640 	call	10364 <puts>

  return 0;
   1028c:	0005883a 	mov	r2,zero
}
   10290:	e037883a 	mov	sp,fp
   10294:	dfc00117 	ldw	ra,4(sp)
   10298:	df000017 	ldw	fp,0(sp)
   1029c:	dec00204 	addi	sp,sp,8
   102a0:	f800283a 	ret

000102a4 <_puts_r>:
   102a4:	defff604 	addi	sp,sp,-40
   102a8:	dc000715 	stw	r16,28(sp)
   102ac:	2021883a 	mov	r16,r4
   102b0:	2809883a 	mov	r4,r5
   102b4:	dc400815 	stw	r17,32(sp)
   102b8:	dfc00915 	stw	ra,36(sp)
   102bc:	2823883a 	mov	r17,r5
   102c0:	00103780 	call	10378 <strlen>
   102c4:	10c00044 	addi	r3,r2,1
   102c8:	d8800115 	stw	r2,4(sp)
   102cc:	00800074 	movhi	r2,1
   102d0:	1096ba04 	addi	r2,r2,23272
   102d4:	d8800215 	stw	r2,8(sp)
   102d8:	00800044 	movi	r2,1
   102dc:	d8800315 	stw	r2,12(sp)
   102e0:	00800084 	movi	r2,2
   102e4:	dc400015 	stw	r17,0(sp)
   102e8:	d8c00615 	stw	r3,24(sp)
   102ec:	dec00415 	stw	sp,16(sp)
   102f0:	d8800515 	stw	r2,20(sp)
   102f4:	80000226 	beq	r16,zero,10300 <_puts_r+0x5c>
   102f8:	80800e17 	ldw	r2,56(r16)
   102fc:	10001426 	beq	r2,zero,10350 <_puts_r+0xac>
   10300:	81400217 	ldw	r5,8(r16)
   10304:	2880030b 	ldhu	r2,12(r5)
   10308:	10c8000c 	andi	r3,r2,8192
   1030c:	1800061e 	bne	r3,zero,10328 <_puts_r+0x84>
   10310:	29001917 	ldw	r4,100(r5)
   10314:	00f7ffc4 	movi	r3,-8193
   10318:	10880014 	ori	r2,r2,8192
   1031c:	20c6703a 	and	r3,r4,r3
   10320:	2880030d 	sth	r2,12(r5)
   10324:	28c01915 	stw	r3,100(r5)
   10328:	d9800404 	addi	r6,sp,16
   1032c:	8009883a 	mov	r4,r16
   10330:	00107c00 	call	107c0 <__sfvwrite_r>
   10334:	1000091e 	bne	r2,zero,1035c <_puts_r+0xb8>
   10338:	00800284 	movi	r2,10
   1033c:	dfc00917 	ldw	ra,36(sp)
   10340:	dc400817 	ldw	r17,32(sp)
   10344:	dc000717 	ldw	r16,28(sp)
   10348:	dec00a04 	addi	sp,sp,40
   1034c:	f800283a 	ret
   10350:	8009883a 	mov	r4,r16
   10354:	00107700 	call	10770 <__sinit>
   10358:	003fe906 	br	10300 <_gp+0xffff0d3c>
   1035c:	00bfffc4 	movi	r2,-1
   10360:	003ff606 	br	1033c <_gp+0xffff0d78>

00010364 <puts>:
   10364:	00800074 	movhi	r2,1
   10368:	109d7204 	addi	r2,r2,30152
   1036c:	200b883a 	mov	r5,r4
   10370:	11000017 	ldw	r4,0(r2)
   10374:	00102a41 	jmpi	102a4 <_puts_r>

00010378 <strlen>:
   10378:	208000cc 	andi	r2,r4,3
   1037c:	10002026 	beq	r2,zero,10400 <strlen+0x88>
   10380:	20800007 	ldb	r2,0(r4)
   10384:	10002026 	beq	r2,zero,10408 <strlen+0x90>
   10388:	2005883a 	mov	r2,r4
   1038c:	00000206 	br	10398 <strlen+0x20>
   10390:	10c00007 	ldb	r3,0(r2)
   10394:	18001826 	beq	r3,zero,103f8 <strlen+0x80>
   10398:	10800044 	addi	r2,r2,1
   1039c:	10c000cc 	andi	r3,r2,3
   103a0:	183ffb1e 	bne	r3,zero,10390 <_gp+0xffff0dcc>
   103a4:	10c00017 	ldw	r3,0(r2)
   103a8:	01ffbff4 	movhi	r7,65279
   103ac:	39ffbfc4 	addi	r7,r7,-257
   103b0:	00ca303a 	nor	r5,zero,r3
   103b4:	01a02074 	movhi	r6,32897
   103b8:	19c7883a 	add	r3,r3,r7
   103bc:	31a02004 	addi	r6,r6,-32640
   103c0:	1946703a 	and	r3,r3,r5
   103c4:	1986703a 	and	r3,r3,r6
   103c8:	1800091e 	bne	r3,zero,103f0 <strlen+0x78>
   103cc:	10800104 	addi	r2,r2,4
   103d0:	10c00017 	ldw	r3,0(r2)
   103d4:	19cb883a 	add	r5,r3,r7
   103d8:	00c6303a 	nor	r3,zero,r3
   103dc:	28c6703a 	and	r3,r5,r3
   103e0:	1986703a 	and	r3,r3,r6
   103e4:	183ff926 	beq	r3,zero,103cc <_gp+0xffff0e08>
   103e8:	00000106 	br	103f0 <strlen+0x78>
   103ec:	10800044 	addi	r2,r2,1
   103f0:	10c00007 	ldb	r3,0(r2)
   103f4:	183ffd1e 	bne	r3,zero,103ec <_gp+0xffff0e28>
   103f8:	1105c83a 	sub	r2,r2,r4
   103fc:	f800283a 	ret
   10400:	2005883a 	mov	r2,r4
   10404:	003fe706 	br	103a4 <_gp+0xffff0de0>
   10408:	0005883a 	mov	r2,zero
   1040c:	f800283a 	ret

00010410 <__fp_unlock>:
   10410:	0005883a 	mov	r2,zero
   10414:	f800283a 	ret

00010418 <_cleanup_r>:
   10418:	01400074 	movhi	r5,1
   1041c:	2948f204 	addi	r5,r5,9160
   10420:	0010d4c1 	jmpi	10d4c <_fwalk_reent>

00010424 <__sinit.part.1>:
   10424:	defff704 	addi	sp,sp,-36
   10428:	00c00074 	movhi	r3,1
   1042c:	dfc00815 	stw	ra,32(sp)
   10430:	ddc00715 	stw	r23,28(sp)
   10434:	dd800615 	stw	r22,24(sp)
   10438:	dd400515 	stw	r21,20(sp)
   1043c:	dd000415 	stw	r20,16(sp)
   10440:	dcc00315 	stw	r19,12(sp)
   10444:	dc800215 	stw	r18,8(sp)
   10448:	dc400115 	stw	r17,4(sp)
   1044c:	dc000015 	stw	r16,0(sp)
   10450:	18c10604 	addi	r3,r3,1048
   10454:	24000117 	ldw	r16,4(r4)
   10458:	20c00f15 	stw	r3,60(r4)
   1045c:	2080bb04 	addi	r2,r4,748
   10460:	00c000c4 	movi	r3,3
   10464:	20c0b915 	stw	r3,740(r4)
   10468:	2080ba15 	stw	r2,744(r4)
   1046c:	2000b815 	stw	zero,736(r4)
   10470:	05c00204 	movi	r23,8
   10474:	00800104 	movi	r2,4
   10478:	2025883a 	mov	r18,r4
   1047c:	b80d883a 	mov	r6,r23
   10480:	81001704 	addi	r4,r16,92
   10484:	000b883a 	mov	r5,zero
   10488:	80000015 	stw	zero,0(r16)
   1048c:	80000115 	stw	zero,4(r16)
   10490:	80000215 	stw	zero,8(r16)
   10494:	8080030d 	sth	r2,12(r16)
   10498:	80001915 	stw	zero,100(r16)
   1049c:	8000038d 	sth	zero,14(r16)
   104a0:	80000415 	stw	zero,16(r16)
   104a4:	80000515 	stw	zero,20(r16)
   104a8:	80000615 	stw	zero,24(r16)
   104ac:	00119a40 	call	119a4 <memset>
   104b0:	05800074 	movhi	r22,1
   104b4:	94400217 	ldw	r17,8(r18)
   104b8:	05400074 	movhi	r21,1
   104bc:	05000074 	movhi	r20,1
   104c0:	04c00074 	movhi	r19,1
   104c4:	b5882104 	addi	r22,r22,8324
   104c8:	ad483804 	addi	r21,r21,8416
   104cc:	a5085704 	addi	r20,r20,8540
   104d0:	9cc86e04 	addi	r19,r19,8632
   104d4:	85800815 	stw	r22,32(r16)
   104d8:	85400915 	stw	r21,36(r16)
   104dc:	85000a15 	stw	r20,40(r16)
   104e0:	84c00b15 	stw	r19,44(r16)
   104e4:	84000715 	stw	r16,28(r16)
   104e8:	00800284 	movi	r2,10
   104ec:	8880030d 	sth	r2,12(r17)
   104f0:	00800044 	movi	r2,1
   104f4:	b80d883a 	mov	r6,r23
   104f8:	89001704 	addi	r4,r17,92
   104fc:	000b883a 	mov	r5,zero
   10500:	88000015 	stw	zero,0(r17)
   10504:	88000115 	stw	zero,4(r17)
   10508:	88000215 	stw	zero,8(r17)
   1050c:	88001915 	stw	zero,100(r17)
   10510:	8880038d 	sth	r2,14(r17)
   10514:	88000415 	stw	zero,16(r17)
   10518:	88000515 	stw	zero,20(r17)
   1051c:	88000615 	stw	zero,24(r17)
   10520:	00119a40 	call	119a4 <memset>
   10524:	94000317 	ldw	r16,12(r18)
   10528:	00800484 	movi	r2,18
   1052c:	8c400715 	stw	r17,28(r17)
   10530:	8d800815 	stw	r22,32(r17)
   10534:	8d400915 	stw	r21,36(r17)
   10538:	8d000a15 	stw	r20,40(r17)
   1053c:	8cc00b15 	stw	r19,44(r17)
   10540:	8080030d 	sth	r2,12(r16)
   10544:	00800084 	movi	r2,2
   10548:	80000015 	stw	zero,0(r16)
   1054c:	80000115 	stw	zero,4(r16)
   10550:	80000215 	stw	zero,8(r16)
   10554:	80001915 	stw	zero,100(r16)
   10558:	8080038d 	sth	r2,14(r16)
   1055c:	80000415 	stw	zero,16(r16)
   10560:	80000515 	stw	zero,20(r16)
   10564:	80000615 	stw	zero,24(r16)
   10568:	b80d883a 	mov	r6,r23
   1056c:	000b883a 	mov	r5,zero
   10570:	81001704 	addi	r4,r16,92
   10574:	00119a40 	call	119a4 <memset>
   10578:	00800044 	movi	r2,1
   1057c:	84000715 	stw	r16,28(r16)
   10580:	85800815 	stw	r22,32(r16)
   10584:	85400915 	stw	r21,36(r16)
   10588:	85000a15 	stw	r20,40(r16)
   1058c:	84c00b15 	stw	r19,44(r16)
   10590:	90800e15 	stw	r2,56(r18)
   10594:	dfc00817 	ldw	ra,32(sp)
   10598:	ddc00717 	ldw	r23,28(sp)
   1059c:	dd800617 	ldw	r22,24(sp)
   105a0:	dd400517 	ldw	r21,20(sp)
   105a4:	dd000417 	ldw	r20,16(sp)
   105a8:	dcc00317 	ldw	r19,12(sp)
   105ac:	dc800217 	ldw	r18,8(sp)
   105b0:	dc400117 	ldw	r17,4(sp)
   105b4:	dc000017 	ldw	r16,0(sp)
   105b8:	dec00904 	addi	sp,sp,36
   105bc:	f800283a 	ret

000105c0 <__fp_lock>:
   105c0:	0005883a 	mov	r2,zero
   105c4:	f800283a 	ret

000105c8 <__sfmoreglue>:
   105c8:	defffc04 	addi	sp,sp,-16
   105cc:	dc800215 	stw	r18,8(sp)
   105d0:	2825883a 	mov	r18,r5
   105d4:	dc000015 	stw	r16,0(sp)
   105d8:	01401a04 	movi	r5,104
   105dc:	2021883a 	mov	r16,r4
   105e0:	913fffc4 	addi	r4,r18,-1
   105e4:	dfc00315 	stw	ra,12(sp)
   105e8:	dc400115 	stw	r17,4(sp)
   105ec:	00130880 	call	13088 <__mulsi3>
   105f0:	8009883a 	mov	r4,r16
   105f4:	11401d04 	addi	r5,r2,116
   105f8:	1023883a 	mov	r17,r2
   105fc:	0010e100 	call	10e10 <_malloc_r>
   10600:	1021883a 	mov	r16,r2
   10604:	10000726 	beq	r2,zero,10624 <__sfmoreglue+0x5c>
   10608:	11000304 	addi	r4,r2,12
   1060c:	10000015 	stw	zero,0(r2)
   10610:	14800115 	stw	r18,4(r2)
   10614:	11000215 	stw	r4,8(r2)
   10618:	89801a04 	addi	r6,r17,104
   1061c:	000b883a 	mov	r5,zero
   10620:	00119a40 	call	119a4 <memset>
   10624:	8005883a 	mov	r2,r16
   10628:	dfc00317 	ldw	ra,12(sp)
   1062c:	dc800217 	ldw	r18,8(sp)
   10630:	dc400117 	ldw	r17,4(sp)
   10634:	dc000017 	ldw	r16,0(sp)
   10638:	dec00404 	addi	sp,sp,16
   1063c:	f800283a 	ret

00010640 <__sfp>:
   10640:	defffb04 	addi	sp,sp,-20
   10644:	dc000015 	stw	r16,0(sp)
   10648:	04000074 	movhi	r16,1
   1064c:	841d7104 	addi	r16,r16,30148
   10650:	dcc00315 	stw	r19,12(sp)
   10654:	2027883a 	mov	r19,r4
   10658:	81000017 	ldw	r4,0(r16)
   1065c:	dfc00415 	stw	ra,16(sp)
   10660:	dc800215 	stw	r18,8(sp)
   10664:	20800e17 	ldw	r2,56(r4)
   10668:	dc400115 	stw	r17,4(sp)
   1066c:	1000021e 	bne	r2,zero,10678 <__sfp+0x38>
   10670:	00104240 	call	10424 <__sinit.part.1>
   10674:	81000017 	ldw	r4,0(r16)
   10678:	2480b804 	addi	r18,r4,736
   1067c:	047fffc4 	movi	r17,-1
   10680:	91000117 	ldw	r4,4(r18)
   10684:	94000217 	ldw	r16,8(r18)
   10688:	213fffc4 	addi	r4,r4,-1
   1068c:	20000a16 	blt	r4,zero,106b8 <__sfp+0x78>
   10690:	8080030f 	ldh	r2,12(r16)
   10694:	10000c26 	beq	r2,zero,106c8 <__sfp+0x88>
   10698:	80c01d04 	addi	r3,r16,116
   1069c:	00000206 	br	106a8 <__sfp+0x68>
   106a0:	18bfe60f 	ldh	r2,-104(r3)
   106a4:	10000826 	beq	r2,zero,106c8 <__sfp+0x88>
   106a8:	213fffc4 	addi	r4,r4,-1
   106ac:	1c3ffd04 	addi	r16,r3,-12
   106b0:	18c01a04 	addi	r3,r3,104
   106b4:	247ffa1e 	bne	r4,r17,106a0 <_gp+0xffff10dc>
   106b8:	90800017 	ldw	r2,0(r18)
   106bc:	10001d26 	beq	r2,zero,10734 <__sfp+0xf4>
   106c0:	1025883a 	mov	r18,r2
   106c4:	003fee06 	br	10680 <_gp+0xffff10bc>
   106c8:	00bfffc4 	movi	r2,-1
   106cc:	8080038d 	sth	r2,14(r16)
   106d0:	00800044 	movi	r2,1
   106d4:	8080030d 	sth	r2,12(r16)
   106d8:	80001915 	stw	zero,100(r16)
   106dc:	80000015 	stw	zero,0(r16)
   106e0:	80000215 	stw	zero,8(r16)
   106e4:	80000115 	stw	zero,4(r16)
   106e8:	80000415 	stw	zero,16(r16)
   106ec:	80000515 	stw	zero,20(r16)
   106f0:	80000615 	stw	zero,24(r16)
   106f4:	01800204 	movi	r6,8
   106f8:	000b883a 	mov	r5,zero
   106fc:	81001704 	addi	r4,r16,92
   10700:	00119a40 	call	119a4 <memset>
   10704:	8005883a 	mov	r2,r16
   10708:	80000c15 	stw	zero,48(r16)
   1070c:	80000d15 	stw	zero,52(r16)
   10710:	80001115 	stw	zero,68(r16)
   10714:	80001215 	stw	zero,72(r16)
   10718:	dfc00417 	ldw	ra,16(sp)
   1071c:	dcc00317 	ldw	r19,12(sp)
   10720:	dc800217 	ldw	r18,8(sp)
   10724:	dc400117 	ldw	r17,4(sp)
   10728:	dc000017 	ldw	r16,0(sp)
   1072c:	dec00504 	addi	sp,sp,20
   10730:	f800283a 	ret
   10734:	01400104 	movi	r5,4
   10738:	9809883a 	mov	r4,r19
   1073c:	00105c80 	call	105c8 <__sfmoreglue>
   10740:	90800015 	stw	r2,0(r18)
   10744:	103fde1e 	bne	r2,zero,106c0 <_gp+0xffff10fc>
   10748:	00800304 	movi	r2,12
   1074c:	98800015 	stw	r2,0(r19)
   10750:	0005883a 	mov	r2,zero
   10754:	003ff006 	br	10718 <_gp+0xffff1154>

00010758 <_cleanup>:
   10758:	00800074 	movhi	r2,1
   1075c:	109d7104 	addi	r2,r2,30148
   10760:	11000017 	ldw	r4,0(r2)
   10764:	01400074 	movhi	r5,1
   10768:	2948f204 	addi	r5,r5,9160
   1076c:	0010d4c1 	jmpi	10d4c <_fwalk_reent>

00010770 <__sinit>:
   10770:	20800e17 	ldw	r2,56(r4)
   10774:	10000126 	beq	r2,zero,1077c <__sinit+0xc>
   10778:	f800283a 	ret
   1077c:	00104241 	jmpi	10424 <__sinit.part.1>

00010780 <__sfp_lock_acquire>:
   10780:	f800283a 	ret

00010784 <__sfp_lock_release>:
   10784:	f800283a 	ret

00010788 <__sinit_lock_acquire>:
   10788:	f800283a 	ret

0001078c <__sinit_lock_release>:
   1078c:	f800283a 	ret

00010790 <__fp_lock_all>:
   10790:	00800074 	movhi	r2,1
   10794:	109d7204 	addi	r2,r2,30152
   10798:	11000017 	ldw	r4,0(r2)
   1079c:	01400074 	movhi	r5,1
   107a0:	29417004 	addi	r5,r5,1472
   107a4:	0010c881 	jmpi	10c88 <_fwalk>

000107a8 <__fp_unlock_all>:
   107a8:	00800074 	movhi	r2,1
   107ac:	109d7204 	addi	r2,r2,30152
   107b0:	11000017 	ldw	r4,0(r2)
   107b4:	01400074 	movhi	r5,1
   107b8:	29410404 	addi	r5,r5,1040
   107bc:	0010c881 	jmpi	10c88 <_fwalk>

000107c0 <__sfvwrite_r>:
   107c0:	30800217 	ldw	r2,8(r6)
   107c4:	10006726 	beq	r2,zero,10964 <__sfvwrite_r+0x1a4>
   107c8:	28c0030b 	ldhu	r3,12(r5)
   107cc:	defff404 	addi	sp,sp,-48
   107d0:	dd400715 	stw	r21,28(sp)
   107d4:	dd000615 	stw	r20,24(sp)
   107d8:	dc000215 	stw	r16,8(sp)
   107dc:	dfc00b15 	stw	ra,44(sp)
   107e0:	df000a15 	stw	fp,40(sp)
   107e4:	ddc00915 	stw	r23,36(sp)
   107e8:	dd800815 	stw	r22,32(sp)
   107ec:	dcc00515 	stw	r19,20(sp)
   107f0:	dc800415 	stw	r18,16(sp)
   107f4:	dc400315 	stw	r17,12(sp)
   107f8:	1880020c 	andi	r2,r3,8
   107fc:	2821883a 	mov	r16,r5
   10800:	202b883a 	mov	r21,r4
   10804:	3029883a 	mov	r20,r6
   10808:	10002726 	beq	r2,zero,108a8 <__sfvwrite_r+0xe8>
   1080c:	28800417 	ldw	r2,16(r5)
   10810:	10002526 	beq	r2,zero,108a8 <__sfvwrite_r+0xe8>
   10814:	1880008c 	andi	r2,r3,2
   10818:	a4400017 	ldw	r17,0(r20)
   1081c:	10002a26 	beq	r2,zero,108c8 <__sfvwrite_r+0x108>
   10820:	05a00034 	movhi	r22,32768
   10824:	0027883a 	mov	r19,zero
   10828:	0025883a 	mov	r18,zero
   1082c:	b5bf0004 	addi	r22,r22,-1024
   10830:	980d883a 	mov	r6,r19
   10834:	a809883a 	mov	r4,r21
   10838:	90004626 	beq	r18,zero,10954 <__sfvwrite_r+0x194>
   1083c:	900f883a 	mov	r7,r18
   10840:	b480022e 	bgeu	r22,r18,1084c <__sfvwrite_r+0x8c>
   10844:	01e00034 	movhi	r7,32768
   10848:	39ff0004 	addi	r7,r7,-1024
   1084c:	80800917 	ldw	r2,36(r16)
   10850:	81400717 	ldw	r5,28(r16)
   10854:	103ee83a 	callr	r2
   10858:	00805a0e 	bge	zero,r2,109c4 <__sfvwrite_r+0x204>
   1085c:	a0c00217 	ldw	r3,8(r20)
   10860:	98a7883a 	add	r19,r19,r2
   10864:	90a5c83a 	sub	r18,r18,r2
   10868:	1885c83a 	sub	r2,r3,r2
   1086c:	a0800215 	stw	r2,8(r20)
   10870:	103fef1e 	bne	r2,zero,10830 <_gp+0xffff126c>
   10874:	0005883a 	mov	r2,zero
   10878:	dfc00b17 	ldw	ra,44(sp)
   1087c:	df000a17 	ldw	fp,40(sp)
   10880:	ddc00917 	ldw	r23,36(sp)
   10884:	dd800817 	ldw	r22,32(sp)
   10888:	dd400717 	ldw	r21,28(sp)
   1088c:	dd000617 	ldw	r20,24(sp)
   10890:	dcc00517 	ldw	r19,20(sp)
   10894:	dc800417 	ldw	r18,16(sp)
   10898:	dc400317 	ldw	r17,12(sp)
   1089c:	dc000217 	ldw	r16,8(sp)
   108a0:	dec00c04 	addi	sp,sp,48
   108a4:	f800283a 	ret
   108a8:	800b883a 	mov	r5,r16
   108ac:	a809883a 	mov	r4,r21
   108b0:	00122200 	call	12220 <__swsetup_r>
   108b4:	1000ee1e 	bne	r2,zero,10c70 <__sfvwrite_r+0x4b0>
   108b8:	80c0030b 	ldhu	r3,12(r16)
   108bc:	a4400017 	ldw	r17,0(r20)
   108c0:	1880008c 	andi	r2,r3,2
   108c4:	103fd61e 	bne	r2,zero,10820 <_gp+0xffff125c>
   108c8:	1880004c 	andi	r2,r3,1
   108cc:	1000421e 	bne	r2,zero,109d8 <__sfvwrite_r+0x218>
   108d0:	0039883a 	mov	fp,zero
   108d4:	0025883a 	mov	r18,zero
   108d8:	90001a26 	beq	r18,zero,10944 <__sfvwrite_r+0x184>
   108dc:	1880800c 	andi	r2,r3,512
   108e0:	84c00217 	ldw	r19,8(r16)
   108e4:	10002126 	beq	r2,zero,1096c <__sfvwrite_r+0x1ac>
   108e8:	982f883a 	mov	r23,r19
   108ec:	94c09636 	bltu	r18,r19,10b48 <__sfvwrite_r+0x388>
   108f0:	1881200c 	andi	r2,r3,1152
   108f4:	1000a11e 	bne	r2,zero,10b7c <__sfvwrite_r+0x3bc>
   108f8:	81000017 	ldw	r4,0(r16)
   108fc:	b80d883a 	mov	r6,r23
   10900:	e00b883a 	mov	r5,fp
   10904:	00118480 	call	11848 <memmove>
   10908:	80c00217 	ldw	r3,8(r16)
   1090c:	81000017 	ldw	r4,0(r16)
   10910:	9005883a 	mov	r2,r18
   10914:	1ce7c83a 	sub	r19,r3,r19
   10918:	25cf883a 	add	r7,r4,r23
   1091c:	84c00215 	stw	r19,8(r16)
   10920:	81c00015 	stw	r7,0(r16)
   10924:	a0c00217 	ldw	r3,8(r20)
   10928:	e0b9883a 	add	fp,fp,r2
   1092c:	90a5c83a 	sub	r18,r18,r2
   10930:	18a7c83a 	sub	r19,r3,r2
   10934:	a4c00215 	stw	r19,8(r20)
   10938:	983fce26 	beq	r19,zero,10874 <_gp+0xffff12b0>
   1093c:	80c0030b 	ldhu	r3,12(r16)
   10940:	903fe61e 	bne	r18,zero,108dc <_gp+0xffff1318>
   10944:	8f000017 	ldw	fp,0(r17)
   10948:	8c800117 	ldw	r18,4(r17)
   1094c:	8c400204 	addi	r17,r17,8
   10950:	003fe106 	br	108d8 <_gp+0xffff1314>
   10954:	8cc00017 	ldw	r19,0(r17)
   10958:	8c800117 	ldw	r18,4(r17)
   1095c:	8c400204 	addi	r17,r17,8
   10960:	003fb306 	br	10830 <_gp+0xffff126c>
   10964:	0005883a 	mov	r2,zero
   10968:	f800283a 	ret
   1096c:	81000017 	ldw	r4,0(r16)
   10970:	80800417 	ldw	r2,16(r16)
   10974:	11005a36 	bltu	r2,r4,10ae0 <__sfvwrite_r+0x320>
   10978:	85c00517 	ldw	r23,20(r16)
   1097c:	95c05836 	bltu	r18,r23,10ae0 <__sfvwrite_r+0x320>
   10980:	00a00034 	movhi	r2,32768
   10984:	10bfffc4 	addi	r2,r2,-1
   10988:	9009883a 	mov	r4,r18
   1098c:	1480012e 	bgeu	r2,r18,10994 <__sfvwrite_r+0x1d4>
   10990:	1009883a 	mov	r4,r2
   10994:	b80b883a 	mov	r5,r23
   10998:	0012ed40 	call	12ed4 <__divsi3>
   1099c:	b80b883a 	mov	r5,r23
   109a0:	1009883a 	mov	r4,r2
   109a4:	00130880 	call	13088 <__mulsi3>
   109a8:	81400717 	ldw	r5,28(r16)
   109ac:	80c00917 	ldw	r3,36(r16)
   109b0:	100f883a 	mov	r7,r2
   109b4:	e00d883a 	mov	r6,fp
   109b8:	a809883a 	mov	r4,r21
   109bc:	183ee83a 	callr	r3
   109c0:	00bfd816 	blt	zero,r2,10924 <_gp+0xffff1360>
   109c4:	8080030b 	ldhu	r2,12(r16)
   109c8:	10801014 	ori	r2,r2,64
   109cc:	8080030d 	sth	r2,12(r16)
   109d0:	00bfffc4 	movi	r2,-1
   109d4:	003fa806 	br	10878 <_gp+0xffff12b4>
   109d8:	0027883a 	mov	r19,zero
   109dc:	0011883a 	mov	r8,zero
   109e0:	0039883a 	mov	fp,zero
   109e4:	0025883a 	mov	r18,zero
   109e8:	90001f26 	beq	r18,zero,10a68 <__sfvwrite_r+0x2a8>
   109ec:	40005a26 	beq	r8,zero,10b58 <__sfvwrite_r+0x398>
   109f0:	982d883a 	mov	r22,r19
   109f4:	94c0012e 	bgeu	r18,r19,109fc <__sfvwrite_r+0x23c>
   109f8:	902d883a 	mov	r22,r18
   109fc:	81000017 	ldw	r4,0(r16)
   10a00:	80800417 	ldw	r2,16(r16)
   10a04:	b02f883a 	mov	r23,r22
   10a08:	81c00517 	ldw	r7,20(r16)
   10a0c:	1100032e 	bgeu	r2,r4,10a1c <__sfvwrite_r+0x25c>
   10a10:	80c00217 	ldw	r3,8(r16)
   10a14:	38c7883a 	add	r3,r7,r3
   10a18:	1d801816 	blt	r3,r22,10a7c <__sfvwrite_r+0x2bc>
   10a1c:	b1c03e16 	blt	r22,r7,10b18 <__sfvwrite_r+0x358>
   10a20:	80800917 	ldw	r2,36(r16)
   10a24:	81400717 	ldw	r5,28(r16)
   10a28:	e00d883a 	mov	r6,fp
   10a2c:	da000115 	stw	r8,4(sp)
   10a30:	a809883a 	mov	r4,r21
   10a34:	103ee83a 	callr	r2
   10a38:	102f883a 	mov	r23,r2
   10a3c:	da000117 	ldw	r8,4(sp)
   10a40:	00bfe00e 	bge	zero,r2,109c4 <_gp+0xffff1400>
   10a44:	9de7c83a 	sub	r19,r19,r23
   10a48:	98001f26 	beq	r19,zero,10ac8 <__sfvwrite_r+0x308>
   10a4c:	a0800217 	ldw	r2,8(r20)
   10a50:	e5f9883a 	add	fp,fp,r23
   10a54:	95e5c83a 	sub	r18,r18,r23
   10a58:	15efc83a 	sub	r23,r2,r23
   10a5c:	a5c00215 	stw	r23,8(r20)
   10a60:	b83f8426 	beq	r23,zero,10874 <_gp+0xffff12b0>
   10a64:	903fe11e 	bne	r18,zero,109ec <_gp+0xffff1428>
   10a68:	8f000017 	ldw	fp,0(r17)
   10a6c:	8c800117 	ldw	r18,4(r17)
   10a70:	0011883a 	mov	r8,zero
   10a74:	8c400204 	addi	r17,r17,8
   10a78:	003fdb06 	br	109e8 <_gp+0xffff1424>
   10a7c:	180d883a 	mov	r6,r3
   10a80:	e00b883a 	mov	r5,fp
   10a84:	da000115 	stw	r8,4(sp)
   10a88:	d8c00015 	stw	r3,0(sp)
   10a8c:	00118480 	call	11848 <memmove>
   10a90:	d8c00017 	ldw	r3,0(sp)
   10a94:	80800017 	ldw	r2,0(r16)
   10a98:	800b883a 	mov	r5,r16
   10a9c:	a809883a 	mov	r4,r21
   10aa0:	10c5883a 	add	r2,r2,r3
   10aa4:	80800015 	stw	r2,0(r16)
   10aa8:	d8c00015 	stw	r3,0(sp)
   10aac:	00126e80 	call	126e8 <_fflush_r>
   10ab0:	d8c00017 	ldw	r3,0(sp)
   10ab4:	da000117 	ldw	r8,4(sp)
   10ab8:	103fc21e 	bne	r2,zero,109c4 <_gp+0xffff1400>
   10abc:	182f883a 	mov	r23,r3
   10ac0:	9de7c83a 	sub	r19,r19,r23
   10ac4:	983fe11e 	bne	r19,zero,10a4c <_gp+0xffff1488>
   10ac8:	800b883a 	mov	r5,r16
   10acc:	a809883a 	mov	r4,r21
   10ad0:	00126e80 	call	126e8 <_fflush_r>
   10ad4:	103fbb1e 	bne	r2,zero,109c4 <_gp+0xffff1400>
   10ad8:	0011883a 	mov	r8,zero
   10adc:	003fdb06 	br	10a4c <_gp+0xffff1488>
   10ae0:	94c0012e 	bgeu	r18,r19,10ae8 <__sfvwrite_r+0x328>
   10ae4:	9027883a 	mov	r19,r18
   10ae8:	980d883a 	mov	r6,r19
   10aec:	e00b883a 	mov	r5,fp
   10af0:	00118480 	call	11848 <memmove>
   10af4:	80800217 	ldw	r2,8(r16)
   10af8:	80c00017 	ldw	r3,0(r16)
   10afc:	14c5c83a 	sub	r2,r2,r19
   10b00:	1cc7883a 	add	r3,r3,r19
   10b04:	80800215 	stw	r2,8(r16)
   10b08:	80c00015 	stw	r3,0(r16)
   10b0c:	10004326 	beq	r2,zero,10c1c <__sfvwrite_r+0x45c>
   10b10:	9805883a 	mov	r2,r19
   10b14:	003f8306 	br	10924 <_gp+0xffff1360>
   10b18:	b00d883a 	mov	r6,r22
   10b1c:	e00b883a 	mov	r5,fp
   10b20:	da000115 	stw	r8,4(sp)
   10b24:	00118480 	call	11848 <memmove>
   10b28:	80800217 	ldw	r2,8(r16)
   10b2c:	80c00017 	ldw	r3,0(r16)
   10b30:	da000117 	ldw	r8,4(sp)
   10b34:	1585c83a 	sub	r2,r2,r22
   10b38:	1dad883a 	add	r22,r3,r22
   10b3c:	80800215 	stw	r2,8(r16)
   10b40:	85800015 	stw	r22,0(r16)
   10b44:	003fbf06 	br	10a44 <_gp+0xffff1480>
   10b48:	81000017 	ldw	r4,0(r16)
   10b4c:	9027883a 	mov	r19,r18
   10b50:	902f883a 	mov	r23,r18
   10b54:	003f6906 	br	108fc <_gp+0xffff1338>
   10b58:	900d883a 	mov	r6,r18
   10b5c:	01400284 	movi	r5,10
   10b60:	e009883a 	mov	r4,fp
   10b64:	001161c0 	call	1161c <memchr>
   10b68:	10003e26 	beq	r2,zero,10c64 <__sfvwrite_r+0x4a4>
   10b6c:	10800044 	addi	r2,r2,1
   10b70:	1727c83a 	sub	r19,r2,fp
   10b74:	02000044 	movi	r8,1
   10b78:	003f9d06 	br	109f0 <_gp+0xffff142c>
   10b7c:	80800517 	ldw	r2,20(r16)
   10b80:	81400417 	ldw	r5,16(r16)
   10b84:	81c00017 	ldw	r7,0(r16)
   10b88:	10a7883a 	add	r19,r2,r2
   10b8c:	9885883a 	add	r2,r19,r2
   10b90:	1026d7fa 	srli	r19,r2,31
   10b94:	396dc83a 	sub	r22,r7,r5
   10b98:	b1000044 	addi	r4,r22,1
   10b9c:	9885883a 	add	r2,r19,r2
   10ba0:	1027d07a 	srai	r19,r2,1
   10ba4:	2485883a 	add	r2,r4,r18
   10ba8:	980d883a 	mov	r6,r19
   10bac:	9880022e 	bgeu	r19,r2,10bb8 <__sfvwrite_r+0x3f8>
   10bb0:	1027883a 	mov	r19,r2
   10bb4:	100d883a 	mov	r6,r2
   10bb8:	18c1000c 	andi	r3,r3,1024
   10bbc:	18001c26 	beq	r3,zero,10c30 <__sfvwrite_r+0x470>
   10bc0:	300b883a 	mov	r5,r6
   10bc4:	a809883a 	mov	r4,r21
   10bc8:	0010e100 	call	10e10 <_malloc_r>
   10bcc:	102f883a 	mov	r23,r2
   10bd0:	10002926 	beq	r2,zero,10c78 <__sfvwrite_r+0x4b8>
   10bd4:	81400417 	ldw	r5,16(r16)
   10bd8:	b00d883a 	mov	r6,r22
   10bdc:	1009883a 	mov	r4,r2
   10be0:	00117000 	call	11700 <memcpy>
   10be4:	8080030b 	ldhu	r2,12(r16)
   10be8:	00fedfc4 	movi	r3,-1153
   10bec:	10c4703a 	and	r2,r2,r3
   10bf0:	10802014 	ori	r2,r2,128
   10bf4:	8080030d 	sth	r2,12(r16)
   10bf8:	bd89883a 	add	r4,r23,r22
   10bfc:	9d8fc83a 	sub	r7,r19,r22
   10c00:	85c00415 	stw	r23,16(r16)
   10c04:	84c00515 	stw	r19,20(r16)
   10c08:	81000015 	stw	r4,0(r16)
   10c0c:	9027883a 	mov	r19,r18
   10c10:	81c00215 	stw	r7,8(r16)
   10c14:	902f883a 	mov	r23,r18
   10c18:	003f3806 	br	108fc <_gp+0xffff1338>
   10c1c:	800b883a 	mov	r5,r16
   10c20:	a809883a 	mov	r4,r21
   10c24:	00126e80 	call	126e8 <_fflush_r>
   10c28:	103fb926 	beq	r2,zero,10b10 <_gp+0xffff154c>
   10c2c:	003f6506 	br	109c4 <_gp+0xffff1400>
   10c30:	a809883a 	mov	r4,r21
   10c34:	0011acc0 	call	11acc <_realloc_r>
   10c38:	102f883a 	mov	r23,r2
   10c3c:	103fee1e 	bne	r2,zero,10bf8 <_gp+0xffff1634>
   10c40:	81400417 	ldw	r5,16(r16)
   10c44:	a809883a 	mov	r4,r21
   10c48:	00128980 	call	12898 <_free_r>
   10c4c:	8080030b 	ldhu	r2,12(r16)
   10c50:	00ffdfc4 	movi	r3,-129
   10c54:	1884703a 	and	r2,r3,r2
   10c58:	00c00304 	movi	r3,12
   10c5c:	a8c00015 	stw	r3,0(r21)
   10c60:	003f5906 	br	109c8 <_gp+0xffff1404>
   10c64:	94c00044 	addi	r19,r18,1
   10c68:	02000044 	movi	r8,1
   10c6c:	003f6006 	br	109f0 <_gp+0xffff142c>
   10c70:	00bfffc4 	movi	r2,-1
   10c74:	003f0006 	br	10878 <_gp+0xffff12b4>
   10c78:	00800304 	movi	r2,12
   10c7c:	a8800015 	stw	r2,0(r21)
   10c80:	8080030b 	ldhu	r2,12(r16)
   10c84:	003f5006 	br	109c8 <_gp+0xffff1404>

00010c88 <_fwalk>:
   10c88:	defff704 	addi	sp,sp,-36
   10c8c:	dd000415 	stw	r20,16(sp)
   10c90:	dfc00815 	stw	ra,32(sp)
   10c94:	ddc00715 	stw	r23,28(sp)
   10c98:	dd800615 	stw	r22,24(sp)
   10c9c:	dd400515 	stw	r21,20(sp)
   10ca0:	dcc00315 	stw	r19,12(sp)
   10ca4:	dc800215 	stw	r18,8(sp)
   10ca8:	dc400115 	stw	r17,4(sp)
   10cac:	dc000015 	stw	r16,0(sp)
   10cb0:	2500b804 	addi	r20,r4,736
   10cb4:	a0002326 	beq	r20,zero,10d44 <_fwalk+0xbc>
   10cb8:	282b883a 	mov	r21,r5
   10cbc:	002f883a 	mov	r23,zero
   10cc0:	05800044 	movi	r22,1
   10cc4:	04ffffc4 	movi	r19,-1
   10cc8:	a4400117 	ldw	r17,4(r20)
   10ccc:	a4800217 	ldw	r18,8(r20)
   10cd0:	8c7fffc4 	addi	r17,r17,-1
   10cd4:	88000d16 	blt	r17,zero,10d0c <_fwalk+0x84>
   10cd8:	94000304 	addi	r16,r18,12
   10cdc:	94800384 	addi	r18,r18,14
   10ce0:	8080000b 	ldhu	r2,0(r16)
   10ce4:	8c7fffc4 	addi	r17,r17,-1
   10ce8:	813ffd04 	addi	r4,r16,-12
   10cec:	b080042e 	bgeu	r22,r2,10d00 <_fwalk+0x78>
   10cf0:	9080000f 	ldh	r2,0(r18)
   10cf4:	14c00226 	beq	r2,r19,10d00 <_fwalk+0x78>
   10cf8:	a83ee83a 	callr	r21
   10cfc:	b8aeb03a 	or	r23,r23,r2
   10d00:	84001a04 	addi	r16,r16,104
   10d04:	94801a04 	addi	r18,r18,104
   10d08:	8cfff51e 	bne	r17,r19,10ce0 <_gp+0xffff171c>
   10d0c:	a5000017 	ldw	r20,0(r20)
   10d10:	a03fed1e 	bne	r20,zero,10cc8 <_gp+0xffff1704>
   10d14:	b805883a 	mov	r2,r23
   10d18:	dfc00817 	ldw	ra,32(sp)
   10d1c:	ddc00717 	ldw	r23,28(sp)
   10d20:	dd800617 	ldw	r22,24(sp)
   10d24:	dd400517 	ldw	r21,20(sp)
   10d28:	dd000417 	ldw	r20,16(sp)
   10d2c:	dcc00317 	ldw	r19,12(sp)
   10d30:	dc800217 	ldw	r18,8(sp)
   10d34:	dc400117 	ldw	r17,4(sp)
   10d38:	dc000017 	ldw	r16,0(sp)
   10d3c:	dec00904 	addi	sp,sp,36
   10d40:	f800283a 	ret
   10d44:	002f883a 	mov	r23,zero
   10d48:	003ff206 	br	10d14 <_gp+0xffff1750>

00010d4c <_fwalk_reent>:
   10d4c:	defff704 	addi	sp,sp,-36
   10d50:	dd000415 	stw	r20,16(sp)
   10d54:	dfc00815 	stw	ra,32(sp)
   10d58:	ddc00715 	stw	r23,28(sp)
   10d5c:	dd800615 	stw	r22,24(sp)
   10d60:	dd400515 	stw	r21,20(sp)
   10d64:	dcc00315 	stw	r19,12(sp)
   10d68:	dc800215 	stw	r18,8(sp)
   10d6c:	dc400115 	stw	r17,4(sp)
   10d70:	dc000015 	stw	r16,0(sp)
   10d74:	2500b804 	addi	r20,r4,736
   10d78:	a0002326 	beq	r20,zero,10e08 <_fwalk_reent+0xbc>
   10d7c:	282b883a 	mov	r21,r5
   10d80:	2027883a 	mov	r19,r4
   10d84:	002f883a 	mov	r23,zero
   10d88:	05800044 	movi	r22,1
   10d8c:	04bfffc4 	movi	r18,-1
   10d90:	a4400117 	ldw	r17,4(r20)
   10d94:	a4000217 	ldw	r16,8(r20)
   10d98:	8c7fffc4 	addi	r17,r17,-1
   10d9c:	88000c16 	blt	r17,zero,10dd0 <_fwalk_reent+0x84>
   10da0:	84000304 	addi	r16,r16,12
   10da4:	8080000b 	ldhu	r2,0(r16)
   10da8:	8c7fffc4 	addi	r17,r17,-1
   10dac:	817ffd04 	addi	r5,r16,-12
   10db0:	b080052e 	bgeu	r22,r2,10dc8 <_fwalk_reent+0x7c>
   10db4:	8080008f 	ldh	r2,2(r16)
   10db8:	9809883a 	mov	r4,r19
   10dbc:	14800226 	beq	r2,r18,10dc8 <_fwalk_reent+0x7c>
   10dc0:	a83ee83a 	callr	r21
   10dc4:	b8aeb03a 	or	r23,r23,r2
   10dc8:	84001a04 	addi	r16,r16,104
   10dcc:	8cbff51e 	bne	r17,r18,10da4 <_gp+0xffff17e0>
   10dd0:	a5000017 	ldw	r20,0(r20)
   10dd4:	a03fee1e 	bne	r20,zero,10d90 <_gp+0xffff17cc>
   10dd8:	b805883a 	mov	r2,r23
   10ddc:	dfc00817 	ldw	ra,32(sp)
   10de0:	ddc00717 	ldw	r23,28(sp)
   10de4:	dd800617 	ldw	r22,24(sp)
   10de8:	dd400517 	ldw	r21,20(sp)
   10dec:	dd000417 	ldw	r20,16(sp)
   10df0:	dcc00317 	ldw	r19,12(sp)
   10df4:	dc800217 	ldw	r18,8(sp)
   10df8:	dc400117 	ldw	r17,4(sp)
   10dfc:	dc000017 	ldw	r16,0(sp)
   10e00:	dec00904 	addi	sp,sp,36
   10e04:	f800283a 	ret
   10e08:	002f883a 	mov	r23,zero
   10e0c:	003ff206 	br	10dd8 <_gp+0xffff1814>

00010e10 <_malloc_r>:
   10e10:	defff504 	addi	sp,sp,-44
   10e14:	dc800315 	stw	r18,12(sp)
   10e18:	dfc00a15 	stw	ra,40(sp)
   10e1c:	df000915 	stw	fp,36(sp)
   10e20:	ddc00815 	stw	r23,32(sp)
   10e24:	dd800715 	stw	r22,28(sp)
   10e28:	dd400615 	stw	r21,24(sp)
   10e2c:	dd000515 	stw	r20,20(sp)
   10e30:	dcc00415 	stw	r19,16(sp)
   10e34:	dc400215 	stw	r17,8(sp)
   10e38:	dc000115 	stw	r16,4(sp)
   10e3c:	288002c4 	addi	r2,r5,11
   10e40:	00c00584 	movi	r3,22
   10e44:	2025883a 	mov	r18,r4
   10e48:	18807f2e 	bgeu	r3,r2,11048 <_malloc_r+0x238>
   10e4c:	047ffe04 	movi	r17,-8
   10e50:	1462703a 	and	r17,r2,r17
   10e54:	8800a316 	blt	r17,zero,110e4 <_malloc_r+0x2d4>
   10e58:	8940a236 	bltu	r17,r5,110e4 <_malloc_r+0x2d4>
   10e5c:	001364c0 	call	1364c <__malloc_lock>
   10e60:	00807dc4 	movi	r2,503
   10e64:	1441e92e 	bgeu	r2,r17,1160c <_malloc_r+0x7fc>
   10e68:	8804d27a 	srli	r2,r17,9
   10e6c:	1000a126 	beq	r2,zero,110f4 <_malloc_r+0x2e4>
   10e70:	00c00104 	movi	r3,4
   10e74:	18811e36 	bltu	r3,r2,112f0 <_malloc_r+0x4e0>
   10e78:	8804d1ba 	srli	r2,r17,6
   10e7c:	12000e44 	addi	r8,r2,57
   10e80:	11c00e04 	addi	r7,r2,56
   10e84:	4209883a 	add	r4,r8,r8
   10e88:	04c00074 	movhi	r19,1
   10e8c:	2109883a 	add	r4,r4,r4
   10e90:	9cd7d704 	addi	r19,r19,24412
   10e94:	2109883a 	add	r4,r4,r4
   10e98:	9909883a 	add	r4,r19,r4
   10e9c:	24000117 	ldw	r16,4(r4)
   10ea0:	213ffe04 	addi	r4,r4,-8
   10ea4:	24009726 	beq	r4,r16,11104 <_malloc_r+0x2f4>
   10ea8:	80800117 	ldw	r2,4(r16)
   10eac:	01bfff04 	movi	r6,-4
   10eb0:	014003c4 	movi	r5,15
   10eb4:	1184703a 	and	r2,r2,r6
   10eb8:	1447c83a 	sub	r3,r2,r17
   10ebc:	28c00716 	blt	r5,r3,10edc <_malloc_r+0xcc>
   10ec0:	1800920e 	bge	r3,zero,1110c <_malloc_r+0x2fc>
   10ec4:	84000317 	ldw	r16,12(r16)
   10ec8:	24008e26 	beq	r4,r16,11104 <_malloc_r+0x2f4>
   10ecc:	80800117 	ldw	r2,4(r16)
   10ed0:	1184703a 	and	r2,r2,r6
   10ed4:	1447c83a 	sub	r3,r2,r17
   10ed8:	28fff90e 	bge	r5,r3,10ec0 <_gp+0xffff18fc>
   10edc:	3809883a 	mov	r4,r7
   10ee0:	01800074 	movhi	r6,1
   10ee4:	9c000417 	ldw	r16,16(r19)
   10ee8:	3197d704 	addi	r6,r6,24412
   10eec:	32000204 	addi	r8,r6,8
   10ef0:	82013426 	beq	r16,r8,113c4 <_malloc_r+0x5b4>
   10ef4:	80c00117 	ldw	r3,4(r16)
   10ef8:	00bfff04 	movi	r2,-4
   10efc:	188e703a 	and	r7,r3,r2
   10f00:	3c45c83a 	sub	r2,r7,r17
   10f04:	00c003c4 	movi	r3,15
   10f08:	18811f16 	blt	r3,r2,11388 <_malloc_r+0x578>
   10f0c:	32000515 	stw	r8,20(r6)
   10f10:	32000415 	stw	r8,16(r6)
   10f14:	10007f0e 	bge	r2,zero,11114 <_malloc_r+0x304>
   10f18:	00807fc4 	movi	r2,511
   10f1c:	11c0fd36 	bltu	r2,r7,11314 <_malloc_r+0x504>
   10f20:	3806d0fa 	srli	r3,r7,3
   10f24:	01c00044 	movi	r7,1
   10f28:	30800117 	ldw	r2,4(r6)
   10f2c:	19400044 	addi	r5,r3,1
   10f30:	294b883a 	add	r5,r5,r5
   10f34:	1807d0ba 	srai	r3,r3,2
   10f38:	294b883a 	add	r5,r5,r5
   10f3c:	294b883a 	add	r5,r5,r5
   10f40:	298b883a 	add	r5,r5,r6
   10f44:	38c6983a 	sll	r3,r7,r3
   10f48:	29c00017 	ldw	r7,0(r5)
   10f4c:	2a7ffe04 	addi	r9,r5,-8
   10f50:	1886b03a 	or	r3,r3,r2
   10f54:	82400315 	stw	r9,12(r16)
   10f58:	81c00215 	stw	r7,8(r16)
   10f5c:	30c00115 	stw	r3,4(r6)
   10f60:	2c000015 	stw	r16,0(r5)
   10f64:	3c000315 	stw	r16,12(r7)
   10f68:	2005d0ba 	srai	r2,r4,2
   10f6c:	01400044 	movi	r5,1
   10f70:	288a983a 	sll	r5,r5,r2
   10f74:	19406f36 	bltu	r3,r5,11134 <_malloc_r+0x324>
   10f78:	28c4703a 	and	r2,r5,r3
   10f7c:	10000a1e 	bne	r2,zero,10fa8 <_malloc_r+0x198>
   10f80:	00bfff04 	movi	r2,-4
   10f84:	294b883a 	add	r5,r5,r5
   10f88:	2088703a 	and	r4,r4,r2
   10f8c:	28c4703a 	and	r2,r5,r3
   10f90:	21000104 	addi	r4,r4,4
   10f94:	1000041e 	bne	r2,zero,10fa8 <_malloc_r+0x198>
   10f98:	294b883a 	add	r5,r5,r5
   10f9c:	28c4703a 	and	r2,r5,r3
   10fa0:	21000104 	addi	r4,r4,4
   10fa4:	103ffc26 	beq	r2,zero,10f98 <_gp+0xffff19d4>
   10fa8:	02bfff04 	movi	r10,-4
   10fac:	024003c4 	movi	r9,15
   10fb0:	21800044 	addi	r6,r4,1
   10fb4:	318d883a 	add	r6,r6,r6
   10fb8:	318d883a 	add	r6,r6,r6
   10fbc:	318d883a 	add	r6,r6,r6
   10fc0:	998d883a 	add	r6,r19,r6
   10fc4:	333ffe04 	addi	r12,r6,-8
   10fc8:	2017883a 	mov	r11,r4
   10fcc:	31800104 	addi	r6,r6,4
   10fd0:	34000017 	ldw	r16,0(r6)
   10fd4:	31fffd04 	addi	r7,r6,-12
   10fd8:	81c0041e 	bne	r16,r7,10fec <_malloc_r+0x1dc>
   10fdc:	0000fb06 	br	113cc <_malloc_r+0x5bc>
   10fe0:	1801030e 	bge	r3,zero,113f0 <_malloc_r+0x5e0>
   10fe4:	84000317 	ldw	r16,12(r16)
   10fe8:	81c0f826 	beq	r16,r7,113cc <_malloc_r+0x5bc>
   10fec:	80800117 	ldw	r2,4(r16)
   10ff0:	1284703a 	and	r2,r2,r10
   10ff4:	1447c83a 	sub	r3,r2,r17
   10ff8:	48fff90e 	bge	r9,r3,10fe0 <_gp+0xffff1a1c>
   10ffc:	80800317 	ldw	r2,12(r16)
   11000:	81000217 	ldw	r4,8(r16)
   11004:	89400054 	ori	r5,r17,1
   11008:	81400115 	stw	r5,4(r16)
   1100c:	20800315 	stw	r2,12(r4)
   11010:	11000215 	stw	r4,8(r2)
   11014:	8463883a 	add	r17,r16,r17
   11018:	9c400515 	stw	r17,20(r19)
   1101c:	9c400415 	stw	r17,16(r19)
   11020:	18800054 	ori	r2,r3,1
   11024:	88800115 	stw	r2,4(r17)
   11028:	8a000315 	stw	r8,12(r17)
   1102c:	8a000215 	stw	r8,8(r17)
   11030:	88e3883a 	add	r17,r17,r3
   11034:	88c00015 	stw	r3,0(r17)
   11038:	9009883a 	mov	r4,r18
   1103c:	00136700 	call	13670 <__malloc_unlock>
   11040:	80800204 	addi	r2,r16,8
   11044:	00001b06 	br	110b4 <_malloc_r+0x2a4>
   11048:	04400404 	movi	r17,16
   1104c:	89402536 	bltu	r17,r5,110e4 <_malloc_r+0x2d4>
   11050:	001364c0 	call	1364c <__malloc_lock>
   11054:	00800184 	movi	r2,6
   11058:	01000084 	movi	r4,2
   1105c:	04c00074 	movhi	r19,1
   11060:	1085883a 	add	r2,r2,r2
   11064:	9cd7d704 	addi	r19,r19,24412
   11068:	1085883a 	add	r2,r2,r2
   1106c:	9885883a 	add	r2,r19,r2
   11070:	14000117 	ldw	r16,4(r2)
   11074:	10fffe04 	addi	r3,r2,-8
   11078:	80c0d926 	beq	r16,r3,113e0 <_malloc_r+0x5d0>
   1107c:	80c00117 	ldw	r3,4(r16)
   11080:	81000317 	ldw	r4,12(r16)
   11084:	00bfff04 	movi	r2,-4
   11088:	1884703a 	and	r2,r3,r2
   1108c:	81400217 	ldw	r5,8(r16)
   11090:	8085883a 	add	r2,r16,r2
   11094:	10c00117 	ldw	r3,4(r2)
   11098:	29000315 	stw	r4,12(r5)
   1109c:	21400215 	stw	r5,8(r4)
   110a0:	18c00054 	ori	r3,r3,1
   110a4:	10c00115 	stw	r3,4(r2)
   110a8:	9009883a 	mov	r4,r18
   110ac:	00136700 	call	13670 <__malloc_unlock>
   110b0:	80800204 	addi	r2,r16,8
   110b4:	dfc00a17 	ldw	ra,40(sp)
   110b8:	df000917 	ldw	fp,36(sp)
   110bc:	ddc00817 	ldw	r23,32(sp)
   110c0:	dd800717 	ldw	r22,28(sp)
   110c4:	dd400617 	ldw	r21,24(sp)
   110c8:	dd000517 	ldw	r20,20(sp)
   110cc:	dcc00417 	ldw	r19,16(sp)
   110d0:	dc800317 	ldw	r18,12(sp)
   110d4:	dc400217 	ldw	r17,8(sp)
   110d8:	dc000117 	ldw	r16,4(sp)
   110dc:	dec00b04 	addi	sp,sp,44
   110e0:	f800283a 	ret
   110e4:	00800304 	movi	r2,12
   110e8:	90800015 	stw	r2,0(r18)
   110ec:	0005883a 	mov	r2,zero
   110f0:	003ff006 	br	110b4 <_gp+0xffff1af0>
   110f4:	01002004 	movi	r4,128
   110f8:	02001004 	movi	r8,64
   110fc:	01c00fc4 	movi	r7,63
   11100:	003f6106 	br	10e88 <_gp+0xffff18c4>
   11104:	4009883a 	mov	r4,r8
   11108:	003f7506 	br	10ee0 <_gp+0xffff191c>
   1110c:	81000317 	ldw	r4,12(r16)
   11110:	003fde06 	br	1108c <_gp+0xffff1ac8>
   11114:	81c5883a 	add	r2,r16,r7
   11118:	11400117 	ldw	r5,4(r2)
   1111c:	9009883a 	mov	r4,r18
   11120:	29400054 	ori	r5,r5,1
   11124:	11400115 	stw	r5,4(r2)
   11128:	00136700 	call	13670 <__malloc_unlock>
   1112c:	80800204 	addi	r2,r16,8
   11130:	003fe006 	br	110b4 <_gp+0xffff1af0>
   11134:	9c000217 	ldw	r16,8(r19)
   11138:	00bfff04 	movi	r2,-4
   1113c:	85800117 	ldw	r22,4(r16)
   11140:	b0ac703a 	and	r22,r22,r2
   11144:	b4400336 	bltu	r22,r17,11154 <_malloc_r+0x344>
   11148:	b445c83a 	sub	r2,r22,r17
   1114c:	00c003c4 	movi	r3,15
   11150:	18805d16 	blt	r3,r2,112c8 <_malloc_r+0x4b8>
   11154:	05c00074 	movhi	r23,1
   11158:	008000b4 	movhi	r2,2
   1115c:	10a43204 	addi	r2,r2,-28472
   11160:	bddd7304 	addi	r23,r23,30156
   11164:	15400017 	ldw	r21,0(r2)
   11168:	b8c00017 	ldw	r3,0(r23)
   1116c:	00bfffc4 	movi	r2,-1
   11170:	858d883a 	add	r6,r16,r22
   11174:	8d6b883a 	add	r21,r17,r21
   11178:	1880ea26 	beq	r3,r2,11524 <_malloc_r+0x714>
   1117c:	ad4403c4 	addi	r21,r21,4111
   11180:	00bc0004 	movi	r2,-4096
   11184:	a8aa703a 	and	r21,r21,r2
   11188:	a80b883a 	mov	r5,r21
   1118c:	9009883a 	mov	r4,r18
   11190:	d9800015 	stw	r6,0(sp)
   11194:	00120300 	call	12030 <_sbrk_r>
   11198:	1029883a 	mov	r20,r2
   1119c:	00bfffc4 	movi	r2,-1
   111a0:	d9800017 	ldw	r6,0(sp)
   111a4:	a080e826 	beq	r20,r2,11548 <_malloc_r+0x738>
   111a8:	a180a636 	bltu	r20,r6,11444 <_malloc_r+0x634>
   111ac:	070000b4 	movhi	fp,2
   111b0:	e7243b04 	addi	fp,fp,-28436
   111b4:	e0800017 	ldw	r2,0(fp)
   111b8:	a887883a 	add	r3,r21,r2
   111bc:	e0c00015 	stw	r3,0(fp)
   111c0:	3500e626 	beq	r6,r20,1155c <_malloc_r+0x74c>
   111c4:	b9000017 	ldw	r4,0(r23)
   111c8:	00bfffc4 	movi	r2,-1
   111cc:	2080ee26 	beq	r4,r2,11588 <_malloc_r+0x778>
   111d0:	a185c83a 	sub	r2,r20,r6
   111d4:	10c5883a 	add	r2,r2,r3
   111d8:	e0800015 	stw	r2,0(fp)
   111dc:	a0c001cc 	andi	r3,r20,7
   111e0:	1800bc26 	beq	r3,zero,114d4 <_malloc_r+0x6c4>
   111e4:	a0e9c83a 	sub	r20,r20,r3
   111e8:	00840204 	movi	r2,4104
   111ec:	a5000204 	addi	r20,r20,8
   111f0:	10c7c83a 	sub	r3,r2,r3
   111f4:	a545883a 	add	r2,r20,r21
   111f8:	1083ffcc 	andi	r2,r2,4095
   111fc:	18abc83a 	sub	r21,r3,r2
   11200:	a80b883a 	mov	r5,r21
   11204:	9009883a 	mov	r4,r18
   11208:	00120300 	call	12030 <_sbrk_r>
   1120c:	00ffffc4 	movi	r3,-1
   11210:	10c0e126 	beq	r2,r3,11598 <_malloc_r+0x788>
   11214:	1505c83a 	sub	r2,r2,r20
   11218:	1545883a 	add	r2,r2,r21
   1121c:	10800054 	ori	r2,r2,1
   11220:	e0c00017 	ldw	r3,0(fp)
   11224:	9d000215 	stw	r20,8(r19)
   11228:	a0800115 	stw	r2,4(r20)
   1122c:	a8c7883a 	add	r3,r21,r3
   11230:	e0c00015 	stw	r3,0(fp)
   11234:	84c00e26 	beq	r16,r19,11270 <_malloc_r+0x460>
   11238:	018003c4 	movi	r6,15
   1123c:	3580a72e 	bgeu	r6,r22,114dc <_malloc_r+0x6cc>
   11240:	81400117 	ldw	r5,4(r16)
   11244:	013ffe04 	movi	r4,-8
   11248:	b0bffd04 	addi	r2,r22,-12
   1124c:	1104703a 	and	r2,r2,r4
   11250:	2900004c 	andi	r4,r5,1
   11254:	2088b03a 	or	r4,r4,r2
   11258:	81000115 	stw	r4,4(r16)
   1125c:	01400144 	movi	r5,5
   11260:	8089883a 	add	r4,r16,r2
   11264:	21400115 	stw	r5,4(r4)
   11268:	21400215 	stw	r5,8(r4)
   1126c:	3080cd36 	bltu	r6,r2,115a4 <_malloc_r+0x794>
   11270:	008000b4 	movhi	r2,2
   11274:	10a43104 	addi	r2,r2,-28476
   11278:	11000017 	ldw	r4,0(r2)
   1127c:	20c0012e 	bgeu	r4,r3,11284 <_malloc_r+0x474>
   11280:	10c00015 	stw	r3,0(r2)
   11284:	008000b4 	movhi	r2,2
   11288:	10a43004 	addi	r2,r2,-28480
   1128c:	11000017 	ldw	r4,0(r2)
   11290:	9c000217 	ldw	r16,8(r19)
   11294:	20c0012e 	bgeu	r4,r3,1129c <_malloc_r+0x48c>
   11298:	10c00015 	stw	r3,0(r2)
   1129c:	80c00117 	ldw	r3,4(r16)
   112a0:	00bfff04 	movi	r2,-4
   112a4:	1886703a 	and	r3,r3,r2
   112a8:	1c45c83a 	sub	r2,r3,r17
   112ac:	1c400236 	bltu	r3,r17,112b8 <_malloc_r+0x4a8>
   112b0:	00c003c4 	movi	r3,15
   112b4:	18800416 	blt	r3,r2,112c8 <_malloc_r+0x4b8>
   112b8:	9009883a 	mov	r4,r18
   112bc:	00136700 	call	13670 <__malloc_unlock>
   112c0:	0005883a 	mov	r2,zero
   112c4:	003f7b06 	br	110b4 <_gp+0xffff1af0>
   112c8:	88c00054 	ori	r3,r17,1
   112cc:	80c00115 	stw	r3,4(r16)
   112d0:	8463883a 	add	r17,r16,r17
   112d4:	10800054 	ori	r2,r2,1
   112d8:	9c400215 	stw	r17,8(r19)
   112dc:	88800115 	stw	r2,4(r17)
   112e0:	9009883a 	mov	r4,r18
   112e4:	00136700 	call	13670 <__malloc_unlock>
   112e8:	80800204 	addi	r2,r16,8
   112ec:	003f7106 	br	110b4 <_gp+0xffff1af0>
   112f0:	00c00504 	movi	r3,20
   112f4:	18804a2e 	bgeu	r3,r2,11420 <_malloc_r+0x610>
   112f8:	00c01504 	movi	r3,84
   112fc:	18806e36 	bltu	r3,r2,114b8 <_malloc_r+0x6a8>
   11300:	8804d33a 	srli	r2,r17,12
   11304:	12001bc4 	addi	r8,r2,111
   11308:	11c01b84 	addi	r7,r2,110
   1130c:	4209883a 	add	r4,r8,r8
   11310:	003edd06 	br	10e88 <_gp+0xffff18c4>
   11314:	3804d27a 	srli	r2,r7,9
   11318:	00c00104 	movi	r3,4
   1131c:	1880442e 	bgeu	r3,r2,11430 <_malloc_r+0x620>
   11320:	00c00504 	movi	r3,20
   11324:	18808136 	bltu	r3,r2,1152c <_malloc_r+0x71c>
   11328:	11401704 	addi	r5,r2,92
   1132c:	10c016c4 	addi	r3,r2,91
   11330:	294b883a 	add	r5,r5,r5
   11334:	294b883a 	add	r5,r5,r5
   11338:	294b883a 	add	r5,r5,r5
   1133c:	994b883a 	add	r5,r19,r5
   11340:	28800017 	ldw	r2,0(r5)
   11344:	01800074 	movhi	r6,1
   11348:	297ffe04 	addi	r5,r5,-8
   1134c:	3197d704 	addi	r6,r6,24412
   11350:	28806526 	beq	r5,r2,114e8 <_malloc_r+0x6d8>
   11354:	01bfff04 	movi	r6,-4
   11358:	10c00117 	ldw	r3,4(r2)
   1135c:	1986703a 	and	r3,r3,r6
   11360:	38c0022e 	bgeu	r7,r3,1136c <_malloc_r+0x55c>
   11364:	10800217 	ldw	r2,8(r2)
   11368:	28bffb1e 	bne	r5,r2,11358 <_gp+0xffff1d94>
   1136c:	11400317 	ldw	r5,12(r2)
   11370:	98c00117 	ldw	r3,4(r19)
   11374:	81400315 	stw	r5,12(r16)
   11378:	80800215 	stw	r2,8(r16)
   1137c:	2c000215 	stw	r16,8(r5)
   11380:	14000315 	stw	r16,12(r2)
   11384:	003ef806 	br	10f68 <_gp+0xffff19a4>
   11388:	88c00054 	ori	r3,r17,1
   1138c:	80c00115 	stw	r3,4(r16)
   11390:	8463883a 	add	r17,r16,r17
   11394:	34400515 	stw	r17,20(r6)
   11398:	34400415 	stw	r17,16(r6)
   1139c:	10c00054 	ori	r3,r2,1
   113a0:	8a000315 	stw	r8,12(r17)
   113a4:	8a000215 	stw	r8,8(r17)
   113a8:	88c00115 	stw	r3,4(r17)
   113ac:	88a3883a 	add	r17,r17,r2
   113b0:	88800015 	stw	r2,0(r17)
   113b4:	9009883a 	mov	r4,r18
   113b8:	00136700 	call	13670 <__malloc_unlock>
   113bc:	80800204 	addi	r2,r16,8
   113c0:	003f3c06 	br	110b4 <_gp+0xffff1af0>
   113c4:	30c00117 	ldw	r3,4(r6)
   113c8:	003ee706 	br	10f68 <_gp+0xffff19a4>
   113cc:	5ac00044 	addi	r11,r11,1
   113d0:	588000cc 	andi	r2,r11,3
   113d4:	31800204 	addi	r6,r6,8
   113d8:	103efd1e 	bne	r2,zero,10fd0 <_gp+0xffff1a0c>
   113dc:	00002406 	br	11470 <_malloc_r+0x660>
   113e0:	14000317 	ldw	r16,12(r2)
   113e4:	143f251e 	bne	r2,r16,1107c <_gp+0xffff1ab8>
   113e8:	21000084 	addi	r4,r4,2
   113ec:	003ebc06 	br	10ee0 <_gp+0xffff191c>
   113f0:	8085883a 	add	r2,r16,r2
   113f4:	10c00117 	ldw	r3,4(r2)
   113f8:	81000317 	ldw	r4,12(r16)
   113fc:	81400217 	ldw	r5,8(r16)
   11400:	18c00054 	ori	r3,r3,1
   11404:	10c00115 	stw	r3,4(r2)
   11408:	29000315 	stw	r4,12(r5)
   1140c:	21400215 	stw	r5,8(r4)
   11410:	9009883a 	mov	r4,r18
   11414:	00136700 	call	13670 <__malloc_unlock>
   11418:	80800204 	addi	r2,r16,8
   1141c:	003f2506 	br	110b4 <_gp+0xffff1af0>
   11420:	12001704 	addi	r8,r2,92
   11424:	11c016c4 	addi	r7,r2,91
   11428:	4209883a 	add	r4,r8,r8
   1142c:	003e9606 	br	10e88 <_gp+0xffff18c4>
   11430:	3804d1ba 	srli	r2,r7,6
   11434:	11400e44 	addi	r5,r2,57
   11438:	10c00e04 	addi	r3,r2,56
   1143c:	294b883a 	add	r5,r5,r5
   11440:	003fbc06 	br	11334 <_gp+0xffff1d70>
   11444:	84ff5926 	beq	r16,r19,111ac <_gp+0xffff1be8>
   11448:	00800074 	movhi	r2,1
   1144c:	1097d704 	addi	r2,r2,24412
   11450:	14000217 	ldw	r16,8(r2)
   11454:	00bfff04 	movi	r2,-4
   11458:	80c00117 	ldw	r3,4(r16)
   1145c:	1886703a 	and	r3,r3,r2
   11460:	003f9106 	br	112a8 <_gp+0xffff1ce4>
   11464:	60800217 	ldw	r2,8(r12)
   11468:	213fffc4 	addi	r4,r4,-1
   1146c:	1300651e 	bne	r2,r12,11604 <_malloc_r+0x7f4>
   11470:	208000cc 	andi	r2,r4,3
   11474:	633ffe04 	addi	r12,r12,-8
   11478:	103ffa1e 	bne	r2,zero,11464 <_gp+0xffff1ea0>
   1147c:	98800117 	ldw	r2,4(r19)
   11480:	0146303a 	nor	r3,zero,r5
   11484:	1884703a 	and	r2,r3,r2
   11488:	98800115 	stw	r2,4(r19)
   1148c:	294b883a 	add	r5,r5,r5
   11490:	117f2836 	bltu	r2,r5,11134 <_gp+0xffff1b70>
   11494:	283f2726 	beq	r5,zero,11134 <_gp+0xffff1b70>
   11498:	2886703a 	and	r3,r5,r2
   1149c:	5809883a 	mov	r4,r11
   114a0:	183ec31e 	bne	r3,zero,10fb0 <_gp+0xffff19ec>
   114a4:	294b883a 	add	r5,r5,r5
   114a8:	2886703a 	and	r3,r5,r2
   114ac:	21000104 	addi	r4,r4,4
   114b0:	183ffc26 	beq	r3,zero,114a4 <_gp+0xffff1ee0>
   114b4:	003ebe06 	br	10fb0 <_gp+0xffff19ec>
   114b8:	00c05504 	movi	r3,340
   114bc:	18801236 	bltu	r3,r2,11508 <_malloc_r+0x6f8>
   114c0:	8804d3fa 	srli	r2,r17,15
   114c4:	12001e04 	addi	r8,r2,120
   114c8:	11c01dc4 	addi	r7,r2,119
   114cc:	4209883a 	add	r4,r8,r8
   114d0:	003e6d06 	br	10e88 <_gp+0xffff18c4>
   114d4:	00c40004 	movi	r3,4096
   114d8:	003f4606 	br	111f4 <_gp+0xffff1c30>
   114dc:	00800044 	movi	r2,1
   114e0:	a0800115 	stw	r2,4(r20)
   114e4:	003f7406 	br	112b8 <_gp+0xffff1cf4>
   114e8:	1805d0ba 	srai	r2,r3,2
   114ec:	01c00044 	movi	r7,1
   114f0:	30c00117 	ldw	r3,4(r6)
   114f4:	388e983a 	sll	r7,r7,r2
   114f8:	2805883a 	mov	r2,r5
   114fc:	38c6b03a 	or	r3,r7,r3
   11500:	30c00115 	stw	r3,4(r6)
   11504:	003f9b06 	br	11374 <_gp+0xffff1db0>
   11508:	00c15504 	movi	r3,1364
   1150c:	18801a36 	bltu	r3,r2,11578 <_malloc_r+0x768>
   11510:	8804d4ba 	srli	r2,r17,18
   11514:	12001f44 	addi	r8,r2,125
   11518:	11c01f04 	addi	r7,r2,124
   1151c:	4209883a 	add	r4,r8,r8
   11520:	003e5906 	br	10e88 <_gp+0xffff18c4>
   11524:	ad400404 	addi	r21,r21,16
   11528:	003f1706 	br	11188 <_gp+0xffff1bc4>
   1152c:	00c01504 	movi	r3,84
   11530:	18802336 	bltu	r3,r2,115c0 <_malloc_r+0x7b0>
   11534:	3804d33a 	srli	r2,r7,12
   11538:	11401bc4 	addi	r5,r2,111
   1153c:	10c01b84 	addi	r3,r2,110
   11540:	294b883a 	add	r5,r5,r5
   11544:	003f7b06 	br	11334 <_gp+0xffff1d70>
   11548:	9c000217 	ldw	r16,8(r19)
   1154c:	00bfff04 	movi	r2,-4
   11550:	80c00117 	ldw	r3,4(r16)
   11554:	1886703a 	and	r3,r3,r2
   11558:	003f5306 	br	112a8 <_gp+0xffff1ce4>
   1155c:	3083ffcc 	andi	r2,r6,4095
   11560:	103f181e 	bne	r2,zero,111c4 <_gp+0xffff1c00>
   11564:	99000217 	ldw	r4,8(r19)
   11568:	b545883a 	add	r2,r22,r21
   1156c:	10800054 	ori	r2,r2,1
   11570:	20800115 	stw	r2,4(r4)
   11574:	003f3e06 	br	11270 <_gp+0xffff1cac>
   11578:	01003f84 	movi	r4,254
   1157c:	02001fc4 	movi	r8,127
   11580:	01c01f84 	movi	r7,126
   11584:	003e4006 	br	10e88 <_gp+0xffff18c4>
   11588:	00800074 	movhi	r2,1
   1158c:	109d7304 	addi	r2,r2,30156
   11590:	15000015 	stw	r20,0(r2)
   11594:	003f1106 	br	111dc <_gp+0xffff1c18>
   11598:	00800044 	movi	r2,1
   1159c:	002b883a 	mov	r21,zero
   115a0:	003f1f06 	br	11220 <_gp+0xffff1c5c>
   115a4:	81400204 	addi	r5,r16,8
   115a8:	9009883a 	mov	r4,r18
   115ac:	00128980 	call	12898 <_free_r>
   115b0:	008000b4 	movhi	r2,2
   115b4:	10a43b04 	addi	r2,r2,-28436
   115b8:	10c00017 	ldw	r3,0(r2)
   115bc:	003f2c06 	br	11270 <_gp+0xffff1cac>
   115c0:	00c05504 	movi	r3,340
   115c4:	18800536 	bltu	r3,r2,115dc <_malloc_r+0x7cc>
   115c8:	3804d3fa 	srli	r2,r7,15
   115cc:	11401e04 	addi	r5,r2,120
   115d0:	10c01dc4 	addi	r3,r2,119
   115d4:	294b883a 	add	r5,r5,r5
   115d8:	003f5606 	br	11334 <_gp+0xffff1d70>
   115dc:	00c15504 	movi	r3,1364
   115e0:	18800536 	bltu	r3,r2,115f8 <_malloc_r+0x7e8>
   115e4:	3804d4ba 	srli	r2,r7,18
   115e8:	11401f44 	addi	r5,r2,125
   115ec:	10c01f04 	addi	r3,r2,124
   115f0:	294b883a 	add	r5,r5,r5
   115f4:	003f4f06 	br	11334 <_gp+0xffff1d70>
   115f8:	01403f84 	movi	r5,254
   115fc:	00c01f84 	movi	r3,126
   11600:	003f4c06 	br	11334 <_gp+0xffff1d70>
   11604:	98800117 	ldw	r2,4(r19)
   11608:	003fa006 	br	1148c <_gp+0xffff1ec8>
   1160c:	8808d0fa 	srli	r4,r17,3
   11610:	20800044 	addi	r2,r4,1
   11614:	1085883a 	add	r2,r2,r2
   11618:	003e9006 	br	1105c <_gp+0xffff1a98>

0001161c <memchr>:
   1161c:	208000cc 	andi	r2,r4,3
   11620:	280f883a 	mov	r7,r5
   11624:	10003426 	beq	r2,zero,116f8 <memchr+0xdc>
   11628:	30bfffc4 	addi	r2,r6,-1
   1162c:	30001a26 	beq	r6,zero,11698 <memchr+0x7c>
   11630:	20c00003 	ldbu	r3,0(r4)
   11634:	29803fcc 	andi	r6,r5,255
   11638:	30c0051e 	bne	r6,r3,11650 <memchr+0x34>
   1163c:	00001806 	br	116a0 <memchr+0x84>
   11640:	10001526 	beq	r2,zero,11698 <memchr+0x7c>
   11644:	20c00003 	ldbu	r3,0(r4)
   11648:	10bfffc4 	addi	r2,r2,-1
   1164c:	30c01426 	beq	r6,r3,116a0 <memchr+0x84>
   11650:	21000044 	addi	r4,r4,1
   11654:	20c000cc 	andi	r3,r4,3
   11658:	183ff91e 	bne	r3,zero,11640 <_gp+0xffff207c>
   1165c:	020000c4 	movi	r8,3
   11660:	40801136 	bltu	r8,r2,116a8 <memchr+0x8c>
   11664:	10000c26 	beq	r2,zero,11698 <memchr+0x7c>
   11668:	20c00003 	ldbu	r3,0(r4)
   1166c:	29403fcc 	andi	r5,r5,255
   11670:	28c00b26 	beq	r5,r3,116a0 <memchr+0x84>
   11674:	20c00044 	addi	r3,r4,1
   11678:	39803fcc 	andi	r6,r7,255
   1167c:	2089883a 	add	r4,r4,r2
   11680:	00000306 	br	11690 <memchr+0x74>
   11684:	18c00044 	addi	r3,r3,1
   11688:	197fffc3 	ldbu	r5,-1(r3)
   1168c:	31400526 	beq	r6,r5,116a4 <memchr+0x88>
   11690:	1805883a 	mov	r2,r3
   11694:	20fffb1e 	bne	r4,r3,11684 <_gp+0xffff20c0>
   11698:	0005883a 	mov	r2,zero
   1169c:	f800283a 	ret
   116a0:	2005883a 	mov	r2,r4
   116a4:	f800283a 	ret
   116a8:	28c03fcc 	andi	r3,r5,255
   116ac:	1812923a 	slli	r9,r3,8
   116b0:	02ffbff4 	movhi	r11,65279
   116b4:	02a02074 	movhi	r10,32897
   116b8:	48d2b03a 	or	r9,r9,r3
   116bc:	4806943a 	slli	r3,r9,16
   116c0:	5affbfc4 	addi	r11,r11,-257
   116c4:	52a02004 	addi	r10,r10,-32640
   116c8:	48d2b03a 	or	r9,r9,r3
   116cc:	20c00017 	ldw	r3,0(r4)
   116d0:	48c6f03a 	xor	r3,r9,r3
   116d4:	1acd883a 	add	r6,r3,r11
   116d8:	00c6303a 	nor	r3,zero,r3
   116dc:	30c6703a 	and	r3,r6,r3
   116e0:	1a86703a 	and	r3,r3,r10
   116e4:	183fe01e 	bne	r3,zero,11668 <_gp+0xffff20a4>
   116e8:	10bfff04 	addi	r2,r2,-4
   116ec:	21000104 	addi	r4,r4,4
   116f0:	40bff636 	bltu	r8,r2,116cc <_gp+0xffff2108>
   116f4:	003fdb06 	br	11664 <_gp+0xffff20a0>
   116f8:	3005883a 	mov	r2,r6
   116fc:	003fd706 	br	1165c <_gp+0xffff2098>

00011700 <memcpy>:
   11700:	defffd04 	addi	sp,sp,-12
   11704:	dfc00215 	stw	ra,8(sp)
   11708:	dc400115 	stw	r17,4(sp)
   1170c:	dc000015 	stw	r16,0(sp)
   11710:	00c003c4 	movi	r3,15
   11714:	2005883a 	mov	r2,r4
   11718:	1980452e 	bgeu	r3,r6,11830 <memcpy+0x130>
   1171c:	2906b03a 	or	r3,r5,r4
   11720:	18c000cc 	andi	r3,r3,3
   11724:	1800441e 	bne	r3,zero,11838 <memcpy+0x138>
   11728:	347ffc04 	addi	r17,r6,-16
   1172c:	8822d13a 	srli	r17,r17,4
   11730:	28c00104 	addi	r3,r5,4
   11734:	23400104 	addi	r13,r4,4
   11738:	8820913a 	slli	r16,r17,4
   1173c:	2b000204 	addi	r12,r5,8
   11740:	22c00204 	addi	r11,r4,8
   11744:	84000504 	addi	r16,r16,20
   11748:	2a800304 	addi	r10,r5,12
   1174c:	22400304 	addi	r9,r4,12
   11750:	2c21883a 	add	r16,r5,r16
   11754:	2811883a 	mov	r8,r5
   11758:	200f883a 	mov	r7,r4
   1175c:	41000017 	ldw	r4,0(r8)
   11760:	1fc00017 	ldw	ra,0(r3)
   11764:	63c00017 	ldw	r15,0(r12)
   11768:	39000015 	stw	r4,0(r7)
   1176c:	53800017 	ldw	r14,0(r10)
   11770:	6fc00015 	stw	ra,0(r13)
   11774:	5bc00015 	stw	r15,0(r11)
   11778:	4b800015 	stw	r14,0(r9)
   1177c:	18c00404 	addi	r3,r3,16
   11780:	39c00404 	addi	r7,r7,16
   11784:	42000404 	addi	r8,r8,16
   11788:	6b400404 	addi	r13,r13,16
   1178c:	63000404 	addi	r12,r12,16
   11790:	5ac00404 	addi	r11,r11,16
   11794:	52800404 	addi	r10,r10,16
   11798:	4a400404 	addi	r9,r9,16
   1179c:	1c3fef1e 	bne	r3,r16,1175c <_gp+0xffff2198>
   117a0:	89c00044 	addi	r7,r17,1
   117a4:	380e913a 	slli	r7,r7,4
   117a8:	310003cc 	andi	r4,r6,15
   117ac:	02c000c4 	movi	r11,3
   117b0:	11c7883a 	add	r3,r2,r7
   117b4:	29cb883a 	add	r5,r5,r7
   117b8:	5900212e 	bgeu	r11,r4,11840 <memcpy+0x140>
   117bc:	1813883a 	mov	r9,r3
   117c0:	2811883a 	mov	r8,r5
   117c4:	200f883a 	mov	r7,r4
   117c8:	42800017 	ldw	r10,0(r8)
   117cc:	4a400104 	addi	r9,r9,4
   117d0:	39ffff04 	addi	r7,r7,-4
   117d4:	4abfff15 	stw	r10,-4(r9)
   117d8:	42000104 	addi	r8,r8,4
   117dc:	59fffa36 	bltu	r11,r7,117c8 <_gp+0xffff2204>
   117e0:	213fff04 	addi	r4,r4,-4
   117e4:	2008d0ba 	srli	r4,r4,2
   117e8:	318000cc 	andi	r6,r6,3
   117ec:	21000044 	addi	r4,r4,1
   117f0:	2109883a 	add	r4,r4,r4
   117f4:	2109883a 	add	r4,r4,r4
   117f8:	1907883a 	add	r3,r3,r4
   117fc:	290b883a 	add	r5,r5,r4
   11800:	30000626 	beq	r6,zero,1181c <memcpy+0x11c>
   11804:	198d883a 	add	r6,r3,r6
   11808:	29c00003 	ldbu	r7,0(r5)
   1180c:	18c00044 	addi	r3,r3,1
   11810:	29400044 	addi	r5,r5,1
   11814:	19ffffc5 	stb	r7,-1(r3)
   11818:	19bffb1e 	bne	r3,r6,11808 <_gp+0xffff2244>
   1181c:	dfc00217 	ldw	ra,8(sp)
   11820:	dc400117 	ldw	r17,4(sp)
   11824:	dc000017 	ldw	r16,0(sp)
   11828:	dec00304 	addi	sp,sp,12
   1182c:	f800283a 	ret
   11830:	2007883a 	mov	r3,r4
   11834:	003ff206 	br	11800 <_gp+0xffff223c>
   11838:	2007883a 	mov	r3,r4
   1183c:	003ff106 	br	11804 <_gp+0xffff2240>
   11840:	200d883a 	mov	r6,r4
   11844:	003fee06 	br	11800 <_gp+0xffff223c>

00011848 <memmove>:
   11848:	2005883a 	mov	r2,r4
   1184c:	29000b2e 	bgeu	r5,r4,1187c <memmove+0x34>
   11850:	298f883a 	add	r7,r5,r6
   11854:	21c0092e 	bgeu	r4,r7,1187c <memmove+0x34>
   11858:	2187883a 	add	r3,r4,r6
   1185c:	198bc83a 	sub	r5,r3,r6
   11860:	30004826 	beq	r6,zero,11984 <memmove+0x13c>
   11864:	39ffffc4 	addi	r7,r7,-1
   11868:	39000003 	ldbu	r4,0(r7)
   1186c:	18ffffc4 	addi	r3,r3,-1
   11870:	19000005 	stb	r4,0(r3)
   11874:	28fffb1e 	bne	r5,r3,11864 <_gp+0xffff22a0>
   11878:	f800283a 	ret
   1187c:	00c003c4 	movi	r3,15
   11880:	1980412e 	bgeu	r3,r6,11988 <memmove+0x140>
   11884:	2886b03a 	or	r3,r5,r2
   11888:	18c000cc 	andi	r3,r3,3
   1188c:	1800401e 	bne	r3,zero,11990 <memmove+0x148>
   11890:	33fffc04 	addi	r15,r6,-16
   11894:	781ed13a 	srli	r15,r15,4
   11898:	28c00104 	addi	r3,r5,4
   1189c:	13400104 	addi	r13,r2,4
   118a0:	781c913a 	slli	r14,r15,4
   118a4:	2b000204 	addi	r12,r5,8
   118a8:	12c00204 	addi	r11,r2,8
   118ac:	73800504 	addi	r14,r14,20
   118b0:	2a800304 	addi	r10,r5,12
   118b4:	12400304 	addi	r9,r2,12
   118b8:	2b9d883a 	add	r14,r5,r14
   118bc:	2811883a 	mov	r8,r5
   118c0:	100f883a 	mov	r7,r2
   118c4:	41000017 	ldw	r4,0(r8)
   118c8:	39c00404 	addi	r7,r7,16
   118cc:	18c00404 	addi	r3,r3,16
   118d0:	393ffc15 	stw	r4,-16(r7)
   118d4:	193ffc17 	ldw	r4,-16(r3)
   118d8:	6b400404 	addi	r13,r13,16
   118dc:	5ac00404 	addi	r11,r11,16
   118e0:	693ffc15 	stw	r4,-16(r13)
   118e4:	61000017 	ldw	r4,0(r12)
   118e8:	4a400404 	addi	r9,r9,16
   118ec:	42000404 	addi	r8,r8,16
   118f0:	593ffc15 	stw	r4,-16(r11)
   118f4:	51000017 	ldw	r4,0(r10)
   118f8:	63000404 	addi	r12,r12,16
   118fc:	52800404 	addi	r10,r10,16
   11900:	493ffc15 	stw	r4,-16(r9)
   11904:	1bbfef1e 	bne	r3,r14,118c4 <_gp+0xffff2300>
   11908:	79000044 	addi	r4,r15,1
   1190c:	2008913a 	slli	r4,r4,4
   11910:	328003cc 	andi	r10,r6,15
   11914:	02c000c4 	movi	r11,3
   11918:	1107883a 	add	r3,r2,r4
   1191c:	290b883a 	add	r5,r5,r4
   11920:	5a801e2e 	bgeu	r11,r10,1199c <memmove+0x154>
   11924:	1813883a 	mov	r9,r3
   11928:	2811883a 	mov	r8,r5
   1192c:	500f883a 	mov	r7,r10
   11930:	41000017 	ldw	r4,0(r8)
   11934:	4a400104 	addi	r9,r9,4
   11938:	39ffff04 	addi	r7,r7,-4
   1193c:	493fff15 	stw	r4,-4(r9)
   11940:	42000104 	addi	r8,r8,4
   11944:	59fffa36 	bltu	r11,r7,11930 <_gp+0xffff236c>
   11948:	513fff04 	addi	r4,r10,-4
   1194c:	2008d0ba 	srli	r4,r4,2
   11950:	318000cc 	andi	r6,r6,3
   11954:	21000044 	addi	r4,r4,1
   11958:	2109883a 	add	r4,r4,r4
   1195c:	2109883a 	add	r4,r4,r4
   11960:	1907883a 	add	r3,r3,r4
   11964:	290b883a 	add	r5,r5,r4
   11968:	30000b26 	beq	r6,zero,11998 <memmove+0x150>
   1196c:	198d883a 	add	r6,r3,r6
   11970:	29c00003 	ldbu	r7,0(r5)
   11974:	18c00044 	addi	r3,r3,1
   11978:	29400044 	addi	r5,r5,1
   1197c:	19ffffc5 	stb	r7,-1(r3)
   11980:	19bffb1e 	bne	r3,r6,11970 <_gp+0xffff23ac>
   11984:	f800283a 	ret
   11988:	1007883a 	mov	r3,r2
   1198c:	003ff606 	br	11968 <_gp+0xffff23a4>
   11990:	1007883a 	mov	r3,r2
   11994:	003ff506 	br	1196c <_gp+0xffff23a8>
   11998:	f800283a 	ret
   1199c:	500d883a 	mov	r6,r10
   119a0:	003ff106 	br	11968 <_gp+0xffff23a4>

000119a4 <memset>:
   119a4:	20c000cc 	andi	r3,r4,3
   119a8:	2005883a 	mov	r2,r4
   119ac:	18004426 	beq	r3,zero,11ac0 <memset+0x11c>
   119b0:	31ffffc4 	addi	r7,r6,-1
   119b4:	30004026 	beq	r6,zero,11ab8 <memset+0x114>
   119b8:	2813883a 	mov	r9,r5
   119bc:	200d883a 	mov	r6,r4
   119c0:	2007883a 	mov	r3,r4
   119c4:	00000406 	br	119d8 <memset+0x34>
   119c8:	3a3fffc4 	addi	r8,r7,-1
   119cc:	31800044 	addi	r6,r6,1
   119d0:	38003926 	beq	r7,zero,11ab8 <memset+0x114>
   119d4:	400f883a 	mov	r7,r8
   119d8:	18c00044 	addi	r3,r3,1
   119dc:	32400005 	stb	r9,0(r6)
   119e0:	1a0000cc 	andi	r8,r3,3
   119e4:	403ff81e 	bne	r8,zero,119c8 <_gp+0xffff2404>
   119e8:	010000c4 	movi	r4,3
   119ec:	21c02d2e 	bgeu	r4,r7,11aa4 <memset+0x100>
   119f0:	29003fcc 	andi	r4,r5,255
   119f4:	200c923a 	slli	r6,r4,8
   119f8:	3108b03a 	or	r4,r6,r4
   119fc:	200c943a 	slli	r6,r4,16
   11a00:	218cb03a 	or	r6,r4,r6
   11a04:	010003c4 	movi	r4,15
   11a08:	21c0182e 	bgeu	r4,r7,11a6c <memset+0xc8>
   11a0c:	3b3ffc04 	addi	r12,r7,-16
   11a10:	6018d13a 	srli	r12,r12,4
   11a14:	1a000104 	addi	r8,r3,4
   11a18:	1ac00204 	addi	r11,r3,8
   11a1c:	6008913a 	slli	r4,r12,4
   11a20:	1a800304 	addi	r10,r3,12
   11a24:	1813883a 	mov	r9,r3
   11a28:	21000504 	addi	r4,r4,20
   11a2c:	1909883a 	add	r4,r3,r4
   11a30:	49800015 	stw	r6,0(r9)
   11a34:	41800015 	stw	r6,0(r8)
   11a38:	59800015 	stw	r6,0(r11)
   11a3c:	51800015 	stw	r6,0(r10)
   11a40:	42000404 	addi	r8,r8,16
   11a44:	4a400404 	addi	r9,r9,16
   11a48:	5ac00404 	addi	r11,r11,16
   11a4c:	52800404 	addi	r10,r10,16
   11a50:	413ff71e 	bne	r8,r4,11a30 <_gp+0xffff246c>
   11a54:	63000044 	addi	r12,r12,1
   11a58:	6018913a 	slli	r12,r12,4
   11a5c:	39c003cc 	andi	r7,r7,15
   11a60:	010000c4 	movi	r4,3
   11a64:	1b07883a 	add	r3,r3,r12
   11a68:	21c00e2e 	bgeu	r4,r7,11aa4 <memset+0x100>
   11a6c:	1813883a 	mov	r9,r3
   11a70:	3811883a 	mov	r8,r7
   11a74:	010000c4 	movi	r4,3
   11a78:	49800015 	stw	r6,0(r9)
   11a7c:	423fff04 	addi	r8,r8,-4
   11a80:	4a400104 	addi	r9,r9,4
   11a84:	223ffc36 	bltu	r4,r8,11a78 <_gp+0xffff24b4>
   11a88:	393fff04 	addi	r4,r7,-4
   11a8c:	2008d0ba 	srli	r4,r4,2
   11a90:	39c000cc 	andi	r7,r7,3
   11a94:	21000044 	addi	r4,r4,1
   11a98:	2109883a 	add	r4,r4,r4
   11a9c:	2109883a 	add	r4,r4,r4
   11aa0:	1907883a 	add	r3,r3,r4
   11aa4:	38000526 	beq	r7,zero,11abc <memset+0x118>
   11aa8:	19cf883a 	add	r7,r3,r7
   11aac:	19400005 	stb	r5,0(r3)
   11ab0:	18c00044 	addi	r3,r3,1
   11ab4:	38fffd1e 	bne	r7,r3,11aac <_gp+0xffff24e8>
   11ab8:	f800283a 	ret
   11abc:	f800283a 	ret
   11ac0:	2007883a 	mov	r3,r4
   11ac4:	300f883a 	mov	r7,r6
   11ac8:	003fc706 	br	119e8 <_gp+0xffff2424>

00011acc <_realloc_r>:
   11acc:	defff604 	addi	sp,sp,-40
   11ad0:	dc800215 	stw	r18,8(sp)
   11ad4:	dfc00915 	stw	ra,36(sp)
   11ad8:	df000815 	stw	fp,32(sp)
   11adc:	ddc00715 	stw	r23,28(sp)
   11ae0:	dd800615 	stw	r22,24(sp)
   11ae4:	dd400515 	stw	r21,20(sp)
   11ae8:	dd000415 	stw	r20,16(sp)
   11aec:	dcc00315 	stw	r19,12(sp)
   11af0:	dc400115 	stw	r17,4(sp)
   11af4:	dc000015 	stw	r16,0(sp)
   11af8:	3025883a 	mov	r18,r6
   11afc:	2800b726 	beq	r5,zero,11ddc <_realloc_r+0x310>
   11b00:	282b883a 	mov	r21,r5
   11b04:	2029883a 	mov	r20,r4
   11b08:	001364c0 	call	1364c <__malloc_lock>
   11b0c:	a8bfff17 	ldw	r2,-4(r21)
   11b10:	043fff04 	movi	r16,-4
   11b14:	90c002c4 	addi	r3,r18,11
   11b18:	01000584 	movi	r4,22
   11b1c:	acfffe04 	addi	r19,r21,-8
   11b20:	1420703a 	and	r16,r2,r16
   11b24:	20c0332e 	bgeu	r4,r3,11bf4 <_realloc_r+0x128>
   11b28:	047ffe04 	movi	r17,-8
   11b2c:	1c62703a 	and	r17,r3,r17
   11b30:	8807883a 	mov	r3,r17
   11b34:	88005816 	blt	r17,zero,11c98 <_realloc_r+0x1cc>
   11b38:	8c805736 	bltu	r17,r18,11c98 <_realloc_r+0x1cc>
   11b3c:	80c0300e 	bge	r16,r3,11c00 <_realloc_r+0x134>
   11b40:	07000074 	movhi	fp,1
   11b44:	e717d704 	addi	fp,fp,24412
   11b48:	e1c00217 	ldw	r7,8(fp)
   11b4c:	9c09883a 	add	r4,r19,r16
   11b50:	22000117 	ldw	r8,4(r4)
   11b54:	21c06326 	beq	r4,r7,11ce4 <_realloc_r+0x218>
   11b58:	017fff84 	movi	r5,-2
   11b5c:	414a703a 	and	r5,r8,r5
   11b60:	214b883a 	add	r5,r4,r5
   11b64:	29800117 	ldw	r6,4(r5)
   11b68:	3180004c 	andi	r6,r6,1
   11b6c:	30003f26 	beq	r6,zero,11c6c <_realloc_r+0x1a0>
   11b70:	1080004c 	andi	r2,r2,1
   11b74:	10008326 	beq	r2,zero,11d84 <_realloc_r+0x2b8>
   11b78:	900b883a 	mov	r5,r18
   11b7c:	a009883a 	mov	r4,r20
   11b80:	0010e100 	call	10e10 <_malloc_r>
   11b84:	1025883a 	mov	r18,r2
   11b88:	10011e26 	beq	r2,zero,12004 <_realloc_r+0x538>
   11b8c:	a93fff17 	ldw	r4,-4(r21)
   11b90:	10fffe04 	addi	r3,r2,-8
   11b94:	00bfff84 	movi	r2,-2
   11b98:	2084703a 	and	r2,r4,r2
   11b9c:	9885883a 	add	r2,r19,r2
   11ba0:	1880ee26 	beq	r3,r2,11f5c <_realloc_r+0x490>
   11ba4:	81bfff04 	addi	r6,r16,-4
   11ba8:	00800904 	movi	r2,36
   11bac:	1180b836 	bltu	r2,r6,11e90 <_realloc_r+0x3c4>
   11bb0:	00c004c4 	movi	r3,19
   11bb4:	19809636 	bltu	r3,r6,11e10 <_realloc_r+0x344>
   11bb8:	9005883a 	mov	r2,r18
   11bbc:	a807883a 	mov	r3,r21
   11bc0:	19000017 	ldw	r4,0(r3)
   11bc4:	11000015 	stw	r4,0(r2)
   11bc8:	19000117 	ldw	r4,4(r3)
   11bcc:	11000115 	stw	r4,4(r2)
   11bd0:	18c00217 	ldw	r3,8(r3)
   11bd4:	10c00215 	stw	r3,8(r2)
   11bd8:	a80b883a 	mov	r5,r21
   11bdc:	a009883a 	mov	r4,r20
   11be0:	00128980 	call	12898 <_free_r>
   11be4:	a009883a 	mov	r4,r20
   11be8:	00136700 	call	13670 <__malloc_unlock>
   11bec:	9005883a 	mov	r2,r18
   11bf0:	00001206 	br	11c3c <_realloc_r+0x170>
   11bf4:	00c00404 	movi	r3,16
   11bf8:	1823883a 	mov	r17,r3
   11bfc:	003fce06 	br	11b38 <_gp+0xffff2574>
   11c00:	a825883a 	mov	r18,r21
   11c04:	8445c83a 	sub	r2,r16,r17
   11c08:	00c003c4 	movi	r3,15
   11c0c:	18802636 	bltu	r3,r2,11ca8 <_realloc_r+0x1dc>
   11c10:	99800117 	ldw	r6,4(r19)
   11c14:	9c07883a 	add	r3,r19,r16
   11c18:	3180004c 	andi	r6,r6,1
   11c1c:	3420b03a 	or	r16,r6,r16
   11c20:	9c000115 	stw	r16,4(r19)
   11c24:	18800117 	ldw	r2,4(r3)
   11c28:	10800054 	ori	r2,r2,1
   11c2c:	18800115 	stw	r2,4(r3)
   11c30:	a009883a 	mov	r4,r20
   11c34:	00136700 	call	13670 <__malloc_unlock>
   11c38:	9005883a 	mov	r2,r18
   11c3c:	dfc00917 	ldw	ra,36(sp)
   11c40:	df000817 	ldw	fp,32(sp)
   11c44:	ddc00717 	ldw	r23,28(sp)
   11c48:	dd800617 	ldw	r22,24(sp)
   11c4c:	dd400517 	ldw	r21,20(sp)
   11c50:	dd000417 	ldw	r20,16(sp)
   11c54:	dcc00317 	ldw	r19,12(sp)
   11c58:	dc800217 	ldw	r18,8(sp)
   11c5c:	dc400117 	ldw	r17,4(sp)
   11c60:	dc000017 	ldw	r16,0(sp)
   11c64:	dec00a04 	addi	sp,sp,40
   11c68:	f800283a 	ret
   11c6c:	017fff04 	movi	r5,-4
   11c70:	414a703a 	and	r5,r8,r5
   11c74:	814d883a 	add	r6,r16,r5
   11c78:	30c01f16 	blt	r6,r3,11cf8 <_realloc_r+0x22c>
   11c7c:	20800317 	ldw	r2,12(r4)
   11c80:	20c00217 	ldw	r3,8(r4)
   11c84:	a825883a 	mov	r18,r21
   11c88:	3021883a 	mov	r16,r6
   11c8c:	18800315 	stw	r2,12(r3)
   11c90:	10c00215 	stw	r3,8(r2)
   11c94:	003fdb06 	br	11c04 <_gp+0xffff2640>
   11c98:	00800304 	movi	r2,12
   11c9c:	a0800015 	stw	r2,0(r20)
   11ca0:	0005883a 	mov	r2,zero
   11ca4:	003fe506 	br	11c3c <_gp+0xffff2678>
   11ca8:	98c00117 	ldw	r3,4(r19)
   11cac:	9c4b883a 	add	r5,r19,r17
   11cb0:	11000054 	ori	r4,r2,1
   11cb4:	18c0004c 	andi	r3,r3,1
   11cb8:	1c62b03a 	or	r17,r3,r17
   11cbc:	9c400115 	stw	r17,4(r19)
   11cc0:	29000115 	stw	r4,4(r5)
   11cc4:	2885883a 	add	r2,r5,r2
   11cc8:	10c00117 	ldw	r3,4(r2)
   11ccc:	29400204 	addi	r5,r5,8
   11cd0:	a009883a 	mov	r4,r20
   11cd4:	18c00054 	ori	r3,r3,1
   11cd8:	10c00115 	stw	r3,4(r2)
   11cdc:	00128980 	call	12898 <_free_r>
   11ce0:	003fd306 	br	11c30 <_gp+0xffff266c>
   11ce4:	017fff04 	movi	r5,-4
   11ce8:	414a703a 	and	r5,r8,r5
   11cec:	89800404 	addi	r6,r17,16
   11cf0:	8151883a 	add	r8,r16,r5
   11cf4:	4180590e 	bge	r8,r6,11e5c <_realloc_r+0x390>
   11cf8:	1080004c 	andi	r2,r2,1
   11cfc:	103f9e1e 	bne	r2,zero,11b78 <_gp+0xffff25b4>
   11d00:	adbffe17 	ldw	r22,-8(r21)
   11d04:	00bfff04 	movi	r2,-4
   11d08:	9dadc83a 	sub	r22,r19,r22
   11d0c:	b1800117 	ldw	r6,4(r22)
   11d10:	3084703a 	and	r2,r6,r2
   11d14:	20002026 	beq	r4,zero,11d98 <_realloc_r+0x2cc>
   11d18:	80af883a 	add	r23,r16,r2
   11d1c:	b96f883a 	add	r23,r23,r5
   11d20:	21c05f26 	beq	r4,r7,11ea0 <_realloc_r+0x3d4>
   11d24:	b8c01c16 	blt	r23,r3,11d98 <_realloc_r+0x2cc>
   11d28:	20800317 	ldw	r2,12(r4)
   11d2c:	20c00217 	ldw	r3,8(r4)
   11d30:	81bfff04 	addi	r6,r16,-4
   11d34:	01000904 	movi	r4,36
   11d38:	18800315 	stw	r2,12(r3)
   11d3c:	10c00215 	stw	r3,8(r2)
   11d40:	b0c00217 	ldw	r3,8(r22)
   11d44:	b0800317 	ldw	r2,12(r22)
   11d48:	b4800204 	addi	r18,r22,8
   11d4c:	18800315 	stw	r2,12(r3)
   11d50:	10c00215 	stw	r3,8(r2)
   11d54:	21801b36 	bltu	r4,r6,11dc4 <_realloc_r+0x2f8>
   11d58:	008004c4 	movi	r2,19
   11d5c:	1180352e 	bgeu	r2,r6,11e34 <_realloc_r+0x368>
   11d60:	a8800017 	ldw	r2,0(r21)
   11d64:	b0800215 	stw	r2,8(r22)
   11d68:	a8800117 	ldw	r2,4(r21)
   11d6c:	b0800315 	stw	r2,12(r22)
   11d70:	008006c4 	movi	r2,27
   11d74:	11807f36 	bltu	r2,r6,11f74 <_realloc_r+0x4a8>
   11d78:	b0800404 	addi	r2,r22,16
   11d7c:	ad400204 	addi	r21,r21,8
   11d80:	00002d06 	br	11e38 <_realloc_r+0x36c>
   11d84:	adbffe17 	ldw	r22,-8(r21)
   11d88:	00bfff04 	movi	r2,-4
   11d8c:	9dadc83a 	sub	r22,r19,r22
   11d90:	b1000117 	ldw	r4,4(r22)
   11d94:	2084703a 	and	r2,r4,r2
   11d98:	b03f7726 	beq	r22,zero,11b78 <_gp+0xffff25b4>
   11d9c:	80af883a 	add	r23,r16,r2
   11da0:	b8ff7516 	blt	r23,r3,11b78 <_gp+0xffff25b4>
   11da4:	b0800317 	ldw	r2,12(r22)
   11da8:	b0c00217 	ldw	r3,8(r22)
   11dac:	81bfff04 	addi	r6,r16,-4
   11db0:	01000904 	movi	r4,36
   11db4:	18800315 	stw	r2,12(r3)
   11db8:	10c00215 	stw	r3,8(r2)
   11dbc:	b4800204 	addi	r18,r22,8
   11dc0:	21bfe52e 	bgeu	r4,r6,11d58 <_gp+0xffff2794>
   11dc4:	a80b883a 	mov	r5,r21
   11dc8:	9009883a 	mov	r4,r18
   11dcc:	00118480 	call	11848 <memmove>
   11dd0:	b821883a 	mov	r16,r23
   11dd4:	b027883a 	mov	r19,r22
   11dd8:	003f8a06 	br	11c04 <_gp+0xffff2640>
   11ddc:	300b883a 	mov	r5,r6
   11de0:	dfc00917 	ldw	ra,36(sp)
   11de4:	df000817 	ldw	fp,32(sp)
   11de8:	ddc00717 	ldw	r23,28(sp)
   11dec:	dd800617 	ldw	r22,24(sp)
   11df0:	dd400517 	ldw	r21,20(sp)
   11df4:	dd000417 	ldw	r20,16(sp)
   11df8:	dcc00317 	ldw	r19,12(sp)
   11dfc:	dc800217 	ldw	r18,8(sp)
   11e00:	dc400117 	ldw	r17,4(sp)
   11e04:	dc000017 	ldw	r16,0(sp)
   11e08:	dec00a04 	addi	sp,sp,40
   11e0c:	0010e101 	jmpi	10e10 <_malloc_r>
   11e10:	a8c00017 	ldw	r3,0(r21)
   11e14:	90c00015 	stw	r3,0(r18)
   11e18:	a8c00117 	ldw	r3,4(r21)
   11e1c:	90c00115 	stw	r3,4(r18)
   11e20:	00c006c4 	movi	r3,27
   11e24:	19804536 	bltu	r3,r6,11f3c <_realloc_r+0x470>
   11e28:	90800204 	addi	r2,r18,8
   11e2c:	a8c00204 	addi	r3,r21,8
   11e30:	003f6306 	br	11bc0 <_gp+0xffff25fc>
   11e34:	9005883a 	mov	r2,r18
   11e38:	a8c00017 	ldw	r3,0(r21)
   11e3c:	b821883a 	mov	r16,r23
   11e40:	b027883a 	mov	r19,r22
   11e44:	10c00015 	stw	r3,0(r2)
   11e48:	a8c00117 	ldw	r3,4(r21)
   11e4c:	10c00115 	stw	r3,4(r2)
   11e50:	a8c00217 	ldw	r3,8(r21)
   11e54:	10c00215 	stw	r3,8(r2)
   11e58:	003f6a06 	br	11c04 <_gp+0xffff2640>
   11e5c:	9c67883a 	add	r19,r19,r17
   11e60:	4445c83a 	sub	r2,r8,r17
   11e64:	e4c00215 	stw	r19,8(fp)
   11e68:	10800054 	ori	r2,r2,1
   11e6c:	98800115 	stw	r2,4(r19)
   11e70:	a8bfff17 	ldw	r2,-4(r21)
   11e74:	a009883a 	mov	r4,r20
   11e78:	1080004c 	andi	r2,r2,1
   11e7c:	1462b03a 	or	r17,r2,r17
   11e80:	ac7fff15 	stw	r17,-4(r21)
   11e84:	00136700 	call	13670 <__malloc_unlock>
   11e88:	a805883a 	mov	r2,r21
   11e8c:	003f6b06 	br	11c3c <_gp+0xffff2678>
   11e90:	a80b883a 	mov	r5,r21
   11e94:	9009883a 	mov	r4,r18
   11e98:	00118480 	call	11848 <memmove>
   11e9c:	003f4e06 	br	11bd8 <_gp+0xffff2614>
   11ea0:	89000404 	addi	r4,r17,16
   11ea4:	b93fbc16 	blt	r23,r4,11d98 <_gp+0xffff27d4>
   11ea8:	b0800317 	ldw	r2,12(r22)
   11eac:	b0c00217 	ldw	r3,8(r22)
   11eb0:	81bfff04 	addi	r6,r16,-4
   11eb4:	01000904 	movi	r4,36
   11eb8:	18800315 	stw	r2,12(r3)
   11ebc:	10c00215 	stw	r3,8(r2)
   11ec0:	b4800204 	addi	r18,r22,8
   11ec4:	21804336 	bltu	r4,r6,11fd4 <_realloc_r+0x508>
   11ec8:	008004c4 	movi	r2,19
   11ecc:	11803f2e 	bgeu	r2,r6,11fcc <_realloc_r+0x500>
   11ed0:	a8800017 	ldw	r2,0(r21)
   11ed4:	b0800215 	stw	r2,8(r22)
   11ed8:	a8800117 	ldw	r2,4(r21)
   11edc:	b0800315 	stw	r2,12(r22)
   11ee0:	008006c4 	movi	r2,27
   11ee4:	11803f36 	bltu	r2,r6,11fe4 <_realloc_r+0x518>
   11ee8:	b0800404 	addi	r2,r22,16
   11eec:	ad400204 	addi	r21,r21,8
   11ef0:	a8c00017 	ldw	r3,0(r21)
   11ef4:	10c00015 	stw	r3,0(r2)
   11ef8:	a8c00117 	ldw	r3,4(r21)
   11efc:	10c00115 	stw	r3,4(r2)
   11f00:	a8c00217 	ldw	r3,8(r21)
   11f04:	10c00215 	stw	r3,8(r2)
   11f08:	b447883a 	add	r3,r22,r17
   11f0c:	bc45c83a 	sub	r2,r23,r17
   11f10:	e0c00215 	stw	r3,8(fp)
   11f14:	10800054 	ori	r2,r2,1
   11f18:	18800115 	stw	r2,4(r3)
   11f1c:	b0800117 	ldw	r2,4(r22)
   11f20:	a009883a 	mov	r4,r20
   11f24:	1080004c 	andi	r2,r2,1
   11f28:	1462b03a 	or	r17,r2,r17
   11f2c:	b4400115 	stw	r17,4(r22)
   11f30:	00136700 	call	13670 <__malloc_unlock>
   11f34:	9005883a 	mov	r2,r18
   11f38:	003f4006 	br	11c3c <_gp+0xffff2678>
   11f3c:	a8c00217 	ldw	r3,8(r21)
   11f40:	90c00215 	stw	r3,8(r18)
   11f44:	a8c00317 	ldw	r3,12(r21)
   11f48:	90c00315 	stw	r3,12(r18)
   11f4c:	30801126 	beq	r6,r2,11f94 <_realloc_r+0x4c8>
   11f50:	90800404 	addi	r2,r18,16
   11f54:	a8c00404 	addi	r3,r21,16
   11f58:	003f1906 	br	11bc0 <_gp+0xffff25fc>
   11f5c:	90ffff17 	ldw	r3,-4(r18)
   11f60:	00bfff04 	movi	r2,-4
   11f64:	a825883a 	mov	r18,r21
   11f68:	1884703a 	and	r2,r3,r2
   11f6c:	80a1883a 	add	r16,r16,r2
   11f70:	003f2406 	br	11c04 <_gp+0xffff2640>
   11f74:	a8800217 	ldw	r2,8(r21)
   11f78:	b0800415 	stw	r2,16(r22)
   11f7c:	a8800317 	ldw	r2,12(r21)
   11f80:	b0800515 	stw	r2,20(r22)
   11f84:	31000a26 	beq	r6,r4,11fb0 <_realloc_r+0x4e4>
   11f88:	b0800604 	addi	r2,r22,24
   11f8c:	ad400404 	addi	r21,r21,16
   11f90:	003fa906 	br	11e38 <_gp+0xffff2874>
   11f94:	a9000417 	ldw	r4,16(r21)
   11f98:	90800604 	addi	r2,r18,24
   11f9c:	a8c00604 	addi	r3,r21,24
   11fa0:	91000415 	stw	r4,16(r18)
   11fa4:	a9000517 	ldw	r4,20(r21)
   11fa8:	91000515 	stw	r4,20(r18)
   11fac:	003f0406 	br	11bc0 <_gp+0xffff25fc>
   11fb0:	a8c00417 	ldw	r3,16(r21)
   11fb4:	ad400604 	addi	r21,r21,24
   11fb8:	b0800804 	addi	r2,r22,32
   11fbc:	b0c00615 	stw	r3,24(r22)
   11fc0:	a8ffff17 	ldw	r3,-4(r21)
   11fc4:	b0c00715 	stw	r3,28(r22)
   11fc8:	003f9b06 	br	11e38 <_gp+0xffff2874>
   11fcc:	9005883a 	mov	r2,r18
   11fd0:	003fc706 	br	11ef0 <_gp+0xffff292c>
   11fd4:	a80b883a 	mov	r5,r21
   11fd8:	9009883a 	mov	r4,r18
   11fdc:	00118480 	call	11848 <memmove>
   11fe0:	003fc906 	br	11f08 <_gp+0xffff2944>
   11fe4:	a8800217 	ldw	r2,8(r21)
   11fe8:	b0800415 	stw	r2,16(r22)
   11fec:	a8800317 	ldw	r2,12(r21)
   11ff0:	b0800515 	stw	r2,20(r22)
   11ff4:	31000726 	beq	r6,r4,12014 <_realloc_r+0x548>
   11ff8:	b0800604 	addi	r2,r22,24
   11ffc:	ad400404 	addi	r21,r21,16
   12000:	003fbb06 	br	11ef0 <_gp+0xffff292c>
   12004:	a009883a 	mov	r4,r20
   12008:	00136700 	call	13670 <__malloc_unlock>
   1200c:	0005883a 	mov	r2,zero
   12010:	003f0a06 	br	11c3c <_gp+0xffff2678>
   12014:	a8c00417 	ldw	r3,16(r21)
   12018:	ad400604 	addi	r21,r21,24
   1201c:	b0800804 	addi	r2,r22,32
   12020:	b0c00615 	stw	r3,24(r22)
   12024:	a8ffff17 	ldw	r3,-4(r21)
   12028:	b0c00715 	stw	r3,28(r22)
   1202c:	003fb006 	br	11ef0 <_gp+0xffff292c>

00012030 <_sbrk_r>:
   12030:	defffd04 	addi	sp,sp,-12
   12034:	dc000015 	stw	r16,0(sp)
   12038:	040000b4 	movhi	r16,2
   1203c:	dc400115 	stw	r17,4(sp)
   12040:	84243304 	addi	r16,r16,-28468
   12044:	2023883a 	mov	r17,r4
   12048:	2809883a 	mov	r4,r5
   1204c:	dfc00215 	stw	ra,8(sp)
   12050:	80000015 	stw	zero,0(r16)
   12054:	00138580 	call	13858 <sbrk>
   12058:	00ffffc4 	movi	r3,-1
   1205c:	10c00526 	beq	r2,r3,12074 <_sbrk_r+0x44>
   12060:	dfc00217 	ldw	ra,8(sp)
   12064:	dc400117 	ldw	r17,4(sp)
   12068:	dc000017 	ldw	r16,0(sp)
   1206c:	dec00304 	addi	sp,sp,12
   12070:	f800283a 	ret
   12074:	80c00017 	ldw	r3,0(r16)
   12078:	183ff926 	beq	r3,zero,12060 <_gp+0xffff2a9c>
   1207c:	88c00015 	stw	r3,0(r17)
   12080:	003ff706 	br	12060 <_gp+0xffff2a9c>

00012084 <__sread>:
   12084:	defffe04 	addi	sp,sp,-8
   12088:	dc000015 	stw	r16,0(sp)
   1208c:	2821883a 	mov	r16,r5
   12090:	2940038f 	ldh	r5,14(r5)
   12094:	dfc00115 	stw	ra,4(sp)
   12098:	0012dc40 	call	12dc4 <_read_r>
   1209c:	10000716 	blt	r2,zero,120bc <__sread+0x38>
   120a0:	80c01417 	ldw	r3,80(r16)
   120a4:	1887883a 	add	r3,r3,r2
   120a8:	80c01415 	stw	r3,80(r16)
   120ac:	dfc00117 	ldw	ra,4(sp)
   120b0:	dc000017 	ldw	r16,0(sp)
   120b4:	dec00204 	addi	sp,sp,8
   120b8:	f800283a 	ret
   120bc:	80c0030b 	ldhu	r3,12(r16)
   120c0:	18fbffcc 	andi	r3,r3,61439
   120c4:	80c0030d 	sth	r3,12(r16)
   120c8:	dfc00117 	ldw	ra,4(sp)
   120cc:	dc000017 	ldw	r16,0(sp)
   120d0:	dec00204 	addi	sp,sp,8
   120d4:	f800283a 	ret

000120d8 <__seofread>:
   120d8:	0005883a 	mov	r2,zero
   120dc:	f800283a 	ret

000120e0 <__swrite>:
   120e0:	2880030b 	ldhu	r2,12(r5)
   120e4:	defffb04 	addi	sp,sp,-20
   120e8:	dcc00315 	stw	r19,12(sp)
   120ec:	dc800215 	stw	r18,8(sp)
   120f0:	dc400115 	stw	r17,4(sp)
   120f4:	dc000015 	stw	r16,0(sp)
   120f8:	dfc00415 	stw	ra,16(sp)
   120fc:	10c0400c 	andi	r3,r2,256
   12100:	2821883a 	mov	r16,r5
   12104:	2023883a 	mov	r17,r4
   12108:	3025883a 	mov	r18,r6
   1210c:	3827883a 	mov	r19,r7
   12110:	18000526 	beq	r3,zero,12128 <__swrite+0x48>
   12114:	2940038f 	ldh	r5,14(r5)
   12118:	01c00084 	movi	r7,2
   1211c:	000d883a 	mov	r6,zero
   12120:	0012ba80 	call	12ba8 <_lseek_r>
   12124:	8080030b 	ldhu	r2,12(r16)
   12128:	8140038f 	ldh	r5,14(r16)
   1212c:	10bbffcc 	andi	r2,r2,61439
   12130:	980f883a 	mov	r7,r19
   12134:	900d883a 	mov	r6,r18
   12138:	8809883a 	mov	r4,r17
   1213c:	8080030d 	sth	r2,12(r16)
   12140:	dfc00417 	ldw	ra,16(sp)
   12144:	dcc00317 	ldw	r19,12(sp)
   12148:	dc800217 	ldw	r18,8(sp)
   1214c:	dc400117 	ldw	r17,4(sp)
   12150:	dc000017 	ldw	r16,0(sp)
   12154:	dec00504 	addi	sp,sp,20
   12158:	00121c01 	jmpi	121c0 <_write_r>

0001215c <__sseek>:
   1215c:	defffe04 	addi	sp,sp,-8
   12160:	dc000015 	stw	r16,0(sp)
   12164:	2821883a 	mov	r16,r5
   12168:	2940038f 	ldh	r5,14(r5)
   1216c:	dfc00115 	stw	ra,4(sp)
   12170:	0012ba80 	call	12ba8 <_lseek_r>
   12174:	00ffffc4 	movi	r3,-1
   12178:	10c00826 	beq	r2,r3,1219c <__sseek+0x40>
   1217c:	80c0030b 	ldhu	r3,12(r16)
   12180:	80801415 	stw	r2,80(r16)
   12184:	18c40014 	ori	r3,r3,4096
   12188:	80c0030d 	sth	r3,12(r16)
   1218c:	dfc00117 	ldw	ra,4(sp)
   12190:	dc000017 	ldw	r16,0(sp)
   12194:	dec00204 	addi	sp,sp,8
   12198:	f800283a 	ret
   1219c:	80c0030b 	ldhu	r3,12(r16)
   121a0:	18fbffcc 	andi	r3,r3,61439
   121a4:	80c0030d 	sth	r3,12(r16)
   121a8:	dfc00117 	ldw	ra,4(sp)
   121ac:	dc000017 	ldw	r16,0(sp)
   121b0:	dec00204 	addi	sp,sp,8
   121b4:	f800283a 	ret

000121b8 <__sclose>:
   121b8:	2940038f 	ldh	r5,14(r5)
   121bc:	00123741 	jmpi	12374 <_close_r>

000121c0 <_write_r>:
   121c0:	defffd04 	addi	sp,sp,-12
   121c4:	2805883a 	mov	r2,r5
   121c8:	dc000015 	stw	r16,0(sp)
   121cc:	040000b4 	movhi	r16,2
   121d0:	dc400115 	stw	r17,4(sp)
   121d4:	300b883a 	mov	r5,r6
   121d8:	84243304 	addi	r16,r16,-28468
   121dc:	2023883a 	mov	r17,r4
   121e0:	380d883a 	mov	r6,r7
   121e4:	1009883a 	mov	r4,r2
   121e8:	dfc00215 	stw	ra,8(sp)
   121ec:	80000015 	stw	zero,0(r16)
   121f0:	00139440 	call	13944 <write>
   121f4:	00ffffc4 	movi	r3,-1
   121f8:	10c00526 	beq	r2,r3,12210 <_write_r+0x50>
   121fc:	dfc00217 	ldw	ra,8(sp)
   12200:	dc400117 	ldw	r17,4(sp)
   12204:	dc000017 	ldw	r16,0(sp)
   12208:	dec00304 	addi	sp,sp,12
   1220c:	f800283a 	ret
   12210:	80c00017 	ldw	r3,0(r16)
   12214:	183ff926 	beq	r3,zero,121fc <_gp+0xffff2c38>
   12218:	88c00015 	stw	r3,0(r17)
   1221c:	003ff706 	br	121fc <_gp+0xffff2c38>

00012220 <__swsetup_r>:
   12220:	00800074 	movhi	r2,1
   12224:	defffd04 	addi	sp,sp,-12
   12228:	109d7204 	addi	r2,r2,30152
   1222c:	dc400115 	stw	r17,4(sp)
   12230:	2023883a 	mov	r17,r4
   12234:	11000017 	ldw	r4,0(r2)
   12238:	dc000015 	stw	r16,0(sp)
   1223c:	dfc00215 	stw	ra,8(sp)
   12240:	2821883a 	mov	r16,r5
   12244:	20000226 	beq	r4,zero,12250 <__swsetup_r+0x30>
   12248:	20800e17 	ldw	r2,56(r4)
   1224c:	10003126 	beq	r2,zero,12314 <__swsetup_r+0xf4>
   12250:	8080030b 	ldhu	r2,12(r16)
   12254:	10c0020c 	andi	r3,r2,8
   12258:	1009883a 	mov	r4,r2
   1225c:	18000f26 	beq	r3,zero,1229c <__swsetup_r+0x7c>
   12260:	80c00417 	ldw	r3,16(r16)
   12264:	18001526 	beq	r3,zero,122bc <__swsetup_r+0x9c>
   12268:	1100004c 	andi	r4,r2,1
   1226c:	20001c1e 	bne	r4,zero,122e0 <__swsetup_r+0xc0>
   12270:	1080008c 	andi	r2,r2,2
   12274:	1000291e 	bne	r2,zero,1231c <__swsetup_r+0xfc>
   12278:	80800517 	ldw	r2,20(r16)
   1227c:	80800215 	stw	r2,8(r16)
   12280:	18001c26 	beq	r3,zero,122f4 <__swsetup_r+0xd4>
   12284:	0005883a 	mov	r2,zero
   12288:	dfc00217 	ldw	ra,8(sp)
   1228c:	dc400117 	ldw	r17,4(sp)
   12290:	dc000017 	ldw	r16,0(sp)
   12294:	dec00304 	addi	sp,sp,12
   12298:	f800283a 	ret
   1229c:	2080040c 	andi	r2,r4,16
   122a0:	10002e26 	beq	r2,zero,1235c <__swsetup_r+0x13c>
   122a4:	2080010c 	andi	r2,r4,4
   122a8:	10001e1e 	bne	r2,zero,12324 <__swsetup_r+0x104>
   122ac:	80c00417 	ldw	r3,16(r16)
   122b0:	20800214 	ori	r2,r4,8
   122b4:	8080030d 	sth	r2,12(r16)
   122b8:	183feb1e 	bne	r3,zero,12268 <_gp+0xffff2ca4>
   122bc:	1100a00c 	andi	r4,r2,640
   122c0:	01408004 	movi	r5,512
   122c4:	217fe826 	beq	r4,r5,12268 <_gp+0xffff2ca4>
   122c8:	800b883a 	mov	r5,r16
   122cc:	8809883a 	mov	r4,r17
   122d0:	0012c080 	call	12c08 <__smakebuf_r>
   122d4:	8080030b 	ldhu	r2,12(r16)
   122d8:	80c00417 	ldw	r3,16(r16)
   122dc:	003fe206 	br	12268 <_gp+0xffff2ca4>
   122e0:	80800517 	ldw	r2,20(r16)
   122e4:	80000215 	stw	zero,8(r16)
   122e8:	0085c83a 	sub	r2,zero,r2
   122ec:	80800615 	stw	r2,24(r16)
   122f0:	183fe41e 	bne	r3,zero,12284 <_gp+0xffff2cc0>
   122f4:	80c0030b 	ldhu	r3,12(r16)
   122f8:	0005883a 	mov	r2,zero
   122fc:	1900200c 	andi	r4,r3,128
   12300:	203fe126 	beq	r4,zero,12288 <_gp+0xffff2cc4>
   12304:	18c01014 	ori	r3,r3,64
   12308:	80c0030d 	sth	r3,12(r16)
   1230c:	00bfffc4 	movi	r2,-1
   12310:	003fdd06 	br	12288 <_gp+0xffff2cc4>
   12314:	00107700 	call	10770 <__sinit>
   12318:	003fcd06 	br	12250 <_gp+0xffff2c8c>
   1231c:	0005883a 	mov	r2,zero
   12320:	003fd606 	br	1227c <_gp+0xffff2cb8>
   12324:	81400c17 	ldw	r5,48(r16)
   12328:	28000626 	beq	r5,zero,12344 <__swsetup_r+0x124>
   1232c:	80801004 	addi	r2,r16,64
   12330:	28800326 	beq	r5,r2,12340 <__swsetup_r+0x120>
   12334:	8809883a 	mov	r4,r17
   12338:	00128980 	call	12898 <_free_r>
   1233c:	8100030b 	ldhu	r4,12(r16)
   12340:	80000c15 	stw	zero,48(r16)
   12344:	80c00417 	ldw	r3,16(r16)
   12348:	00bff6c4 	movi	r2,-37
   1234c:	1108703a 	and	r4,r2,r4
   12350:	80000115 	stw	zero,4(r16)
   12354:	80c00015 	stw	r3,0(r16)
   12358:	003fd506 	br	122b0 <_gp+0xffff2cec>
   1235c:	00800244 	movi	r2,9
   12360:	88800015 	stw	r2,0(r17)
   12364:	20801014 	ori	r2,r4,64
   12368:	8080030d 	sth	r2,12(r16)
   1236c:	00bfffc4 	movi	r2,-1
   12370:	003fc506 	br	12288 <_gp+0xffff2cc4>

00012374 <_close_r>:
   12374:	defffd04 	addi	sp,sp,-12
   12378:	dc000015 	stw	r16,0(sp)
   1237c:	040000b4 	movhi	r16,2
   12380:	dc400115 	stw	r17,4(sp)
   12384:	84243304 	addi	r16,r16,-28468
   12388:	2023883a 	mov	r17,r4
   1238c:	2809883a 	mov	r4,r5
   12390:	dfc00215 	stw	ra,8(sp)
   12394:	80000015 	stw	zero,0(r16)
   12398:	00130ec0 	call	130ec <close>
   1239c:	00ffffc4 	movi	r3,-1
   123a0:	10c00526 	beq	r2,r3,123b8 <_close_r+0x44>
   123a4:	dfc00217 	ldw	ra,8(sp)
   123a8:	dc400117 	ldw	r17,4(sp)
   123ac:	dc000017 	ldw	r16,0(sp)
   123b0:	dec00304 	addi	sp,sp,12
   123b4:	f800283a 	ret
   123b8:	80c00017 	ldw	r3,0(r16)
   123bc:	183ff926 	beq	r3,zero,123a4 <_gp+0xffff2de0>
   123c0:	88c00015 	stw	r3,0(r17)
   123c4:	003ff706 	br	123a4 <_gp+0xffff2de0>

000123c8 <_fclose_r>:
   123c8:	28003926 	beq	r5,zero,124b0 <_fclose_r+0xe8>
   123cc:	defffc04 	addi	sp,sp,-16
   123d0:	dc400115 	stw	r17,4(sp)
   123d4:	dc000015 	stw	r16,0(sp)
   123d8:	dfc00315 	stw	ra,12(sp)
   123dc:	dc800215 	stw	r18,8(sp)
   123e0:	2023883a 	mov	r17,r4
   123e4:	2821883a 	mov	r16,r5
   123e8:	20000226 	beq	r4,zero,123f4 <_fclose_r+0x2c>
   123ec:	20800e17 	ldw	r2,56(r4)
   123f0:	10002726 	beq	r2,zero,12490 <_fclose_r+0xc8>
   123f4:	8080030f 	ldh	r2,12(r16)
   123f8:	1000071e 	bne	r2,zero,12418 <_fclose_r+0x50>
   123fc:	0005883a 	mov	r2,zero
   12400:	dfc00317 	ldw	ra,12(sp)
   12404:	dc800217 	ldw	r18,8(sp)
   12408:	dc400117 	ldw	r17,4(sp)
   1240c:	dc000017 	ldw	r16,0(sp)
   12410:	dec00404 	addi	sp,sp,16
   12414:	f800283a 	ret
   12418:	800b883a 	mov	r5,r16
   1241c:	8809883a 	mov	r4,r17
   12420:	00124cc0 	call	124cc <__sflush_r>
   12424:	1025883a 	mov	r18,r2
   12428:	80800b17 	ldw	r2,44(r16)
   1242c:	10000426 	beq	r2,zero,12440 <_fclose_r+0x78>
   12430:	81400717 	ldw	r5,28(r16)
   12434:	8809883a 	mov	r4,r17
   12438:	103ee83a 	callr	r2
   1243c:	10001616 	blt	r2,zero,12498 <_fclose_r+0xd0>
   12440:	8080030b 	ldhu	r2,12(r16)
   12444:	1080200c 	andi	r2,r2,128
   12448:	1000151e 	bne	r2,zero,124a0 <_fclose_r+0xd8>
   1244c:	81400c17 	ldw	r5,48(r16)
   12450:	28000526 	beq	r5,zero,12468 <_fclose_r+0xa0>
   12454:	80801004 	addi	r2,r16,64
   12458:	28800226 	beq	r5,r2,12464 <_fclose_r+0x9c>
   1245c:	8809883a 	mov	r4,r17
   12460:	00128980 	call	12898 <_free_r>
   12464:	80000c15 	stw	zero,48(r16)
   12468:	81401117 	ldw	r5,68(r16)
   1246c:	28000326 	beq	r5,zero,1247c <_fclose_r+0xb4>
   12470:	8809883a 	mov	r4,r17
   12474:	00128980 	call	12898 <_free_r>
   12478:	80001115 	stw	zero,68(r16)
   1247c:	00107800 	call	10780 <__sfp_lock_acquire>
   12480:	8000030d 	sth	zero,12(r16)
   12484:	00107840 	call	10784 <__sfp_lock_release>
   12488:	9005883a 	mov	r2,r18
   1248c:	003fdc06 	br	12400 <_gp+0xffff2e3c>
   12490:	00107700 	call	10770 <__sinit>
   12494:	003fd706 	br	123f4 <_gp+0xffff2e30>
   12498:	04bfffc4 	movi	r18,-1
   1249c:	003fe806 	br	12440 <_gp+0xffff2e7c>
   124a0:	81400417 	ldw	r5,16(r16)
   124a4:	8809883a 	mov	r4,r17
   124a8:	00128980 	call	12898 <_free_r>
   124ac:	003fe706 	br	1244c <_gp+0xffff2e88>
   124b0:	0005883a 	mov	r2,zero
   124b4:	f800283a 	ret

000124b8 <fclose>:
   124b8:	00800074 	movhi	r2,1
   124bc:	109d7204 	addi	r2,r2,30152
   124c0:	200b883a 	mov	r5,r4
   124c4:	11000017 	ldw	r4,0(r2)
   124c8:	00123c81 	jmpi	123c8 <_fclose_r>

000124cc <__sflush_r>:
   124cc:	2880030b 	ldhu	r2,12(r5)
   124d0:	defffb04 	addi	sp,sp,-20
   124d4:	dcc00315 	stw	r19,12(sp)
   124d8:	dc400115 	stw	r17,4(sp)
   124dc:	dfc00415 	stw	ra,16(sp)
   124e0:	dc800215 	stw	r18,8(sp)
   124e4:	dc000015 	stw	r16,0(sp)
   124e8:	10c0020c 	andi	r3,r2,8
   124ec:	2823883a 	mov	r17,r5
   124f0:	2027883a 	mov	r19,r4
   124f4:	1800311e 	bne	r3,zero,125bc <__sflush_r+0xf0>
   124f8:	28c00117 	ldw	r3,4(r5)
   124fc:	10820014 	ori	r2,r2,2048
   12500:	2880030d 	sth	r2,12(r5)
   12504:	00c04b0e 	bge	zero,r3,12634 <__sflush_r+0x168>
   12508:	8a000a17 	ldw	r8,40(r17)
   1250c:	40002326 	beq	r8,zero,1259c <__sflush_r+0xd0>
   12510:	9c000017 	ldw	r16,0(r19)
   12514:	10c4000c 	andi	r3,r2,4096
   12518:	98000015 	stw	zero,0(r19)
   1251c:	18004826 	beq	r3,zero,12640 <__sflush_r+0x174>
   12520:	89801417 	ldw	r6,80(r17)
   12524:	10c0010c 	andi	r3,r2,4
   12528:	18000626 	beq	r3,zero,12544 <__sflush_r+0x78>
   1252c:	88c00117 	ldw	r3,4(r17)
   12530:	88800c17 	ldw	r2,48(r17)
   12534:	30cdc83a 	sub	r6,r6,r3
   12538:	10000226 	beq	r2,zero,12544 <__sflush_r+0x78>
   1253c:	88800f17 	ldw	r2,60(r17)
   12540:	308dc83a 	sub	r6,r6,r2
   12544:	89400717 	ldw	r5,28(r17)
   12548:	000f883a 	mov	r7,zero
   1254c:	9809883a 	mov	r4,r19
   12550:	403ee83a 	callr	r8
   12554:	00ffffc4 	movi	r3,-1
   12558:	10c04426 	beq	r2,r3,1266c <__sflush_r+0x1a0>
   1255c:	88c0030b 	ldhu	r3,12(r17)
   12560:	89000417 	ldw	r4,16(r17)
   12564:	88000115 	stw	zero,4(r17)
   12568:	197dffcc 	andi	r5,r3,63487
   1256c:	8940030d 	sth	r5,12(r17)
   12570:	89000015 	stw	r4,0(r17)
   12574:	18c4000c 	andi	r3,r3,4096
   12578:	18002c1e 	bne	r3,zero,1262c <__sflush_r+0x160>
   1257c:	89400c17 	ldw	r5,48(r17)
   12580:	9c000015 	stw	r16,0(r19)
   12584:	28000526 	beq	r5,zero,1259c <__sflush_r+0xd0>
   12588:	88801004 	addi	r2,r17,64
   1258c:	28800226 	beq	r5,r2,12598 <__sflush_r+0xcc>
   12590:	9809883a 	mov	r4,r19
   12594:	00128980 	call	12898 <_free_r>
   12598:	88000c15 	stw	zero,48(r17)
   1259c:	0005883a 	mov	r2,zero
   125a0:	dfc00417 	ldw	ra,16(sp)
   125a4:	dcc00317 	ldw	r19,12(sp)
   125a8:	dc800217 	ldw	r18,8(sp)
   125ac:	dc400117 	ldw	r17,4(sp)
   125b0:	dc000017 	ldw	r16,0(sp)
   125b4:	dec00504 	addi	sp,sp,20
   125b8:	f800283a 	ret
   125bc:	2c800417 	ldw	r18,16(r5)
   125c0:	903ff626 	beq	r18,zero,1259c <_gp+0xffff2fd8>
   125c4:	2c000017 	ldw	r16,0(r5)
   125c8:	108000cc 	andi	r2,r2,3
   125cc:	2c800015 	stw	r18,0(r5)
   125d0:	84a1c83a 	sub	r16,r16,r18
   125d4:	1000131e 	bne	r2,zero,12624 <__sflush_r+0x158>
   125d8:	28800517 	ldw	r2,20(r5)
   125dc:	88800215 	stw	r2,8(r17)
   125e0:	04000316 	blt	zero,r16,125f0 <__sflush_r+0x124>
   125e4:	003fed06 	br	1259c <_gp+0xffff2fd8>
   125e8:	90a5883a 	add	r18,r18,r2
   125ec:	043feb0e 	bge	zero,r16,1259c <_gp+0xffff2fd8>
   125f0:	88800917 	ldw	r2,36(r17)
   125f4:	89400717 	ldw	r5,28(r17)
   125f8:	800f883a 	mov	r7,r16
   125fc:	900d883a 	mov	r6,r18
   12600:	9809883a 	mov	r4,r19
   12604:	103ee83a 	callr	r2
   12608:	80a1c83a 	sub	r16,r16,r2
   1260c:	00bff616 	blt	zero,r2,125e8 <_gp+0xffff3024>
   12610:	88c0030b 	ldhu	r3,12(r17)
   12614:	00bfffc4 	movi	r2,-1
   12618:	18c01014 	ori	r3,r3,64
   1261c:	88c0030d 	sth	r3,12(r17)
   12620:	003fdf06 	br	125a0 <_gp+0xffff2fdc>
   12624:	0005883a 	mov	r2,zero
   12628:	003fec06 	br	125dc <_gp+0xffff3018>
   1262c:	88801415 	stw	r2,80(r17)
   12630:	003fd206 	br	1257c <_gp+0xffff2fb8>
   12634:	28c00f17 	ldw	r3,60(r5)
   12638:	00ffb316 	blt	zero,r3,12508 <_gp+0xffff2f44>
   1263c:	003fd706 	br	1259c <_gp+0xffff2fd8>
   12640:	89400717 	ldw	r5,28(r17)
   12644:	000d883a 	mov	r6,zero
   12648:	01c00044 	movi	r7,1
   1264c:	9809883a 	mov	r4,r19
   12650:	403ee83a 	callr	r8
   12654:	100d883a 	mov	r6,r2
   12658:	00bfffc4 	movi	r2,-1
   1265c:	30801426 	beq	r6,r2,126b0 <__sflush_r+0x1e4>
   12660:	8880030b 	ldhu	r2,12(r17)
   12664:	8a000a17 	ldw	r8,40(r17)
   12668:	003fae06 	br	12524 <_gp+0xffff2f60>
   1266c:	98c00017 	ldw	r3,0(r19)
   12670:	183fba26 	beq	r3,zero,1255c <_gp+0xffff2f98>
   12674:	01000744 	movi	r4,29
   12678:	19000626 	beq	r3,r4,12694 <__sflush_r+0x1c8>
   1267c:	01000584 	movi	r4,22
   12680:	19000426 	beq	r3,r4,12694 <__sflush_r+0x1c8>
   12684:	88c0030b 	ldhu	r3,12(r17)
   12688:	18c01014 	ori	r3,r3,64
   1268c:	88c0030d 	sth	r3,12(r17)
   12690:	003fc306 	br	125a0 <_gp+0xffff2fdc>
   12694:	8880030b 	ldhu	r2,12(r17)
   12698:	88c00417 	ldw	r3,16(r17)
   1269c:	88000115 	stw	zero,4(r17)
   126a0:	10bdffcc 	andi	r2,r2,63487
   126a4:	8880030d 	sth	r2,12(r17)
   126a8:	88c00015 	stw	r3,0(r17)
   126ac:	003fb306 	br	1257c <_gp+0xffff2fb8>
   126b0:	98800017 	ldw	r2,0(r19)
   126b4:	103fea26 	beq	r2,zero,12660 <_gp+0xffff309c>
   126b8:	00c00744 	movi	r3,29
   126bc:	10c00226 	beq	r2,r3,126c8 <__sflush_r+0x1fc>
   126c0:	00c00584 	movi	r3,22
   126c4:	10c0031e 	bne	r2,r3,126d4 <__sflush_r+0x208>
   126c8:	9c000015 	stw	r16,0(r19)
   126cc:	0005883a 	mov	r2,zero
   126d0:	003fb306 	br	125a0 <_gp+0xffff2fdc>
   126d4:	88c0030b 	ldhu	r3,12(r17)
   126d8:	3005883a 	mov	r2,r6
   126dc:	18c01014 	ori	r3,r3,64
   126e0:	88c0030d 	sth	r3,12(r17)
   126e4:	003fae06 	br	125a0 <_gp+0xffff2fdc>

000126e8 <_fflush_r>:
   126e8:	defffd04 	addi	sp,sp,-12
   126ec:	dc000115 	stw	r16,4(sp)
   126f0:	dfc00215 	stw	ra,8(sp)
   126f4:	2021883a 	mov	r16,r4
   126f8:	20000226 	beq	r4,zero,12704 <_fflush_r+0x1c>
   126fc:	20800e17 	ldw	r2,56(r4)
   12700:	10000c26 	beq	r2,zero,12734 <_fflush_r+0x4c>
   12704:	2880030f 	ldh	r2,12(r5)
   12708:	1000051e 	bne	r2,zero,12720 <_fflush_r+0x38>
   1270c:	0005883a 	mov	r2,zero
   12710:	dfc00217 	ldw	ra,8(sp)
   12714:	dc000117 	ldw	r16,4(sp)
   12718:	dec00304 	addi	sp,sp,12
   1271c:	f800283a 	ret
   12720:	8009883a 	mov	r4,r16
   12724:	dfc00217 	ldw	ra,8(sp)
   12728:	dc000117 	ldw	r16,4(sp)
   1272c:	dec00304 	addi	sp,sp,12
   12730:	00124cc1 	jmpi	124cc <__sflush_r>
   12734:	d9400015 	stw	r5,0(sp)
   12738:	00107700 	call	10770 <__sinit>
   1273c:	d9400017 	ldw	r5,0(sp)
   12740:	003ff006 	br	12704 <_gp+0xffff3140>

00012744 <fflush>:
   12744:	20000526 	beq	r4,zero,1275c <fflush+0x18>
   12748:	00800074 	movhi	r2,1
   1274c:	109d7204 	addi	r2,r2,30152
   12750:	200b883a 	mov	r5,r4
   12754:	11000017 	ldw	r4,0(r2)
   12758:	00126e81 	jmpi	126e8 <_fflush_r>
   1275c:	00800074 	movhi	r2,1
   12760:	109d7104 	addi	r2,r2,30148
   12764:	11000017 	ldw	r4,0(r2)
   12768:	01400074 	movhi	r5,1
   1276c:	2949ba04 	addi	r5,r5,9960
   12770:	0010d4c1 	jmpi	10d4c <_fwalk_reent>

00012774 <_malloc_trim_r>:
   12774:	defffb04 	addi	sp,sp,-20
   12778:	dcc00315 	stw	r19,12(sp)
   1277c:	04c00074 	movhi	r19,1
   12780:	dc800215 	stw	r18,8(sp)
   12784:	dc400115 	stw	r17,4(sp)
   12788:	dc000015 	stw	r16,0(sp)
   1278c:	dfc00415 	stw	ra,16(sp)
   12790:	2821883a 	mov	r16,r5
   12794:	9cd7d704 	addi	r19,r19,24412
   12798:	2025883a 	mov	r18,r4
   1279c:	001364c0 	call	1364c <__malloc_lock>
   127a0:	98800217 	ldw	r2,8(r19)
   127a4:	14400117 	ldw	r17,4(r2)
   127a8:	00bfff04 	movi	r2,-4
   127ac:	88a2703a 	and	r17,r17,r2
   127b0:	8c21c83a 	sub	r16,r17,r16
   127b4:	8403fbc4 	addi	r16,r16,4079
   127b8:	8020d33a 	srli	r16,r16,12
   127bc:	0083ffc4 	movi	r2,4095
   127c0:	843fffc4 	addi	r16,r16,-1
   127c4:	8020933a 	slli	r16,r16,12
   127c8:	1400060e 	bge	r2,r16,127e4 <_malloc_trim_r+0x70>
   127cc:	000b883a 	mov	r5,zero
   127d0:	9009883a 	mov	r4,r18
   127d4:	00120300 	call	12030 <_sbrk_r>
   127d8:	98c00217 	ldw	r3,8(r19)
   127dc:	1c47883a 	add	r3,r3,r17
   127e0:	10c00a26 	beq	r2,r3,1280c <_malloc_trim_r+0x98>
   127e4:	9009883a 	mov	r4,r18
   127e8:	00136700 	call	13670 <__malloc_unlock>
   127ec:	0005883a 	mov	r2,zero
   127f0:	dfc00417 	ldw	ra,16(sp)
   127f4:	dcc00317 	ldw	r19,12(sp)
   127f8:	dc800217 	ldw	r18,8(sp)
   127fc:	dc400117 	ldw	r17,4(sp)
   12800:	dc000017 	ldw	r16,0(sp)
   12804:	dec00504 	addi	sp,sp,20
   12808:	f800283a 	ret
   1280c:	040bc83a 	sub	r5,zero,r16
   12810:	9009883a 	mov	r4,r18
   12814:	00120300 	call	12030 <_sbrk_r>
   12818:	00ffffc4 	movi	r3,-1
   1281c:	10c00d26 	beq	r2,r3,12854 <_malloc_trim_r+0xe0>
   12820:	00c000b4 	movhi	r3,2
   12824:	18e43b04 	addi	r3,r3,-28436
   12828:	18800017 	ldw	r2,0(r3)
   1282c:	99000217 	ldw	r4,8(r19)
   12830:	8c23c83a 	sub	r17,r17,r16
   12834:	8c400054 	ori	r17,r17,1
   12838:	1421c83a 	sub	r16,r2,r16
   1283c:	24400115 	stw	r17,4(r4)
   12840:	9009883a 	mov	r4,r18
   12844:	1c000015 	stw	r16,0(r3)
   12848:	00136700 	call	13670 <__malloc_unlock>
   1284c:	00800044 	movi	r2,1
   12850:	003fe706 	br	127f0 <_gp+0xffff322c>
   12854:	000b883a 	mov	r5,zero
   12858:	9009883a 	mov	r4,r18
   1285c:	00120300 	call	12030 <_sbrk_r>
   12860:	99000217 	ldw	r4,8(r19)
   12864:	014003c4 	movi	r5,15
   12868:	1107c83a 	sub	r3,r2,r4
   1286c:	28ffdd0e 	bge	r5,r3,127e4 <_gp+0xffff3220>
   12870:	01400074 	movhi	r5,1
   12874:	295d7304 	addi	r5,r5,30156
   12878:	29400017 	ldw	r5,0(r5)
   1287c:	18c00054 	ori	r3,r3,1
   12880:	20c00115 	stw	r3,4(r4)
   12884:	00c000b4 	movhi	r3,2
   12888:	1145c83a 	sub	r2,r2,r5
   1288c:	18e43b04 	addi	r3,r3,-28436
   12890:	18800015 	stw	r2,0(r3)
   12894:	003fd306 	br	127e4 <_gp+0xffff3220>

00012898 <_free_r>:
   12898:	28004126 	beq	r5,zero,129a0 <_free_r+0x108>
   1289c:	defffd04 	addi	sp,sp,-12
   128a0:	dc400115 	stw	r17,4(sp)
   128a4:	dc000015 	stw	r16,0(sp)
   128a8:	2023883a 	mov	r17,r4
   128ac:	2821883a 	mov	r16,r5
   128b0:	dfc00215 	stw	ra,8(sp)
   128b4:	001364c0 	call	1364c <__malloc_lock>
   128b8:	81ffff17 	ldw	r7,-4(r16)
   128bc:	00bfff84 	movi	r2,-2
   128c0:	01000074 	movhi	r4,1
   128c4:	81bffe04 	addi	r6,r16,-8
   128c8:	3884703a 	and	r2,r7,r2
   128cc:	2117d704 	addi	r4,r4,24412
   128d0:	308b883a 	add	r5,r6,r2
   128d4:	2a400117 	ldw	r9,4(r5)
   128d8:	22000217 	ldw	r8,8(r4)
   128dc:	00ffff04 	movi	r3,-4
   128e0:	48c6703a 	and	r3,r9,r3
   128e4:	2a005726 	beq	r5,r8,12a44 <_free_r+0x1ac>
   128e8:	28c00115 	stw	r3,4(r5)
   128ec:	39c0004c 	andi	r7,r7,1
   128f0:	3800091e 	bne	r7,zero,12918 <_free_r+0x80>
   128f4:	823ffe17 	ldw	r8,-8(r16)
   128f8:	22400204 	addi	r9,r4,8
   128fc:	320dc83a 	sub	r6,r6,r8
   12900:	31c00217 	ldw	r7,8(r6)
   12904:	1205883a 	add	r2,r2,r8
   12908:	3a406526 	beq	r7,r9,12aa0 <_free_r+0x208>
   1290c:	32000317 	ldw	r8,12(r6)
   12910:	3a000315 	stw	r8,12(r7)
   12914:	41c00215 	stw	r7,8(r8)
   12918:	28cf883a 	add	r7,r5,r3
   1291c:	39c00117 	ldw	r7,4(r7)
   12920:	39c0004c 	andi	r7,r7,1
   12924:	38003a26 	beq	r7,zero,12a10 <_free_r+0x178>
   12928:	10c00054 	ori	r3,r2,1
   1292c:	30c00115 	stw	r3,4(r6)
   12930:	3087883a 	add	r3,r6,r2
   12934:	18800015 	stw	r2,0(r3)
   12938:	00c07fc4 	movi	r3,511
   1293c:	18801936 	bltu	r3,r2,129a4 <_free_r+0x10c>
   12940:	1004d0fa 	srli	r2,r2,3
   12944:	01c00044 	movi	r7,1
   12948:	21400117 	ldw	r5,4(r4)
   1294c:	10c00044 	addi	r3,r2,1
   12950:	18c7883a 	add	r3,r3,r3
   12954:	1005d0ba 	srai	r2,r2,2
   12958:	18c7883a 	add	r3,r3,r3
   1295c:	18c7883a 	add	r3,r3,r3
   12960:	1907883a 	add	r3,r3,r4
   12964:	3884983a 	sll	r2,r7,r2
   12968:	19c00017 	ldw	r7,0(r3)
   1296c:	1a3ffe04 	addi	r8,r3,-8
   12970:	1144b03a 	or	r2,r2,r5
   12974:	32000315 	stw	r8,12(r6)
   12978:	31c00215 	stw	r7,8(r6)
   1297c:	20800115 	stw	r2,4(r4)
   12980:	19800015 	stw	r6,0(r3)
   12984:	39800315 	stw	r6,12(r7)
   12988:	8809883a 	mov	r4,r17
   1298c:	dfc00217 	ldw	ra,8(sp)
   12990:	dc400117 	ldw	r17,4(sp)
   12994:	dc000017 	ldw	r16,0(sp)
   12998:	dec00304 	addi	sp,sp,12
   1299c:	00136701 	jmpi	13670 <__malloc_unlock>
   129a0:	f800283a 	ret
   129a4:	100ad27a 	srli	r5,r2,9
   129a8:	00c00104 	movi	r3,4
   129ac:	19404a36 	bltu	r3,r5,12ad8 <_free_r+0x240>
   129b0:	100ad1ba 	srli	r5,r2,6
   129b4:	28c00e44 	addi	r3,r5,57
   129b8:	18c7883a 	add	r3,r3,r3
   129bc:	29400e04 	addi	r5,r5,56
   129c0:	18c7883a 	add	r3,r3,r3
   129c4:	18c7883a 	add	r3,r3,r3
   129c8:	1909883a 	add	r4,r3,r4
   129cc:	20c00017 	ldw	r3,0(r4)
   129d0:	01c00074 	movhi	r7,1
   129d4:	213ffe04 	addi	r4,r4,-8
   129d8:	39d7d704 	addi	r7,r7,24412
   129dc:	20c04426 	beq	r4,r3,12af0 <_free_r+0x258>
   129e0:	01ffff04 	movi	r7,-4
   129e4:	19400117 	ldw	r5,4(r3)
   129e8:	29ca703a 	and	r5,r5,r7
   129ec:	1140022e 	bgeu	r2,r5,129f8 <_free_r+0x160>
   129f0:	18c00217 	ldw	r3,8(r3)
   129f4:	20fffb1e 	bne	r4,r3,129e4 <_gp+0xffff3420>
   129f8:	19000317 	ldw	r4,12(r3)
   129fc:	31000315 	stw	r4,12(r6)
   12a00:	30c00215 	stw	r3,8(r6)
   12a04:	21800215 	stw	r6,8(r4)
   12a08:	19800315 	stw	r6,12(r3)
   12a0c:	003fde06 	br	12988 <_gp+0xffff33c4>
   12a10:	29c00217 	ldw	r7,8(r5)
   12a14:	10c5883a 	add	r2,r2,r3
   12a18:	00c00074 	movhi	r3,1
   12a1c:	18d7d904 	addi	r3,r3,24420
   12a20:	38c03b26 	beq	r7,r3,12b10 <_free_r+0x278>
   12a24:	2a000317 	ldw	r8,12(r5)
   12a28:	11400054 	ori	r5,r2,1
   12a2c:	3087883a 	add	r3,r6,r2
   12a30:	3a000315 	stw	r8,12(r7)
   12a34:	41c00215 	stw	r7,8(r8)
   12a38:	31400115 	stw	r5,4(r6)
   12a3c:	18800015 	stw	r2,0(r3)
   12a40:	003fbd06 	br	12938 <_gp+0xffff3374>
   12a44:	39c0004c 	andi	r7,r7,1
   12a48:	10c5883a 	add	r2,r2,r3
   12a4c:	3800071e 	bne	r7,zero,12a6c <_free_r+0x1d4>
   12a50:	81fffe17 	ldw	r7,-8(r16)
   12a54:	31cdc83a 	sub	r6,r6,r7
   12a58:	30c00317 	ldw	r3,12(r6)
   12a5c:	31400217 	ldw	r5,8(r6)
   12a60:	11c5883a 	add	r2,r2,r7
   12a64:	28c00315 	stw	r3,12(r5)
   12a68:	19400215 	stw	r5,8(r3)
   12a6c:	10c00054 	ori	r3,r2,1
   12a70:	30c00115 	stw	r3,4(r6)
   12a74:	00c00074 	movhi	r3,1
   12a78:	18dd7404 	addi	r3,r3,30160
   12a7c:	18c00017 	ldw	r3,0(r3)
   12a80:	21800215 	stw	r6,8(r4)
   12a84:	10ffc036 	bltu	r2,r3,12988 <_gp+0xffff33c4>
   12a88:	008000b4 	movhi	r2,2
   12a8c:	10a43204 	addi	r2,r2,-28472
   12a90:	11400017 	ldw	r5,0(r2)
   12a94:	8809883a 	mov	r4,r17
   12a98:	00127740 	call	12774 <_malloc_trim_r>
   12a9c:	003fba06 	br	12988 <_gp+0xffff33c4>
   12aa0:	28c9883a 	add	r4,r5,r3
   12aa4:	21000117 	ldw	r4,4(r4)
   12aa8:	2100004c 	andi	r4,r4,1
   12aac:	2000391e 	bne	r4,zero,12b94 <_free_r+0x2fc>
   12ab0:	29c00217 	ldw	r7,8(r5)
   12ab4:	29000317 	ldw	r4,12(r5)
   12ab8:	1885883a 	add	r2,r3,r2
   12abc:	10c00054 	ori	r3,r2,1
   12ac0:	39000315 	stw	r4,12(r7)
   12ac4:	21c00215 	stw	r7,8(r4)
   12ac8:	30c00115 	stw	r3,4(r6)
   12acc:	308d883a 	add	r6,r6,r2
   12ad0:	30800015 	stw	r2,0(r6)
   12ad4:	003fac06 	br	12988 <_gp+0xffff33c4>
   12ad8:	00c00504 	movi	r3,20
   12adc:	19401536 	bltu	r3,r5,12b34 <_free_r+0x29c>
   12ae0:	28c01704 	addi	r3,r5,92
   12ae4:	18c7883a 	add	r3,r3,r3
   12ae8:	294016c4 	addi	r5,r5,91
   12aec:	003fb406 	br	129c0 <_gp+0xffff33fc>
   12af0:	280bd0ba 	srai	r5,r5,2
   12af4:	00c00044 	movi	r3,1
   12af8:	38800117 	ldw	r2,4(r7)
   12afc:	194a983a 	sll	r5,r3,r5
   12b00:	2007883a 	mov	r3,r4
   12b04:	2884b03a 	or	r2,r5,r2
   12b08:	38800115 	stw	r2,4(r7)
   12b0c:	003fbb06 	br	129fc <_gp+0xffff3438>
   12b10:	21800515 	stw	r6,20(r4)
   12b14:	21800415 	stw	r6,16(r4)
   12b18:	10c00054 	ori	r3,r2,1
   12b1c:	31c00315 	stw	r7,12(r6)
   12b20:	31c00215 	stw	r7,8(r6)
   12b24:	30c00115 	stw	r3,4(r6)
   12b28:	308d883a 	add	r6,r6,r2
   12b2c:	30800015 	stw	r2,0(r6)
   12b30:	003f9506 	br	12988 <_gp+0xffff33c4>
   12b34:	00c01504 	movi	r3,84
   12b38:	19400536 	bltu	r3,r5,12b50 <_free_r+0x2b8>
   12b3c:	100ad33a 	srli	r5,r2,12
   12b40:	28c01bc4 	addi	r3,r5,111
   12b44:	18c7883a 	add	r3,r3,r3
   12b48:	29401b84 	addi	r5,r5,110
   12b4c:	003f9c06 	br	129c0 <_gp+0xffff33fc>
   12b50:	00c05504 	movi	r3,340
   12b54:	19400536 	bltu	r3,r5,12b6c <_free_r+0x2d4>
   12b58:	100ad3fa 	srli	r5,r2,15
   12b5c:	28c01e04 	addi	r3,r5,120
   12b60:	18c7883a 	add	r3,r3,r3
   12b64:	29401dc4 	addi	r5,r5,119
   12b68:	003f9506 	br	129c0 <_gp+0xffff33fc>
   12b6c:	00c15504 	movi	r3,1364
   12b70:	19400536 	bltu	r3,r5,12b88 <_free_r+0x2f0>
   12b74:	100ad4ba 	srli	r5,r2,18
   12b78:	28c01f44 	addi	r3,r5,125
   12b7c:	18c7883a 	add	r3,r3,r3
   12b80:	29401f04 	addi	r5,r5,124
   12b84:	003f8e06 	br	129c0 <_gp+0xffff33fc>
   12b88:	00c03f84 	movi	r3,254
   12b8c:	01401f84 	movi	r5,126
   12b90:	003f8b06 	br	129c0 <_gp+0xffff33fc>
   12b94:	10c00054 	ori	r3,r2,1
   12b98:	30c00115 	stw	r3,4(r6)
   12b9c:	308d883a 	add	r6,r6,r2
   12ba0:	30800015 	stw	r2,0(r6)
   12ba4:	003f7806 	br	12988 <_gp+0xffff33c4>

00012ba8 <_lseek_r>:
   12ba8:	defffd04 	addi	sp,sp,-12
   12bac:	2805883a 	mov	r2,r5
   12bb0:	dc000015 	stw	r16,0(sp)
   12bb4:	040000b4 	movhi	r16,2
   12bb8:	dc400115 	stw	r17,4(sp)
   12bbc:	300b883a 	mov	r5,r6
   12bc0:	84243304 	addi	r16,r16,-28468
   12bc4:	2023883a 	mov	r17,r4
   12bc8:	380d883a 	mov	r6,r7
   12bcc:	1009883a 	mov	r4,r2
   12bd0:	dfc00215 	stw	ra,8(sp)
   12bd4:	80000015 	stw	zero,0(r16)
   12bd8:	00134f40 	call	134f4 <lseek>
   12bdc:	00ffffc4 	movi	r3,-1
   12be0:	10c00526 	beq	r2,r3,12bf8 <_lseek_r+0x50>
   12be4:	dfc00217 	ldw	ra,8(sp)
   12be8:	dc400117 	ldw	r17,4(sp)
   12bec:	dc000017 	ldw	r16,0(sp)
   12bf0:	dec00304 	addi	sp,sp,12
   12bf4:	f800283a 	ret
   12bf8:	80c00017 	ldw	r3,0(r16)
   12bfc:	183ff926 	beq	r3,zero,12be4 <_gp+0xffff3620>
   12c00:	88c00015 	stw	r3,0(r17)
   12c04:	003ff706 	br	12be4 <_gp+0xffff3620>

00012c08 <__smakebuf_r>:
   12c08:	2880030b 	ldhu	r2,12(r5)
   12c0c:	10c0008c 	andi	r3,r2,2
   12c10:	1800411e 	bne	r3,zero,12d18 <__smakebuf_r+0x110>
   12c14:	deffec04 	addi	sp,sp,-80
   12c18:	dc000f15 	stw	r16,60(sp)
   12c1c:	2821883a 	mov	r16,r5
   12c20:	2940038f 	ldh	r5,14(r5)
   12c24:	dc401015 	stw	r17,64(sp)
   12c28:	dfc01315 	stw	ra,76(sp)
   12c2c:	dcc01215 	stw	r19,72(sp)
   12c30:	dc801115 	stw	r18,68(sp)
   12c34:	2023883a 	mov	r17,r4
   12c38:	28001c16 	blt	r5,zero,12cac <__smakebuf_r+0xa4>
   12c3c:	d80d883a 	mov	r6,sp
   12c40:	0012e240 	call	12e24 <_fstat_r>
   12c44:	10001816 	blt	r2,zero,12ca8 <__smakebuf_r+0xa0>
   12c48:	d8800117 	ldw	r2,4(sp)
   12c4c:	00e00014 	movui	r3,32768
   12c50:	10bc000c 	andi	r2,r2,61440
   12c54:	14c80020 	cmpeqi	r19,r2,8192
   12c58:	10c03726 	beq	r2,r3,12d38 <__smakebuf_r+0x130>
   12c5c:	80c0030b 	ldhu	r3,12(r16)
   12c60:	18c20014 	ori	r3,r3,2048
   12c64:	80c0030d 	sth	r3,12(r16)
   12c68:	00c80004 	movi	r3,8192
   12c6c:	10c0521e 	bne	r2,r3,12db8 <__smakebuf_r+0x1b0>
   12c70:	8140038f 	ldh	r5,14(r16)
   12c74:	8809883a 	mov	r4,r17
   12c78:	0012e800 	call	12e80 <_isatty_r>
   12c7c:	10004c26 	beq	r2,zero,12db0 <__smakebuf_r+0x1a8>
   12c80:	8080030b 	ldhu	r2,12(r16)
   12c84:	80c010c4 	addi	r3,r16,67
   12c88:	80c00015 	stw	r3,0(r16)
   12c8c:	10800054 	ori	r2,r2,1
   12c90:	8080030d 	sth	r2,12(r16)
   12c94:	00800044 	movi	r2,1
   12c98:	80c00415 	stw	r3,16(r16)
   12c9c:	80800515 	stw	r2,20(r16)
   12ca0:	04810004 	movi	r18,1024
   12ca4:	00000706 	br	12cc4 <__smakebuf_r+0xbc>
   12ca8:	8080030b 	ldhu	r2,12(r16)
   12cac:	10c0200c 	andi	r3,r2,128
   12cb0:	18001f1e 	bne	r3,zero,12d30 <__smakebuf_r+0x128>
   12cb4:	04810004 	movi	r18,1024
   12cb8:	10820014 	ori	r2,r2,2048
   12cbc:	8080030d 	sth	r2,12(r16)
   12cc0:	0027883a 	mov	r19,zero
   12cc4:	900b883a 	mov	r5,r18
   12cc8:	8809883a 	mov	r4,r17
   12ccc:	0010e100 	call	10e10 <_malloc_r>
   12cd0:	10002c26 	beq	r2,zero,12d84 <__smakebuf_r+0x17c>
   12cd4:	80c0030b 	ldhu	r3,12(r16)
   12cd8:	01000074 	movhi	r4,1
   12cdc:	21010604 	addi	r4,r4,1048
   12ce0:	89000f15 	stw	r4,60(r17)
   12ce4:	18c02014 	ori	r3,r3,128
   12ce8:	80c0030d 	sth	r3,12(r16)
   12cec:	80800015 	stw	r2,0(r16)
   12cf0:	80800415 	stw	r2,16(r16)
   12cf4:	84800515 	stw	r18,20(r16)
   12cf8:	98001a1e 	bne	r19,zero,12d64 <__smakebuf_r+0x15c>
   12cfc:	dfc01317 	ldw	ra,76(sp)
   12d00:	dcc01217 	ldw	r19,72(sp)
   12d04:	dc801117 	ldw	r18,68(sp)
   12d08:	dc401017 	ldw	r17,64(sp)
   12d0c:	dc000f17 	ldw	r16,60(sp)
   12d10:	dec01404 	addi	sp,sp,80
   12d14:	f800283a 	ret
   12d18:	288010c4 	addi	r2,r5,67
   12d1c:	28800015 	stw	r2,0(r5)
   12d20:	28800415 	stw	r2,16(r5)
   12d24:	00800044 	movi	r2,1
   12d28:	28800515 	stw	r2,20(r5)
   12d2c:	f800283a 	ret
   12d30:	04801004 	movi	r18,64
   12d34:	003fe006 	br	12cb8 <_gp+0xffff36f4>
   12d38:	81000a17 	ldw	r4,40(r16)
   12d3c:	00c00074 	movhi	r3,1
   12d40:	18c85704 	addi	r3,r3,8540
   12d44:	20ffc51e 	bne	r4,r3,12c5c <_gp+0xffff3698>
   12d48:	8080030b 	ldhu	r2,12(r16)
   12d4c:	04810004 	movi	r18,1024
   12d50:	84801315 	stw	r18,76(r16)
   12d54:	1484b03a 	or	r2,r2,r18
   12d58:	8080030d 	sth	r2,12(r16)
   12d5c:	0027883a 	mov	r19,zero
   12d60:	003fd806 	br	12cc4 <_gp+0xffff3700>
   12d64:	8140038f 	ldh	r5,14(r16)
   12d68:	8809883a 	mov	r4,r17
   12d6c:	0012e800 	call	12e80 <_isatty_r>
   12d70:	103fe226 	beq	r2,zero,12cfc <_gp+0xffff3738>
   12d74:	8080030b 	ldhu	r2,12(r16)
   12d78:	10800054 	ori	r2,r2,1
   12d7c:	8080030d 	sth	r2,12(r16)
   12d80:	003fde06 	br	12cfc <_gp+0xffff3738>
   12d84:	8080030b 	ldhu	r2,12(r16)
   12d88:	10c0800c 	andi	r3,r2,512
   12d8c:	183fdb1e 	bne	r3,zero,12cfc <_gp+0xffff3738>
   12d90:	10800094 	ori	r2,r2,2
   12d94:	80c010c4 	addi	r3,r16,67
   12d98:	8080030d 	sth	r2,12(r16)
   12d9c:	00800044 	movi	r2,1
   12da0:	80c00015 	stw	r3,0(r16)
   12da4:	80c00415 	stw	r3,16(r16)
   12da8:	80800515 	stw	r2,20(r16)
   12dac:	003fd306 	br	12cfc <_gp+0xffff3738>
   12db0:	04810004 	movi	r18,1024
   12db4:	003fc306 	br	12cc4 <_gp+0xffff3700>
   12db8:	0027883a 	mov	r19,zero
   12dbc:	04810004 	movi	r18,1024
   12dc0:	003fc006 	br	12cc4 <_gp+0xffff3700>

00012dc4 <_read_r>:
   12dc4:	defffd04 	addi	sp,sp,-12
   12dc8:	2805883a 	mov	r2,r5
   12dcc:	dc000015 	stw	r16,0(sp)
   12dd0:	040000b4 	movhi	r16,2
   12dd4:	dc400115 	stw	r17,4(sp)
   12dd8:	300b883a 	mov	r5,r6
   12ddc:	84243304 	addi	r16,r16,-28468
   12de0:	2023883a 	mov	r17,r4
   12de4:	380d883a 	mov	r6,r7
   12de8:	1009883a 	mov	r4,r2
   12dec:	dfc00215 	stw	ra,8(sp)
   12df0:	80000015 	stw	zero,0(r16)
   12df4:	00136d00 	call	136d0 <read>
   12df8:	00ffffc4 	movi	r3,-1
   12dfc:	10c00526 	beq	r2,r3,12e14 <_read_r+0x50>
   12e00:	dfc00217 	ldw	ra,8(sp)
   12e04:	dc400117 	ldw	r17,4(sp)
   12e08:	dc000017 	ldw	r16,0(sp)
   12e0c:	dec00304 	addi	sp,sp,12
   12e10:	f800283a 	ret
   12e14:	80c00017 	ldw	r3,0(r16)
   12e18:	183ff926 	beq	r3,zero,12e00 <_gp+0xffff383c>
   12e1c:	88c00015 	stw	r3,0(r17)
   12e20:	003ff706 	br	12e00 <_gp+0xffff383c>

00012e24 <_fstat_r>:
   12e24:	defffd04 	addi	sp,sp,-12
   12e28:	2805883a 	mov	r2,r5
   12e2c:	dc000015 	stw	r16,0(sp)
   12e30:	040000b4 	movhi	r16,2
   12e34:	dc400115 	stw	r17,4(sp)
   12e38:	84243304 	addi	r16,r16,-28468
   12e3c:	2023883a 	mov	r17,r4
   12e40:	300b883a 	mov	r5,r6
   12e44:	1009883a 	mov	r4,r2
   12e48:	dfc00215 	stw	ra,8(sp)
   12e4c:	80000015 	stw	zero,0(r16)
   12e50:	001322c0 	call	1322c <fstat>
   12e54:	00ffffc4 	movi	r3,-1
   12e58:	10c00526 	beq	r2,r3,12e70 <_fstat_r+0x4c>
   12e5c:	dfc00217 	ldw	ra,8(sp)
   12e60:	dc400117 	ldw	r17,4(sp)
   12e64:	dc000017 	ldw	r16,0(sp)
   12e68:	dec00304 	addi	sp,sp,12
   12e6c:	f800283a 	ret
   12e70:	80c00017 	ldw	r3,0(r16)
   12e74:	183ff926 	beq	r3,zero,12e5c <_gp+0xffff3898>
   12e78:	88c00015 	stw	r3,0(r17)
   12e7c:	003ff706 	br	12e5c <_gp+0xffff3898>

00012e80 <_isatty_r>:
   12e80:	defffd04 	addi	sp,sp,-12
   12e84:	dc000015 	stw	r16,0(sp)
   12e88:	040000b4 	movhi	r16,2
   12e8c:	dc400115 	stw	r17,4(sp)
   12e90:	84243304 	addi	r16,r16,-28468
   12e94:	2023883a 	mov	r17,r4
   12e98:	2809883a 	mov	r4,r5
   12e9c:	dfc00215 	stw	ra,8(sp)
   12ea0:	80000015 	stw	zero,0(r16)
   12ea4:	00133200 	call	13320 <isatty>
   12ea8:	00ffffc4 	movi	r3,-1
   12eac:	10c00526 	beq	r2,r3,12ec4 <_isatty_r+0x44>
   12eb0:	dfc00217 	ldw	ra,8(sp)
   12eb4:	dc400117 	ldw	r17,4(sp)
   12eb8:	dc000017 	ldw	r16,0(sp)
   12ebc:	dec00304 	addi	sp,sp,12
   12ec0:	f800283a 	ret
   12ec4:	80c00017 	ldw	r3,0(r16)
   12ec8:	183ff926 	beq	r3,zero,12eb0 <_gp+0xffff38ec>
   12ecc:	88c00015 	stw	r3,0(r17)
   12ed0:	003ff706 	br	12eb0 <_gp+0xffff38ec>

00012ed4 <__divsi3>:
   12ed4:	20001b16 	blt	r4,zero,12f44 <__divsi3+0x70>
   12ed8:	000f883a 	mov	r7,zero
   12edc:	28001616 	blt	r5,zero,12f38 <__divsi3+0x64>
   12ee0:	200d883a 	mov	r6,r4
   12ee4:	29001a2e 	bgeu	r5,r4,12f50 <__divsi3+0x7c>
   12ee8:	00800804 	movi	r2,32
   12eec:	00c00044 	movi	r3,1
   12ef0:	00000106 	br	12ef8 <__divsi3+0x24>
   12ef4:	10000d26 	beq	r2,zero,12f2c <__divsi3+0x58>
   12ef8:	294b883a 	add	r5,r5,r5
   12efc:	10bfffc4 	addi	r2,r2,-1
   12f00:	18c7883a 	add	r3,r3,r3
   12f04:	293ffb36 	bltu	r5,r4,12ef4 <_gp+0xffff3930>
   12f08:	0005883a 	mov	r2,zero
   12f0c:	18000726 	beq	r3,zero,12f2c <__divsi3+0x58>
   12f10:	0005883a 	mov	r2,zero
   12f14:	31400236 	bltu	r6,r5,12f20 <__divsi3+0x4c>
   12f18:	314dc83a 	sub	r6,r6,r5
   12f1c:	10c4b03a 	or	r2,r2,r3
   12f20:	1806d07a 	srli	r3,r3,1
   12f24:	280ad07a 	srli	r5,r5,1
   12f28:	183ffa1e 	bne	r3,zero,12f14 <_gp+0xffff3950>
   12f2c:	38000126 	beq	r7,zero,12f34 <__divsi3+0x60>
   12f30:	0085c83a 	sub	r2,zero,r2
   12f34:	f800283a 	ret
   12f38:	014bc83a 	sub	r5,zero,r5
   12f3c:	39c0005c 	xori	r7,r7,1
   12f40:	003fe706 	br	12ee0 <_gp+0xffff391c>
   12f44:	0109c83a 	sub	r4,zero,r4
   12f48:	01c00044 	movi	r7,1
   12f4c:	003fe306 	br	12edc <_gp+0xffff3918>
   12f50:	00c00044 	movi	r3,1
   12f54:	003fee06 	br	12f10 <_gp+0xffff394c>

00012f58 <__modsi3>:
   12f58:	20001716 	blt	r4,zero,12fb8 <__modsi3+0x60>
   12f5c:	000f883a 	mov	r7,zero
   12f60:	2005883a 	mov	r2,r4
   12f64:	28001216 	blt	r5,zero,12fb0 <__modsi3+0x58>
   12f68:	2900162e 	bgeu	r5,r4,12fc4 <__modsi3+0x6c>
   12f6c:	01800804 	movi	r6,32
   12f70:	00c00044 	movi	r3,1
   12f74:	00000106 	br	12f7c <__modsi3+0x24>
   12f78:	30000a26 	beq	r6,zero,12fa4 <__modsi3+0x4c>
   12f7c:	294b883a 	add	r5,r5,r5
   12f80:	31bfffc4 	addi	r6,r6,-1
   12f84:	18c7883a 	add	r3,r3,r3
   12f88:	293ffb36 	bltu	r5,r4,12f78 <_gp+0xffff39b4>
   12f8c:	18000526 	beq	r3,zero,12fa4 <__modsi3+0x4c>
   12f90:	1806d07a 	srli	r3,r3,1
   12f94:	11400136 	bltu	r2,r5,12f9c <__modsi3+0x44>
   12f98:	1145c83a 	sub	r2,r2,r5
   12f9c:	280ad07a 	srli	r5,r5,1
   12fa0:	183ffb1e 	bne	r3,zero,12f90 <_gp+0xffff39cc>
   12fa4:	38000126 	beq	r7,zero,12fac <__modsi3+0x54>
   12fa8:	0085c83a 	sub	r2,zero,r2
   12fac:	f800283a 	ret
   12fb0:	014bc83a 	sub	r5,zero,r5
   12fb4:	003fec06 	br	12f68 <_gp+0xffff39a4>
   12fb8:	0109c83a 	sub	r4,zero,r4
   12fbc:	01c00044 	movi	r7,1
   12fc0:	003fe706 	br	12f60 <_gp+0xffff399c>
   12fc4:	00c00044 	movi	r3,1
   12fc8:	003ff106 	br	12f90 <_gp+0xffff39cc>

00012fcc <__udivsi3>:
   12fcc:	200d883a 	mov	r6,r4
   12fd0:	2900152e 	bgeu	r5,r4,13028 <__udivsi3+0x5c>
   12fd4:	28001416 	blt	r5,zero,13028 <__udivsi3+0x5c>
   12fd8:	00800804 	movi	r2,32
   12fdc:	00c00044 	movi	r3,1
   12fe0:	00000206 	br	12fec <__udivsi3+0x20>
   12fe4:	10000e26 	beq	r2,zero,13020 <__udivsi3+0x54>
   12fe8:	28000516 	blt	r5,zero,13000 <__udivsi3+0x34>
   12fec:	294b883a 	add	r5,r5,r5
   12ff0:	10bfffc4 	addi	r2,r2,-1
   12ff4:	18c7883a 	add	r3,r3,r3
   12ff8:	293ffa36 	bltu	r5,r4,12fe4 <_gp+0xffff3a20>
   12ffc:	18000826 	beq	r3,zero,13020 <__udivsi3+0x54>
   13000:	0005883a 	mov	r2,zero
   13004:	31400236 	bltu	r6,r5,13010 <__udivsi3+0x44>
   13008:	314dc83a 	sub	r6,r6,r5
   1300c:	10c4b03a 	or	r2,r2,r3
   13010:	1806d07a 	srli	r3,r3,1
   13014:	280ad07a 	srli	r5,r5,1
   13018:	183ffa1e 	bne	r3,zero,13004 <_gp+0xffff3a40>
   1301c:	f800283a 	ret
   13020:	0005883a 	mov	r2,zero
   13024:	f800283a 	ret
   13028:	00c00044 	movi	r3,1
   1302c:	003ff406 	br	13000 <_gp+0xffff3a3c>

00013030 <__umodsi3>:
   13030:	2005883a 	mov	r2,r4
   13034:	2900122e 	bgeu	r5,r4,13080 <__umodsi3+0x50>
   13038:	28001116 	blt	r5,zero,13080 <__umodsi3+0x50>
   1303c:	01800804 	movi	r6,32
   13040:	00c00044 	movi	r3,1
   13044:	00000206 	br	13050 <__umodsi3+0x20>
   13048:	30000c26 	beq	r6,zero,1307c <__umodsi3+0x4c>
   1304c:	28000516 	blt	r5,zero,13064 <__umodsi3+0x34>
   13050:	294b883a 	add	r5,r5,r5
   13054:	31bfffc4 	addi	r6,r6,-1
   13058:	18c7883a 	add	r3,r3,r3
   1305c:	293ffa36 	bltu	r5,r4,13048 <_gp+0xffff3a84>
   13060:	18000626 	beq	r3,zero,1307c <__umodsi3+0x4c>
   13064:	1806d07a 	srli	r3,r3,1
   13068:	11400136 	bltu	r2,r5,13070 <__umodsi3+0x40>
   1306c:	1145c83a 	sub	r2,r2,r5
   13070:	280ad07a 	srli	r5,r5,1
   13074:	183ffb1e 	bne	r3,zero,13064 <_gp+0xffff3aa0>
   13078:	f800283a 	ret
   1307c:	f800283a 	ret
   13080:	00c00044 	movi	r3,1
   13084:	003ff706 	br	13064 <_gp+0xffff3aa0>

00013088 <__mulsi3>:
   13088:	0005883a 	mov	r2,zero
   1308c:	20000726 	beq	r4,zero,130ac <__mulsi3+0x24>
   13090:	20c0004c 	andi	r3,r4,1
   13094:	2008d07a 	srli	r4,r4,1
   13098:	18000126 	beq	r3,zero,130a0 <__mulsi3+0x18>
   1309c:	1145883a 	add	r2,r2,r5
   130a0:	294b883a 	add	r5,r5,r5
   130a4:	203ffa1e 	bne	r4,zero,13090 <_gp+0xffff3acc>
   130a8:	f800283a 	ret
   130ac:	f800283a 	ret

000130b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   130b0:	defffe04 	addi	sp,sp,-8
   130b4:	dfc00115 	stw	ra,4(sp)
   130b8:	df000015 	stw	fp,0(sp)
   130bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   130c0:	d0a00917 	ldw	r2,-32732(gp)
   130c4:	10000326 	beq	r2,zero,130d4 <alt_get_errno+0x24>
   130c8:	d0a00917 	ldw	r2,-32732(gp)
   130cc:	103ee83a 	callr	r2
   130d0:	00000106 	br	130d8 <alt_get_errno+0x28>
   130d4:	d0a6c204 	addi	r2,gp,-25848
}
   130d8:	e037883a 	mov	sp,fp
   130dc:	dfc00117 	ldw	ra,4(sp)
   130e0:	df000017 	ldw	fp,0(sp)
   130e4:	dec00204 	addi	sp,sp,8
   130e8:	f800283a 	ret

000130ec <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   130ec:	defffb04 	addi	sp,sp,-20
   130f0:	dfc00415 	stw	ra,16(sp)
   130f4:	df000315 	stw	fp,12(sp)
   130f8:	df000304 	addi	fp,sp,12
   130fc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   13100:	e0bfff17 	ldw	r2,-4(fp)
   13104:	10000816 	blt	r2,zero,13128 <close+0x3c>
   13108:	01400304 	movi	r5,12
   1310c:	e13fff17 	ldw	r4,-4(fp)
   13110:	00130880 	call	13088 <__mulsi3>
   13114:	1007883a 	mov	r3,r2
   13118:	00800074 	movhi	r2,1
   1311c:	1098e304 	addi	r2,r2,25484
   13120:	1885883a 	add	r2,r3,r2
   13124:	00000106 	br	1312c <close+0x40>
   13128:	0005883a 	mov	r2,zero
   1312c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   13130:	e0bffd17 	ldw	r2,-12(fp)
   13134:	10001926 	beq	r2,zero,1319c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   13138:	e0bffd17 	ldw	r2,-12(fp)
   1313c:	10800017 	ldw	r2,0(r2)
   13140:	10800417 	ldw	r2,16(r2)
   13144:	10000626 	beq	r2,zero,13160 <close+0x74>
   13148:	e0bffd17 	ldw	r2,-12(fp)
   1314c:	10800017 	ldw	r2,0(r2)
   13150:	10800417 	ldw	r2,16(r2)
   13154:	e13ffd17 	ldw	r4,-12(fp)
   13158:	103ee83a 	callr	r2
   1315c:	00000106 	br	13164 <close+0x78>
   13160:	0005883a 	mov	r2,zero
   13164:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   13168:	e13fff17 	ldw	r4,-4(fp)
   1316c:	00137d40 	call	137d4 <alt_release_fd>
    if (rval < 0)
   13170:	e0bffe17 	ldw	r2,-8(fp)
   13174:	1000070e 	bge	r2,zero,13194 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   13178:	00130b00 	call	130b0 <alt_get_errno>
   1317c:	1007883a 	mov	r3,r2
   13180:	e0bffe17 	ldw	r2,-8(fp)
   13184:	0085c83a 	sub	r2,zero,r2
   13188:	18800015 	stw	r2,0(r3)
      return -1;
   1318c:	00bfffc4 	movi	r2,-1
   13190:	00000706 	br	131b0 <close+0xc4>
    }
    return 0;
   13194:	0005883a 	mov	r2,zero
   13198:	00000506 	br	131b0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1319c:	00130b00 	call	130b0 <alt_get_errno>
   131a0:	1007883a 	mov	r3,r2
   131a4:	00801444 	movi	r2,81
   131a8:	18800015 	stw	r2,0(r3)
    return -1;
   131ac:	00bfffc4 	movi	r2,-1
  }
}
   131b0:	e037883a 	mov	sp,fp
   131b4:	dfc00117 	ldw	ra,4(sp)
   131b8:	df000017 	ldw	fp,0(sp)
   131bc:	dec00204 	addi	sp,sp,8
   131c0:	f800283a 	ret

000131c4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   131c4:	defffc04 	addi	sp,sp,-16
   131c8:	df000315 	stw	fp,12(sp)
   131cc:	df000304 	addi	fp,sp,12
   131d0:	e13ffd15 	stw	r4,-12(fp)
   131d4:	e17ffe15 	stw	r5,-8(fp)
   131d8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   131dc:	e0bfff17 	ldw	r2,-4(fp)
}
   131e0:	e037883a 	mov	sp,fp
   131e4:	df000017 	ldw	fp,0(sp)
   131e8:	dec00104 	addi	sp,sp,4
   131ec:	f800283a 	ret

000131f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   131f0:	defffe04 	addi	sp,sp,-8
   131f4:	dfc00115 	stw	ra,4(sp)
   131f8:	df000015 	stw	fp,0(sp)
   131fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13200:	d0a00917 	ldw	r2,-32732(gp)
   13204:	10000326 	beq	r2,zero,13214 <alt_get_errno+0x24>
   13208:	d0a00917 	ldw	r2,-32732(gp)
   1320c:	103ee83a 	callr	r2
   13210:	00000106 	br	13218 <alt_get_errno+0x28>
   13214:	d0a6c204 	addi	r2,gp,-25848
}
   13218:	e037883a 	mov	sp,fp
   1321c:	dfc00117 	ldw	ra,4(sp)
   13220:	df000017 	ldw	fp,0(sp)
   13224:	dec00204 	addi	sp,sp,8
   13228:	f800283a 	ret

0001322c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   1322c:	defffb04 	addi	sp,sp,-20
   13230:	dfc00415 	stw	ra,16(sp)
   13234:	df000315 	stw	fp,12(sp)
   13238:	df000304 	addi	fp,sp,12
   1323c:	e13ffe15 	stw	r4,-8(fp)
   13240:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13244:	e0bffe17 	ldw	r2,-8(fp)
   13248:	10000816 	blt	r2,zero,1326c <fstat+0x40>
   1324c:	01400304 	movi	r5,12
   13250:	e13ffe17 	ldw	r4,-8(fp)
   13254:	00130880 	call	13088 <__mulsi3>
   13258:	1007883a 	mov	r3,r2
   1325c:	00800074 	movhi	r2,1
   13260:	1098e304 	addi	r2,r2,25484
   13264:	1885883a 	add	r2,r3,r2
   13268:	00000106 	br	13270 <fstat+0x44>
   1326c:	0005883a 	mov	r2,zero
   13270:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   13274:	e0bffd17 	ldw	r2,-12(fp)
   13278:	10001026 	beq	r2,zero,132bc <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1327c:	e0bffd17 	ldw	r2,-12(fp)
   13280:	10800017 	ldw	r2,0(r2)
   13284:	10800817 	ldw	r2,32(r2)
   13288:	10000726 	beq	r2,zero,132a8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   1328c:	e0bffd17 	ldw	r2,-12(fp)
   13290:	10800017 	ldw	r2,0(r2)
   13294:	10800817 	ldw	r2,32(r2)
   13298:	e17fff17 	ldw	r5,-4(fp)
   1329c:	e13ffd17 	ldw	r4,-12(fp)
   132a0:	103ee83a 	callr	r2
   132a4:	00000a06 	br	132d0 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   132a8:	e0bfff17 	ldw	r2,-4(fp)
   132ac:	00c80004 	movi	r3,8192
   132b0:	10c00115 	stw	r3,4(r2)
      return 0;
   132b4:	0005883a 	mov	r2,zero
   132b8:	00000506 	br	132d0 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   132bc:	00131f00 	call	131f0 <alt_get_errno>
   132c0:	1007883a 	mov	r3,r2
   132c4:	00801444 	movi	r2,81
   132c8:	18800015 	stw	r2,0(r3)
    return -1;
   132cc:	00bfffc4 	movi	r2,-1
  }
}
   132d0:	e037883a 	mov	sp,fp
   132d4:	dfc00117 	ldw	ra,4(sp)
   132d8:	df000017 	ldw	fp,0(sp)
   132dc:	dec00204 	addi	sp,sp,8
   132e0:	f800283a 	ret

000132e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   132e4:	defffe04 	addi	sp,sp,-8
   132e8:	dfc00115 	stw	ra,4(sp)
   132ec:	df000015 	stw	fp,0(sp)
   132f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   132f4:	d0a00917 	ldw	r2,-32732(gp)
   132f8:	10000326 	beq	r2,zero,13308 <alt_get_errno+0x24>
   132fc:	d0a00917 	ldw	r2,-32732(gp)
   13300:	103ee83a 	callr	r2
   13304:	00000106 	br	1330c <alt_get_errno+0x28>
   13308:	d0a6c204 	addi	r2,gp,-25848
}
   1330c:	e037883a 	mov	sp,fp
   13310:	dfc00117 	ldw	ra,4(sp)
   13314:	df000017 	ldw	fp,0(sp)
   13318:	dec00204 	addi	sp,sp,8
   1331c:	f800283a 	ret

00013320 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   13320:	deffed04 	addi	sp,sp,-76
   13324:	dfc01215 	stw	ra,72(sp)
   13328:	df001115 	stw	fp,68(sp)
   1332c:	df001104 	addi	fp,sp,68
   13330:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13334:	e0bfff17 	ldw	r2,-4(fp)
   13338:	10000816 	blt	r2,zero,1335c <isatty+0x3c>
   1333c:	01400304 	movi	r5,12
   13340:	e13fff17 	ldw	r4,-4(fp)
   13344:	00130880 	call	13088 <__mulsi3>
   13348:	1007883a 	mov	r3,r2
   1334c:	00800074 	movhi	r2,1
   13350:	1098e304 	addi	r2,r2,25484
   13354:	1885883a 	add	r2,r3,r2
   13358:	00000106 	br	13360 <isatty+0x40>
   1335c:	0005883a 	mov	r2,zero
   13360:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   13364:	e0bfef17 	ldw	r2,-68(fp)
   13368:	10000e26 	beq	r2,zero,133a4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1336c:	e0bfef17 	ldw	r2,-68(fp)
   13370:	10800017 	ldw	r2,0(r2)
   13374:	10800817 	ldw	r2,32(r2)
   13378:	1000021e 	bne	r2,zero,13384 <isatty+0x64>
    {
      return 1;
   1337c:	00800044 	movi	r2,1
   13380:	00000d06 	br	133b8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   13384:	e0bff004 	addi	r2,fp,-64
   13388:	100b883a 	mov	r5,r2
   1338c:	e13fff17 	ldw	r4,-4(fp)
   13390:	001322c0 	call	1322c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   13394:	e0bff117 	ldw	r2,-60(fp)
   13398:	10880020 	cmpeqi	r2,r2,8192
   1339c:	10803fcc 	andi	r2,r2,255
   133a0:	00000506 	br	133b8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   133a4:	00132e40 	call	132e4 <alt_get_errno>
   133a8:	1007883a 	mov	r3,r2
   133ac:	00801444 	movi	r2,81
   133b0:	18800015 	stw	r2,0(r3)
    return 0;
   133b4:	0005883a 	mov	r2,zero
  }
}
   133b8:	e037883a 	mov	sp,fp
   133bc:	dfc00117 	ldw	ra,4(sp)
   133c0:	df000017 	ldw	fp,0(sp)
   133c4:	dec00204 	addi	sp,sp,8
   133c8:	f800283a 	ret

000133cc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   133cc:	defffc04 	addi	sp,sp,-16
   133d0:	df000315 	stw	fp,12(sp)
   133d4:	df000304 	addi	fp,sp,12
   133d8:	e13ffd15 	stw	r4,-12(fp)
   133dc:	e17ffe15 	stw	r5,-8(fp)
   133e0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   133e4:	e0fffe17 	ldw	r3,-8(fp)
   133e8:	e0bffd17 	ldw	r2,-12(fp)
   133ec:	18800c26 	beq	r3,r2,13420 <alt_load_section+0x54>
  {
    while( to != end )
   133f0:	00000806 	br	13414 <alt_load_section+0x48>
    {
      *to++ = *from++;
   133f4:	e0bffe17 	ldw	r2,-8(fp)
   133f8:	10c00104 	addi	r3,r2,4
   133fc:	e0fffe15 	stw	r3,-8(fp)
   13400:	e0fffd17 	ldw	r3,-12(fp)
   13404:	19000104 	addi	r4,r3,4
   13408:	e13ffd15 	stw	r4,-12(fp)
   1340c:	18c00017 	ldw	r3,0(r3)
   13410:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   13414:	e0fffe17 	ldw	r3,-8(fp)
   13418:	e0bfff17 	ldw	r2,-4(fp)
   1341c:	18bff51e 	bne	r3,r2,133f4 <_gp+0xffff3e30>
    {
      *to++ = *from++;
    }
  }
}
   13420:	0001883a 	nop
   13424:	e037883a 	mov	sp,fp
   13428:	df000017 	ldw	fp,0(sp)
   1342c:	dec00104 	addi	sp,sp,4
   13430:	f800283a 	ret

00013434 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   13434:	defffe04 	addi	sp,sp,-8
   13438:	dfc00115 	stw	ra,4(sp)
   1343c:	df000015 	stw	fp,0(sp)
   13440:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   13444:	01800074 	movhi	r6,1
   13448:	319d7f04 	addi	r6,r6,30204
   1344c:	01400074 	movhi	r5,1
   13450:	2956ce04 	addi	r5,r5,23352
   13454:	01000074 	movhi	r4,1
   13458:	211d7f04 	addi	r4,r4,30204
   1345c:	00133cc0 	call	133cc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   13460:	01800074 	movhi	r6,1
   13464:	31808d04 	addi	r6,r6,564
   13468:	01400074 	movhi	r5,1
   1346c:	29400804 	addi	r5,r5,32
   13470:	01000074 	movhi	r4,1
   13474:	21000804 	addi	r4,r4,32
   13478:	00133cc0 	call	133cc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1347c:	01800074 	movhi	r6,1
   13480:	3196ce04 	addi	r6,r6,23352
   13484:	01400074 	movhi	r5,1
   13488:	2956b504 	addi	r5,r5,23252
   1348c:	01000074 	movhi	r4,1
   13490:	2116b504 	addi	r4,r4,23252
   13494:	00133cc0 	call	133cc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   13498:	0014b3c0 	call	14b3c <alt_dcache_flush_all>
  alt_icache_flush_all();
   1349c:	0014d8c0 	call	14d8c <alt_icache_flush_all>
}
   134a0:	0001883a 	nop
   134a4:	e037883a 	mov	sp,fp
   134a8:	dfc00117 	ldw	ra,4(sp)
   134ac:	df000017 	ldw	fp,0(sp)
   134b0:	dec00204 	addi	sp,sp,8
   134b4:	f800283a 	ret

000134b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   134b8:	defffe04 	addi	sp,sp,-8
   134bc:	dfc00115 	stw	ra,4(sp)
   134c0:	df000015 	stw	fp,0(sp)
   134c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   134c8:	d0a00917 	ldw	r2,-32732(gp)
   134cc:	10000326 	beq	r2,zero,134dc <alt_get_errno+0x24>
   134d0:	d0a00917 	ldw	r2,-32732(gp)
   134d4:	103ee83a 	callr	r2
   134d8:	00000106 	br	134e0 <alt_get_errno+0x28>
   134dc:	d0a6c204 	addi	r2,gp,-25848
}
   134e0:	e037883a 	mov	sp,fp
   134e4:	dfc00117 	ldw	ra,4(sp)
   134e8:	df000017 	ldw	fp,0(sp)
   134ec:	dec00204 	addi	sp,sp,8
   134f0:	f800283a 	ret

000134f4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   134f4:	defff904 	addi	sp,sp,-28
   134f8:	dfc00615 	stw	ra,24(sp)
   134fc:	df000515 	stw	fp,20(sp)
   13500:	df000504 	addi	fp,sp,20
   13504:	e13ffd15 	stw	r4,-12(fp)
   13508:	e17ffe15 	stw	r5,-8(fp)
   1350c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   13510:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13514:	e0bffd17 	ldw	r2,-12(fp)
   13518:	10000816 	blt	r2,zero,1353c <lseek+0x48>
   1351c:	01400304 	movi	r5,12
   13520:	e13ffd17 	ldw	r4,-12(fp)
   13524:	00130880 	call	13088 <__mulsi3>
   13528:	1007883a 	mov	r3,r2
   1352c:	00800074 	movhi	r2,1
   13530:	1098e304 	addi	r2,r2,25484
   13534:	1885883a 	add	r2,r3,r2
   13538:	00000106 	br	13540 <lseek+0x4c>
   1353c:	0005883a 	mov	r2,zero
   13540:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   13544:	e0bffc17 	ldw	r2,-16(fp)
   13548:	10001026 	beq	r2,zero,1358c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1354c:	e0bffc17 	ldw	r2,-16(fp)
   13550:	10800017 	ldw	r2,0(r2)
   13554:	10800717 	ldw	r2,28(r2)
   13558:	10000926 	beq	r2,zero,13580 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1355c:	e0bffc17 	ldw	r2,-16(fp)
   13560:	10800017 	ldw	r2,0(r2)
   13564:	10800717 	ldw	r2,28(r2)
   13568:	e1bfff17 	ldw	r6,-4(fp)
   1356c:	e17ffe17 	ldw	r5,-8(fp)
   13570:	e13ffc17 	ldw	r4,-16(fp)
   13574:	103ee83a 	callr	r2
   13578:	e0bffb15 	stw	r2,-20(fp)
   1357c:	00000506 	br	13594 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   13580:	00bfde84 	movi	r2,-134
   13584:	e0bffb15 	stw	r2,-20(fp)
   13588:	00000206 	br	13594 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   1358c:	00bfebc4 	movi	r2,-81
   13590:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   13594:	e0bffb17 	ldw	r2,-20(fp)
   13598:	1000070e 	bge	r2,zero,135b8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   1359c:	00134b80 	call	134b8 <alt_get_errno>
   135a0:	1007883a 	mov	r3,r2
   135a4:	e0bffb17 	ldw	r2,-20(fp)
   135a8:	0085c83a 	sub	r2,zero,r2
   135ac:	18800015 	stw	r2,0(r3)
    rc = -1;
   135b0:	00bfffc4 	movi	r2,-1
   135b4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   135b8:	e0bffb17 	ldw	r2,-20(fp)
}
   135bc:	e037883a 	mov	sp,fp
   135c0:	dfc00117 	ldw	ra,4(sp)
   135c4:	df000017 	ldw	fp,0(sp)
   135c8:	dec00204 	addi	sp,sp,8
   135cc:	f800283a 	ret

000135d0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   135d0:	defffd04 	addi	sp,sp,-12
   135d4:	dfc00215 	stw	ra,8(sp)
   135d8:	df000115 	stw	fp,4(sp)
   135dc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   135e0:	0009883a 	mov	r4,zero
   135e4:	0013a780 	call	13a78 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   135e8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   135ec:	0013ab00 	call	13ab0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   135f0:	01800074 	movhi	r6,1
   135f4:	3196bf04 	addi	r6,r6,23292
   135f8:	01400074 	movhi	r5,1
   135fc:	2956bf04 	addi	r5,r5,23292
   13600:	01000074 	movhi	r4,1
   13604:	2116bf04 	addi	r4,r4,23292
   13608:	0014e900 	call	14e90 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1360c:	0014c3c0 	call	14c3c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   13610:	01000074 	movhi	r4,1
   13614:	21132704 	addi	r4,r4,19612
   13618:	00157400 	call	15740 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1361c:	d0a6c317 	ldw	r2,-25844(gp)
   13620:	d0e6c417 	ldw	r3,-25840(gp)
   13624:	d126c517 	ldw	r4,-25836(gp)
   13628:	200d883a 	mov	r6,r4
   1362c:	180b883a 	mov	r5,r3
   13630:	1009883a 	mov	r4,r2
   13634:	00102700 	call	10270 <main>
   13638:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1363c:	01000044 	movi	r4,1
   13640:	00130ec0 	call	130ec <close>
  exit (result);
   13644:	e13fff17 	ldw	r4,-4(fp)
   13648:	00157540 	call	15754 <exit>

0001364c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   1364c:	defffe04 	addi	sp,sp,-8
   13650:	df000115 	stw	fp,4(sp)
   13654:	df000104 	addi	fp,sp,4
   13658:	e13fff15 	stw	r4,-4(fp)
}
   1365c:	0001883a 	nop
   13660:	e037883a 	mov	sp,fp
   13664:	df000017 	ldw	fp,0(sp)
   13668:	dec00104 	addi	sp,sp,4
   1366c:	f800283a 	ret

00013670 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   13670:	defffe04 	addi	sp,sp,-8
   13674:	df000115 	stw	fp,4(sp)
   13678:	df000104 	addi	fp,sp,4
   1367c:	e13fff15 	stw	r4,-4(fp)
}
   13680:	0001883a 	nop
   13684:	e037883a 	mov	sp,fp
   13688:	df000017 	ldw	fp,0(sp)
   1368c:	dec00104 	addi	sp,sp,4
   13690:	f800283a 	ret

00013694 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13694:	defffe04 	addi	sp,sp,-8
   13698:	dfc00115 	stw	ra,4(sp)
   1369c:	df000015 	stw	fp,0(sp)
   136a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   136a4:	d0a00917 	ldw	r2,-32732(gp)
   136a8:	10000326 	beq	r2,zero,136b8 <alt_get_errno+0x24>
   136ac:	d0a00917 	ldw	r2,-32732(gp)
   136b0:	103ee83a 	callr	r2
   136b4:	00000106 	br	136bc <alt_get_errno+0x28>
   136b8:	d0a6c204 	addi	r2,gp,-25848
}
   136bc:	e037883a 	mov	sp,fp
   136c0:	dfc00117 	ldw	ra,4(sp)
   136c4:	df000017 	ldw	fp,0(sp)
   136c8:	dec00204 	addi	sp,sp,8
   136cc:	f800283a 	ret

000136d0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   136d0:	defff904 	addi	sp,sp,-28
   136d4:	dfc00615 	stw	ra,24(sp)
   136d8:	df000515 	stw	fp,20(sp)
   136dc:	df000504 	addi	fp,sp,20
   136e0:	e13ffd15 	stw	r4,-12(fp)
   136e4:	e17ffe15 	stw	r5,-8(fp)
   136e8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   136ec:	e0bffd17 	ldw	r2,-12(fp)
   136f0:	10000816 	blt	r2,zero,13714 <read+0x44>
   136f4:	01400304 	movi	r5,12
   136f8:	e13ffd17 	ldw	r4,-12(fp)
   136fc:	00130880 	call	13088 <__mulsi3>
   13700:	1007883a 	mov	r3,r2
   13704:	00800074 	movhi	r2,1
   13708:	1098e304 	addi	r2,r2,25484
   1370c:	1885883a 	add	r2,r3,r2
   13710:	00000106 	br	13718 <read+0x48>
   13714:	0005883a 	mov	r2,zero
   13718:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1371c:	e0bffb17 	ldw	r2,-20(fp)
   13720:	10002226 	beq	r2,zero,137ac <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13724:	e0bffb17 	ldw	r2,-20(fp)
   13728:	10800217 	ldw	r2,8(r2)
   1372c:	108000cc 	andi	r2,r2,3
   13730:	10800060 	cmpeqi	r2,r2,1
   13734:	1000181e 	bne	r2,zero,13798 <read+0xc8>
        (fd->dev->read))
   13738:	e0bffb17 	ldw	r2,-20(fp)
   1373c:	10800017 	ldw	r2,0(r2)
   13740:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13744:	10001426 	beq	r2,zero,13798 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   13748:	e0bffb17 	ldw	r2,-20(fp)
   1374c:	10800017 	ldw	r2,0(r2)
   13750:	10800517 	ldw	r2,20(r2)
   13754:	e0ffff17 	ldw	r3,-4(fp)
   13758:	180d883a 	mov	r6,r3
   1375c:	e17ffe17 	ldw	r5,-8(fp)
   13760:	e13ffb17 	ldw	r4,-20(fp)
   13764:	103ee83a 	callr	r2
   13768:	e0bffc15 	stw	r2,-16(fp)
   1376c:	e0bffc17 	ldw	r2,-16(fp)
   13770:	1000070e 	bge	r2,zero,13790 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   13774:	00136940 	call	13694 <alt_get_errno>
   13778:	1007883a 	mov	r3,r2
   1377c:	e0bffc17 	ldw	r2,-16(fp)
   13780:	0085c83a 	sub	r2,zero,r2
   13784:	18800015 	stw	r2,0(r3)
          return -1;
   13788:	00bfffc4 	movi	r2,-1
   1378c:	00000c06 	br	137c0 <read+0xf0>
        }
        return rval;
   13790:	e0bffc17 	ldw	r2,-16(fp)
   13794:	00000a06 	br	137c0 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   13798:	00136940 	call	13694 <alt_get_errno>
   1379c:	1007883a 	mov	r3,r2
   137a0:	00800344 	movi	r2,13
   137a4:	18800015 	stw	r2,0(r3)
   137a8:	00000406 	br	137bc <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   137ac:	00136940 	call	13694 <alt_get_errno>
   137b0:	1007883a 	mov	r3,r2
   137b4:	00801444 	movi	r2,81
   137b8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   137bc:	00bfffc4 	movi	r2,-1
}
   137c0:	e037883a 	mov	sp,fp
   137c4:	dfc00117 	ldw	ra,4(sp)
   137c8:	df000017 	ldw	fp,0(sp)
   137cc:	dec00204 	addi	sp,sp,8
   137d0:	f800283a 	ret

000137d4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   137d4:	defffc04 	addi	sp,sp,-16
   137d8:	dfc00315 	stw	ra,12(sp)
   137dc:	df000215 	stw	fp,8(sp)
   137e0:	dc000115 	stw	r16,4(sp)
   137e4:	df000204 	addi	fp,sp,8
   137e8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   137ec:	e0bffe17 	ldw	r2,-8(fp)
   137f0:	108000d0 	cmplti	r2,r2,3
   137f4:	1000111e 	bne	r2,zero,1383c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   137f8:	04000074 	movhi	r16,1
   137fc:	8418e304 	addi	r16,r16,25484
   13800:	e0bffe17 	ldw	r2,-8(fp)
   13804:	01400304 	movi	r5,12
   13808:	1009883a 	mov	r4,r2
   1380c:	00130880 	call	13088 <__mulsi3>
   13810:	8085883a 	add	r2,r16,r2
   13814:	10800204 	addi	r2,r2,8
   13818:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1381c:	04000074 	movhi	r16,1
   13820:	8418e304 	addi	r16,r16,25484
   13824:	e0bffe17 	ldw	r2,-8(fp)
   13828:	01400304 	movi	r5,12
   1382c:	1009883a 	mov	r4,r2
   13830:	00130880 	call	13088 <__mulsi3>
   13834:	8085883a 	add	r2,r16,r2
   13838:	10000015 	stw	zero,0(r2)
  }
}
   1383c:	0001883a 	nop
   13840:	e6ffff04 	addi	sp,fp,-4
   13844:	dfc00217 	ldw	ra,8(sp)
   13848:	df000117 	ldw	fp,4(sp)
   1384c:	dc000017 	ldw	r16,0(sp)
   13850:	dec00304 	addi	sp,sp,12
   13854:	f800283a 	ret

00013858 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   13858:	defff904 	addi	sp,sp,-28
   1385c:	df000615 	stw	fp,24(sp)
   13860:	df000604 	addi	fp,sp,24
   13864:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13868:	0005303a 	rdctl	r2,status
   1386c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13870:	e0fffe17 	ldw	r3,-8(fp)
   13874:	00bfff84 	movi	r2,-2
   13878:	1884703a 	and	r2,r3,r2
   1387c:	1001703a 	wrctl	status,r2
  
  return context;
   13880:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   13884:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   13888:	d0a00a17 	ldw	r2,-32728(gp)
   1388c:	10c000c4 	addi	r3,r2,3
   13890:	00bfff04 	movi	r2,-4
   13894:	1884703a 	and	r2,r3,r2
   13898:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1389c:	d0e00a17 	ldw	r3,-32728(gp)
   138a0:	e0bfff17 	ldw	r2,-4(fp)
   138a4:	1887883a 	add	r3,r3,r2
   138a8:	008000b4 	movhi	r2,2
   138ac:	10a71004 	addi	r2,r2,-25536
   138b0:	10c0062e 	bgeu	r2,r3,138cc <sbrk+0x74>
   138b4:	e0bffb17 	ldw	r2,-20(fp)
   138b8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   138bc:	e0bffa17 	ldw	r2,-24(fp)
   138c0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   138c4:	00bfffc4 	movi	r2,-1
   138c8:	00000b06 	br	138f8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   138cc:	d0a00a17 	ldw	r2,-32728(gp)
   138d0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   138d4:	d0e00a17 	ldw	r3,-32728(gp)
   138d8:	e0bfff17 	ldw	r2,-4(fp)
   138dc:	1885883a 	add	r2,r3,r2
   138e0:	d0a00a15 	stw	r2,-32728(gp)
   138e4:	e0bffb17 	ldw	r2,-20(fp)
   138e8:	e0bffc15 	stw	r2,-16(fp)
   138ec:	e0bffc17 	ldw	r2,-16(fp)
   138f0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   138f4:	e0bffd17 	ldw	r2,-12(fp)
} 
   138f8:	e037883a 	mov	sp,fp
   138fc:	df000017 	ldw	fp,0(sp)
   13900:	dec00104 	addi	sp,sp,4
   13904:	f800283a 	ret

00013908 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13908:	defffe04 	addi	sp,sp,-8
   1390c:	dfc00115 	stw	ra,4(sp)
   13910:	df000015 	stw	fp,0(sp)
   13914:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13918:	d0a00917 	ldw	r2,-32732(gp)
   1391c:	10000326 	beq	r2,zero,1392c <alt_get_errno+0x24>
   13920:	d0a00917 	ldw	r2,-32732(gp)
   13924:	103ee83a 	callr	r2
   13928:	00000106 	br	13930 <alt_get_errno+0x28>
   1392c:	d0a6c204 	addi	r2,gp,-25848
}
   13930:	e037883a 	mov	sp,fp
   13934:	dfc00117 	ldw	ra,4(sp)
   13938:	df000017 	ldw	fp,0(sp)
   1393c:	dec00204 	addi	sp,sp,8
   13940:	f800283a 	ret

00013944 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   13944:	defff904 	addi	sp,sp,-28
   13948:	dfc00615 	stw	ra,24(sp)
   1394c:	df000515 	stw	fp,20(sp)
   13950:	df000504 	addi	fp,sp,20
   13954:	e13ffd15 	stw	r4,-12(fp)
   13958:	e17ffe15 	stw	r5,-8(fp)
   1395c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13960:	e0bffd17 	ldw	r2,-12(fp)
   13964:	10000816 	blt	r2,zero,13988 <write+0x44>
   13968:	01400304 	movi	r5,12
   1396c:	e13ffd17 	ldw	r4,-12(fp)
   13970:	00130880 	call	13088 <__mulsi3>
   13974:	1007883a 	mov	r3,r2
   13978:	00800074 	movhi	r2,1
   1397c:	1098e304 	addi	r2,r2,25484
   13980:	1885883a 	add	r2,r3,r2
   13984:	00000106 	br	1398c <write+0x48>
   13988:	0005883a 	mov	r2,zero
   1398c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13990:	e0bffb17 	ldw	r2,-20(fp)
   13994:	10002126 	beq	r2,zero,13a1c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   13998:	e0bffb17 	ldw	r2,-20(fp)
   1399c:	10800217 	ldw	r2,8(r2)
   139a0:	108000cc 	andi	r2,r2,3
   139a4:	10001826 	beq	r2,zero,13a08 <write+0xc4>
   139a8:	e0bffb17 	ldw	r2,-20(fp)
   139ac:	10800017 	ldw	r2,0(r2)
   139b0:	10800617 	ldw	r2,24(r2)
   139b4:	10001426 	beq	r2,zero,13a08 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   139b8:	e0bffb17 	ldw	r2,-20(fp)
   139bc:	10800017 	ldw	r2,0(r2)
   139c0:	10800617 	ldw	r2,24(r2)
   139c4:	e0ffff17 	ldw	r3,-4(fp)
   139c8:	180d883a 	mov	r6,r3
   139cc:	e17ffe17 	ldw	r5,-8(fp)
   139d0:	e13ffb17 	ldw	r4,-20(fp)
   139d4:	103ee83a 	callr	r2
   139d8:	e0bffc15 	stw	r2,-16(fp)
   139dc:	e0bffc17 	ldw	r2,-16(fp)
   139e0:	1000070e 	bge	r2,zero,13a00 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   139e4:	00139080 	call	13908 <alt_get_errno>
   139e8:	1007883a 	mov	r3,r2
   139ec:	e0bffc17 	ldw	r2,-16(fp)
   139f0:	0085c83a 	sub	r2,zero,r2
   139f4:	18800015 	stw	r2,0(r3)
        return -1;
   139f8:	00bfffc4 	movi	r2,-1
   139fc:	00000c06 	br	13a30 <write+0xec>
      }
      return rval;
   13a00:	e0bffc17 	ldw	r2,-16(fp)
   13a04:	00000a06 	br	13a30 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   13a08:	00139080 	call	13908 <alt_get_errno>
   13a0c:	1007883a 	mov	r3,r2
   13a10:	00800344 	movi	r2,13
   13a14:	18800015 	stw	r2,0(r3)
   13a18:	00000406 	br	13a2c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   13a1c:	00139080 	call	13908 <alt_get_errno>
   13a20:	1007883a 	mov	r3,r2
   13a24:	00801444 	movi	r2,81
   13a28:	18800015 	stw	r2,0(r3)
  }
  return -1;
   13a2c:	00bfffc4 	movi	r2,-1
}
   13a30:	e037883a 	mov	sp,fp
   13a34:	dfc00117 	ldw	ra,4(sp)
   13a38:	df000017 	ldw	fp,0(sp)
   13a3c:	dec00204 	addi	sp,sp,8
   13a40:	f800283a 	ret

00013a44 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   13a44:	defffd04 	addi	sp,sp,-12
   13a48:	dfc00215 	stw	ra,8(sp)
   13a4c:	df000115 	stw	fp,4(sp)
   13a50:	df000104 	addi	fp,sp,4
   13a54:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   13a58:	d1600604 	addi	r5,gp,-32744
   13a5c:	e13fff17 	ldw	r4,-4(fp)
   13a60:	0014b980 	call	14b98 <alt_dev_llist_insert>
}
   13a64:	e037883a 	mov	sp,fp
   13a68:	dfc00117 	ldw	ra,4(sp)
   13a6c:	df000017 	ldw	fp,0(sp)
   13a70:	dec00204 	addi	sp,sp,8
   13a74:	f800283a 	ret

00013a78 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   13a78:	defffd04 	addi	sp,sp,-12
   13a7c:	dfc00215 	stw	ra,8(sp)
   13a80:	df000115 	stw	fp,4(sp)
   13a84:	df000104 	addi	fp,sp,4
   13a88:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   13a8c:	00154b40 	call	154b4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   13a90:	00800044 	movi	r2,1
   13a94:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   13a98:	0001883a 	nop
   13a9c:	e037883a 	mov	sp,fp
   13aa0:	dfc00117 	ldw	ra,4(sp)
   13aa4:	df000017 	ldw	fp,0(sp)
   13aa8:	dec00204 	addi	sp,sp,8
   13aac:	f800283a 	ret

00013ab0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   13ab0:	defffe04 	addi	sp,sp,-8
   13ab4:	dfc00115 	stw	ra,4(sp)
   13ab8:	df000015 	stw	fp,0(sp)
   13abc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
   13ac0:	01c0fa04 	movi	r7,1000
   13ac4:	01800144 	movi	r6,5
   13ac8:	000b883a 	mov	r5,zero
   13acc:	010000b4 	movhi	r4,2
   13ad0:	21042004 	addi	r4,r4,4224
   13ad4:	001460c0 	call	1460c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_GERAL, timer_geral);
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP_TIMER, timestamp_timer);
    ALTERA_AVALON_TIMER_INIT ( WATCHDOG_TIMER, watchdog_timer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   13ad8:	000d883a 	mov	r6,zero
   13adc:	000b883a 	mov	r5,zero
   13ae0:	01000074 	movhi	r4,1
   13ae4:	21194d04 	addi	r4,r4,25908
   13ae8:	0013c940 	call	13c94 <altera_avalon_jtag_uart_init>
   13aec:	01000074 	movhi	r4,1
   13af0:	21194304 	addi	r4,r4,25868
   13af4:	0013a440 	call	13a44 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI, spi);
   13af8:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   13afc:	0001883a 	nop
    ALTERA_UP_AVALON_ADC_INIT ( ADC_1, adc_1);
   13b00:	01000074 	movhi	r4,1
   13b04:	211d5b04 	addi	r4,r4,30060
   13b08:	0013a440 	call	13a44 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( UART_RS232, uart_rs232);
   13b0c:	01000074 	movhi	r4,1
   13b10:	211d6604 	addi	r4,r4,30104
   13b14:	0013a440 	call	13a44 <alt_dev_reg>
}
   13b18:	0001883a 	nop
   13b1c:	e037883a 	mov	sp,fp
   13b20:	dfc00117 	ldw	ra,4(sp)
   13b24:	df000017 	ldw	fp,0(sp)
   13b28:	dec00204 	addi	sp,sp,8
   13b2c:	f800283a 	ret

00013b30 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   13b30:	defffa04 	addi	sp,sp,-24
   13b34:	dfc00515 	stw	ra,20(sp)
   13b38:	df000415 	stw	fp,16(sp)
   13b3c:	df000404 	addi	fp,sp,16
   13b40:	e13ffd15 	stw	r4,-12(fp)
   13b44:	e17ffe15 	stw	r5,-8(fp)
   13b48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13b4c:	e0bffd17 	ldw	r2,-12(fp)
   13b50:	10800017 	ldw	r2,0(r2)
   13b54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   13b58:	e0bffc17 	ldw	r2,-16(fp)
   13b5c:	10c00a04 	addi	r3,r2,40
   13b60:	e0bffd17 	ldw	r2,-12(fp)
   13b64:	10800217 	ldw	r2,8(r2)
   13b68:	100f883a 	mov	r7,r2
   13b6c:	e1bfff17 	ldw	r6,-4(fp)
   13b70:	e17ffe17 	ldw	r5,-8(fp)
   13b74:	1809883a 	mov	r4,r3
   13b78:	00141500 	call	14150 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   13b7c:	e037883a 	mov	sp,fp
   13b80:	dfc00117 	ldw	ra,4(sp)
   13b84:	df000017 	ldw	fp,0(sp)
   13b88:	dec00204 	addi	sp,sp,8
   13b8c:	f800283a 	ret

00013b90 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   13b90:	defffa04 	addi	sp,sp,-24
   13b94:	dfc00515 	stw	ra,20(sp)
   13b98:	df000415 	stw	fp,16(sp)
   13b9c:	df000404 	addi	fp,sp,16
   13ba0:	e13ffd15 	stw	r4,-12(fp)
   13ba4:	e17ffe15 	stw	r5,-8(fp)
   13ba8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13bac:	e0bffd17 	ldw	r2,-12(fp)
   13bb0:	10800017 	ldw	r2,0(r2)
   13bb4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   13bb8:	e0bffc17 	ldw	r2,-16(fp)
   13bbc:	10c00a04 	addi	r3,r2,40
   13bc0:	e0bffd17 	ldw	r2,-12(fp)
   13bc4:	10800217 	ldw	r2,8(r2)
   13bc8:	100f883a 	mov	r7,r2
   13bcc:	e1bfff17 	ldw	r6,-4(fp)
   13bd0:	e17ffe17 	ldw	r5,-8(fp)
   13bd4:	1809883a 	mov	r4,r3
   13bd8:	001436c0 	call	1436c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   13bdc:	e037883a 	mov	sp,fp
   13be0:	dfc00117 	ldw	ra,4(sp)
   13be4:	df000017 	ldw	fp,0(sp)
   13be8:	dec00204 	addi	sp,sp,8
   13bec:	f800283a 	ret

00013bf0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   13bf0:	defffc04 	addi	sp,sp,-16
   13bf4:	dfc00315 	stw	ra,12(sp)
   13bf8:	df000215 	stw	fp,8(sp)
   13bfc:	df000204 	addi	fp,sp,8
   13c00:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13c04:	e0bfff17 	ldw	r2,-4(fp)
   13c08:	10800017 	ldw	r2,0(r2)
   13c0c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   13c10:	e0bffe17 	ldw	r2,-8(fp)
   13c14:	10c00a04 	addi	r3,r2,40
   13c18:	e0bfff17 	ldw	r2,-4(fp)
   13c1c:	10800217 	ldw	r2,8(r2)
   13c20:	100b883a 	mov	r5,r2
   13c24:	1809883a 	mov	r4,r3
   13c28:	0013ff80 	call	13ff8 <altera_avalon_jtag_uart_close>
}
   13c2c:	e037883a 	mov	sp,fp
   13c30:	dfc00117 	ldw	ra,4(sp)
   13c34:	df000017 	ldw	fp,0(sp)
   13c38:	dec00204 	addi	sp,sp,8
   13c3c:	f800283a 	ret

00013c40 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   13c40:	defffa04 	addi	sp,sp,-24
   13c44:	dfc00515 	stw	ra,20(sp)
   13c48:	df000415 	stw	fp,16(sp)
   13c4c:	df000404 	addi	fp,sp,16
   13c50:	e13ffd15 	stw	r4,-12(fp)
   13c54:	e17ffe15 	stw	r5,-8(fp)
   13c58:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   13c5c:	e0bffd17 	ldw	r2,-12(fp)
   13c60:	10800017 	ldw	r2,0(r2)
   13c64:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   13c68:	e0bffc17 	ldw	r2,-16(fp)
   13c6c:	10800a04 	addi	r2,r2,40
   13c70:	e1bfff17 	ldw	r6,-4(fp)
   13c74:	e17ffe17 	ldw	r5,-8(fp)
   13c78:	1009883a 	mov	r4,r2
   13c7c:	00140600 	call	14060 <altera_avalon_jtag_uart_ioctl>
}
   13c80:	e037883a 	mov	sp,fp
   13c84:	dfc00117 	ldw	ra,4(sp)
   13c88:	df000017 	ldw	fp,0(sp)
   13c8c:	dec00204 	addi	sp,sp,8
   13c90:	f800283a 	ret

00013c94 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   13c94:	defffb04 	addi	sp,sp,-20
   13c98:	dfc00415 	stw	ra,16(sp)
   13c9c:	df000315 	stw	fp,12(sp)
   13ca0:	df000304 	addi	fp,sp,12
   13ca4:	e13ffd15 	stw	r4,-12(fp)
   13ca8:	e17ffe15 	stw	r5,-8(fp)
   13cac:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13cb0:	e0bffd17 	ldw	r2,-12(fp)
   13cb4:	00c00044 	movi	r3,1
   13cb8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   13cbc:	e0bffd17 	ldw	r2,-12(fp)
   13cc0:	10800017 	ldw	r2,0(r2)
   13cc4:	10800104 	addi	r2,r2,4
   13cc8:	1007883a 	mov	r3,r2
   13ccc:	e0bffd17 	ldw	r2,-12(fp)
   13cd0:	10800817 	ldw	r2,32(r2)
   13cd4:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   13cd8:	e0bfff17 	ldw	r2,-4(fp)
   13cdc:	01800074 	movhi	r6,1
   13ce0:	318f5204 	addi	r6,r6,15688
   13ce4:	e17ffd17 	ldw	r5,-12(fp)
   13ce8:	1009883a 	mov	r4,r2
   13cec:	0014f0c0 	call	14f0c <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   13cf0:	e0bffd17 	ldw	r2,-12(fp)
   13cf4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   13cf8:	e0bffd17 	ldw	r2,-12(fp)
   13cfc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   13d00:	d0e6c717 	ldw	r3,-25828(gp)
   13d04:	e1fffd17 	ldw	r7,-12(fp)
   13d08:	01800074 	movhi	r6,1
   13d0c:	318fd604 	addi	r6,r6,16216
   13d10:	180b883a 	mov	r5,r3
   13d14:	1009883a 	mov	r4,r2
   13d18:	0014a100 	call	14a10 <alt_alarm_start>
   13d1c:	1000040e 	bge	r2,zero,13d30 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   13d20:	e0fffd17 	ldw	r3,-12(fp)
   13d24:	00a00034 	movhi	r2,32768
   13d28:	10bfffc4 	addi	r2,r2,-1
   13d2c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   13d30:	0001883a 	nop
   13d34:	e037883a 	mov	sp,fp
   13d38:	dfc00117 	ldw	ra,4(sp)
   13d3c:	df000017 	ldw	fp,0(sp)
   13d40:	dec00204 	addi	sp,sp,8
   13d44:	f800283a 	ret

00013d48 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   13d48:	defff704 	addi	sp,sp,-36
   13d4c:	df000815 	stw	fp,32(sp)
   13d50:	df000804 	addi	fp,sp,32
   13d54:	e13ffe15 	stw	r4,-8(fp)
   13d58:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   13d5c:	e0bffe17 	ldw	r2,-8(fp)
   13d60:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
   13d64:	e0bffa17 	ldw	r2,-24(fp)
   13d68:	10800017 	ldw	r2,0(r2)
   13d6c:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13d70:	e0bffb17 	ldw	r2,-20(fp)
   13d74:	10800104 	addi	r2,r2,4
   13d78:	10800037 	ldwio	r2,0(r2)
   13d7c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   13d80:	e0bffc17 	ldw	r2,-16(fp)
   13d84:	1080c00c 	andi	r2,r2,768
   13d88:	10006d26 	beq	r2,zero,13f40 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   13d8c:	e0bffc17 	ldw	r2,-16(fp)
   13d90:	1080400c 	andi	r2,r2,256
   13d94:	10003526 	beq	r2,zero,13e6c <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   13d98:	00800074 	movhi	r2,1
   13d9c:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13da0:	e0bffa17 	ldw	r2,-24(fp)
   13da4:	10800a17 	ldw	r2,40(r2)
   13da8:	10800044 	addi	r2,r2,1
   13dac:	1081ffcc 	andi	r2,r2,2047
   13db0:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
   13db4:	e0bffa17 	ldw	r2,-24(fp)
   13db8:	10c00b17 	ldw	r3,44(r2)
   13dbc:	e0bffd17 	ldw	r2,-12(fp)
   13dc0:	18801526 	beq	r3,r2,13e18 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   13dc4:	e0bffb17 	ldw	r2,-20(fp)
   13dc8:	10800037 	ldwio	r2,0(r2)
   13dcc:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   13dd0:	e0bff817 	ldw	r2,-32(fp)
   13dd4:	10a0000c 	andi	r2,r2,32768
   13dd8:	10001126 	beq	r2,zero,13e20 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   13ddc:	e0bffa17 	ldw	r2,-24(fp)
   13de0:	10800a17 	ldw	r2,40(r2)
   13de4:	e0fff817 	ldw	r3,-32(fp)
   13de8:	1809883a 	mov	r4,r3
   13dec:	e0fffa17 	ldw	r3,-24(fp)
   13df0:	1885883a 	add	r2,r3,r2
   13df4:	10800e04 	addi	r2,r2,56
   13df8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13dfc:	e0bffa17 	ldw	r2,-24(fp)
   13e00:	10800a17 	ldw	r2,40(r2)
   13e04:	10800044 	addi	r2,r2,1
   13e08:	10c1ffcc 	andi	r3,r2,2047
   13e0c:	e0bffa17 	ldw	r2,-24(fp)
   13e10:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   13e14:	003fe206 	br	13da0 <_gp+0xffff47dc>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   13e18:	0001883a 	nop
   13e1c:	00000106 	br	13e24 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   13e20:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   13e24:	e0bff817 	ldw	r2,-32(fp)
   13e28:	10bfffec 	andhi	r2,r2,65535
   13e2c:	10000f26 	beq	r2,zero,13e6c <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13e30:	e0bffa17 	ldw	r2,-24(fp)
   13e34:	10c00817 	ldw	r3,32(r2)
   13e38:	00bfff84 	movi	r2,-2
   13e3c:	1886703a 	and	r3,r3,r2
   13e40:	e0bffa17 	ldw	r2,-24(fp)
   13e44:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   13e48:	e0bffb17 	ldw	r2,-20(fp)
   13e4c:	10800104 	addi	r2,r2,4
   13e50:	1007883a 	mov	r3,r2
   13e54:	e0bffa17 	ldw	r2,-24(fp)
   13e58:	10800817 	ldw	r2,32(r2)
   13e5c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13e60:	e0bffb17 	ldw	r2,-20(fp)
   13e64:	10800104 	addi	r2,r2,4
   13e68:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   13e6c:	e0bffc17 	ldw	r2,-16(fp)
   13e70:	1080800c 	andi	r2,r2,512
   13e74:	103fbe26 	beq	r2,zero,13d70 <_gp+0xffff47ac>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   13e78:	e0bffc17 	ldw	r2,-16(fp)
   13e7c:	1004d43a 	srli	r2,r2,16
   13e80:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   13e84:	00001406 	br	13ed8 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   13e88:	e0bffb17 	ldw	r2,-20(fp)
   13e8c:	e0fffa17 	ldw	r3,-24(fp)
   13e90:	18c00d17 	ldw	r3,52(r3)
   13e94:	e13ffa17 	ldw	r4,-24(fp)
   13e98:	20c7883a 	add	r3,r4,r3
   13e9c:	18c20e04 	addi	r3,r3,2104
   13ea0:	18c00003 	ldbu	r3,0(r3)
   13ea4:	18c03fcc 	andi	r3,r3,255
   13ea8:	18c0201c 	xori	r3,r3,128
   13eac:	18ffe004 	addi	r3,r3,-128
   13eb0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13eb4:	e0bffa17 	ldw	r2,-24(fp)
   13eb8:	10800d17 	ldw	r2,52(r2)
   13ebc:	10800044 	addi	r2,r2,1
   13ec0:	10c1ffcc 	andi	r3,r2,2047
   13ec4:	e0bffa17 	ldw	r2,-24(fp)
   13ec8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   13ecc:	e0bff917 	ldw	r2,-28(fp)
   13ed0:	10bfffc4 	addi	r2,r2,-1
   13ed4:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   13ed8:	e0bff917 	ldw	r2,-28(fp)
   13edc:	10000526 	beq	r2,zero,13ef4 <altera_avalon_jtag_uart_irq+0x1ac>
   13ee0:	e0bffa17 	ldw	r2,-24(fp)
   13ee4:	10c00d17 	ldw	r3,52(r2)
   13ee8:	e0bffa17 	ldw	r2,-24(fp)
   13eec:	10800c17 	ldw	r2,48(r2)
   13ef0:	18bfe51e 	bne	r3,r2,13e88 <_gp+0xffff48c4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   13ef4:	e0bff917 	ldw	r2,-28(fp)
   13ef8:	103f9d26 	beq	r2,zero,13d70 <_gp+0xffff47ac>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   13efc:	e0bffa17 	ldw	r2,-24(fp)
   13f00:	10c00817 	ldw	r3,32(r2)
   13f04:	00bfff44 	movi	r2,-3
   13f08:	1886703a 	and	r3,r3,r2
   13f0c:	e0bffa17 	ldw	r2,-24(fp)
   13f10:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   13f14:	e0bffa17 	ldw	r2,-24(fp)
   13f18:	10800017 	ldw	r2,0(r2)
   13f1c:	10800104 	addi	r2,r2,4
   13f20:	1007883a 	mov	r3,r2
   13f24:	e0bffa17 	ldw	r2,-24(fp)
   13f28:	10800817 	ldw	r2,32(r2)
   13f2c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13f30:	e0bffb17 	ldw	r2,-20(fp)
   13f34:	10800104 	addi	r2,r2,4
   13f38:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   13f3c:	003f8c06 	br	13d70 <_gp+0xffff47ac>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   13f40:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   13f44:	0001883a 	nop
   13f48:	e037883a 	mov	sp,fp
   13f4c:	df000017 	ldw	fp,0(sp)
   13f50:	dec00104 	addi	sp,sp,4
   13f54:	f800283a 	ret

00013f58 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   13f58:	defff804 	addi	sp,sp,-32
   13f5c:	df000715 	stw	fp,28(sp)
   13f60:	df000704 	addi	fp,sp,28
   13f64:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   13f68:	e0bffb17 	ldw	r2,-20(fp)
   13f6c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   13f70:	e0bff917 	ldw	r2,-28(fp)
   13f74:	10800017 	ldw	r2,0(r2)
   13f78:	10800104 	addi	r2,r2,4
   13f7c:	10800037 	ldwio	r2,0(r2)
   13f80:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   13f84:	e0bffa17 	ldw	r2,-24(fp)
   13f88:	1081000c 	andi	r2,r2,1024
   13f8c:	10000b26 	beq	r2,zero,13fbc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   13f90:	e0bff917 	ldw	r2,-28(fp)
   13f94:	10800017 	ldw	r2,0(r2)
   13f98:	10800104 	addi	r2,r2,4
   13f9c:	1007883a 	mov	r3,r2
   13fa0:	e0bff917 	ldw	r2,-28(fp)
   13fa4:	10800817 	ldw	r2,32(r2)
   13fa8:	10810014 	ori	r2,r2,1024
   13fac:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   13fb0:	e0bff917 	ldw	r2,-28(fp)
   13fb4:	10000915 	stw	zero,36(r2)
   13fb8:	00000a06 	br	13fe4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   13fbc:	e0bff917 	ldw	r2,-28(fp)
   13fc0:	10c00917 	ldw	r3,36(r2)
   13fc4:	00a00034 	movhi	r2,32768
   13fc8:	10bfff04 	addi	r2,r2,-4
   13fcc:	10c00536 	bltu	r2,r3,13fe4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   13fd0:	e0bff917 	ldw	r2,-28(fp)
   13fd4:	10800917 	ldw	r2,36(r2)
   13fd8:	10c00044 	addi	r3,r2,1
   13fdc:	e0bff917 	ldw	r2,-28(fp)
   13fe0:	10c00915 	stw	r3,36(r2)
   13fe4:	d0a6c717 	ldw	r2,-25828(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   13fe8:	e037883a 	mov	sp,fp
   13fec:	df000017 	ldw	fp,0(sp)
   13ff0:	dec00104 	addi	sp,sp,4
   13ff4:	f800283a 	ret

00013ff8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   13ff8:	defffd04 	addi	sp,sp,-12
   13ffc:	df000215 	stw	fp,8(sp)
   14000:	df000204 	addi	fp,sp,8
   14004:	e13ffe15 	stw	r4,-8(fp)
   14008:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1400c:	00000506 	br	14024 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   14010:	e0bfff17 	ldw	r2,-4(fp)
   14014:	1090000c 	andi	r2,r2,16384
   14018:	10000226 	beq	r2,zero,14024 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1401c:	00bffd44 	movi	r2,-11
   14020:	00000b06 	br	14050 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14024:	e0bffe17 	ldw	r2,-8(fp)
   14028:	10c00d17 	ldw	r3,52(r2)
   1402c:	e0bffe17 	ldw	r2,-8(fp)
   14030:	10800c17 	ldw	r2,48(r2)
   14034:	18800526 	beq	r3,r2,1404c <altera_avalon_jtag_uart_close+0x54>
   14038:	e0bffe17 	ldw	r2,-8(fp)
   1403c:	10c00917 	ldw	r3,36(r2)
   14040:	e0bffe17 	ldw	r2,-8(fp)
   14044:	10800117 	ldw	r2,4(r2)
   14048:	18bff136 	bltu	r3,r2,14010 <_gp+0xffff4a4c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1404c:	0005883a 	mov	r2,zero
}
   14050:	e037883a 	mov	sp,fp
   14054:	df000017 	ldw	fp,0(sp)
   14058:	dec00104 	addi	sp,sp,4
   1405c:	f800283a 	ret

00014060 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   14060:	defffa04 	addi	sp,sp,-24
   14064:	df000515 	stw	fp,20(sp)
   14068:	df000504 	addi	fp,sp,20
   1406c:	e13ffd15 	stw	r4,-12(fp)
   14070:	e17ffe15 	stw	r5,-8(fp)
   14074:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   14078:	00bff9c4 	movi	r2,-25
   1407c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   14080:	e0bffe17 	ldw	r2,-8(fp)
   14084:	10da8060 	cmpeqi	r3,r2,27137
   14088:	1800031e 	bne	r3,zero,14098 <altera_avalon_jtag_uart_ioctl+0x38>
   1408c:	109a80a0 	cmpeqi	r2,r2,27138
   14090:	1000181e 	bne	r2,zero,140f4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   14094:	00002906 	br	1413c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   14098:	e0bffd17 	ldw	r2,-12(fp)
   1409c:	10c00117 	ldw	r3,4(r2)
   140a0:	00a00034 	movhi	r2,32768
   140a4:	10bfffc4 	addi	r2,r2,-1
   140a8:	18802126 	beq	r3,r2,14130 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   140ac:	e0bfff17 	ldw	r2,-4(fp)
   140b0:	10800017 	ldw	r2,0(r2)
   140b4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   140b8:	e0bffc17 	ldw	r2,-16(fp)
   140bc:	10800090 	cmplti	r2,r2,2
   140c0:	1000061e 	bne	r2,zero,140dc <altera_avalon_jtag_uart_ioctl+0x7c>
   140c4:	e0fffc17 	ldw	r3,-16(fp)
   140c8:	00a00034 	movhi	r2,32768
   140cc:	10bfffc4 	addi	r2,r2,-1
   140d0:	18800226 	beq	r3,r2,140dc <altera_avalon_jtag_uart_ioctl+0x7c>
   140d4:	e0bffc17 	ldw	r2,-16(fp)
   140d8:	00000206 	br	140e4 <altera_avalon_jtag_uart_ioctl+0x84>
   140dc:	00a00034 	movhi	r2,32768
   140e0:	10bfff84 	addi	r2,r2,-2
   140e4:	e0fffd17 	ldw	r3,-12(fp)
   140e8:	18800115 	stw	r2,4(r3)
      rc = 0;
   140ec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   140f0:	00000f06 	br	14130 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   140f4:	e0bffd17 	ldw	r2,-12(fp)
   140f8:	10c00117 	ldw	r3,4(r2)
   140fc:	00a00034 	movhi	r2,32768
   14100:	10bfffc4 	addi	r2,r2,-1
   14104:	18800c26 	beq	r3,r2,14138 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   14108:	e0bffd17 	ldw	r2,-12(fp)
   1410c:	10c00917 	ldw	r3,36(r2)
   14110:	e0bffd17 	ldw	r2,-12(fp)
   14114:	10800117 	ldw	r2,4(r2)
   14118:	1885803a 	cmpltu	r2,r3,r2
   1411c:	10c03fcc 	andi	r3,r2,255
   14120:	e0bfff17 	ldw	r2,-4(fp)
   14124:	10c00015 	stw	r3,0(r2)
      rc = 0;
   14128:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1412c:	00000206 	br	14138 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   14130:	0001883a 	nop
   14134:	00000106 	br	1413c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   14138:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1413c:	e0bffb17 	ldw	r2,-20(fp)
}
   14140:	e037883a 	mov	sp,fp
   14144:	df000017 	ldw	fp,0(sp)
   14148:	dec00104 	addi	sp,sp,4
   1414c:	f800283a 	ret

00014150 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   14150:	defff304 	addi	sp,sp,-52
   14154:	dfc00c15 	stw	ra,48(sp)
   14158:	df000b15 	stw	fp,44(sp)
   1415c:	df000b04 	addi	fp,sp,44
   14160:	e13ffc15 	stw	r4,-16(fp)
   14164:	e17ffd15 	stw	r5,-12(fp)
   14168:	e1bffe15 	stw	r6,-8(fp)
   1416c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   14170:	e0bffd17 	ldw	r2,-12(fp)
   14174:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   14178:	00004706 	br	14298 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1417c:	e0bffc17 	ldw	r2,-16(fp)
   14180:	10800a17 	ldw	r2,40(r2)
   14184:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   14188:	e0bffc17 	ldw	r2,-16(fp)
   1418c:	10800b17 	ldw	r2,44(r2)
   14190:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   14194:	e0fff717 	ldw	r3,-36(fp)
   14198:	e0bff817 	ldw	r2,-32(fp)
   1419c:	18800536 	bltu	r3,r2,141b4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   141a0:	e0fff717 	ldw	r3,-36(fp)
   141a4:	e0bff817 	ldw	r2,-32(fp)
   141a8:	1885c83a 	sub	r2,r3,r2
   141ac:	e0bff615 	stw	r2,-40(fp)
   141b0:	00000406 	br	141c4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   141b4:	00c20004 	movi	r3,2048
   141b8:	e0bff817 	ldw	r2,-32(fp)
   141bc:	1885c83a 	sub	r2,r3,r2
   141c0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   141c4:	e0bff617 	ldw	r2,-40(fp)
   141c8:	10001e26 	beq	r2,zero,14244 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   141cc:	e0fffe17 	ldw	r3,-8(fp)
   141d0:	e0bff617 	ldw	r2,-40(fp)
   141d4:	1880022e 	bgeu	r3,r2,141e0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   141d8:	e0bffe17 	ldw	r2,-8(fp)
   141dc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   141e0:	e0bffc17 	ldw	r2,-16(fp)
   141e4:	10c00e04 	addi	r3,r2,56
   141e8:	e0bff817 	ldw	r2,-32(fp)
   141ec:	1885883a 	add	r2,r3,r2
   141f0:	e1bff617 	ldw	r6,-40(fp)
   141f4:	100b883a 	mov	r5,r2
   141f8:	e13ff517 	ldw	r4,-44(fp)
   141fc:	00117000 	call	11700 <memcpy>
      ptr   += n;
   14200:	e0fff517 	ldw	r3,-44(fp)
   14204:	e0bff617 	ldw	r2,-40(fp)
   14208:	1885883a 	add	r2,r3,r2
   1420c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   14210:	e0fffe17 	ldw	r3,-8(fp)
   14214:	e0bff617 	ldw	r2,-40(fp)
   14218:	1885c83a 	sub	r2,r3,r2
   1421c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14220:	e0fff817 	ldw	r3,-32(fp)
   14224:	e0bff617 	ldw	r2,-40(fp)
   14228:	1885883a 	add	r2,r3,r2
   1422c:	10c1ffcc 	andi	r3,r2,2047
   14230:	e0bffc17 	ldw	r2,-16(fp)
   14234:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   14238:	e0bffe17 	ldw	r2,-8(fp)
   1423c:	00bfcf16 	blt	zero,r2,1417c <_gp+0xffff4bb8>
   14240:	00000106 	br	14248 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   14244:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   14248:	e0fff517 	ldw	r3,-44(fp)
   1424c:	e0bffd17 	ldw	r2,-12(fp)
   14250:	1880141e 	bne	r3,r2,142a4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   14254:	e0bfff17 	ldw	r2,-4(fp)
   14258:	1090000c 	andi	r2,r2,16384
   1425c:	1000131e 	bne	r2,zero,142ac <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   14260:	0001883a 	nop
   14264:	e0bffc17 	ldw	r2,-16(fp)
   14268:	10c00a17 	ldw	r3,40(r2)
   1426c:	e0bff717 	ldw	r2,-36(fp)
   14270:	1880051e 	bne	r3,r2,14288 <altera_avalon_jtag_uart_read+0x138>
   14274:	e0bffc17 	ldw	r2,-16(fp)
   14278:	10c00917 	ldw	r3,36(r2)
   1427c:	e0bffc17 	ldw	r2,-16(fp)
   14280:	10800117 	ldw	r2,4(r2)
   14284:	18bff736 	bltu	r3,r2,14264 <_gp+0xffff4ca0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   14288:	e0bffc17 	ldw	r2,-16(fp)
   1428c:	10c00a17 	ldw	r3,40(r2)
   14290:	e0bff717 	ldw	r2,-36(fp)
   14294:	18800726 	beq	r3,r2,142b4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   14298:	e0bffe17 	ldw	r2,-8(fp)
   1429c:	00bfb716 	blt	zero,r2,1417c <_gp+0xffff4bb8>
   142a0:	00000506 	br	142b8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   142a4:	0001883a 	nop
   142a8:	00000306 	br	142b8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   142ac:	0001883a 	nop
   142b0:	00000106 	br	142b8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   142b4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   142b8:	e0fff517 	ldw	r3,-44(fp)
   142bc:	e0bffd17 	ldw	r2,-12(fp)
   142c0:	18801826 	beq	r3,r2,14324 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   142c4:	0005303a 	rdctl	r2,status
   142c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   142cc:	e0fffb17 	ldw	r3,-20(fp)
   142d0:	00bfff84 	movi	r2,-2
   142d4:	1884703a 	and	r2,r3,r2
   142d8:	1001703a 	wrctl	status,r2
  
  return context;
   142dc:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   142e0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   142e4:	e0bffc17 	ldw	r2,-16(fp)
   142e8:	10800817 	ldw	r2,32(r2)
   142ec:	10c00054 	ori	r3,r2,1
   142f0:	e0bffc17 	ldw	r2,-16(fp)
   142f4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   142f8:	e0bffc17 	ldw	r2,-16(fp)
   142fc:	10800017 	ldw	r2,0(r2)
   14300:	10800104 	addi	r2,r2,4
   14304:	1007883a 	mov	r3,r2
   14308:	e0bffc17 	ldw	r2,-16(fp)
   1430c:	10800817 	ldw	r2,32(r2)
   14310:	18800035 	stwio	r2,0(r3)
   14314:	e0bffa17 	ldw	r2,-24(fp)
   14318:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1431c:	e0bff917 	ldw	r2,-28(fp)
   14320:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   14324:	e0fff517 	ldw	r3,-44(fp)
   14328:	e0bffd17 	ldw	r2,-12(fp)
   1432c:	18800426 	beq	r3,r2,14340 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   14330:	e0fff517 	ldw	r3,-44(fp)
   14334:	e0bffd17 	ldw	r2,-12(fp)
   14338:	1885c83a 	sub	r2,r3,r2
   1433c:	00000606 	br	14358 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   14340:	e0bfff17 	ldw	r2,-4(fp)
   14344:	1090000c 	andi	r2,r2,16384
   14348:	10000226 	beq	r2,zero,14354 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   1434c:	00bffd44 	movi	r2,-11
   14350:	00000106 	br	14358 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   14354:	00bffec4 	movi	r2,-5
}
   14358:	e037883a 	mov	sp,fp
   1435c:	dfc00117 	ldw	ra,4(sp)
   14360:	df000017 	ldw	fp,0(sp)
   14364:	dec00204 	addi	sp,sp,8
   14368:	f800283a 	ret

0001436c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1436c:	defff304 	addi	sp,sp,-52
   14370:	dfc00c15 	stw	ra,48(sp)
   14374:	df000b15 	stw	fp,44(sp)
   14378:	df000b04 	addi	fp,sp,44
   1437c:	e13ffc15 	stw	r4,-16(fp)
   14380:	e17ffd15 	stw	r5,-12(fp)
   14384:	e1bffe15 	stw	r6,-8(fp)
   14388:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1438c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   14390:	e0bffd17 	ldw	r2,-12(fp)
   14394:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14398:	00003706 	br	14478 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1439c:	e0bffc17 	ldw	r2,-16(fp)
   143a0:	10800c17 	ldw	r2,48(r2)
   143a4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   143a8:	e0bffc17 	ldw	r2,-16(fp)
   143ac:	10800d17 	ldw	r2,52(r2)
   143b0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   143b4:	e0fff917 	ldw	r3,-28(fp)
   143b8:	e0bff517 	ldw	r2,-44(fp)
   143bc:	1880062e 	bgeu	r3,r2,143d8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   143c0:	e0fff517 	ldw	r3,-44(fp)
   143c4:	e0bff917 	ldw	r2,-28(fp)
   143c8:	1885c83a 	sub	r2,r3,r2
   143cc:	10bfffc4 	addi	r2,r2,-1
   143d0:	e0bff615 	stw	r2,-40(fp)
   143d4:	00000b06 	br	14404 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   143d8:	e0bff517 	ldw	r2,-44(fp)
   143dc:	10000526 	beq	r2,zero,143f4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   143e0:	00c20004 	movi	r3,2048
   143e4:	e0bff917 	ldw	r2,-28(fp)
   143e8:	1885c83a 	sub	r2,r3,r2
   143ec:	e0bff615 	stw	r2,-40(fp)
   143f0:	00000406 	br	14404 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   143f4:	00c1ffc4 	movi	r3,2047
   143f8:	e0bff917 	ldw	r2,-28(fp)
   143fc:	1885c83a 	sub	r2,r3,r2
   14400:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   14404:	e0bff617 	ldw	r2,-40(fp)
   14408:	10001e26 	beq	r2,zero,14484 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   1440c:	e0fffe17 	ldw	r3,-8(fp)
   14410:	e0bff617 	ldw	r2,-40(fp)
   14414:	1880022e 	bgeu	r3,r2,14420 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   14418:	e0bffe17 	ldw	r2,-8(fp)
   1441c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   14420:	e0bffc17 	ldw	r2,-16(fp)
   14424:	10c20e04 	addi	r3,r2,2104
   14428:	e0bff917 	ldw	r2,-28(fp)
   1442c:	1885883a 	add	r2,r3,r2
   14430:	e1bff617 	ldw	r6,-40(fp)
   14434:	e17ffd17 	ldw	r5,-12(fp)
   14438:	1009883a 	mov	r4,r2
   1443c:	00117000 	call	11700 <memcpy>
      ptr   += n;
   14440:	e0fffd17 	ldw	r3,-12(fp)
   14444:	e0bff617 	ldw	r2,-40(fp)
   14448:	1885883a 	add	r2,r3,r2
   1444c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   14450:	e0fffe17 	ldw	r3,-8(fp)
   14454:	e0bff617 	ldw	r2,-40(fp)
   14458:	1885c83a 	sub	r2,r3,r2
   1445c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14460:	e0fff917 	ldw	r3,-28(fp)
   14464:	e0bff617 	ldw	r2,-40(fp)
   14468:	1885883a 	add	r2,r3,r2
   1446c:	10c1ffcc 	andi	r3,r2,2047
   14470:	e0bffc17 	ldw	r2,-16(fp)
   14474:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14478:	e0bffe17 	ldw	r2,-8(fp)
   1447c:	00bfc716 	blt	zero,r2,1439c <_gp+0xffff4dd8>
   14480:	00000106 	br	14488 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   14484:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14488:	0005303a 	rdctl	r2,status
   1448c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14490:	e0fffb17 	ldw	r3,-20(fp)
   14494:	00bfff84 	movi	r2,-2
   14498:	1884703a 	and	r2,r3,r2
   1449c:	1001703a 	wrctl	status,r2
  
  return context;
   144a0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   144a4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   144a8:	e0bffc17 	ldw	r2,-16(fp)
   144ac:	10800817 	ldw	r2,32(r2)
   144b0:	10c00094 	ori	r3,r2,2
   144b4:	e0bffc17 	ldw	r2,-16(fp)
   144b8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   144bc:	e0bffc17 	ldw	r2,-16(fp)
   144c0:	10800017 	ldw	r2,0(r2)
   144c4:	10800104 	addi	r2,r2,4
   144c8:	1007883a 	mov	r3,r2
   144cc:	e0bffc17 	ldw	r2,-16(fp)
   144d0:	10800817 	ldw	r2,32(r2)
   144d4:	18800035 	stwio	r2,0(r3)
   144d8:	e0bffa17 	ldw	r2,-24(fp)
   144dc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   144e0:	e0bff817 	ldw	r2,-32(fp)
   144e4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   144e8:	e0bffe17 	ldw	r2,-8(fp)
   144ec:	0080100e 	bge	zero,r2,14530 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   144f0:	e0bfff17 	ldw	r2,-4(fp)
   144f4:	1090000c 	andi	r2,r2,16384
   144f8:	1000101e 	bne	r2,zero,1453c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   144fc:	0001883a 	nop
   14500:	e0bffc17 	ldw	r2,-16(fp)
   14504:	10c00d17 	ldw	r3,52(r2)
   14508:	e0bff517 	ldw	r2,-44(fp)
   1450c:	1880051e 	bne	r3,r2,14524 <altera_avalon_jtag_uart_write+0x1b8>
   14510:	e0bffc17 	ldw	r2,-16(fp)
   14514:	10c00917 	ldw	r3,36(r2)
   14518:	e0bffc17 	ldw	r2,-16(fp)
   1451c:	10800117 	ldw	r2,4(r2)
   14520:	18bff736 	bltu	r3,r2,14500 <_gp+0xffff4f3c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   14524:	e0bffc17 	ldw	r2,-16(fp)
   14528:	10800917 	ldw	r2,36(r2)
   1452c:	1000051e 	bne	r2,zero,14544 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   14530:	e0bffe17 	ldw	r2,-8(fp)
   14534:	00bfd016 	blt	zero,r2,14478 <_gp+0xffff4eb4>
   14538:	00000306 	br	14548 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   1453c:	0001883a 	nop
   14540:	00000106 	br	14548 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   14544:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   14548:	e0fffd17 	ldw	r3,-12(fp)
   1454c:	e0bff717 	ldw	r2,-36(fp)
   14550:	18800426 	beq	r3,r2,14564 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   14554:	e0fffd17 	ldw	r3,-12(fp)
   14558:	e0bff717 	ldw	r2,-36(fp)
   1455c:	1885c83a 	sub	r2,r3,r2
   14560:	00000606 	br	1457c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   14564:	e0bfff17 	ldw	r2,-4(fp)
   14568:	1090000c 	andi	r2,r2,16384
   1456c:	10000226 	beq	r2,zero,14578 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   14570:	00bffd44 	movi	r2,-11
   14574:	00000106 	br	1457c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   14578:	00bffec4 	movi	r2,-5
}
   1457c:	e037883a 	mov	sp,fp
   14580:	dfc00117 	ldw	ra,4(sp)
   14584:	df000017 	ldw	fp,0(sp)
   14588:	dec00204 	addi	sp,sp,8
   1458c:	f800283a 	ret

00014590 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   14590:	defff904 	addi	sp,sp,-28
   14594:	dfc00615 	stw	ra,24(sp)
   14598:	df000515 	stw	fp,20(sp)
   1459c:	df000504 	addi	fp,sp,20
   145a0:	e13ffe15 	stw	r4,-8(fp)
   145a4:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   145a8:	0007883a 	mov	r3,zero
   145ac:	e0bffe17 	ldw	r2,-8(fp)
   145b0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   145b4:	e0bffe17 	ldw	r2,-8(fp)
   145b8:	10800104 	addi	r2,r2,4
   145bc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   145c0:	0005303a 	rdctl	r2,status
   145c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   145c8:	e0fffc17 	ldw	r3,-16(fp)
   145cc:	00bfff84 	movi	r2,-2
   145d0:	1884703a 	and	r2,r3,r2
   145d4:	1001703a 	wrctl	status,r2
  
  return context;
   145d8:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   145dc:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   145e0:	00153ac0 	call	153ac <alt_tick>
   145e4:	e0bffb17 	ldw	r2,-20(fp)
   145e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   145ec:	e0bffd17 	ldw	r2,-12(fp)
   145f0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   145f4:	0001883a 	nop
   145f8:	e037883a 	mov	sp,fp
   145fc:	dfc00117 	ldw	ra,4(sp)
   14600:	df000017 	ldw	fp,0(sp)
   14604:	dec00204 	addi	sp,sp,8
   14608:	f800283a 	ret

0001460c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1460c:	defff904 	addi	sp,sp,-28
   14610:	dfc00615 	stw	ra,24(sp)
   14614:	df000515 	stw	fp,20(sp)
   14618:	df000504 	addi	fp,sp,20
   1461c:	e13ffc15 	stw	r4,-16(fp)
   14620:	e17ffd15 	stw	r5,-12(fp)
   14624:	e1bffe15 	stw	r6,-8(fp)
   14628:	e1ffff15 	stw	r7,-4(fp)
   1462c:	e0bfff17 	ldw	r2,-4(fp)
   14630:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   14634:	d0a6c717 	ldw	r2,-25828(gp)
   14638:	1000021e 	bne	r2,zero,14644 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   1463c:	e0bffb17 	ldw	r2,-20(fp)
   14640:	d0a6c715 	stw	r2,-25828(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   14644:	e0bffc17 	ldw	r2,-16(fp)
   14648:	10800104 	addi	r2,r2,4
   1464c:	00c001c4 	movi	r3,7
   14650:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   14654:	01800074 	movhi	r6,1
   14658:	31916404 	addi	r6,r6,17808
   1465c:	e17ffc17 	ldw	r5,-16(fp)
   14660:	e13ffe17 	ldw	r4,-8(fp)
   14664:	0014f0c0 	call	14f0c <alt_irq_register>
#endif  
}
   14668:	0001883a 	nop
   1466c:	e037883a 	mov	sp,fp
   14670:	dfc00117 	ldw	ra,4(sp)
   14674:	df000017 	ldw	fp,0(sp)
   14678:	dec00204 	addi	sp,sp,8
   1467c:	f800283a 	ret

00014680 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   14680:	defffd04 	addi	sp,sp,-12
   14684:	df000215 	stw	fp,8(sp)
   14688:	df000204 	addi	fp,sp,8
   1468c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   14690:	e0bfff17 	ldw	r2,-4(fp)
   14694:	10800a17 	ldw	r2,40(r2)
   14698:	10800104 	addi	r2,r2,4
   1469c:	10800037 	ldwio	r2,0(r2)
   146a0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   146a4:	e0bffe17 	ldw	r2,-8(fp)
   146a8:	10800054 	ori	r2,r2,1
   146ac:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   146b0:	e0bfff17 	ldw	r2,-4(fp)
   146b4:	10800a17 	ldw	r2,40(r2)
   146b8:	10800104 	addi	r2,r2,4
   146bc:	1007883a 	mov	r3,r2
   146c0:	e0bffe17 	ldw	r2,-8(fp)
   146c4:	18800035 	stwio	r2,0(r3)
}
   146c8:	0001883a 	nop
   146cc:	e037883a 	mov	sp,fp
   146d0:	df000017 	ldw	fp,0(sp)
   146d4:	dec00104 	addi	sp,sp,4
   146d8:	f800283a 	ret

000146dc <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   146dc:	defffd04 	addi	sp,sp,-12
   146e0:	df000215 	stw	fp,8(sp)
   146e4:	df000204 	addi	fp,sp,8
   146e8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   146ec:	e0bfff17 	ldw	r2,-4(fp)
   146f0:	10800a17 	ldw	r2,40(r2)
   146f4:	10800104 	addi	r2,r2,4
   146f8:	10800037 	ldwio	r2,0(r2)
   146fc:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   14700:	e0fffe17 	ldw	r3,-8(fp)
   14704:	00bfff84 	movi	r2,-2
   14708:	1884703a 	and	r2,r3,r2
   1470c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   14710:	e0bfff17 	ldw	r2,-4(fp)
   14714:	10800a17 	ldw	r2,40(r2)
   14718:	10800104 	addi	r2,r2,4
   1471c:	1007883a 	mov	r3,r2
   14720:	e0bffe17 	ldw	r2,-8(fp)
   14724:	18800035 	stwio	r2,0(r3)
}
   14728:	0001883a 	nop
   1472c:	e037883a 	mov	sp,fp
   14730:	df000017 	ldw	fp,0(sp)
   14734:	dec00104 	addi	sp,sp,4
   14738:	f800283a 	ret

0001473c <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   1473c:	defffd04 	addi	sp,sp,-12
   14740:	df000215 	stw	fp,8(sp)
   14744:	df000204 	addi	fp,sp,8
   14748:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1474c:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   14750:	e0bfff17 	ldw	r2,-4(fp)
   14754:	10800a17 	ldw	r2,40(r2)
   14758:	10800084 	addi	r2,r2,2
   1475c:	1080002b 	ldhuio	r2,0(r2)
   14760:	10bfffcc 	andi	r2,r2,65535
   14764:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   14768:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1476c:	e037883a 	mov	sp,fp
   14770:	df000017 	ldw	fp,0(sp)
   14774:	dec00104 	addi	sp,sp,4
   14778:	f800283a 	ret

0001477c <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   1477c:	defffd04 	addi	sp,sp,-12
   14780:	df000215 	stw	fp,8(sp)
   14784:	df000204 	addi	fp,sp,8
   14788:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1478c:	e0bfff17 	ldw	r2,-4(fp)
   14790:	10800a17 	ldw	r2,40(r2)
   14794:	10800104 	addi	r2,r2,4
   14798:	10800037 	ldwio	r2,0(r2)
   1479c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   147a0:	e0bffe17 	ldw	r2,-8(fp)
   147a4:	1004d43a 	srli	r2,r2,16
}
   147a8:	e037883a 	mov	sp,fp
   147ac:	df000017 	ldw	fp,0(sp)
   147b0:	dec00104 	addi	sp,sp,4
   147b4:	f800283a 	ret

000147b8 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   147b8:	defffd04 	addi	sp,sp,-12
   147bc:	df000215 	stw	fp,8(sp)
   147c0:	df000204 	addi	fp,sp,8
   147c4:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   147c8:	e0bfff17 	ldw	r2,-4(fp)
   147cc:	1080800c 	andi	r2,r2,512
   147d0:	1004d27a 	srli	r2,r2,9
   147d4:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   147d8:	e0bffe17 	ldw	r2,-8(fp)
   147dc:	10000226 	beq	r2,zero,147e8 <alt_up_rs232_check_parity+0x30>
   147e0:	00bfffc4 	movi	r2,-1
   147e4:	00000106 	br	147ec <alt_up_rs232_check_parity+0x34>
   147e8:	0005883a 	mov	r2,zero
}
   147ec:	e037883a 	mov	sp,fp
   147f0:	df000017 	ldw	fp,0(sp)
   147f4:	dec00104 	addi	sp,sp,4
   147f8:	f800283a 	ret

000147fc <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   147fc:	defffd04 	addi	sp,sp,-12
   14800:	df000215 	stw	fp,8(sp)
   14804:	df000204 	addi	fp,sp,8
   14808:	e13ffe15 	stw	r4,-8(fp)
   1480c:	2805883a 	mov	r2,r5
   14810:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   14814:	e0bffe17 	ldw	r2,-8(fp)
   14818:	10800a17 	ldw	r2,40(r2)
   1481c:	1007883a 	mov	r3,r2
   14820:	e0bfff03 	ldbu	r2,-4(fp)
   14824:	18800035 	stwio	r2,0(r3)
	return 0;
   14828:	0005883a 	mov	r2,zero
}
   1482c:	e037883a 	mov	sp,fp
   14830:	df000017 	ldw	fp,0(sp)
   14834:	dec00104 	addi	sp,sp,4
   14838:	f800283a 	ret

0001483c <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   1483c:	defffa04 	addi	sp,sp,-24
   14840:	dfc00515 	stw	ra,20(sp)
   14844:	df000415 	stw	fp,16(sp)
   14848:	df000404 	addi	fp,sp,16
   1484c:	e13ffd15 	stw	r4,-12(fp)
   14850:	e17ffe15 	stw	r5,-8(fp)
   14854:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   14858:	e0bffd17 	ldw	r2,-12(fp)
   1485c:	10800a17 	ldw	r2,40(r2)
   14860:	10800037 	ldwio	r2,0(r2)
   14864:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   14868:	e0bffc17 	ldw	r2,-16(fp)
   1486c:	1007883a 	mov	r3,r2
   14870:	e0bffe17 	ldw	r2,-8(fp)
   14874:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   14878:	e13ffc17 	ldw	r4,-16(fp)
   1487c:	00147b80 	call	147b8 <alt_up_rs232_check_parity>
   14880:	1007883a 	mov	r3,r2
   14884:	e0bfff17 	ldw	r2,-4(fp)
   14888:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   1488c:	e0bffc17 	ldw	r2,-16(fp)
   14890:	10a0000c 	andi	r2,r2,32768
   14894:	1004d3fa 	srli	r2,r2,15
   14898:	10bfffc4 	addi	r2,r2,-1
}
   1489c:	e037883a 	mov	sp,fp
   148a0:	dfc00117 	ldw	ra,4(sp)
   148a4:	df000017 	ldw	fp,0(sp)
   148a8:	dec00204 	addi	sp,sp,8
   148ac:	f800283a 	ret

000148b0 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   148b0:	defff804 	addi	sp,sp,-32
   148b4:	dfc00715 	stw	ra,28(sp)
   148b8:	df000615 	stw	fp,24(sp)
   148bc:	df000604 	addi	fp,sp,24
   148c0:	e13ffd15 	stw	r4,-12(fp)
   148c4:	e17ffe15 	stw	r5,-8(fp)
   148c8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   148cc:	e0bffd17 	ldw	r2,-12(fp)
   148d0:	10800017 	ldw	r2,0(r2)
   148d4:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   148d8:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   148dc:	00000c06 	br	14910 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   148e0:	e0bffe17 	ldw	r2,-8(fp)
   148e4:	10c00044 	addi	r3,r2,1
   148e8:	e0fffe15 	stw	r3,-8(fp)
   148ec:	e0fffc04 	addi	r3,fp,-16
   148f0:	180d883a 	mov	r6,r3
   148f4:	100b883a 	mov	r5,r2
   148f8:	e13ffb17 	ldw	r4,-20(fp)
   148fc:	001483c0 	call	1483c <alt_up_rs232_read_data>
   14900:	1000081e 	bne	r2,zero,14924 <alt_up_rs232_read_fd+0x74>
			count++;
   14904:	e0bffa17 	ldw	r2,-24(fp)
   14908:	10800044 	addi	r2,r2,1
   1490c:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   14910:	e0bfff17 	ldw	r2,-4(fp)
   14914:	10ffffc4 	addi	r3,r2,-1
   14918:	e0ffff15 	stw	r3,-4(fp)
   1491c:	103ff01e 	bne	r2,zero,148e0 <_gp+0xffff531c>
   14920:	00000106 	br	14928 <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   14924:	0001883a 	nop
	}
	return count;
   14928:	e0bffa17 	ldw	r2,-24(fp)
}
   1492c:	e037883a 	mov	sp,fp
   14930:	dfc00117 	ldw	ra,4(sp)
   14934:	df000017 	ldw	fp,0(sp)
   14938:	dec00204 	addi	sp,sp,8
   1493c:	f800283a 	ret

00014940 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   14940:	defff904 	addi	sp,sp,-28
   14944:	dfc00615 	stw	ra,24(sp)
   14948:	df000515 	stw	fp,20(sp)
   1494c:	df000504 	addi	fp,sp,20
   14950:	e13ffd15 	stw	r4,-12(fp)
   14954:	e17ffe15 	stw	r5,-8(fp)
   14958:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1495c:	e0bffd17 	ldw	r2,-12(fp)
   14960:	10800017 	ldw	r2,0(r2)
   14964:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   14968:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1496c:	00000d06 	br	149a4 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   14970:	e0bffe17 	ldw	r2,-8(fp)
   14974:	10800003 	ldbu	r2,0(r2)
   14978:	10803fcc 	andi	r2,r2,255
   1497c:	100b883a 	mov	r5,r2
   14980:	e13ffc17 	ldw	r4,-16(fp)
   14984:	00147fc0 	call	147fc <alt_up_rs232_write_data>
   14988:	10000b1e 	bne	r2,zero,149b8 <alt_up_rs232_write_fd+0x78>
		{
			count++;
   1498c:	e0bffb17 	ldw	r2,-20(fp)
   14990:	10800044 	addi	r2,r2,1
   14994:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   14998:	e0bffe17 	ldw	r2,-8(fp)
   1499c:	10800044 	addi	r2,r2,1
   149a0:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   149a4:	e0bfff17 	ldw	r2,-4(fp)
   149a8:	10ffffc4 	addi	r3,r2,-1
   149ac:	e0ffff15 	stw	r3,-4(fp)
   149b0:	103fef1e 	bne	r2,zero,14970 <_gp+0xffff53ac>
   149b4:	00000106 	br	149bc <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
   149b8:	0001883a 	nop
	}
	return count;
   149bc:	e0bffb17 	ldw	r2,-20(fp)
}
   149c0:	e037883a 	mov	sp,fp
   149c4:	dfc00117 	ldw	ra,4(sp)
   149c8:	df000017 	ldw	fp,0(sp)
   149cc:	dec00204 	addi	sp,sp,8
   149d0:	f800283a 	ret

000149d4 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   149d4:	defffc04 	addi	sp,sp,-16
   149d8:	dfc00315 	stw	ra,12(sp)
   149dc:	df000215 	stw	fp,8(sp)
   149e0:	df000204 	addi	fp,sp,8
   149e4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   149e8:	d1600604 	addi	r5,gp,-32744
   149ec:	e13fff17 	ldw	r4,-4(fp)
   149f0:	0014cfc0 	call	14cfc <alt_find_dev>
   149f4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   149f8:	e0bffe17 	ldw	r2,-8(fp)
}
   149fc:	e037883a 	mov	sp,fp
   14a00:	dfc00117 	ldw	ra,4(sp)
   14a04:	df000017 	ldw	fp,0(sp)
   14a08:	dec00204 	addi	sp,sp,8
   14a0c:	f800283a 	ret

00014a10 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   14a10:	defff504 	addi	sp,sp,-44
   14a14:	df000a15 	stw	fp,40(sp)
   14a18:	df000a04 	addi	fp,sp,40
   14a1c:	e13ffc15 	stw	r4,-16(fp)
   14a20:	e17ffd15 	stw	r5,-12(fp)
   14a24:	e1bffe15 	stw	r6,-8(fp)
   14a28:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   14a2c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   14a30:	d0a6c717 	ldw	r2,-25828(gp)
  
  if (alt_ticks_per_second ())
   14a34:	10003c26 	beq	r2,zero,14b28 <alt_alarm_start+0x118>
  {
    if (alarm)
   14a38:	e0bffc17 	ldw	r2,-16(fp)
   14a3c:	10003826 	beq	r2,zero,14b20 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   14a40:	e0bffc17 	ldw	r2,-16(fp)
   14a44:	e0fffe17 	ldw	r3,-8(fp)
   14a48:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   14a4c:	e0bffc17 	ldw	r2,-16(fp)
   14a50:	e0ffff17 	ldw	r3,-4(fp)
   14a54:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14a58:	0005303a 	rdctl	r2,status
   14a5c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14a60:	e0fff917 	ldw	r3,-28(fp)
   14a64:	00bfff84 	movi	r2,-2
   14a68:	1884703a 	and	r2,r3,r2
   14a6c:	1001703a 	wrctl	status,r2
  
  return context;
   14a70:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   14a74:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   14a78:	d0a6c817 	ldw	r2,-25824(gp)
      
      current_nticks = alt_nticks();
   14a7c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   14a80:	e0fffd17 	ldw	r3,-12(fp)
   14a84:	e0bff617 	ldw	r2,-40(fp)
   14a88:	1885883a 	add	r2,r3,r2
   14a8c:	10c00044 	addi	r3,r2,1
   14a90:	e0bffc17 	ldw	r2,-16(fp)
   14a94:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   14a98:	e0bffc17 	ldw	r2,-16(fp)
   14a9c:	10c00217 	ldw	r3,8(r2)
   14aa0:	e0bff617 	ldw	r2,-40(fp)
   14aa4:	1880042e 	bgeu	r3,r2,14ab8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   14aa8:	e0bffc17 	ldw	r2,-16(fp)
   14aac:	00c00044 	movi	r3,1
   14ab0:	10c00405 	stb	r3,16(r2)
   14ab4:	00000206 	br	14ac0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   14ab8:	e0bffc17 	ldw	r2,-16(fp)
   14abc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   14ac0:	e0bffc17 	ldw	r2,-16(fp)
   14ac4:	d0e00c04 	addi	r3,gp,-32720
   14ac8:	e0fffa15 	stw	r3,-24(fp)
   14acc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14ad0:	e0bffb17 	ldw	r2,-20(fp)
   14ad4:	e0fffa17 	ldw	r3,-24(fp)
   14ad8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   14adc:	e0bffa17 	ldw	r2,-24(fp)
   14ae0:	10c00017 	ldw	r3,0(r2)
   14ae4:	e0bffb17 	ldw	r2,-20(fp)
   14ae8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   14aec:	e0bffa17 	ldw	r2,-24(fp)
   14af0:	10800017 	ldw	r2,0(r2)
   14af4:	e0fffb17 	ldw	r3,-20(fp)
   14af8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   14afc:	e0bffa17 	ldw	r2,-24(fp)
   14b00:	e0fffb17 	ldw	r3,-20(fp)
   14b04:	10c00015 	stw	r3,0(r2)
   14b08:	e0bff817 	ldw	r2,-32(fp)
   14b0c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14b10:	e0bff717 	ldw	r2,-36(fp)
   14b14:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   14b18:	0005883a 	mov	r2,zero
   14b1c:	00000306 	br	14b2c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   14b20:	00bffa84 	movi	r2,-22
   14b24:	00000106 	br	14b2c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   14b28:	00bfde84 	movi	r2,-134
  }
}
   14b2c:	e037883a 	mov	sp,fp
   14b30:	df000017 	ldw	fp,0(sp)
   14b34:	dec00104 	addi	sp,sp,4
   14b38:	f800283a 	ret

00014b3c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   14b3c:	deffff04 	addi	sp,sp,-4
   14b40:	df000015 	stw	fp,0(sp)
   14b44:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   14b48:	0001883a 	nop
   14b4c:	e037883a 	mov	sp,fp
   14b50:	df000017 	ldw	fp,0(sp)
   14b54:	dec00104 	addi	sp,sp,4
   14b58:	f800283a 	ret

00014b5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14b5c:	defffe04 	addi	sp,sp,-8
   14b60:	dfc00115 	stw	ra,4(sp)
   14b64:	df000015 	stw	fp,0(sp)
   14b68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14b6c:	d0a00917 	ldw	r2,-32732(gp)
   14b70:	10000326 	beq	r2,zero,14b80 <alt_get_errno+0x24>
   14b74:	d0a00917 	ldw	r2,-32732(gp)
   14b78:	103ee83a 	callr	r2
   14b7c:	00000106 	br	14b84 <alt_get_errno+0x28>
   14b80:	d0a6c204 	addi	r2,gp,-25848
}
   14b84:	e037883a 	mov	sp,fp
   14b88:	dfc00117 	ldw	ra,4(sp)
   14b8c:	df000017 	ldw	fp,0(sp)
   14b90:	dec00204 	addi	sp,sp,8
   14b94:	f800283a 	ret

00014b98 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   14b98:	defffa04 	addi	sp,sp,-24
   14b9c:	dfc00515 	stw	ra,20(sp)
   14ba0:	df000415 	stw	fp,16(sp)
   14ba4:	df000404 	addi	fp,sp,16
   14ba8:	e13ffe15 	stw	r4,-8(fp)
   14bac:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   14bb0:	e0bffe17 	ldw	r2,-8(fp)
   14bb4:	10000326 	beq	r2,zero,14bc4 <alt_dev_llist_insert+0x2c>
   14bb8:	e0bffe17 	ldw	r2,-8(fp)
   14bbc:	10800217 	ldw	r2,8(r2)
   14bc0:	1000061e 	bne	r2,zero,14bdc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   14bc4:	0014b5c0 	call	14b5c <alt_get_errno>
   14bc8:	1007883a 	mov	r3,r2
   14bcc:	00800584 	movi	r2,22
   14bd0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   14bd4:	00bffa84 	movi	r2,-22
   14bd8:	00001306 	br	14c28 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   14bdc:	e0bffe17 	ldw	r2,-8(fp)
   14be0:	e0ffff17 	ldw	r3,-4(fp)
   14be4:	e0fffc15 	stw	r3,-16(fp)
   14be8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14bec:	e0bffd17 	ldw	r2,-12(fp)
   14bf0:	e0fffc17 	ldw	r3,-16(fp)
   14bf4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   14bf8:	e0bffc17 	ldw	r2,-16(fp)
   14bfc:	10c00017 	ldw	r3,0(r2)
   14c00:	e0bffd17 	ldw	r2,-12(fp)
   14c04:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   14c08:	e0bffc17 	ldw	r2,-16(fp)
   14c0c:	10800017 	ldw	r2,0(r2)
   14c10:	e0fffd17 	ldw	r3,-12(fp)
   14c14:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   14c18:	e0bffc17 	ldw	r2,-16(fp)
   14c1c:	e0fffd17 	ldw	r3,-12(fp)
   14c20:	10c00015 	stw	r3,0(r2)

  return 0;  
   14c24:	0005883a 	mov	r2,zero
}
   14c28:	e037883a 	mov	sp,fp
   14c2c:	dfc00117 	ldw	ra,4(sp)
   14c30:	df000017 	ldw	fp,0(sp)
   14c34:	dec00204 	addi	sp,sp,8
   14c38:	f800283a 	ret

00014c3c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   14c3c:	defffd04 	addi	sp,sp,-12
   14c40:	dfc00215 	stw	ra,8(sp)
   14c44:	df000115 	stw	fp,4(sp)
   14c48:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   14c4c:	00800074 	movhi	r2,1
   14c50:	1096b404 	addi	r2,r2,23248
   14c54:	e0bfff15 	stw	r2,-4(fp)
   14c58:	00000606 	br	14c74 <_do_ctors+0x38>
        (*ctor) (); 
   14c5c:	e0bfff17 	ldw	r2,-4(fp)
   14c60:	10800017 	ldw	r2,0(r2)
   14c64:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   14c68:	e0bfff17 	ldw	r2,-4(fp)
   14c6c:	10bfff04 	addi	r2,r2,-4
   14c70:	e0bfff15 	stw	r2,-4(fp)
   14c74:	e0ffff17 	ldw	r3,-4(fp)
   14c78:	00800074 	movhi	r2,1
   14c7c:	1096b504 	addi	r2,r2,23252
   14c80:	18bff62e 	bgeu	r3,r2,14c5c <_gp+0xffff5698>
        (*ctor) (); 
}
   14c84:	0001883a 	nop
   14c88:	e037883a 	mov	sp,fp
   14c8c:	dfc00117 	ldw	ra,4(sp)
   14c90:	df000017 	ldw	fp,0(sp)
   14c94:	dec00204 	addi	sp,sp,8
   14c98:	f800283a 	ret

00014c9c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   14c9c:	defffd04 	addi	sp,sp,-12
   14ca0:	dfc00215 	stw	ra,8(sp)
   14ca4:	df000115 	stw	fp,4(sp)
   14ca8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   14cac:	00800074 	movhi	r2,1
   14cb0:	1096b404 	addi	r2,r2,23248
   14cb4:	e0bfff15 	stw	r2,-4(fp)
   14cb8:	00000606 	br	14cd4 <_do_dtors+0x38>
        (*dtor) (); 
   14cbc:	e0bfff17 	ldw	r2,-4(fp)
   14cc0:	10800017 	ldw	r2,0(r2)
   14cc4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   14cc8:	e0bfff17 	ldw	r2,-4(fp)
   14ccc:	10bfff04 	addi	r2,r2,-4
   14cd0:	e0bfff15 	stw	r2,-4(fp)
   14cd4:	e0ffff17 	ldw	r3,-4(fp)
   14cd8:	00800074 	movhi	r2,1
   14cdc:	1096b504 	addi	r2,r2,23252
   14ce0:	18bff62e 	bgeu	r3,r2,14cbc <_gp+0xffff56f8>
        (*dtor) (); 
}
   14ce4:	0001883a 	nop
   14ce8:	e037883a 	mov	sp,fp
   14cec:	dfc00117 	ldw	ra,4(sp)
   14cf0:	df000017 	ldw	fp,0(sp)
   14cf4:	dec00204 	addi	sp,sp,8
   14cf8:	f800283a 	ret

00014cfc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   14cfc:	defffa04 	addi	sp,sp,-24
   14d00:	dfc00515 	stw	ra,20(sp)
   14d04:	df000415 	stw	fp,16(sp)
   14d08:	df000404 	addi	fp,sp,16
   14d0c:	e13ffe15 	stw	r4,-8(fp)
   14d10:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   14d14:	e0bfff17 	ldw	r2,-4(fp)
   14d18:	10800017 	ldw	r2,0(r2)
   14d1c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   14d20:	e13ffe17 	ldw	r4,-8(fp)
   14d24:	00103780 	call	10378 <strlen>
   14d28:	10800044 	addi	r2,r2,1
   14d2c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   14d30:	00000d06 	br	14d68 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   14d34:	e0bffc17 	ldw	r2,-16(fp)
   14d38:	10800217 	ldw	r2,8(r2)
   14d3c:	e0fffd17 	ldw	r3,-12(fp)
   14d40:	180d883a 	mov	r6,r3
   14d44:	e17ffe17 	ldw	r5,-8(fp)
   14d48:	1009883a 	mov	r4,r2
   14d4c:	001578c0 	call	1578c <memcmp>
   14d50:	1000021e 	bne	r2,zero,14d5c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   14d54:	e0bffc17 	ldw	r2,-16(fp)
   14d58:	00000706 	br	14d78 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   14d5c:	e0bffc17 	ldw	r2,-16(fp)
   14d60:	10800017 	ldw	r2,0(r2)
   14d64:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   14d68:	e0fffc17 	ldw	r3,-16(fp)
   14d6c:	e0bfff17 	ldw	r2,-4(fp)
   14d70:	18bff01e 	bne	r3,r2,14d34 <_gp+0xffff5770>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   14d74:	0005883a 	mov	r2,zero
}
   14d78:	e037883a 	mov	sp,fp
   14d7c:	dfc00117 	ldw	ra,4(sp)
   14d80:	df000017 	ldw	fp,0(sp)
   14d84:	dec00204 	addi	sp,sp,8
   14d88:	f800283a 	ret

00014d8c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   14d8c:	deffff04 	addi	sp,sp,-4
   14d90:	df000015 	stw	fp,0(sp)
   14d94:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   14d98:	0001883a 	nop
   14d9c:	e037883a 	mov	sp,fp
   14da0:	df000017 	ldw	fp,0(sp)
   14da4:	dec00104 	addi	sp,sp,4
   14da8:	f800283a 	ret

00014dac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   14dac:	defff804 	addi	sp,sp,-32
   14db0:	dfc00715 	stw	ra,28(sp)
   14db4:	df000615 	stw	fp,24(sp)
   14db8:	dc000515 	stw	r16,20(sp)
   14dbc:	df000604 	addi	fp,sp,24
   14dc0:	e13ffb15 	stw	r4,-20(fp)
   14dc4:	e17ffc15 	stw	r5,-16(fp)
   14dc8:	e1bffd15 	stw	r6,-12(fp)
   14dcc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   14dd0:	e1bffe17 	ldw	r6,-8(fp)
   14dd4:	e17ffd17 	ldw	r5,-12(fp)
   14dd8:	e13ffc17 	ldw	r4,-16(fp)
   14ddc:	00151b40 	call	151b4 <open>
   14de0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   14de4:	e0bffa17 	ldw	r2,-24(fp)
   14de8:	10002216 	blt	r2,zero,14e74 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   14dec:	04000074 	movhi	r16,1
   14df0:	8418e304 	addi	r16,r16,25484
   14df4:	e0bffa17 	ldw	r2,-24(fp)
   14df8:	01400304 	movi	r5,12
   14dfc:	1009883a 	mov	r4,r2
   14e00:	00130880 	call	13088 <__mulsi3>
   14e04:	8085883a 	add	r2,r16,r2
   14e08:	10c00017 	ldw	r3,0(r2)
   14e0c:	e0bffb17 	ldw	r2,-20(fp)
   14e10:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   14e14:	04000074 	movhi	r16,1
   14e18:	8418e304 	addi	r16,r16,25484
   14e1c:	e0bffa17 	ldw	r2,-24(fp)
   14e20:	01400304 	movi	r5,12
   14e24:	1009883a 	mov	r4,r2
   14e28:	00130880 	call	13088 <__mulsi3>
   14e2c:	8085883a 	add	r2,r16,r2
   14e30:	10800104 	addi	r2,r2,4
   14e34:	10c00017 	ldw	r3,0(r2)
   14e38:	e0bffb17 	ldw	r2,-20(fp)
   14e3c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   14e40:	04000074 	movhi	r16,1
   14e44:	8418e304 	addi	r16,r16,25484
   14e48:	e0bffa17 	ldw	r2,-24(fp)
   14e4c:	01400304 	movi	r5,12
   14e50:	1009883a 	mov	r4,r2
   14e54:	00130880 	call	13088 <__mulsi3>
   14e58:	8085883a 	add	r2,r16,r2
   14e5c:	10800204 	addi	r2,r2,8
   14e60:	10c00017 	ldw	r3,0(r2)
   14e64:	e0bffb17 	ldw	r2,-20(fp)
   14e68:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   14e6c:	e13ffa17 	ldw	r4,-24(fp)
   14e70:	00137d40 	call	137d4 <alt_release_fd>
  }
} 
   14e74:	0001883a 	nop
   14e78:	e6ffff04 	addi	sp,fp,-4
   14e7c:	dfc00217 	ldw	ra,8(sp)
   14e80:	df000117 	ldw	fp,4(sp)
   14e84:	dc000017 	ldw	r16,0(sp)
   14e88:	dec00304 	addi	sp,sp,12
   14e8c:	f800283a 	ret

00014e90 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   14e90:	defffb04 	addi	sp,sp,-20
   14e94:	dfc00415 	stw	ra,16(sp)
   14e98:	df000315 	stw	fp,12(sp)
   14e9c:	df000304 	addi	fp,sp,12
   14ea0:	e13ffd15 	stw	r4,-12(fp)
   14ea4:	e17ffe15 	stw	r5,-8(fp)
   14ea8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   14eac:	01c07fc4 	movi	r7,511
   14eb0:	01800044 	movi	r6,1
   14eb4:	e17ffd17 	ldw	r5,-12(fp)
   14eb8:	01000074 	movhi	r4,1
   14ebc:	2118e604 	addi	r4,r4,25496
   14ec0:	0014dac0 	call	14dac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   14ec4:	01c07fc4 	movi	r7,511
   14ec8:	000d883a 	mov	r6,zero
   14ecc:	e17ffe17 	ldw	r5,-8(fp)
   14ed0:	01000074 	movhi	r4,1
   14ed4:	2118e304 	addi	r4,r4,25484
   14ed8:	0014dac0 	call	14dac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   14edc:	01c07fc4 	movi	r7,511
   14ee0:	01800044 	movi	r6,1
   14ee4:	e17fff17 	ldw	r5,-4(fp)
   14ee8:	01000074 	movhi	r4,1
   14eec:	2118e904 	addi	r4,r4,25508
   14ef0:	0014dac0 	call	14dac <alt_open_fd>
}  
   14ef4:	0001883a 	nop
   14ef8:	e037883a 	mov	sp,fp
   14efc:	dfc00117 	ldw	ra,4(sp)
   14f00:	df000017 	ldw	fp,0(sp)
   14f04:	dec00204 	addi	sp,sp,8
   14f08:	f800283a 	ret

00014f0c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   14f0c:	defff004 	addi	sp,sp,-64
   14f10:	df000f15 	stw	fp,60(sp)
   14f14:	df000f04 	addi	fp,sp,60
   14f18:	e13ffd15 	stw	r4,-12(fp)
   14f1c:	e17ffe15 	stw	r5,-8(fp)
   14f20:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   14f24:	00bffa84 	movi	r2,-22
   14f28:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   14f2c:	e0bffd17 	ldw	r2,-12(fp)
   14f30:	10800828 	cmpgeui	r2,r2,32
   14f34:	1000501e 	bne	r2,zero,15078 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14f38:	0005303a 	rdctl	r2,status
   14f3c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f40:	e0fff617 	ldw	r3,-40(fp)
   14f44:	00bfff84 	movi	r2,-2
   14f48:	1884703a 	and	r2,r3,r2
   14f4c:	1001703a 	wrctl	status,r2
  
  return context;
   14f50:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   14f54:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   14f58:	008000b4 	movhi	r2,2
   14f5c:	10a44504 	addi	r2,r2,-28396
   14f60:	e0fffd17 	ldw	r3,-12(fp)
   14f64:	180690fa 	slli	r3,r3,3
   14f68:	10c5883a 	add	r2,r2,r3
   14f6c:	e0ffff17 	ldw	r3,-4(fp)
   14f70:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   14f74:	008000b4 	movhi	r2,2
   14f78:	10a44504 	addi	r2,r2,-28396
   14f7c:	e0fffd17 	ldw	r3,-12(fp)
   14f80:	180690fa 	slli	r3,r3,3
   14f84:	10c5883a 	add	r2,r2,r3
   14f88:	10800104 	addi	r2,r2,4
   14f8c:	e0fffe17 	ldw	r3,-8(fp)
   14f90:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   14f94:	e0bfff17 	ldw	r2,-4(fp)
   14f98:	10001926 	beq	r2,zero,15000 <alt_irq_register+0xf4>
   14f9c:	e0bffd17 	ldw	r2,-12(fp)
   14fa0:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14fa4:	0005303a 	rdctl	r2,status
   14fa8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14fac:	e0fff717 	ldw	r3,-36(fp)
   14fb0:	00bfff84 	movi	r2,-2
   14fb4:	1884703a 	and	r2,r3,r2
   14fb8:	1001703a 	wrctl	status,r2
  
  return context;
   14fbc:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   14fc0:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   14fc4:	00c00044 	movi	r3,1
   14fc8:	e0bff217 	ldw	r2,-56(fp)
   14fcc:	1884983a 	sll	r2,r3,r2
   14fd0:	1007883a 	mov	r3,r2
   14fd4:	d0a6c617 	ldw	r2,-25832(gp)
   14fd8:	1884b03a 	or	r2,r3,r2
   14fdc:	d0a6c615 	stw	r2,-25832(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14fe0:	d0a6c617 	ldw	r2,-25832(gp)
   14fe4:	100170fa 	wrctl	ienable,r2
   14fe8:	e0bff817 	ldw	r2,-32(fp)
   14fec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14ff0:	e0bff917 	ldw	r2,-28(fp)
   14ff4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   14ff8:	0005883a 	mov	r2,zero
   14ffc:	00001906 	br	15064 <alt_irq_register+0x158>
   15000:	e0bffd17 	ldw	r2,-12(fp)
   15004:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15008:	0005303a 	rdctl	r2,status
   1500c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15010:	e0fffa17 	ldw	r3,-24(fp)
   15014:	00bfff84 	movi	r2,-2
   15018:	1884703a 	and	r2,r3,r2
   1501c:	1001703a 	wrctl	status,r2
  
  return context;
   15020:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   15024:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   15028:	00c00044 	movi	r3,1
   1502c:	e0bff417 	ldw	r2,-48(fp)
   15030:	1884983a 	sll	r2,r3,r2
   15034:	0084303a 	nor	r2,zero,r2
   15038:	1007883a 	mov	r3,r2
   1503c:	d0a6c617 	ldw	r2,-25832(gp)
   15040:	1884703a 	and	r2,r3,r2
   15044:	d0a6c615 	stw	r2,-25832(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   15048:	d0a6c617 	ldw	r2,-25832(gp)
   1504c:	100170fa 	wrctl	ienable,r2
   15050:	e0bffb17 	ldw	r2,-20(fp)
   15054:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15058:	e0bffc17 	ldw	r2,-16(fp)
   1505c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   15060:	0005883a 	mov	r2,zero
   15064:	e0bff115 	stw	r2,-60(fp)
   15068:	e0bff317 	ldw	r2,-52(fp)
   1506c:	e0bff515 	stw	r2,-44(fp)
   15070:	e0bff517 	ldw	r2,-44(fp)
   15074:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   15078:	e0bff117 	ldw	r2,-60(fp)
}
   1507c:	e037883a 	mov	sp,fp
   15080:	df000017 	ldw	fp,0(sp)
   15084:	dec00104 	addi	sp,sp,4
   15088:	f800283a 	ret

0001508c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1508c:	defffe04 	addi	sp,sp,-8
   15090:	dfc00115 	stw	ra,4(sp)
   15094:	df000015 	stw	fp,0(sp)
   15098:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1509c:	d0a00917 	ldw	r2,-32732(gp)
   150a0:	10000326 	beq	r2,zero,150b0 <alt_get_errno+0x24>
   150a4:	d0a00917 	ldw	r2,-32732(gp)
   150a8:	103ee83a 	callr	r2
   150ac:	00000106 	br	150b4 <alt_get_errno+0x28>
   150b0:	d0a6c204 	addi	r2,gp,-25848
}
   150b4:	e037883a 	mov	sp,fp
   150b8:	dfc00117 	ldw	ra,4(sp)
   150bc:	df000017 	ldw	fp,0(sp)
   150c0:	dec00204 	addi	sp,sp,8
   150c4:	f800283a 	ret

000150c8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   150c8:	defffb04 	addi	sp,sp,-20
   150cc:	dfc00415 	stw	ra,16(sp)
   150d0:	df000315 	stw	fp,12(sp)
   150d4:	dc000215 	stw	r16,8(sp)
   150d8:	df000304 	addi	fp,sp,12
   150dc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   150e0:	e0bffe17 	ldw	r2,-8(fp)
   150e4:	10800217 	ldw	r2,8(r2)
   150e8:	10d00034 	orhi	r3,r2,16384
   150ec:	e0bffe17 	ldw	r2,-8(fp)
   150f0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   150f4:	e03ffd15 	stw	zero,-12(fp)
   150f8:	00002306 	br	15188 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   150fc:	04000074 	movhi	r16,1
   15100:	8418e304 	addi	r16,r16,25484
   15104:	e0bffd17 	ldw	r2,-12(fp)
   15108:	01400304 	movi	r5,12
   1510c:	1009883a 	mov	r4,r2
   15110:	00130880 	call	13088 <__mulsi3>
   15114:	8085883a 	add	r2,r16,r2
   15118:	10c00017 	ldw	r3,0(r2)
   1511c:	e0bffe17 	ldw	r2,-8(fp)
   15120:	10800017 	ldw	r2,0(r2)
   15124:	1880151e 	bne	r3,r2,1517c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   15128:	04000074 	movhi	r16,1
   1512c:	8418e304 	addi	r16,r16,25484
   15130:	e0bffd17 	ldw	r2,-12(fp)
   15134:	01400304 	movi	r5,12
   15138:	1009883a 	mov	r4,r2
   1513c:	00130880 	call	13088 <__mulsi3>
   15140:	8085883a 	add	r2,r16,r2
   15144:	10800204 	addi	r2,r2,8
   15148:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1514c:	10000b0e 	bge	r2,zero,1517c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   15150:	01400304 	movi	r5,12
   15154:	e13ffd17 	ldw	r4,-12(fp)
   15158:	00130880 	call	13088 <__mulsi3>
   1515c:	1007883a 	mov	r3,r2
   15160:	00800074 	movhi	r2,1
   15164:	1098e304 	addi	r2,r2,25484
   15168:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1516c:	e0bffe17 	ldw	r2,-8(fp)
   15170:	18800226 	beq	r3,r2,1517c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   15174:	00bffcc4 	movi	r2,-13
   15178:	00000806 	br	1519c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1517c:	e0bffd17 	ldw	r2,-12(fp)
   15180:	10800044 	addi	r2,r2,1
   15184:	e0bffd15 	stw	r2,-12(fp)
   15188:	d0a00817 	ldw	r2,-32736(gp)
   1518c:	1007883a 	mov	r3,r2
   15190:	e0bffd17 	ldw	r2,-12(fp)
   15194:	18bfd92e 	bgeu	r3,r2,150fc <_gp+0xffff5b38>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   15198:	0005883a 	mov	r2,zero
}
   1519c:	e6ffff04 	addi	sp,fp,-4
   151a0:	dfc00217 	ldw	ra,8(sp)
   151a4:	df000117 	ldw	fp,4(sp)
   151a8:	dc000017 	ldw	r16,0(sp)
   151ac:	dec00304 	addi	sp,sp,12
   151b0:	f800283a 	ret

000151b4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   151b4:	defff604 	addi	sp,sp,-40
   151b8:	dfc00915 	stw	ra,36(sp)
   151bc:	df000815 	stw	fp,32(sp)
   151c0:	df000804 	addi	fp,sp,32
   151c4:	e13ffd15 	stw	r4,-12(fp)
   151c8:	e17ffe15 	stw	r5,-8(fp)
   151cc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   151d0:	00bfffc4 	movi	r2,-1
   151d4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   151d8:	00bffb44 	movi	r2,-19
   151dc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   151e0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   151e4:	d1600604 	addi	r5,gp,-32744
   151e8:	e13ffd17 	ldw	r4,-12(fp)
   151ec:	0014cfc0 	call	14cfc <alt_find_dev>
   151f0:	e0bff815 	stw	r2,-32(fp)
   151f4:	e0bff817 	ldw	r2,-32(fp)
   151f8:	1000051e 	bne	r2,zero,15210 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   151fc:	e13ffd17 	ldw	r4,-12(fp)
   15200:	00154d80 	call	154d8 <alt_find_file>
   15204:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   15208:	00800044 	movi	r2,1
   1520c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   15210:	e0bff817 	ldw	r2,-32(fp)
   15214:	10002b26 	beq	r2,zero,152c4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   15218:	e13ff817 	ldw	r4,-32(fp)
   1521c:	00155e00 	call	155e0 <alt_get_fd>
   15220:	e0bff915 	stw	r2,-28(fp)
   15224:	e0bff917 	ldw	r2,-28(fp)
   15228:	1000030e 	bge	r2,zero,15238 <open+0x84>
    {
      status = index;
   1522c:	e0bff917 	ldw	r2,-28(fp)
   15230:	e0bffa15 	stw	r2,-24(fp)
   15234:	00002506 	br	152cc <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   15238:	01400304 	movi	r5,12
   1523c:	e13ff917 	ldw	r4,-28(fp)
   15240:	00130880 	call	13088 <__mulsi3>
   15244:	1007883a 	mov	r3,r2
   15248:	00800074 	movhi	r2,1
   1524c:	1098e304 	addi	r2,r2,25484
   15250:	1885883a 	add	r2,r3,r2
   15254:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   15258:	e0fffe17 	ldw	r3,-8(fp)
   1525c:	00900034 	movhi	r2,16384
   15260:	10bfffc4 	addi	r2,r2,-1
   15264:	1886703a 	and	r3,r3,r2
   15268:	e0bffc17 	ldw	r2,-16(fp)
   1526c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   15270:	e0bffb17 	ldw	r2,-20(fp)
   15274:	1000051e 	bne	r2,zero,1528c <open+0xd8>
   15278:	e13ffc17 	ldw	r4,-16(fp)
   1527c:	00150c80 	call	150c8 <alt_file_locked>
   15280:	e0bffa15 	stw	r2,-24(fp)
   15284:	e0bffa17 	ldw	r2,-24(fp)
   15288:	10001016 	blt	r2,zero,152cc <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1528c:	e0bff817 	ldw	r2,-32(fp)
   15290:	10800317 	ldw	r2,12(r2)
   15294:	10000826 	beq	r2,zero,152b8 <open+0x104>
   15298:	e0bff817 	ldw	r2,-32(fp)
   1529c:	10800317 	ldw	r2,12(r2)
   152a0:	e1ffff17 	ldw	r7,-4(fp)
   152a4:	e1bffe17 	ldw	r6,-8(fp)
   152a8:	e17ffd17 	ldw	r5,-12(fp)
   152ac:	e13ffc17 	ldw	r4,-16(fp)
   152b0:	103ee83a 	callr	r2
   152b4:	00000106 	br	152bc <open+0x108>
   152b8:	0005883a 	mov	r2,zero
   152bc:	e0bffa15 	stw	r2,-24(fp)
   152c0:	00000206 	br	152cc <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   152c4:	00bffb44 	movi	r2,-19
   152c8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   152cc:	e0bffa17 	ldw	r2,-24(fp)
   152d0:	1000090e 	bge	r2,zero,152f8 <open+0x144>
  {
    alt_release_fd (index);  
   152d4:	e13ff917 	ldw	r4,-28(fp)
   152d8:	00137d40 	call	137d4 <alt_release_fd>
    ALT_ERRNO = -status;
   152dc:	001508c0 	call	1508c <alt_get_errno>
   152e0:	1007883a 	mov	r3,r2
   152e4:	e0bffa17 	ldw	r2,-24(fp)
   152e8:	0085c83a 	sub	r2,zero,r2
   152ec:	18800015 	stw	r2,0(r3)
    return -1;
   152f0:	00bfffc4 	movi	r2,-1
   152f4:	00000106 	br	152fc <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   152f8:	e0bff917 	ldw	r2,-28(fp)
}
   152fc:	e037883a 	mov	sp,fp
   15300:	dfc00117 	ldw	ra,4(sp)
   15304:	df000017 	ldw	fp,0(sp)
   15308:	dec00204 	addi	sp,sp,8
   1530c:	f800283a 	ret

00015310 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   15310:	defffa04 	addi	sp,sp,-24
   15314:	df000515 	stw	fp,20(sp)
   15318:	df000504 	addi	fp,sp,20
   1531c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15320:	0005303a 	rdctl	r2,status
   15324:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15328:	e0fffc17 	ldw	r3,-16(fp)
   1532c:	00bfff84 	movi	r2,-2
   15330:	1884703a 	and	r2,r3,r2
   15334:	1001703a 	wrctl	status,r2
  
  return context;
   15338:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1533c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   15340:	e0bfff17 	ldw	r2,-4(fp)
   15344:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   15348:	e0bffd17 	ldw	r2,-12(fp)
   1534c:	10800017 	ldw	r2,0(r2)
   15350:	e0fffd17 	ldw	r3,-12(fp)
   15354:	18c00117 	ldw	r3,4(r3)
   15358:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1535c:	e0bffd17 	ldw	r2,-12(fp)
   15360:	10800117 	ldw	r2,4(r2)
   15364:	e0fffd17 	ldw	r3,-12(fp)
   15368:	18c00017 	ldw	r3,0(r3)
   1536c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   15370:	e0bffd17 	ldw	r2,-12(fp)
   15374:	e0fffd17 	ldw	r3,-12(fp)
   15378:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1537c:	e0bffd17 	ldw	r2,-12(fp)
   15380:	e0fffd17 	ldw	r3,-12(fp)
   15384:	10c00015 	stw	r3,0(r2)
   15388:	e0bffb17 	ldw	r2,-20(fp)
   1538c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15390:	e0bffe17 	ldw	r2,-8(fp)
   15394:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   15398:	0001883a 	nop
   1539c:	e037883a 	mov	sp,fp
   153a0:	df000017 	ldw	fp,0(sp)
   153a4:	dec00104 	addi	sp,sp,4
   153a8:	f800283a 	ret

000153ac <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   153ac:	defffb04 	addi	sp,sp,-20
   153b0:	dfc00415 	stw	ra,16(sp)
   153b4:	df000315 	stw	fp,12(sp)
   153b8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   153bc:	d0a00c17 	ldw	r2,-32720(gp)
   153c0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   153c4:	d0a6c817 	ldw	r2,-25824(gp)
   153c8:	10800044 	addi	r2,r2,1
   153cc:	d0a6c815 	stw	r2,-25824(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   153d0:	00002e06 	br	1548c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   153d4:	e0bffd17 	ldw	r2,-12(fp)
   153d8:	10800017 	ldw	r2,0(r2)
   153dc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   153e0:	e0bffd17 	ldw	r2,-12(fp)
   153e4:	10800403 	ldbu	r2,16(r2)
   153e8:	10803fcc 	andi	r2,r2,255
   153ec:	10000426 	beq	r2,zero,15400 <alt_tick+0x54>
   153f0:	d0a6c817 	ldw	r2,-25824(gp)
   153f4:	1000021e 	bne	r2,zero,15400 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   153f8:	e0bffd17 	ldw	r2,-12(fp)
   153fc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   15400:	e0bffd17 	ldw	r2,-12(fp)
   15404:	10800217 	ldw	r2,8(r2)
   15408:	d0e6c817 	ldw	r3,-25824(gp)
   1540c:	18801d36 	bltu	r3,r2,15484 <alt_tick+0xd8>
   15410:	e0bffd17 	ldw	r2,-12(fp)
   15414:	10800403 	ldbu	r2,16(r2)
   15418:	10803fcc 	andi	r2,r2,255
   1541c:	1000191e 	bne	r2,zero,15484 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   15420:	e0bffd17 	ldw	r2,-12(fp)
   15424:	10800317 	ldw	r2,12(r2)
   15428:	e0fffd17 	ldw	r3,-12(fp)
   1542c:	18c00517 	ldw	r3,20(r3)
   15430:	1809883a 	mov	r4,r3
   15434:	103ee83a 	callr	r2
   15438:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1543c:	e0bfff17 	ldw	r2,-4(fp)
   15440:	1000031e 	bne	r2,zero,15450 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   15444:	e13ffd17 	ldw	r4,-12(fp)
   15448:	00153100 	call	15310 <alt_alarm_stop>
   1544c:	00000d06 	br	15484 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   15450:	e0bffd17 	ldw	r2,-12(fp)
   15454:	10c00217 	ldw	r3,8(r2)
   15458:	e0bfff17 	ldw	r2,-4(fp)
   1545c:	1887883a 	add	r3,r3,r2
   15460:	e0bffd17 	ldw	r2,-12(fp)
   15464:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   15468:	e0bffd17 	ldw	r2,-12(fp)
   1546c:	10c00217 	ldw	r3,8(r2)
   15470:	d0a6c817 	ldw	r2,-25824(gp)
   15474:	1880032e 	bgeu	r3,r2,15484 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   15478:	e0bffd17 	ldw	r2,-12(fp)
   1547c:	00c00044 	movi	r3,1
   15480:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   15484:	e0bffe17 	ldw	r2,-8(fp)
   15488:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1548c:	e0fffd17 	ldw	r3,-12(fp)
   15490:	d0a00c04 	addi	r2,gp,-32720
   15494:	18bfcf1e 	bne	r3,r2,153d4 <_gp+0xffff5e10>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   15498:	0001883a 	nop
}
   1549c:	0001883a 	nop
   154a0:	e037883a 	mov	sp,fp
   154a4:	dfc00117 	ldw	ra,4(sp)
   154a8:	df000017 	ldw	fp,0(sp)
   154ac:	dec00204 	addi	sp,sp,8
   154b0:	f800283a 	ret

000154b4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   154b4:	deffff04 	addi	sp,sp,-4
   154b8:	df000015 	stw	fp,0(sp)
   154bc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   154c0:	000170fa 	wrctl	ienable,zero
}
   154c4:	0001883a 	nop
   154c8:	e037883a 	mov	sp,fp
   154cc:	df000017 	ldw	fp,0(sp)
   154d0:	dec00104 	addi	sp,sp,4
   154d4:	f800283a 	ret

000154d8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   154d8:	defffb04 	addi	sp,sp,-20
   154dc:	dfc00415 	stw	ra,16(sp)
   154e0:	df000315 	stw	fp,12(sp)
   154e4:	df000304 	addi	fp,sp,12
   154e8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   154ec:	d0a00417 	ldw	r2,-32752(gp)
   154f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   154f4:	00003106 	br	155bc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   154f8:	e0bffd17 	ldw	r2,-12(fp)
   154fc:	10800217 	ldw	r2,8(r2)
   15500:	1009883a 	mov	r4,r2
   15504:	00103780 	call	10378 <strlen>
   15508:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1550c:	e0bffd17 	ldw	r2,-12(fp)
   15510:	10c00217 	ldw	r3,8(r2)
   15514:	e0bffe17 	ldw	r2,-8(fp)
   15518:	10bfffc4 	addi	r2,r2,-1
   1551c:	1885883a 	add	r2,r3,r2
   15520:	10800003 	ldbu	r2,0(r2)
   15524:	10803fcc 	andi	r2,r2,255
   15528:	1080201c 	xori	r2,r2,128
   1552c:	10bfe004 	addi	r2,r2,-128
   15530:	10800bd8 	cmpnei	r2,r2,47
   15534:	1000031e 	bne	r2,zero,15544 <alt_find_file+0x6c>
    {
      len -= 1;
   15538:	e0bffe17 	ldw	r2,-8(fp)
   1553c:	10bfffc4 	addi	r2,r2,-1
   15540:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15544:	e0bffe17 	ldw	r2,-8(fp)
   15548:	e0ffff17 	ldw	r3,-4(fp)
   1554c:	1885883a 	add	r2,r3,r2
   15550:	10800003 	ldbu	r2,0(r2)
   15554:	10803fcc 	andi	r2,r2,255
   15558:	1080201c 	xori	r2,r2,128
   1555c:	10bfe004 	addi	r2,r2,-128
   15560:	10800be0 	cmpeqi	r2,r2,47
   15564:	1000081e 	bne	r2,zero,15588 <alt_find_file+0xb0>
   15568:	e0bffe17 	ldw	r2,-8(fp)
   1556c:	e0ffff17 	ldw	r3,-4(fp)
   15570:	1885883a 	add	r2,r3,r2
   15574:	10800003 	ldbu	r2,0(r2)
   15578:	10803fcc 	andi	r2,r2,255
   1557c:	1080201c 	xori	r2,r2,128
   15580:	10bfe004 	addi	r2,r2,-128
   15584:	10000a1e 	bne	r2,zero,155b0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   15588:	e0bffd17 	ldw	r2,-12(fp)
   1558c:	10800217 	ldw	r2,8(r2)
   15590:	e0fffe17 	ldw	r3,-8(fp)
   15594:	180d883a 	mov	r6,r3
   15598:	e17fff17 	ldw	r5,-4(fp)
   1559c:	1009883a 	mov	r4,r2
   155a0:	001578c0 	call	1578c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   155a4:	1000021e 	bne	r2,zero,155b0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   155a8:	e0bffd17 	ldw	r2,-12(fp)
   155ac:	00000706 	br	155cc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   155b0:	e0bffd17 	ldw	r2,-12(fp)
   155b4:	10800017 	ldw	r2,0(r2)
   155b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   155bc:	e0fffd17 	ldw	r3,-12(fp)
   155c0:	d0a00404 	addi	r2,gp,-32752
   155c4:	18bfcc1e 	bne	r3,r2,154f8 <_gp+0xffff5f34>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   155c8:	0005883a 	mov	r2,zero
}
   155cc:	e037883a 	mov	sp,fp
   155d0:	dfc00117 	ldw	ra,4(sp)
   155d4:	df000017 	ldw	fp,0(sp)
   155d8:	dec00204 	addi	sp,sp,8
   155dc:	f800283a 	ret

000155e0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   155e0:	defffa04 	addi	sp,sp,-24
   155e4:	dfc00515 	stw	ra,20(sp)
   155e8:	df000415 	stw	fp,16(sp)
   155ec:	dc000315 	stw	r16,12(sp)
   155f0:	df000404 	addi	fp,sp,16
   155f4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   155f8:	00bffa04 	movi	r2,-24
   155fc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15600:	e03ffc15 	stw	zero,-16(fp)
   15604:	00001d06 	br	1567c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   15608:	04000074 	movhi	r16,1
   1560c:	8418e304 	addi	r16,r16,25484
   15610:	e0bffc17 	ldw	r2,-16(fp)
   15614:	01400304 	movi	r5,12
   15618:	1009883a 	mov	r4,r2
   1561c:	00130880 	call	13088 <__mulsi3>
   15620:	8085883a 	add	r2,r16,r2
   15624:	10800017 	ldw	r2,0(r2)
   15628:	1000111e 	bne	r2,zero,15670 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   1562c:	04000074 	movhi	r16,1
   15630:	8418e304 	addi	r16,r16,25484
   15634:	e0bffc17 	ldw	r2,-16(fp)
   15638:	01400304 	movi	r5,12
   1563c:	1009883a 	mov	r4,r2
   15640:	00130880 	call	13088 <__mulsi3>
   15644:	8085883a 	add	r2,r16,r2
   15648:	e0fffe17 	ldw	r3,-8(fp)
   1564c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   15650:	d0e00817 	ldw	r3,-32736(gp)
   15654:	e0bffc17 	ldw	r2,-16(fp)
   15658:	1880020e 	bge	r3,r2,15664 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   1565c:	e0bffc17 	ldw	r2,-16(fp)
   15660:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   15664:	e0bffc17 	ldw	r2,-16(fp)
   15668:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   1566c:	00000606 	br	15688 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15670:	e0bffc17 	ldw	r2,-16(fp)
   15674:	10800044 	addi	r2,r2,1
   15678:	e0bffc15 	stw	r2,-16(fp)
   1567c:	e0bffc17 	ldw	r2,-16(fp)
   15680:	10800810 	cmplti	r2,r2,32
   15684:	103fe01e 	bne	r2,zero,15608 <_gp+0xffff6044>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   15688:	e0bffd17 	ldw	r2,-12(fp)
}
   1568c:	e6ffff04 	addi	sp,fp,-4
   15690:	dfc00217 	ldw	ra,8(sp)
   15694:	df000117 	ldw	fp,4(sp)
   15698:	dc000017 	ldw	r16,0(sp)
   1569c:	dec00304 	addi	sp,sp,12
   156a0:	f800283a 	ret

000156a4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   156a4:	defffe04 	addi	sp,sp,-8
   156a8:	df000115 	stw	fp,4(sp)
   156ac:	df000104 	addi	fp,sp,4
   156b0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   156b4:	e0bfff17 	ldw	r2,-4(fp)
   156b8:	10bffe84 	addi	r2,r2,-6
   156bc:	10c00428 	cmpgeui	r3,r2,16
   156c0:	18001a1e 	bne	r3,zero,1572c <alt_exception_cause_generated_bad_addr+0x88>
   156c4:	100690ba 	slli	r3,r2,2
   156c8:	00800074 	movhi	r2,1
   156cc:	1095b704 	addi	r2,r2,22236
   156d0:	1885883a 	add	r2,r3,r2
   156d4:	10800017 	ldw	r2,0(r2)
   156d8:	1000683a 	jmp	r2
   156dc:	0001571c 	xori	zero,zero,1372
   156e0:	0001571c 	xori	zero,zero,1372
   156e4:	0001572c 	andhi	zero,zero,1372
   156e8:	0001572c 	andhi	zero,zero,1372
   156ec:	0001572c 	andhi	zero,zero,1372
   156f0:	0001571c 	xori	zero,zero,1372
   156f4:	00015724 	muli	zero,zero,1372
   156f8:	0001572c 	andhi	zero,zero,1372
   156fc:	0001571c 	xori	zero,zero,1372
   15700:	0001571c 	xori	zero,zero,1372
   15704:	0001572c 	andhi	zero,zero,1372
   15708:	0001571c 	xori	zero,zero,1372
   1570c:	00015724 	muli	zero,zero,1372
   15710:	0001572c 	andhi	zero,zero,1372
   15714:	0001572c 	andhi	zero,zero,1372
   15718:	0001571c 	xori	zero,zero,1372
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1571c:	00800044 	movi	r2,1
   15720:	00000306 	br	15730 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   15724:	0005883a 	mov	r2,zero
   15728:	00000106 	br	15730 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1572c:	0005883a 	mov	r2,zero
  }
}
   15730:	e037883a 	mov	sp,fp
   15734:	df000017 	ldw	fp,0(sp)
   15738:	dec00104 	addi	sp,sp,4
   1573c:	f800283a 	ret

00015740 <atexit>:
   15740:	200b883a 	mov	r5,r4
   15744:	000f883a 	mov	r7,zero
   15748:	000d883a 	mov	r6,zero
   1574c:	0009883a 	mov	r4,zero
   15750:	00158081 	jmpi	15808 <__register_exitproc>

00015754 <exit>:
   15754:	defffe04 	addi	sp,sp,-8
   15758:	000b883a 	mov	r5,zero
   1575c:	dc000015 	stw	r16,0(sp)
   15760:	dfc00115 	stw	ra,4(sp)
   15764:	2021883a 	mov	r16,r4
   15768:	00159200 	call	15920 <__call_exitprocs>
   1576c:	00800074 	movhi	r2,1
   15770:	109d7104 	addi	r2,r2,30148
   15774:	11000017 	ldw	r4,0(r2)
   15778:	20800f17 	ldw	r2,60(r4)
   1577c:	10000126 	beq	r2,zero,15784 <exit+0x30>
   15780:	103ee83a 	callr	r2
   15784:	8009883a 	mov	r4,r16
   15788:	0015aa00 	call	15aa0 <_exit>

0001578c <memcmp>:
   1578c:	01c000c4 	movi	r7,3
   15790:	3980192e 	bgeu	r7,r6,157f8 <memcmp+0x6c>
   15794:	2144b03a 	or	r2,r4,r5
   15798:	11c4703a 	and	r2,r2,r7
   1579c:	10000f26 	beq	r2,zero,157dc <memcmp+0x50>
   157a0:	20800003 	ldbu	r2,0(r4)
   157a4:	28c00003 	ldbu	r3,0(r5)
   157a8:	10c0151e 	bne	r2,r3,15800 <memcmp+0x74>
   157ac:	31bfff84 	addi	r6,r6,-2
   157b0:	01ffffc4 	movi	r7,-1
   157b4:	00000406 	br	157c8 <memcmp+0x3c>
   157b8:	20800003 	ldbu	r2,0(r4)
   157bc:	28c00003 	ldbu	r3,0(r5)
   157c0:	31bfffc4 	addi	r6,r6,-1
   157c4:	10c00e1e 	bne	r2,r3,15800 <memcmp+0x74>
   157c8:	21000044 	addi	r4,r4,1
   157cc:	29400044 	addi	r5,r5,1
   157d0:	31fff91e 	bne	r6,r7,157b8 <_gp+0xffff61f4>
   157d4:	0005883a 	mov	r2,zero
   157d8:	f800283a 	ret
   157dc:	20c00017 	ldw	r3,0(r4)
   157e0:	28800017 	ldw	r2,0(r5)
   157e4:	18bfee1e 	bne	r3,r2,157a0 <_gp+0xffff61dc>
   157e8:	31bfff04 	addi	r6,r6,-4
   157ec:	21000104 	addi	r4,r4,4
   157f0:	29400104 	addi	r5,r5,4
   157f4:	39bff936 	bltu	r7,r6,157dc <_gp+0xffff6218>
   157f8:	303fe91e 	bne	r6,zero,157a0 <_gp+0xffff61dc>
   157fc:	003ff506 	br	157d4 <_gp+0xffff6210>
   15800:	10c5c83a 	sub	r2,r2,r3
   15804:	f800283a 	ret

00015808 <__register_exitproc>:
   15808:	defffa04 	addi	sp,sp,-24
   1580c:	dc000315 	stw	r16,12(sp)
   15810:	04000074 	movhi	r16,1
   15814:	841d7104 	addi	r16,r16,30148
   15818:	80c00017 	ldw	r3,0(r16)
   1581c:	dc400415 	stw	r17,16(sp)
   15820:	dfc00515 	stw	ra,20(sp)
   15824:	18805217 	ldw	r2,328(r3)
   15828:	2023883a 	mov	r17,r4
   1582c:	10003726 	beq	r2,zero,1590c <__register_exitproc+0x104>
   15830:	10c00117 	ldw	r3,4(r2)
   15834:	010007c4 	movi	r4,31
   15838:	20c00e16 	blt	r4,r3,15874 <__register_exitproc+0x6c>
   1583c:	1a000044 	addi	r8,r3,1
   15840:	8800221e 	bne	r17,zero,158cc <__register_exitproc+0xc4>
   15844:	18c00084 	addi	r3,r3,2
   15848:	18c7883a 	add	r3,r3,r3
   1584c:	18c7883a 	add	r3,r3,r3
   15850:	12000115 	stw	r8,4(r2)
   15854:	10c7883a 	add	r3,r2,r3
   15858:	19400015 	stw	r5,0(r3)
   1585c:	0005883a 	mov	r2,zero
   15860:	dfc00517 	ldw	ra,20(sp)
   15864:	dc400417 	ldw	r17,16(sp)
   15868:	dc000317 	ldw	r16,12(sp)
   1586c:	dec00604 	addi	sp,sp,24
   15870:	f800283a 	ret
   15874:	00800034 	movhi	r2,0
   15878:	10800004 	addi	r2,r2,0
   1587c:	10002626 	beq	r2,zero,15918 <__register_exitproc+0x110>
   15880:	01006404 	movi	r4,400
   15884:	d9400015 	stw	r5,0(sp)
   15888:	d9800115 	stw	r6,4(sp)
   1588c:	d9c00215 	stw	r7,8(sp)
   15890:	00000000 	call	0 <__alt_mem_memoria-0x10000>
   15894:	d9400017 	ldw	r5,0(sp)
   15898:	d9800117 	ldw	r6,4(sp)
   1589c:	d9c00217 	ldw	r7,8(sp)
   158a0:	10001d26 	beq	r2,zero,15918 <__register_exitproc+0x110>
   158a4:	81000017 	ldw	r4,0(r16)
   158a8:	10000115 	stw	zero,4(r2)
   158ac:	02000044 	movi	r8,1
   158b0:	22405217 	ldw	r9,328(r4)
   158b4:	0007883a 	mov	r3,zero
   158b8:	12400015 	stw	r9,0(r2)
   158bc:	20805215 	stw	r2,328(r4)
   158c0:	10006215 	stw	zero,392(r2)
   158c4:	10006315 	stw	zero,396(r2)
   158c8:	883fde26 	beq	r17,zero,15844 <_gp+0xffff6280>
   158cc:	18c9883a 	add	r4,r3,r3
   158d0:	2109883a 	add	r4,r4,r4
   158d4:	1109883a 	add	r4,r2,r4
   158d8:	21802215 	stw	r6,136(r4)
   158dc:	01800044 	movi	r6,1
   158e0:	12406217 	ldw	r9,392(r2)
   158e4:	30cc983a 	sll	r6,r6,r3
   158e8:	4992b03a 	or	r9,r9,r6
   158ec:	12406215 	stw	r9,392(r2)
   158f0:	21c04215 	stw	r7,264(r4)
   158f4:	01000084 	movi	r4,2
   158f8:	893fd21e 	bne	r17,r4,15844 <_gp+0xffff6280>
   158fc:	11006317 	ldw	r4,396(r2)
   15900:	218cb03a 	or	r6,r4,r6
   15904:	11806315 	stw	r6,396(r2)
   15908:	003fce06 	br	15844 <_gp+0xffff6280>
   1590c:	18805304 	addi	r2,r3,332
   15910:	18805215 	stw	r2,328(r3)
   15914:	003fc606 	br	15830 <_gp+0xffff626c>
   15918:	00bfffc4 	movi	r2,-1
   1591c:	003fd006 	br	15860 <_gp+0xffff629c>

00015920 <__call_exitprocs>:
   15920:	defff504 	addi	sp,sp,-44
   15924:	df000915 	stw	fp,36(sp)
   15928:	dd400615 	stw	r21,24(sp)
   1592c:	dc800315 	stw	r18,12(sp)
   15930:	dfc00a15 	stw	ra,40(sp)
   15934:	ddc00815 	stw	r23,32(sp)
   15938:	dd800715 	stw	r22,28(sp)
   1593c:	dd000515 	stw	r20,20(sp)
   15940:	dcc00415 	stw	r19,16(sp)
   15944:	dc400215 	stw	r17,8(sp)
   15948:	dc000115 	stw	r16,4(sp)
   1594c:	d9000015 	stw	r4,0(sp)
   15950:	2839883a 	mov	fp,r5
   15954:	04800044 	movi	r18,1
   15958:	057fffc4 	movi	r21,-1
   1595c:	00800074 	movhi	r2,1
   15960:	109d7104 	addi	r2,r2,30148
   15964:	12000017 	ldw	r8,0(r2)
   15968:	45005217 	ldw	r20,328(r8)
   1596c:	44c05204 	addi	r19,r8,328
   15970:	a0001c26 	beq	r20,zero,159e4 <__call_exitprocs+0xc4>
   15974:	a0800117 	ldw	r2,4(r20)
   15978:	15ffffc4 	addi	r23,r2,-1
   1597c:	b8000d16 	blt	r23,zero,159b4 <__call_exitprocs+0x94>
   15980:	14000044 	addi	r16,r2,1
   15984:	8421883a 	add	r16,r16,r16
   15988:	8421883a 	add	r16,r16,r16
   1598c:	84402004 	addi	r17,r16,128
   15990:	a463883a 	add	r17,r20,r17
   15994:	a421883a 	add	r16,r20,r16
   15998:	e0001e26 	beq	fp,zero,15a14 <__call_exitprocs+0xf4>
   1599c:	80804017 	ldw	r2,256(r16)
   159a0:	e0801c26 	beq	fp,r2,15a14 <__call_exitprocs+0xf4>
   159a4:	bdffffc4 	addi	r23,r23,-1
   159a8:	843fff04 	addi	r16,r16,-4
   159ac:	8c7fff04 	addi	r17,r17,-4
   159b0:	bd7ff91e 	bne	r23,r21,15998 <_gp+0xffff63d4>
   159b4:	00800034 	movhi	r2,0
   159b8:	10800004 	addi	r2,r2,0
   159bc:	10000926 	beq	r2,zero,159e4 <__call_exitprocs+0xc4>
   159c0:	a0800117 	ldw	r2,4(r20)
   159c4:	1000301e 	bne	r2,zero,15a88 <__call_exitprocs+0x168>
   159c8:	a0800017 	ldw	r2,0(r20)
   159cc:	10003226 	beq	r2,zero,15a98 <__call_exitprocs+0x178>
   159d0:	a009883a 	mov	r4,r20
   159d4:	98800015 	stw	r2,0(r19)
   159d8:	00000000 	call	0 <__alt_mem_memoria-0x10000>
   159dc:	9d000017 	ldw	r20,0(r19)
   159e0:	a03fe41e 	bne	r20,zero,15974 <_gp+0xffff63b0>
   159e4:	dfc00a17 	ldw	ra,40(sp)
   159e8:	df000917 	ldw	fp,36(sp)
   159ec:	ddc00817 	ldw	r23,32(sp)
   159f0:	dd800717 	ldw	r22,28(sp)
   159f4:	dd400617 	ldw	r21,24(sp)
   159f8:	dd000517 	ldw	r20,20(sp)
   159fc:	dcc00417 	ldw	r19,16(sp)
   15a00:	dc800317 	ldw	r18,12(sp)
   15a04:	dc400217 	ldw	r17,8(sp)
   15a08:	dc000117 	ldw	r16,4(sp)
   15a0c:	dec00b04 	addi	sp,sp,44
   15a10:	f800283a 	ret
   15a14:	a0800117 	ldw	r2,4(r20)
   15a18:	80c00017 	ldw	r3,0(r16)
   15a1c:	10bfffc4 	addi	r2,r2,-1
   15a20:	15c01426 	beq	r2,r23,15a74 <__call_exitprocs+0x154>
   15a24:	80000015 	stw	zero,0(r16)
   15a28:	183fde26 	beq	r3,zero,159a4 <_gp+0xffff63e0>
   15a2c:	95c8983a 	sll	r4,r18,r23
   15a30:	a0806217 	ldw	r2,392(r20)
   15a34:	a5800117 	ldw	r22,4(r20)
   15a38:	2084703a 	and	r2,r4,r2
   15a3c:	10000b26 	beq	r2,zero,15a6c <__call_exitprocs+0x14c>
   15a40:	a0806317 	ldw	r2,396(r20)
   15a44:	2088703a 	and	r4,r4,r2
   15a48:	20000c1e 	bne	r4,zero,15a7c <__call_exitprocs+0x15c>
   15a4c:	89400017 	ldw	r5,0(r17)
   15a50:	d9000017 	ldw	r4,0(sp)
   15a54:	183ee83a 	callr	r3
   15a58:	a0800117 	ldw	r2,4(r20)
   15a5c:	15bfbf1e 	bne	r2,r22,1595c <_gp+0xffff6398>
   15a60:	98800017 	ldw	r2,0(r19)
   15a64:	153fcf26 	beq	r2,r20,159a4 <_gp+0xffff63e0>
   15a68:	003fbc06 	br	1595c <_gp+0xffff6398>
   15a6c:	183ee83a 	callr	r3
   15a70:	003ff906 	br	15a58 <_gp+0xffff6494>
   15a74:	a5c00115 	stw	r23,4(r20)
   15a78:	003feb06 	br	15a28 <_gp+0xffff6464>
   15a7c:	89000017 	ldw	r4,0(r17)
   15a80:	183ee83a 	callr	r3
   15a84:	003ff406 	br	15a58 <_gp+0xffff6494>
   15a88:	a0800017 	ldw	r2,0(r20)
   15a8c:	a027883a 	mov	r19,r20
   15a90:	1029883a 	mov	r20,r2
   15a94:	003fb606 	br	15970 <_gp+0xffff63ac>
   15a98:	0005883a 	mov	r2,zero
   15a9c:	003ffb06 	br	15a8c <_gp+0xffff64c8>

00015aa0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   15aa0:	defffd04 	addi	sp,sp,-12
   15aa4:	df000215 	stw	fp,8(sp)
   15aa8:	df000204 	addi	fp,sp,8
   15aac:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   15ab0:	0001883a 	nop
   15ab4:	e0bfff17 	ldw	r2,-4(fp)
   15ab8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   15abc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   15ac0:	10000226 	beq	r2,zero,15acc <_exit+0x2c>
    ALT_SIM_FAIL();
   15ac4:	002af070 	cmpltui	zero,zero,43969
   15ac8:	00000106 	br	15ad0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   15acc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   15ad0:	003fff06 	br	15ad0 <_gp+0xffff650c>
