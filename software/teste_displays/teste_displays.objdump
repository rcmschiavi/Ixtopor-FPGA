
teste_displays.elf:     file format elf32-littlenios2
teste_displays.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010230

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x0000619c memsz 0x0000619c flags r-x
    LOAD off    0x000071bc vaddr 0x000161bc paddr 0x00017cec align 2**12
         filesz 0x00001b30 memsz 0x00001b30 flags rw-
    LOAD off    0x0000981c vaddr 0x0001981c paddr 0x0001981c align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005f38  00010230  00010230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000054  00016168  00016168  00007168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b30  000161bc  00017cec  000071bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  0001981c  0001981c  0000981c  2**2
                  ALLOC, SMALL_DATA
  6 .memoria      00000000  00019970  00019970  00008cec  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00008cec  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ad0  00000000  00000000  00008d10  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00017bcb  00000000  00000000  000097e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006771  00000000  00000000  000213ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007019  00000000  00000000  00027b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000017e0  00000000  00000000  0002eb38  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002a2a  00000000  00000000  00030318  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004ae9  00000000  00000000  00032d42  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0003782c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000680  00000000  00000000  00037840  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003a6ce  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003a6d1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003a6d4  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003a6d5  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003a6d6  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003a6da  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003a6de  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0003a6e2  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0003a6eb  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0003a6f4  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  0003a6fd  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000031  00000000  00000000  0003a703  2**0
                  CONTENTS, READONLY
 29 .jdi          000036bf  00000000  00000000  0003a734  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000a992f  00000000  00000000  0003ddf3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010230 l    d  .text	00000000 .text
00016168 l    d  .rodata	00000000 .rodata
000161bc l    d  .rwdata	00000000 .rwdata
0001981c l    d  .bss	00000000 .bss
00019970 l    d  .memoria	00000000 .memoria
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../bsp//obj/HAL/src/crt0.o
00010268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
000102a0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010444 l     F .text	00000034 alt_dev_reg
000161bc l     O .rwdata	00001060 jtag_uart
0001721c l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001075c l     F .text	0000020c altera_avalon_jtag_uart_irq
00010968 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00010fa0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00011250 l     F .text	0000009c altera_avalon_uart_irq
000112ec l     F .text	000000e4 altera_avalon_uart_rxirq
000113d0 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0001156c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00011784 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00011a98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00011bcc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00011bf8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00012058 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000121b8 l     F .text	0000003c alt_get_errno
000121f4 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00017488 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0001483c l     F .text	00000008 __fp_unlock
00014850 l     F .text	0000019c __sinit.part.1
000149ec l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00015b00 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00015bf4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00015cdc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00015e3c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
00017ce8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0001602c l     F .text	0000003c alt_get_errno
00019834 g     O .bss	00000004 alt_instruction_exception_handler
000157dc g     F .text	00000054 _isatty_r
0001038c g     F .text	0000007c alt_main
00019870 g     O .bss	00000100 alt_irq
00015830 g     F .text	00000060 _lseek_r
00017cec g       *ABS*	00000000 __flash_rwdata_start
00019970 g       *ABS*	00000000 __alt_heap_start
00015564 g     F .text	0000005c __sseek
00014b9c g     F .text	00000010 __sinit
000149f4 g     F .text	00000078 __sfmoreglue
00015e18 g     F .text	00000024 __malloc_unlock
000139fc g     F .text	0000015c memmove
00014b84 g     F .text	00000018 _cleanup
00010408 g     F .text	0000003c alt_putstr
00012664 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00015780 g     F .text	0000005c _fstat_r
00019838 g     O .bss	00000004 errno
000154e0 g     F .text	00000008 __seofread
00019820 g     O .bss	00000004 alt_argv
0001fcb4 g       *ABS*	00000000 _gp
00017308 g     O .rwdata	00000180 alt_fd_list
00012688 g     F .text	00000090 alt_find_dev
000138b4 g     F .text	00000148 memcpy
00014844 g     F .text	0000000c _cleanup_r
0001213c g     F .text	0000007c alt_io_redirect
00016168 g       *ABS*	00000000 __DTOR_END__
000128e4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00010b60 g     F .text	0000021c altera_avalon_jtag_uart_read
000159e8 g     F .text	00000064 .hidden __udivsi3
00015c30 g     F .text	000000ac isatty
00019844 g     O .bss	00000004 __malloc_top_pad
00012a80 g     F .text	000004c8 __sfvwrite_r
000140bc g     F .text	00000054 _sbrk_r
00015890 g     F .text	00000060 _read_r
00017cc4 g     O .rwdata	00000004 alt_max_fd
0001567c g     F .text	000000f0 _fclose_r
0001480c g     F .text	00000030 fflush
00019840 g     O .bss	00000004 __malloc_max_sbrked_mem
00015d18 g     F .text	000000dc lseek
00017cd8 g     O .rwdata	00000004 _global_impure_ptr
00013b58 g     F .text	00000564 _realloc_r
00019970 g       *ABS*	00000000 __bss_end
00011f68 g     F .text	000000f0 alt_iic_isr_register
0001255c g     F .text	00000108 alt_tick
000111a4 g     F .text	000000ac altera_avalon_uart_init
00014bbc g     F .text	00000018 __fp_lock_all
00011f1c g     F .text	0000004c alt_ic_irq_enabled
000124c0 g     F .text	0000009c alt_alarm_stop
00019828 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000d4 alt_irq_handler
000172e0 g     O .rwdata	00000028 alt_dev_null
00011bac g     F .text	00000020 alt_dcache_flush_all
00017cec g       *ABS*	00000000 __ram_rwdata_end
00017cbc g     O .rwdata	00000008 alt_dev_list
00016068 g     F .text	00000100 write
000161bc g       *ABS*	00000000 __ram_rodata_end
00015b3c g     F .text	000000b8 fstat
00015a4c g     F .text	00000058 .hidden __umodsi3
00019970 g       *ABS*	00000000 end
000117c0 g     F .text	000001ac altera_avalon_uart_write
0001069c g     F .text	000000c0 altera_avalon_jtag_uart_init
000101d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00016168 g       *ABS*	00000000 __CTOR_LIST__
00019c40 g       *ABS*	00000000 __alt_stack_pointer
00011018 g     F .text	0000007c alt_avalon_timer_sc_init
000110f4 g     F .text	00000060 altera_avalon_uart_write_fd
00011154 g     F .text	00000050 altera_avalon_uart_close_fd
00010d7c g     F .text	00000224 altera_avalon_jtag_uart_write
00014bac g     F .text	00000004 __sfp_lock_acquire
00013754 g     F .text	000000e4 memchr
00014d10 g     F .text	00000310 _free_r
00014414 g     F .text	00000180 __call_exitprocs
00017ce0 g     O .rwdata	00000004 __malloc_sbrk_base
00010230 g     F .text	0000003c _start
0001982c g     O .bss	00000004 _alt_tick_rate
00019830 g     O .bss	00000004 _alt_nticks
00015e78 g     F .text	00000104 read
000104b0 g     F .text	00000088 alt_sys_init
000142fc g     F .text	00000118 __register_exitproc
00010a08 g     F .text	00000068 altera_avalon_jtag_uart_close
00015aa4 g     F .text	00000028 .hidden __mulsi3
000161bc g       *ABS*	00000000 __ram_rwdata_start
00016168 g       *ABS*	00000000 __ram_rodata_start
00019848 g     O .bss	00000028 __malloc_current_mallinfo
00010538 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00012820 g     F .text	000000c4 alt_get_fd
00015628 g     F .text	00000054 _close_r
00013838 g     F .text	0000007c memcmp
000105f8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00019970 g       *ABS*	00000000 __alt_stack_base
00010648 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00010000 g       *ABS*	00000000 __alt_mem_memoria
000141a8 g     F .text	00000154 __swsetup_r
00014a6c g     F .text	00000118 __sfp
000178ac g     O .rwdata	00000408 __malloc_av_
00014bb8 g     F .text	00000004 __sinit_lock_release
0001548c g     F .text	00000054 __sread
00012718 g     F .text	00000108 alt_find_file
00011c34 g     F .text	000000a4 alt_dev_llist_insert
00015df4 g     F .text	00000024 __malloc_lock
00015f7c g     F .text	000000b0 sbrk
000147b0 g     F .text	0000005c _fflush_r
0001981c g       *ABS*	00000000 __bss_start
00015364 g     F .text	00000128 memset
0001026c g     F .text	00000034 main
00019824 g     O .bss	00000004 alt_envp
0001983c g     O .bss	00000004 __malloc_max_total_mem
00010598 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000155c0 g     F .text	00000008 __sclose
00019c40 g       *ABS*	00000000 __alt_heap_limit
0001576c g     F .text	00000014 fclose
00012f48 g     F .text	0000080c _malloc_r
00017cc8 g     O .rwdata	00000004 alt_errno
00015020 g     F .text	000000c4 _fwalk
000158f0 g     F .text	00000084 .hidden __divsi3
00014bec g     F .text	00000124 _malloc_trim_r
00016168 g       *ABS*	00000000 __CTOR_END__
00016168 g       *ABS*	00000000 __flash_rodata_start
00016168 g       *ABS*	00000000 __DTOR_LIST__
00010478 g     F .text	00000038 alt_irq_init
0001243c g     F .text	00000084 alt_release_fd
00012980 g     F .text	00000014 atexit
000155c8 g     F .text	00000060 _write_r
00017cdc g     O .rwdata	00000004 _impure_ptr
0001981c g     O .bss	00000004 alt_argc
00014594 g     F .text	0000021c __sflush_r
00011d38 g     F .text	00000060 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00014bd4 g     F .text	00000018 __fp_unlock_all
00017cb4 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00011db8 g     F .text	00000050 alt_ic_isr_register
00017cec g       *ABS*	00000000 _edata
00011094 g     F .text	00000060 altera_avalon_uart_read_fd
00019970 g       *ABS*	00000000 _end
00010230 g       *ABS*	00000000 __ram_exceptions_end
00010a70 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000129cc g     F .text	0000009c _fputs_r
00011e90 g     F .text	0000008c alt_ic_irq_disable
000154e8 g     F .text	0000007c __swrite
00017ce4 g     O .rwdata	00000004 __malloc_trim_threshold
00012994 g     F .text	00000038 exit
000150e4 g     F .text	000000c4 _fwalk_reent
00015974 g     F .text	00000074 .hidden __modsi3
00019c40 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00014bb0 g     F .text	00000004 __sfp_lock_release
00011518 g     F .text	00000054 altera_avalon_uart_close
00015acc g     F .text	00000034 _exit
0001196c g     F .text	0000012c alt_alarm_start
000151a8 g     F .text	000001bc __smakebuf_r
00014110 g     F .text	00000098 strlen
000122e0 g     F .text	0000015c open
00011d98 g     F .text	00000020 alt_icache_flush_all
00012a68 g     F .text	00000018 fputs
00017ccc g     O .rwdata	00000004 alt_priority_mask
00011e08 g     F .text	00000088 alt_ic_irq_enable
000115a8 g     F .text	000001dc altera_avalon_uart_read
00017cd0 g     O .rwdata	00000008 alt_alarm_list
00011cd8 g     F .text	00000060 _do_ctors
00011ad4 g     F .text	000000d8 close
00010308 g     F .text	00000084 alt_load
00014bb4 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408c14 	ori	at,at,560
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101d00 	call	101d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001426 	beq	r2,zero,1018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	008000b4 	movhi	r2,2
   10140:	10a61c04 	addi	r2,r2,-26512
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	008000b4 	movhi	r2,2
   10158:	10a61c04 	addi	r2,r2,-26512
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	1009883a 	mov	r4,r2
   10174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1017c:	0005313a 	rdctl	r2,ipending
   10180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	00000706 	br	101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1018c:	e0bffc17 	ldw	r2,-16(fp)
   10190:	1085883a 	add	r2,r2,r2
   10194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10198:	e0bffd17 	ldw	r2,-12(fp)
   1019c:	10800044 	addi	r2,r2,1
   101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a4:	003fe106 	br	1012c <_gp+0xffff0478>

    active = alt_irq_pending ();
   101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101ac:	e0bffb17 	ldw	r2,-20(fp)
   101b0:	103fdb1e 	bne	r2,zero,10120 <_gp+0xffff046c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b4:	0001883a 	nop
}
   101b8:	0001883a 	nop
   101bc:	e037883a 	mov	sp,fp
   101c0:	dfc00117 	ldw	ra,4(sp)
   101c4:	df000017 	ldw	fp,0(sp)
   101c8:	dec00204 	addi	sp,sp,8
   101cc:	f800283a 	ret

000101d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101d0:	defffb04 	addi	sp,sp,-20
   101d4:	dfc00415 	stw	ra,16(sp)
   101d8:	df000315 	stw	fp,12(sp)
   101dc:	df000304 	addi	fp,sp,12
   101e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101e4:	00bfffc4 	movi	r2,-1
   101e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   101ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101f0:	d0a6e017 	ldw	r2,-25728(gp)
   101f4:	10000726 	beq	r2,zero,10214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101f8:	d0a6e017 	ldw	r2,-25728(gp)
   101fc:	e0fffd17 	ldw	r3,-12(fp)
   10200:	e1bffe17 	ldw	r6,-8(fp)
   10204:	e17fff17 	ldw	r5,-4(fp)
   10208:	1809883a 	mov	r4,r3
   1020c:	103ee83a 	callr	r2
   10210:	00000206 	br	1021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   10218:	0005883a 	mov	r2,zero
}
   1021c:	e037883a 	mov	sp,fp
   10220:	dfc00117 	ldw	ra,4(sp)
   10224:	df000017 	ldw	fp,0(sp)
   10228:	dec00204 	addi	sp,sp,8
   1022c:	f800283a 	ret

Disassembly of section .text:

00010230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10230:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10234:	dee71014 	ori	sp,sp,40000
    movhi gp, %hi(_gp)
   10238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1023c:	d6bf2d14 	ori	gp,gp,64692
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10244:	10a60714 	ori	r2,r2,38940

    movhi r3, %hi(__bss_end)
   10248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1024c:	18e65c14 	ori	r3,r3,39280

    beq r2, r3, 1f
   10250:	10c00326 	beq	r2,r3,10260 <_start+0x30>

0:
    stw zero, (r2)
   10254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1025c:	10fffd36 	bltu	r2,r3,10254 <_gp+0xffff05a0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10260:	00103080 	call	10308 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10264:	001038c0 	call	1038c <alt_main>

00010268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10268:	003fff06 	br	10268 <_gp+0xffff05b4>

0001026c <main>:
#define entrada(base) IORD(base, 0)
#define saida(base,data) IOWR(base, 0, data)
#define configDDR(base,data) IOWR(base, 1, data)

int main()
{
   1026c:	defffe04 	addi	sp,sp,-8
   10270:	dfc00115 	stw	ra,4(sp)
   10274:	df000015 	stw	fp,0(sp)
   10278:	d839883a 	mov	fp,sp
  alt_putstr("Hello from Nios II!\n");
   1027c:	01000074 	movhi	r4,1
   10280:	21185a04 	addi	r4,r4,24936
   10284:	00104080 	call	10408 <alt_putstr>

  /* Event loop never exits. */
  while (1){
	  saida(leds,entrada(chaves));
   10288:	0005883a 	mov	r2,zero
   1028c:	10c00037 	ldwio	r3,0(r2)
   10290:	008000b4 	movhi	r2,2
   10294:	10846004 	addi	r2,r2,4480
   10298:	10c00035 	stwio	r3,0(r2)

  }
   1029c:	003ffa06 	br	10288 <_gp+0xffff05d4>

000102a0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   102a0:	defffc04 	addi	sp,sp,-16
   102a4:	df000315 	stw	fp,12(sp)
   102a8:	df000304 	addi	fp,sp,12
   102ac:	e13ffd15 	stw	r4,-12(fp)
   102b0:	e17ffe15 	stw	r5,-8(fp)
   102b4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   102b8:	e0fffe17 	ldw	r3,-8(fp)
   102bc:	e0bffd17 	ldw	r2,-12(fp)
   102c0:	18800c26 	beq	r3,r2,102f4 <alt_load_section+0x54>
  {
    while( to != end )
   102c4:	00000806 	br	102e8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   102c8:	e0bffe17 	ldw	r2,-8(fp)
   102cc:	10c00104 	addi	r3,r2,4
   102d0:	e0fffe15 	stw	r3,-8(fp)
   102d4:	e0fffd17 	ldw	r3,-12(fp)
   102d8:	19000104 	addi	r4,r3,4
   102dc:	e13ffd15 	stw	r4,-12(fp)
   102e0:	18c00017 	ldw	r3,0(r3)
   102e4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   102e8:	e0fffe17 	ldw	r3,-8(fp)
   102ec:	e0bfff17 	ldw	r2,-4(fp)
   102f0:	18bff51e 	bne	r3,r2,102c8 <_gp+0xffff0614>
    {
      *to++ = *from++;
    }
  }
}
   102f4:	0001883a 	nop
   102f8:	e037883a 	mov	sp,fp
   102fc:	df000017 	ldw	fp,0(sp)
   10300:	dec00104 	addi	sp,sp,4
   10304:	f800283a 	ret

00010308 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10308:	defffe04 	addi	sp,sp,-8
   1030c:	dfc00115 	stw	ra,4(sp)
   10310:	df000015 	stw	fp,0(sp)
   10314:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   10318:	01800074 	movhi	r6,1
   1031c:	319f3b04 	addi	r6,r6,31980
   10320:	01400074 	movhi	r5,1
   10324:	29586f04 	addi	r5,r5,25020
   10328:	01000074 	movhi	r4,1
   1032c:	211f3b04 	addi	r4,r4,31980
   10330:	00102a00 	call	102a0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   10334:	01800074 	movhi	r6,1
   10338:	31808c04 	addi	r6,r6,560
   1033c:	01400074 	movhi	r5,1
   10340:	29400804 	addi	r5,r5,32
   10344:	01000074 	movhi	r4,1
   10348:	21000804 	addi	r4,r4,32
   1034c:	00102a00 	call	102a0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   10350:	01800074 	movhi	r6,1
   10354:	31986f04 	addi	r6,r6,25020
   10358:	01400074 	movhi	r5,1
   1035c:	29585a04 	addi	r5,r5,24936
   10360:	01000074 	movhi	r4,1
   10364:	21185a04 	addi	r4,r4,24936
   10368:	00102a00 	call	102a0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1036c:	0011bac0 	call	11bac <alt_dcache_flush_all>
  alt_icache_flush_all();
   10370:	0011d980 	call	11d98 <alt_icache_flush_all>
}
   10374:	0001883a 	nop
   10378:	e037883a 	mov	sp,fp
   1037c:	dfc00117 	ldw	ra,4(sp)
   10380:	df000017 	ldw	fp,0(sp)
   10384:	dec00204 	addi	sp,sp,8
   10388:	f800283a 	ret

0001038c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1038c:	defffd04 	addi	sp,sp,-12
   10390:	dfc00215 	stw	ra,8(sp)
   10394:	df000115 	stw	fp,4(sp)
   10398:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1039c:	0009883a 	mov	r4,zero
   103a0:	00104780 	call	10478 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   103a4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   103a8:	00104b00 	call	104b0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   103ac:	01800074 	movhi	r6,1
   103b0:	31986004 	addi	r6,r6,24960
   103b4:	01400074 	movhi	r5,1
   103b8:	29586004 	addi	r5,r5,24960
   103bc:	01000074 	movhi	r4,1
   103c0:	21186004 	addi	r4,r4,24960
   103c4:	001213c0 	call	1213c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   103c8:	0011cd80 	call	11cd8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   103cc:	01000074 	movhi	r4,1
   103d0:	21074e04 	addi	r4,r4,7480
   103d4:	00129800 	call	12980 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   103d8:	d0a6da17 	ldw	r2,-25752(gp)
   103dc:	d0e6db17 	ldw	r3,-25748(gp)
   103e0:	d126dc17 	ldw	r4,-25744(gp)
   103e4:	200d883a 	mov	r6,r4
   103e8:	180b883a 	mov	r5,r3
   103ec:	1009883a 	mov	r4,r2
   103f0:	001026c0 	call	1026c <main>
   103f4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   103f8:	01000044 	movi	r4,1
   103fc:	0011ad40 	call	11ad4 <close>
  exit (result);
   10400:	e13fff17 	ldw	r4,-4(fp)
   10404:	00129940 	call	12994 <exit>

00010408 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   10408:	defffd04 	addi	sp,sp,-12
   1040c:	dfc00215 	stw	ra,8(sp)
   10410:	df000115 	stw	fp,4(sp)
   10414:	df000104 	addi	fp,sp,4
   10418:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
   1041c:	d0a00a17 	ldw	r2,-32728(gp)
   10420:	10800217 	ldw	r2,8(r2)
   10424:	100b883a 	mov	r5,r2
   10428:	e13fff17 	ldw	r4,-4(fp)
   1042c:	0012a680 	call	12a68 <fputs>
#endif
#endif
}
   10430:	e037883a 	mov	sp,fp
   10434:	dfc00117 	ldw	ra,4(sp)
   10438:	df000017 	ldw	fp,0(sp)
   1043c:	dec00204 	addi	sp,sp,8
   10440:	f800283a 	ret

00010444 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   10444:	defffd04 	addi	sp,sp,-12
   10448:	dfc00215 	stw	ra,8(sp)
   1044c:	df000115 	stw	fp,4(sp)
   10450:	df000104 	addi	fp,sp,4
   10454:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10458:	d1600204 	addi	r5,gp,-32760
   1045c:	e13fff17 	ldw	r4,-4(fp)
   10460:	0011c340 	call	11c34 <alt_dev_llist_insert>
}
   10464:	e037883a 	mov	sp,fp
   10468:	dfc00117 	ldw	ra,4(sp)
   1046c:	df000017 	ldw	fp,0(sp)
   10470:	dec00204 	addi	sp,sp,8
   10474:	f800283a 	ret

00010478 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10478:	defffd04 	addi	sp,sp,-12
   1047c:	dfc00215 	stw	ra,8(sp)
   10480:	df000115 	stw	fp,4(sp)
   10484:	df000104 	addi	fp,sp,4
   10488:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   1048c:	00126640 	call	12664 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10490:	00800044 	movi	r2,1
   10494:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10498:	0001883a 	nop
   1049c:	e037883a 	mov	sp,fp
   104a0:	dfc00117 	ldw	ra,4(sp)
   104a4:	df000017 	ldw	fp,0(sp)
   104a8:	dec00204 	addi	sp,sp,8
   104ac:	f800283a 	ret

000104b0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   104b0:	defffe04 	addi	sp,sp,-8
   104b4:	dfc00115 	stw	ra,4(sp)
   104b8:	df000015 	stw	fp,0(sp)
   104bc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
   104c0:	01c0fa04 	movi	r7,1000
   104c4:	01800144 	movi	r6,5
   104c8:	000b883a 	mov	r5,zero
   104cc:	010000b4 	movhi	r4,2
   104d0:	21042004 	addi	r4,r4,4224
   104d4:	00110180 	call	11018 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_GERAL, timer_geral);
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP_TIMER, timestamp_timer);
    ALTERA_AVALON_TIMER_INIT ( WATCHDOG_TIMER, watchdog_timer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   104d8:	000d883a 	mov	r6,zero
   104dc:	000b883a 	mov	r5,zero
   104e0:	01000074 	movhi	r4,1
   104e4:	21187904 	addi	r4,r4,25060
   104e8:	001069c0 	call	1069c <altera_avalon_jtag_uart_init>
   104ec:	01000074 	movhi	r4,1
   104f0:	21186f04 	addi	r4,r4,25020
   104f4:	00104440 	call	10444 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI, spi);
   104f8:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   104fc:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
   10500:	01800084 	movi	r6,2
   10504:	000b883a 	mov	r5,zero
   10508:	01000074 	movhi	r4,1
   1050c:	211c9104 	addi	r4,r4,29252
   10510:	00111a40 	call	111a4 <altera_avalon_uart_init>
   10514:	01000074 	movhi	r4,1
   10518:	211c8704 	addi	r4,r4,29212
   1051c:	00104440 	call	10444 <alt_dev_reg>
}
   10520:	0001883a 	nop
   10524:	e037883a 	mov	sp,fp
   10528:	dfc00117 	ldw	ra,4(sp)
   1052c:	df000017 	ldw	fp,0(sp)
   10530:	dec00204 	addi	sp,sp,8
   10534:	f800283a 	ret

00010538 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   10538:	defffa04 	addi	sp,sp,-24
   1053c:	dfc00515 	stw	ra,20(sp)
   10540:	df000415 	stw	fp,16(sp)
   10544:	df000404 	addi	fp,sp,16
   10548:	e13ffd15 	stw	r4,-12(fp)
   1054c:	e17ffe15 	stw	r5,-8(fp)
   10550:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10554:	e0bffd17 	ldw	r2,-12(fp)
   10558:	10800017 	ldw	r2,0(r2)
   1055c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   10560:	e0bffc17 	ldw	r2,-16(fp)
   10564:	10c00a04 	addi	r3,r2,40
   10568:	e0bffd17 	ldw	r2,-12(fp)
   1056c:	10800217 	ldw	r2,8(r2)
   10570:	100f883a 	mov	r7,r2
   10574:	e1bfff17 	ldw	r6,-4(fp)
   10578:	e17ffe17 	ldw	r5,-8(fp)
   1057c:	1809883a 	mov	r4,r3
   10580:	0010b600 	call	10b60 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   10584:	e037883a 	mov	sp,fp
   10588:	dfc00117 	ldw	ra,4(sp)
   1058c:	df000017 	ldw	fp,0(sp)
   10590:	dec00204 	addi	sp,sp,8
   10594:	f800283a 	ret

00010598 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   10598:	defffa04 	addi	sp,sp,-24
   1059c:	dfc00515 	stw	ra,20(sp)
   105a0:	df000415 	stw	fp,16(sp)
   105a4:	df000404 	addi	fp,sp,16
   105a8:	e13ffd15 	stw	r4,-12(fp)
   105ac:	e17ffe15 	stw	r5,-8(fp)
   105b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   105b4:	e0bffd17 	ldw	r2,-12(fp)
   105b8:	10800017 	ldw	r2,0(r2)
   105bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   105c0:	e0bffc17 	ldw	r2,-16(fp)
   105c4:	10c00a04 	addi	r3,r2,40
   105c8:	e0bffd17 	ldw	r2,-12(fp)
   105cc:	10800217 	ldw	r2,8(r2)
   105d0:	100f883a 	mov	r7,r2
   105d4:	e1bfff17 	ldw	r6,-4(fp)
   105d8:	e17ffe17 	ldw	r5,-8(fp)
   105dc:	1809883a 	mov	r4,r3
   105e0:	0010d7c0 	call	10d7c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   105e4:	e037883a 	mov	sp,fp
   105e8:	dfc00117 	ldw	ra,4(sp)
   105ec:	df000017 	ldw	fp,0(sp)
   105f0:	dec00204 	addi	sp,sp,8
   105f4:	f800283a 	ret

000105f8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   105f8:	defffc04 	addi	sp,sp,-16
   105fc:	dfc00315 	stw	ra,12(sp)
   10600:	df000215 	stw	fp,8(sp)
   10604:	df000204 	addi	fp,sp,8
   10608:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1060c:	e0bfff17 	ldw	r2,-4(fp)
   10610:	10800017 	ldw	r2,0(r2)
   10614:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   10618:	e0bffe17 	ldw	r2,-8(fp)
   1061c:	10c00a04 	addi	r3,r2,40
   10620:	e0bfff17 	ldw	r2,-4(fp)
   10624:	10800217 	ldw	r2,8(r2)
   10628:	100b883a 	mov	r5,r2
   1062c:	1809883a 	mov	r4,r3
   10630:	0010a080 	call	10a08 <altera_avalon_jtag_uart_close>
}
   10634:	e037883a 	mov	sp,fp
   10638:	dfc00117 	ldw	ra,4(sp)
   1063c:	df000017 	ldw	fp,0(sp)
   10640:	dec00204 	addi	sp,sp,8
   10644:	f800283a 	ret

00010648 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   10648:	defffa04 	addi	sp,sp,-24
   1064c:	dfc00515 	stw	ra,20(sp)
   10650:	df000415 	stw	fp,16(sp)
   10654:	df000404 	addi	fp,sp,16
   10658:	e13ffd15 	stw	r4,-12(fp)
   1065c:	e17ffe15 	stw	r5,-8(fp)
   10660:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   10664:	e0bffd17 	ldw	r2,-12(fp)
   10668:	10800017 	ldw	r2,0(r2)
   1066c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   10670:	e0bffc17 	ldw	r2,-16(fp)
   10674:	10800a04 	addi	r2,r2,40
   10678:	e1bfff17 	ldw	r6,-4(fp)
   1067c:	e17ffe17 	ldw	r5,-8(fp)
   10680:	1009883a 	mov	r4,r2
   10684:	0010a700 	call	10a70 <altera_avalon_jtag_uart_ioctl>
}
   10688:	e037883a 	mov	sp,fp
   1068c:	dfc00117 	ldw	ra,4(sp)
   10690:	df000017 	ldw	fp,0(sp)
   10694:	dec00204 	addi	sp,sp,8
   10698:	f800283a 	ret

0001069c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1069c:	defffa04 	addi	sp,sp,-24
   106a0:	dfc00515 	stw	ra,20(sp)
   106a4:	df000415 	stw	fp,16(sp)
   106a8:	df000404 	addi	fp,sp,16
   106ac:	e13ffd15 	stw	r4,-12(fp)
   106b0:	e17ffe15 	stw	r5,-8(fp)
   106b4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   106b8:	e0bffd17 	ldw	r2,-12(fp)
   106bc:	00c00044 	movi	r3,1
   106c0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   106c4:	e0bffd17 	ldw	r2,-12(fp)
   106c8:	10800017 	ldw	r2,0(r2)
   106cc:	10800104 	addi	r2,r2,4
   106d0:	1007883a 	mov	r3,r2
   106d4:	e0bffd17 	ldw	r2,-12(fp)
   106d8:	10800817 	ldw	r2,32(r2)
   106dc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   106e0:	e0bffe17 	ldw	r2,-8(fp)
   106e4:	e0ffff17 	ldw	r3,-4(fp)
   106e8:	d8000015 	stw	zero,0(sp)
   106ec:	e1fffd17 	ldw	r7,-12(fp)
   106f0:	01800074 	movhi	r6,1
   106f4:	3181d704 	addi	r6,r6,1884
   106f8:	180b883a 	mov	r5,r3
   106fc:	1009883a 	mov	r4,r2
   10700:	0011db80 	call	11db8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   10704:	e0bffd17 	ldw	r2,-12(fp)
   10708:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1070c:	e0bffd17 	ldw	r2,-12(fp)
   10710:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10714:	d0e6de17 	ldw	r3,-25736(gp)
   10718:	e1fffd17 	ldw	r7,-12(fp)
   1071c:	01800074 	movhi	r6,1
   10720:	31825a04 	addi	r6,r6,2408
   10724:	180b883a 	mov	r5,r3
   10728:	1009883a 	mov	r4,r2
   1072c:	001196c0 	call	1196c <alt_alarm_start>
   10730:	1000040e 	bge	r2,zero,10744 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   10734:	e0fffd17 	ldw	r3,-12(fp)
   10738:	00a00034 	movhi	r2,32768
   1073c:	10bfffc4 	addi	r2,r2,-1
   10740:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   10744:	0001883a 	nop
   10748:	e037883a 	mov	sp,fp
   1074c:	dfc00117 	ldw	ra,4(sp)
   10750:	df000017 	ldw	fp,0(sp)
   10754:	dec00204 	addi	sp,sp,8
   10758:	f800283a 	ret

0001075c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1075c:	defff804 	addi	sp,sp,-32
   10760:	df000715 	stw	fp,28(sp)
   10764:	df000704 	addi	fp,sp,28
   10768:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1076c:	e0bfff17 	ldw	r2,-4(fp)
   10770:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   10774:	e0bffb17 	ldw	r2,-20(fp)
   10778:	10800017 	ldw	r2,0(r2)
   1077c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10780:	e0bffc17 	ldw	r2,-16(fp)
   10784:	10800104 	addi	r2,r2,4
   10788:	10800037 	ldwio	r2,0(r2)
   1078c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   10790:	e0bffd17 	ldw	r2,-12(fp)
   10794:	1080c00c 	andi	r2,r2,768
   10798:	10006d26 	beq	r2,zero,10950 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1079c:	e0bffd17 	ldw	r2,-12(fp)
   107a0:	1080400c 	andi	r2,r2,256
   107a4:	10003526 	beq	r2,zero,1087c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   107a8:	00800074 	movhi	r2,1
   107ac:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   107b0:	e0bffb17 	ldw	r2,-20(fp)
   107b4:	10800a17 	ldw	r2,40(r2)
   107b8:	10800044 	addi	r2,r2,1
   107bc:	1081ffcc 	andi	r2,r2,2047
   107c0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   107c4:	e0bffb17 	ldw	r2,-20(fp)
   107c8:	10c00b17 	ldw	r3,44(r2)
   107cc:	e0bffe17 	ldw	r2,-8(fp)
   107d0:	18801526 	beq	r3,r2,10828 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   107d4:	e0bffc17 	ldw	r2,-16(fp)
   107d8:	10800037 	ldwio	r2,0(r2)
   107dc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   107e0:	e0bff917 	ldw	r2,-28(fp)
   107e4:	10a0000c 	andi	r2,r2,32768
   107e8:	10001126 	beq	r2,zero,10830 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   107ec:	e0bffb17 	ldw	r2,-20(fp)
   107f0:	10800a17 	ldw	r2,40(r2)
   107f4:	e0fff917 	ldw	r3,-28(fp)
   107f8:	1809883a 	mov	r4,r3
   107fc:	e0fffb17 	ldw	r3,-20(fp)
   10800:	1885883a 	add	r2,r3,r2
   10804:	10800e04 	addi	r2,r2,56
   10808:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1080c:	e0bffb17 	ldw	r2,-20(fp)
   10810:	10800a17 	ldw	r2,40(r2)
   10814:	10800044 	addi	r2,r2,1
   10818:	10c1ffcc 	andi	r3,r2,2047
   1081c:	e0bffb17 	ldw	r2,-20(fp)
   10820:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   10824:	003fe206 	br	107b0 <_gp+0xffff0afc>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   10828:	0001883a 	nop
   1082c:	00000106 	br	10834 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   10830:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   10834:	e0bff917 	ldw	r2,-28(fp)
   10838:	10bfffec 	andhi	r2,r2,65535
   1083c:	10000f26 	beq	r2,zero,1087c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10840:	e0bffb17 	ldw	r2,-20(fp)
   10844:	10c00817 	ldw	r3,32(r2)
   10848:	00bfff84 	movi	r2,-2
   1084c:	1886703a 	and	r3,r3,r2
   10850:	e0bffb17 	ldw	r2,-20(fp)
   10854:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   10858:	e0bffc17 	ldw	r2,-16(fp)
   1085c:	10800104 	addi	r2,r2,4
   10860:	1007883a 	mov	r3,r2
   10864:	e0bffb17 	ldw	r2,-20(fp)
   10868:	10800817 	ldw	r2,32(r2)
   1086c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10870:	e0bffc17 	ldw	r2,-16(fp)
   10874:	10800104 	addi	r2,r2,4
   10878:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1087c:	e0bffd17 	ldw	r2,-12(fp)
   10880:	1080800c 	andi	r2,r2,512
   10884:	103fbe26 	beq	r2,zero,10780 <_gp+0xffff0acc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   10888:	e0bffd17 	ldw	r2,-12(fp)
   1088c:	1004d43a 	srli	r2,r2,16
   10890:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   10894:	00001406 	br	108e8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   10898:	e0bffc17 	ldw	r2,-16(fp)
   1089c:	e0fffb17 	ldw	r3,-20(fp)
   108a0:	18c00d17 	ldw	r3,52(r3)
   108a4:	e13ffb17 	ldw	r4,-20(fp)
   108a8:	20c7883a 	add	r3,r4,r3
   108ac:	18c20e04 	addi	r3,r3,2104
   108b0:	18c00003 	ldbu	r3,0(r3)
   108b4:	18c03fcc 	andi	r3,r3,255
   108b8:	18c0201c 	xori	r3,r3,128
   108bc:	18ffe004 	addi	r3,r3,-128
   108c0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   108c4:	e0bffb17 	ldw	r2,-20(fp)
   108c8:	10800d17 	ldw	r2,52(r2)
   108cc:	10800044 	addi	r2,r2,1
   108d0:	10c1ffcc 	andi	r3,r2,2047
   108d4:	e0bffb17 	ldw	r2,-20(fp)
   108d8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   108dc:	e0bffa17 	ldw	r2,-24(fp)
   108e0:	10bfffc4 	addi	r2,r2,-1
   108e4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   108e8:	e0bffa17 	ldw	r2,-24(fp)
   108ec:	10000526 	beq	r2,zero,10904 <altera_avalon_jtag_uart_irq+0x1a8>
   108f0:	e0bffb17 	ldw	r2,-20(fp)
   108f4:	10c00d17 	ldw	r3,52(r2)
   108f8:	e0bffb17 	ldw	r2,-20(fp)
   108fc:	10800c17 	ldw	r2,48(r2)
   10900:	18bfe51e 	bne	r3,r2,10898 <_gp+0xffff0be4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   10904:	e0bffa17 	ldw	r2,-24(fp)
   10908:	103f9d26 	beq	r2,zero,10780 <_gp+0xffff0acc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1090c:	e0bffb17 	ldw	r2,-20(fp)
   10910:	10c00817 	ldw	r3,32(r2)
   10914:	00bfff44 	movi	r2,-3
   10918:	1886703a 	and	r3,r3,r2
   1091c:	e0bffb17 	ldw	r2,-20(fp)
   10920:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10924:	e0bffb17 	ldw	r2,-20(fp)
   10928:	10800017 	ldw	r2,0(r2)
   1092c:	10800104 	addi	r2,r2,4
   10930:	1007883a 	mov	r3,r2
   10934:	e0bffb17 	ldw	r2,-20(fp)
   10938:	10800817 	ldw	r2,32(r2)
   1093c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10940:	e0bffc17 	ldw	r2,-16(fp)
   10944:	10800104 	addi	r2,r2,4
   10948:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1094c:	003f8c06 	br	10780 <_gp+0xffff0acc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   10950:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   10954:	0001883a 	nop
   10958:	e037883a 	mov	sp,fp
   1095c:	df000017 	ldw	fp,0(sp)
   10960:	dec00104 	addi	sp,sp,4
   10964:	f800283a 	ret

00010968 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   10968:	defff804 	addi	sp,sp,-32
   1096c:	df000715 	stw	fp,28(sp)
   10970:	df000704 	addi	fp,sp,28
   10974:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   10978:	e0bffb17 	ldw	r2,-20(fp)
   1097c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   10980:	e0bff917 	ldw	r2,-28(fp)
   10984:	10800017 	ldw	r2,0(r2)
   10988:	10800104 	addi	r2,r2,4
   1098c:	10800037 	ldwio	r2,0(r2)
   10990:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   10994:	e0bffa17 	ldw	r2,-24(fp)
   10998:	1081000c 	andi	r2,r2,1024
   1099c:	10000b26 	beq	r2,zero,109cc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   109a0:	e0bff917 	ldw	r2,-28(fp)
   109a4:	10800017 	ldw	r2,0(r2)
   109a8:	10800104 	addi	r2,r2,4
   109ac:	1007883a 	mov	r3,r2
   109b0:	e0bff917 	ldw	r2,-28(fp)
   109b4:	10800817 	ldw	r2,32(r2)
   109b8:	10810014 	ori	r2,r2,1024
   109bc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   109c0:	e0bff917 	ldw	r2,-28(fp)
   109c4:	10000915 	stw	zero,36(r2)
   109c8:	00000a06 	br	109f4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   109cc:	e0bff917 	ldw	r2,-28(fp)
   109d0:	10c00917 	ldw	r3,36(r2)
   109d4:	00a00034 	movhi	r2,32768
   109d8:	10bfff04 	addi	r2,r2,-4
   109dc:	10c00536 	bltu	r2,r3,109f4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   109e0:	e0bff917 	ldw	r2,-28(fp)
   109e4:	10800917 	ldw	r2,36(r2)
   109e8:	10c00044 	addi	r3,r2,1
   109ec:	e0bff917 	ldw	r2,-28(fp)
   109f0:	10c00915 	stw	r3,36(r2)
   109f4:	d0a6de17 	ldw	r2,-25736(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   109f8:	e037883a 	mov	sp,fp
   109fc:	df000017 	ldw	fp,0(sp)
   10a00:	dec00104 	addi	sp,sp,4
   10a04:	f800283a 	ret

00010a08 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   10a08:	defffd04 	addi	sp,sp,-12
   10a0c:	df000215 	stw	fp,8(sp)
   10a10:	df000204 	addi	fp,sp,8
   10a14:	e13ffe15 	stw	r4,-8(fp)
   10a18:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10a1c:	00000506 	br	10a34 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   10a20:	e0bfff17 	ldw	r2,-4(fp)
   10a24:	1090000c 	andi	r2,r2,16384
   10a28:	10000226 	beq	r2,zero,10a34 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   10a2c:	00bffd44 	movi	r2,-11
   10a30:	00000b06 	br	10a60 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10a34:	e0bffe17 	ldw	r2,-8(fp)
   10a38:	10c00d17 	ldw	r3,52(r2)
   10a3c:	e0bffe17 	ldw	r2,-8(fp)
   10a40:	10800c17 	ldw	r2,48(r2)
   10a44:	18800526 	beq	r3,r2,10a5c <altera_avalon_jtag_uart_close+0x54>
   10a48:	e0bffe17 	ldw	r2,-8(fp)
   10a4c:	10c00917 	ldw	r3,36(r2)
   10a50:	e0bffe17 	ldw	r2,-8(fp)
   10a54:	10800117 	ldw	r2,4(r2)
   10a58:	18bff136 	bltu	r3,r2,10a20 <_gp+0xffff0d6c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   10a5c:	0005883a 	mov	r2,zero
}
   10a60:	e037883a 	mov	sp,fp
   10a64:	df000017 	ldw	fp,0(sp)
   10a68:	dec00104 	addi	sp,sp,4
   10a6c:	f800283a 	ret

00010a70 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   10a70:	defffa04 	addi	sp,sp,-24
   10a74:	df000515 	stw	fp,20(sp)
   10a78:	df000504 	addi	fp,sp,20
   10a7c:	e13ffd15 	stw	r4,-12(fp)
   10a80:	e17ffe15 	stw	r5,-8(fp)
   10a84:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   10a88:	00bff9c4 	movi	r2,-25
   10a8c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   10a90:	e0bffe17 	ldw	r2,-8(fp)
   10a94:	10da8060 	cmpeqi	r3,r2,27137
   10a98:	1800031e 	bne	r3,zero,10aa8 <altera_avalon_jtag_uart_ioctl+0x38>
   10a9c:	109a80a0 	cmpeqi	r2,r2,27138
   10aa0:	1000181e 	bne	r2,zero,10b04 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   10aa4:	00002906 	br	10b4c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   10aa8:	e0bffd17 	ldw	r2,-12(fp)
   10aac:	10c00117 	ldw	r3,4(r2)
   10ab0:	00a00034 	movhi	r2,32768
   10ab4:	10bfffc4 	addi	r2,r2,-1
   10ab8:	18802126 	beq	r3,r2,10b40 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   10abc:	e0bfff17 	ldw	r2,-4(fp)
   10ac0:	10800017 	ldw	r2,0(r2)
   10ac4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   10ac8:	e0bffc17 	ldw	r2,-16(fp)
   10acc:	10800090 	cmplti	r2,r2,2
   10ad0:	1000061e 	bne	r2,zero,10aec <altera_avalon_jtag_uart_ioctl+0x7c>
   10ad4:	e0fffc17 	ldw	r3,-16(fp)
   10ad8:	00a00034 	movhi	r2,32768
   10adc:	10bfffc4 	addi	r2,r2,-1
   10ae0:	18800226 	beq	r3,r2,10aec <altera_avalon_jtag_uart_ioctl+0x7c>
   10ae4:	e0bffc17 	ldw	r2,-16(fp)
   10ae8:	00000206 	br	10af4 <altera_avalon_jtag_uart_ioctl+0x84>
   10aec:	00a00034 	movhi	r2,32768
   10af0:	10bfff84 	addi	r2,r2,-2
   10af4:	e0fffd17 	ldw	r3,-12(fp)
   10af8:	18800115 	stw	r2,4(r3)
      rc = 0;
   10afc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10b00:	00000f06 	br	10b40 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   10b04:	e0bffd17 	ldw	r2,-12(fp)
   10b08:	10c00117 	ldw	r3,4(r2)
   10b0c:	00a00034 	movhi	r2,32768
   10b10:	10bfffc4 	addi	r2,r2,-1
   10b14:	18800c26 	beq	r3,r2,10b48 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   10b18:	e0bffd17 	ldw	r2,-12(fp)
   10b1c:	10c00917 	ldw	r3,36(r2)
   10b20:	e0bffd17 	ldw	r2,-12(fp)
   10b24:	10800117 	ldw	r2,4(r2)
   10b28:	1885803a 	cmpltu	r2,r3,r2
   10b2c:	10c03fcc 	andi	r3,r2,255
   10b30:	e0bfff17 	ldw	r2,-4(fp)
   10b34:	10c00015 	stw	r3,0(r2)
      rc = 0;
   10b38:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10b3c:	00000206 	br	10b48 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   10b40:	0001883a 	nop
   10b44:	00000106 	br	10b4c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   10b48:	0001883a 	nop

  default:
    break;
  }

  return rc;
   10b4c:	e0bffb17 	ldw	r2,-20(fp)
}
   10b50:	e037883a 	mov	sp,fp
   10b54:	df000017 	ldw	fp,0(sp)
   10b58:	dec00104 	addi	sp,sp,4
   10b5c:	f800283a 	ret

00010b60 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   10b60:	defff304 	addi	sp,sp,-52
   10b64:	dfc00c15 	stw	ra,48(sp)
   10b68:	df000b15 	stw	fp,44(sp)
   10b6c:	df000b04 	addi	fp,sp,44
   10b70:	e13ffc15 	stw	r4,-16(fp)
   10b74:	e17ffd15 	stw	r5,-12(fp)
   10b78:	e1bffe15 	stw	r6,-8(fp)
   10b7c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   10b80:	e0bffd17 	ldw	r2,-12(fp)
   10b84:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10b88:	00004706 	br	10ca8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   10b8c:	e0bffc17 	ldw	r2,-16(fp)
   10b90:	10800a17 	ldw	r2,40(r2)
   10b94:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   10b98:	e0bffc17 	ldw	r2,-16(fp)
   10b9c:	10800b17 	ldw	r2,44(r2)
   10ba0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   10ba4:	e0fff717 	ldw	r3,-36(fp)
   10ba8:	e0bff817 	ldw	r2,-32(fp)
   10bac:	18800536 	bltu	r3,r2,10bc4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   10bb0:	e0fff717 	ldw	r3,-36(fp)
   10bb4:	e0bff817 	ldw	r2,-32(fp)
   10bb8:	1885c83a 	sub	r2,r3,r2
   10bbc:	e0bff615 	stw	r2,-40(fp)
   10bc0:	00000406 	br	10bd4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   10bc4:	00c20004 	movi	r3,2048
   10bc8:	e0bff817 	ldw	r2,-32(fp)
   10bcc:	1885c83a 	sub	r2,r3,r2
   10bd0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10bd4:	e0bff617 	ldw	r2,-40(fp)
   10bd8:	10001e26 	beq	r2,zero,10c54 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   10bdc:	e0fffe17 	ldw	r3,-8(fp)
   10be0:	e0bff617 	ldw	r2,-40(fp)
   10be4:	1880022e 	bgeu	r3,r2,10bf0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   10be8:	e0bffe17 	ldw	r2,-8(fp)
   10bec:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   10bf0:	e0bffc17 	ldw	r2,-16(fp)
   10bf4:	10c00e04 	addi	r3,r2,56
   10bf8:	e0bff817 	ldw	r2,-32(fp)
   10bfc:	1885883a 	add	r2,r3,r2
   10c00:	e1bff617 	ldw	r6,-40(fp)
   10c04:	100b883a 	mov	r5,r2
   10c08:	e13ff517 	ldw	r4,-44(fp)
   10c0c:	00138b40 	call	138b4 <memcpy>
      ptr   += n;
   10c10:	e0fff517 	ldw	r3,-44(fp)
   10c14:	e0bff617 	ldw	r2,-40(fp)
   10c18:	1885883a 	add	r2,r3,r2
   10c1c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   10c20:	e0fffe17 	ldw	r3,-8(fp)
   10c24:	e0bff617 	ldw	r2,-40(fp)
   10c28:	1885c83a 	sub	r2,r3,r2
   10c2c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10c30:	e0fff817 	ldw	r3,-32(fp)
   10c34:	e0bff617 	ldw	r2,-40(fp)
   10c38:	1885883a 	add	r2,r3,r2
   10c3c:	10c1ffcc 	andi	r3,r2,2047
   10c40:	e0bffc17 	ldw	r2,-16(fp)
   10c44:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   10c48:	e0bffe17 	ldw	r2,-8(fp)
   10c4c:	00bfcf16 	blt	zero,r2,10b8c <_gp+0xffff0ed8>
   10c50:	00000106 	br	10c58 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   10c54:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   10c58:	e0fff517 	ldw	r3,-44(fp)
   10c5c:	e0bffd17 	ldw	r2,-12(fp)
   10c60:	1880141e 	bne	r3,r2,10cb4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   10c64:	e0bfff17 	ldw	r2,-4(fp)
   10c68:	1090000c 	andi	r2,r2,16384
   10c6c:	1000131e 	bne	r2,zero,10cbc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   10c70:	0001883a 	nop
   10c74:	e0bffc17 	ldw	r2,-16(fp)
   10c78:	10c00a17 	ldw	r3,40(r2)
   10c7c:	e0bff717 	ldw	r2,-36(fp)
   10c80:	1880051e 	bne	r3,r2,10c98 <altera_avalon_jtag_uart_read+0x138>
   10c84:	e0bffc17 	ldw	r2,-16(fp)
   10c88:	10c00917 	ldw	r3,36(r2)
   10c8c:	e0bffc17 	ldw	r2,-16(fp)
   10c90:	10800117 	ldw	r2,4(r2)
   10c94:	18bff736 	bltu	r3,r2,10c74 <_gp+0xffff0fc0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   10c98:	e0bffc17 	ldw	r2,-16(fp)
   10c9c:	10c00a17 	ldw	r3,40(r2)
   10ca0:	e0bff717 	ldw	r2,-36(fp)
   10ca4:	18800726 	beq	r3,r2,10cc4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10ca8:	e0bffe17 	ldw	r2,-8(fp)
   10cac:	00bfb716 	blt	zero,r2,10b8c <_gp+0xffff0ed8>
   10cb0:	00000506 	br	10cc8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   10cb4:	0001883a 	nop
   10cb8:	00000306 	br	10cc8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   10cbc:	0001883a 	nop
   10cc0:	00000106 	br	10cc8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   10cc4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   10cc8:	e0fff517 	ldw	r3,-44(fp)
   10ccc:	e0bffd17 	ldw	r2,-12(fp)
   10cd0:	18801826 	beq	r3,r2,10d34 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10cd4:	0005303a 	rdctl	r2,status
   10cd8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10cdc:	e0fffb17 	ldw	r3,-20(fp)
   10ce0:	00bfff84 	movi	r2,-2
   10ce4:	1884703a 	and	r2,r3,r2
   10ce8:	1001703a 	wrctl	status,r2
  
  return context;
   10cec:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   10cf0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10cf4:	e0bffc17 	ldw	r2,-16(fp)
   10cf8:	10800817 	ldw	r2,32(r2)
   10cfc:	10c00054 	ori	r3,r2,1
   10d00:	e0bffc17 	ldw	r2,-16(fp)
   10d04:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10d08:	e0bffc17 	ldw	r2,-16(fp)
   10d0c:	10800017 	ldw	r2,0(r2)
   10d10:	10800104 	addi	r2,r2,4
   10d14:	1007883a 	mov	r3,r2
   10d18:	e0bffc17 	ldw	r2,-16(fp)
   10d1c:	10800817 	ldw	r2,32(r2)
   10d20:	18800035 	stwio	r2,0(r3)
   10d24:	e0bffa17 	ldw	r2,-24(fp)
   10d28:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10d2c:	e0bff917 	ldw	r2,-28(fp)
   10d30:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   10d34:	e0fff517 	ldw	r3,-44(fp)
   10d38:	e0bffd17 	ldw	r2,-12(fp)
   10d3c:	18800426 	beq	r3,r2,10d50 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   10d40:	e0fff517 	ldw	r3,-44(fp)
   10d44:	e0bffd17 	ldw	r2,-12(fp)
   10d48:	1885c83a 	sub	r2,r3,r2
   10d4c:	00000606 	br	10d68 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   10d50:	e0bfff17 	ldw	r2,-4(fp)
   10d54:	1090000c 	andi	r2,r2,16384
   10d58:	10000226 	beq	r2,zero,10d64 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   10d5c:	00bffd44 	movi	r2,-11
   10d60:	00000106 	br	10d68 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   10d64:	00bffec4 	movi	r2,-5
}
   10d68:	e037883a 	mov	sp,fp
   10d6c:	dfc00117 	ldw	ra,4(sp)
   10d70:	df000017 	ldw	fp,0(sp)
   10d74:	dec00204 	addi	sp,sp,8
   10d78:	f800283a 	ret

00010d7c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10d7c:	defff304 	addi	sp,sp,-52
   10d80:	dfc00c15 	stw	ra,48(sp)
   10d84:	df000b15 	stw	fp,44(sp)
   10d88:	df000b04 	addi	fp,sp,44
   10d8c:	e13ffc15 	stw	r4,-16(fp)
   10d90:	e17ffd15 	stw	r5,-12(fp)
   10d94:	e1bffe15 	stw	r6,-8(fp)
   10d98:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   10d9c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   10da0:	e0bffd17 	ldw	r2,-12(fp)
   10da4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   10da8:	00003706 	br	10e88 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   10dac:	e0bffc17 	ldw	r2,-16(fp)
   10db0:	10800c17 	ldw	r2,48(r2)
   10db4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   10db8:	e0bffc17 	ldw	r2,-16(fp)
   10dbc:	10800d17 	ldw	r2,52(r2)
   10dc0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   10dc4:	e0fff917 	ldw	r3,-28(fp)
   10dc8:	e0bff517 	ldw	r2,-44(fp)
   10dcc:	1880062e 	bgeu	r3,r2,10de8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   10dd0:	e0fff517 	ldw	r3,-44(fp)
   10dd4:	e0bff917 	ldw	r2,-28(fp)
   10dd8:	1885c83a 	sub	r2,r3,r2
   10ddc:	10bfffc4 	addi	r2,r2,-1
   10de0:	e0bff615 	stw	r2,-40(fp)
   10de4:	00000b06 	br	10e14 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   10de8:	e0bff517 	ldw	r2,-44(fp)
   10dec:	10000526 	beq	r2,zero,10e04 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   10df0:	00c20004 	movi	r3,2048
   10df4:	e0bff917 	ldw	r2,-28(fp)
   10df8:	1885c83a 	sub	r2,r3,r2
   10dfc:	e0bff615 	stw	r2,-40(fp)
   10e00:	00000406 	br	10e14 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   10e04:	00c1ffc4 	movi	r3,2047
   10e08:	e0bff917 	ldw	r2,-28(fp)
   10e0c:	1885c83a 	sub	r2,r3,r2
   10e10:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10e14:	e0bff617 	ldw	r2,-40(fp)
   10e18:	10001e26 	beq	r2,zero,10e94 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   10e1c:	e0fffe17 	ldw	r3,-8(fp)
   10e20:	e0bff617 	ldw	r2,-40(fp)
   10e24:	1880022e 	bgeu	r3,r2,10e30 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   10e28:	e0bffe17 	ldw	r2,-8(fp)
   10e2c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   10e30:	e0bffc17 	ldw	r2,-16(fp)
   10e34:	10c20e04 	addi	r3,r2,2104
   10e38:	e0bff917 	ldw	r2,-28(fp)
   10e3c:	1885883a 	add	r2,r3,r2
   10e40:	e1bff617 	ldw	r6,-40(fp)
   10e44:	e17ffd17 	ldw	r5,-12(fp)
   10e48:	1009883a 	mov	r4,r2
   10e4c:	00138b40 	call	138b4 <memcpy>
      ptr   += n;
   10e50:	e0fffd17 	ldw	r3,-12(fp)
   10e54:	e0bff617 	ldw	r2,-40(fp)
   10e58:	1885883a 	add	r2,r3,r2
   10e5c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   10e60:	e0fffe17 	ldw	r3,-8(fp)
   10e64:	e0bff617 	ldw	r2,-40(fp)
   10e68:	1885c83a 	sub	r2,r3,r2
   10e6c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10e70:	e0fff917 	ldw	r3,-28(fp)
   10e74:	e0bff617 	ldw	r2,-40(fp)
   10e78:	1885883a 	add	r2,r3,r2
   10e7c:	10c1ffcc 	andi	r3,r2,2047
   10e80:	e0bffc17 	ldw	r2,-16(fp)
   10e84:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   10e88:	e0bffe17 	ldw	r2,-8(fp)
   10e8c:	00bfc716 	blt	zero,r2,10dac <_gp+0xffff10f8>
   10e90:	00000106 	br	10e98 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   10e94:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10e98:	0005303a 	rdctl	r2,status
   10e9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ea0:	e0fffb17 	ldw	r3,-20(fp)
   10ea4:	00bfff84 	movi	r2,-2
   10ea8:	1884703a 	and	r2,r3,r2
   10eac:	1001703a 	wrctl	status,r2
  
  return context;
   10eb0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   10eb4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10eb8:	e0bffc17 	ldw	r2,-16(fp)
   10ebc:	10800817 	ldw	r2,32(r2)
   10ec0:	10c00094 	ori	r3,r2,2
   10ec4:	e0bffc17 	ldw	r2,-16(fp)
   10ec8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10ecc:	e0bffc17 	ldw	r2,-16(fp)
   10ed0:	10800017 	ldw	r2,0(r2)
   10ed4:	10800104 	addi	r2,r2,4
   10ed8:	1007883a 	mov	r3,r2
   10edc:	e0bffc17 	ldw	r2,-16(fp)
   10ee0:	10800817 	ldw	r2,32(r2)
   10ee4:	18800035 	stwio	r2,0(r3)
   10ee8:	e0bffa17 	ldw	r2,-24(fp)
   10eec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10ef0:	e0bff817 	ldw	r2,-32(fp)
   10ef4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   10ef8:	e0bffe17 	ldw	r2,-8(fp)
   10efc:	0080100e 	bge	zero,r2,10f40 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   10f00:	e0bfff17 	ldw	r2,-4(fp)
   10f04:	1090000c 	andi	r2,r2,16384
   10f08:	1000101e 	bne	r2,zero,10f4c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   10f0c:	0001883a 	nop
   10f10:	e0bffc17 	ldw	r2,-16(fp)
   10f14:	10c00d17 	ldw	r3,52(r2)
   10f18:	e0bff517 	ldw	r2,-44(fp)
   10f1c:	1880051e 	bne	r3,r2,10f34 <altera_avalon_jtag_uart_write+0x1b8>
   10f20:	e0bffc17 	ldw	r2,-16(fp)
   10f24:	10c00917 	ldw	r3,36(r2)
   10f28:	e0bffc17 	ldw	r2,-16(fp)
   10f2c:	10800117 	ldw	r2,4(r2)
   10f30:	18bff736 	bltu	r3,r2,10f10 <_gp+0xffff125c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   10f34:	e0bffc17 	ldw	r2,-16(fp)
   10f38:	10800917 	ldw	r2,36(r2)
   10f3c:	1000051e 	bne	r2,zero,10f54 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   10f40:	e0bffe17 	ldw	r2,-8(fp)
   10f44:	00bfd016 	blt	zero,r2,10e88 <_gp+0xffff11d4>
   10f48:	00000306 	br	10f58 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   10f4c:	0001883a 	nop
   10f50:	00000106 	br	10f58 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   10f54:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   10f58:	e0fffd17 	ldw	r3,-12(fp)
   10f5c:	e0bff717 	ldw	r2,-36(fp)
   10f60:	18800426 	beq	r3,r2,10f74 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   10f64:	e0fffd17 	ldw	r3,-12(fp)
   10f68:	e0bff717 	ldw	r2,-36(fp)
   10f6c:	1885c83a 	sub	r2,r3,r2
   10f70:	00000606 	br	10f8c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   10f74:	e0bfff17 	ldw	r2,-4(fp)
   10f78:	1090000c 	andi	r2,r2,16384
   10f7c:	10000226 	beq	r2,zero,10f88 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   10f80:	00bffd44 	movi	r2,-11
   10f84:	00000106 	br	10f8c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   10f88:	00bffec4 	movi	r2,-5
}
   10f8c:	e037883a 	mov	sp,fp
   10f90:	dfc00117 	ldw	ra,4(sp)
   10f94:	df000017 	ldw	fp,0(sp)
   10f98:	dec00204 	addi	sp,sp,8
   10f9c:	f800283a 	ret

00010fa0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   10fa0:	defffa04 	addi	sp,sp,-24
   10fa4:	dfc00515 	stw	ra,20(sp)
   10fa8:	df000415 	stw	fp,16(sp)
   10fac:	df000404 	addi	fp,sp,16
   10fb0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   10fb4:	0007883a 	mov	r3,zero
   10fb8:	e0bfff17 	ldw	r2,-4(fp)
   10fbc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   10fc0:	e0bfff17 	ldw	r2,-4(fp)
   10fc4:	10800104 	addi	r2,r2,4
   10fc8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10fcc:	0005303a 	rdctl	r2,status
   10fd0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10fd4:	e0fffd17 	ldw	r3,-12(fp)
   10fd8:	00bfff84 	movi	r2,-2
   10fdc:	1884703a 	and	r2,r3,r2
   10fe0:	1001703a 	wrctl	status,r2
  
  return context;
   10fe4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   10fe8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   10fec:	001255c0 	call	1255c <alt_tick>
   10ff0:	e0bffc17 	ldw	r2,-16(fp)
   10ff4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10ff8:	e0bffe17 	ldw	r2,-8(fp)
   10ffc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   11000:	0001883a 	nop
   11004:	e037883a 	mov	sp,fp
   11008:	dfc00117 	ldw	ra,4(sp)
   1100c:	df000017 	ldw	fp,0(sp)
   11010:	dec00204 	addi	sp,sp,8
   11014:	f800283a 	ret

00011018 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   11018:	defff804 	addi	sp,sp,-32
   1101c:	dfc00715 	stw	ra,28(sp)
   11020:	df000615 	stw	fp,24(sp)
   11024:	df000604 	addi	fp,sp,24
   11028:	e13ffc15 	stw	r4,-16(fp)
   1102c:	e17ffd15 	stw	r5,-12(fp)
   11030:	e1bffe15 	stw	r6,-8(fp)
   11034:	e1ffff15 	stw	r7,-4(fp)
   11038:	e0bfff17 	ldw	r2,-4(fp)
   1103c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   11040:	d0a6de17 	ldw	r2,-25736(gp)
   11044:	1000021e 	bne	r2,zero,11050 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   11048:	e0bffb17 	ldw	r2,-20(fp)
   1104c:	d0a6de15 	stw	r2,-25736(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   11050:	e0bffc17 	ldw	r2,-16(fp)
   11054:	10800104 	addi	r2,r2,4
   11058:	00c001c4 	movi	r3,7
   1105c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   11060:	d8000015 	stw	zero,0(sp)
   11064:	e1fffc17 	ldw	r7,-16(fp)
   11068:	01800074 	movhi	r6,1
   1106c:	3183e804 	addi	r6,r6,4000
   11070:	e17ffe17 	ldw	r5,-8(fp)
   11074:	e13ffd17 	ldw	r4,-12(fp)
   11078:	0011db80 	call	11db8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   1107c:	0001883a 	nop
   11080:	e037883a 	mov	sp,fp
   11084:	dfc00117 	ldw	ra,4(sp)
   11088:	df000017 	ldw	fp,0(sp)
   1108c:	dec00204 	addi	sp,sp,8
   11090:	f800283a 	ret

00011094 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   11094:	defffa04 	addi	sp,sp,-24
   11098:	dfc00515 	stw	ra,20(sp)
   1109c:	df000415 	stw	fp,16(sp)
   110a0:	df000404 	addi	fp,sp,16
   110a4:	e13ffd15 	stw	r4,-12(fp)
   110a8:	e17ffe15 	stw	r5,-8(fp)
   110ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   110b0:	e0bffd17 	ldw	r2,-12(fp)
   110b4:	10800017 	ldw	r2,0(r2)
   110b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   110bc:	e0bffc17 	ldw	r2,-16(fp)
   110c0:	10c00a04 	addi	r3,r2,40
   110c4:	e0bffd17 	ldw	r2,-12(fp)
   110c8:	10800217 	ldw	r2,8(r2)
   110cc:	100f883a 	mov	r7,r2
   110d0:	e1bfff17 	ldw	r6,-4(fp)
   110d4:	e17ffe17 	ldw	r5,-8(fp)
   110d8:	1809883a 	mov	r4,r3
   110dc:	00115a80 	call	115a8 <altera_avalon_uart_read>
      fd->fd_flags);
}
   110e0:	e037883a 	mov	sp,fp
   110e4:	dfc00117 	ldw	ra,4(sp)
   110e8:	df000017 	ldw	fp,0(sp)
   110ec:	dec00204 	addi	sp,sp,8
   110f0:	f800283a 	ret

000110f4 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   110f4:	defffa04 	addi	sp,sp,-24
   110f8:	dfc00515 	stw	ra,20(sp)
   110fc:	df000415 	stw	fp,16(sp)
   11100:	df000404 	addi	fp,sp,16
   11104:	e13ffd15 	stw	r4,-12(fp)
   11108:	e17ffe15 	stw	r5,-8(fp)
   1110c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   11110:	e0bffd17 	ldw	r2,-12(fp)
   11114:	10800017 	ldw	r2,0(r2)
   11118:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   1111c:	e0bffc17 	ldw	r2,-16(fp)
   11120:	10c00a04 	addi	r3,r2,40
   11124:	e0bffd17 	ldw	r2,-12(fp)
   11128:	10800217 	ldw	r2,8(r2)
   1112c:	100f883a 	mov	r7,r2
   11130:	e1bfff17 	ldw	r6,-4(fp)
   11134:	e17ffe17 	ldw	r5,-8(fp)
   11138:	1809883a 	mov	r4,r3
   1113c:	00117c00 	call	117c0 <altera_avalon_uart_write>
      fd->fd_flags);
}
   11140:	e037883a 	mov	sp,fp
   11144:	dfc00117 	ldw	ra,4(sp)
   11148:	df000017 	ldw	fp,0(sp)
   1114c:	dec00204 	addi	sp,sp,8
   11150:	f800283a 	ret

00011154 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   11154:	defffc04 	addi	sp,sp,-16
   11158:	dfc00315 	stw	ra,12(sp)
   1115c:	df000215 	stw	fp,8(sp)
   11160:	df000204 	addi	fp,sp,8
   11164:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   11168:	e0bfff17 	ldw	r2,-4(fp)
   1116c:	10800017 	ldw	r2,0(r2)
   11170:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   11174:	e0bffe17 	ldw	r2,-8(fp)
   11178:	10c00a04 	addi	r3,r2,40
   1117c:	e0bfff17 	ldw	r2,-4(fp)
   11180:	10800217 	ldw	r2,8(r2)
   11184:	100b883a 	mov	r5,r2
   11188:	1809883a 	mov	r4,r3
   1118c:	00115180 	call	11518 <altera_avalon_uart_close>
}
   11190:	e037883a 	mov	sp,fp
   11194:	dfc00117 	ldw	ra,4(sp)
   11198:	df000017 	ldw	fp,0(sp)
   1119c:	dec00204 	addi	sp,sp,8
   111a0:	f800283a 	ret

000111a4 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   111a4:	defff804 	addi	sp,sp,-32
   111a8:	dfc00715 	stw	ra,28(sp)
   111ac:	df000615 	stw	fp,24(sp)
   111b0:	df000604 	addi	fp,sp,24
   111b4:	e13ffd15 	stw	r4,-12(fp)
   111b8:	e17ffe15 	stw	r5,-8(fp)
   111bc:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   111c0:	e0bffd17 	ldw	r2,-12(fp)
   111c4:	10800017 	ldw	r2,0(r2)
   111c8:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   111cc:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   111d0:	1000041e 	bne	r2,zero,111e4 <altera_avalon_uart_init+0x40>
   111d4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   111d8:	1000021e 	bne	r2,zero,111e4 <altera_avalon_uart_init+0x40>
   111dc:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   111e0:	10000226 	beq	r2,zero,111ec <altera_avalon_uart_init+0x48>
   111e4:	00800044 	movi	r2,1
   111e8:	00000106 	br	111f0 <altera_avalon_uart_init+0x4c>
   111ec:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   111f0:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   111f4:	e0bffc17 	ldw	r2,-16(fp)
   111f8:	10000f1e 	bne	r2,zero,11238 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   111fc:	e0bffd17 	ldw	r2,-12(fp)
   11200:	00c32004 	movi	r3,3200
   11204:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   11208:	e0bffb17 	ldw	r2,-20(fp)
   1120c:	10800304 	addi	r2,r2,12
   11210:	e0fffd17 	ldw	r3,-12(fp)
   11214:	18c00117 	ldw	r3,4(r3)
   11218:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   1121c:	d8000015 	stw	zero,0(sp)
   11220:	e1fffd17 	ldw	r7,-12(fp)
   11224:	01800074 	movhi	r6,1
   11228:	31849404 	addi	r6,r6,4688
   1122c:	e17fff17 	ldw	r5,-4(fp)
   11230:	e13ffe17 	ldw	r4,-8(fp)
   11234:	0011db80 	call	11db8 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   11238:	0001883a 	nop
   1123c:	e037883a 	mov	sp,fp
   11240:	dfc00117 	ldw	ra,4(sp)
   11244:	df000017 	ldw	fp,0(sp)
   11248:	dec00204 	addi	sp,sp,8
   1124c:	f800283a 	ret

00011250 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   11250:	defffa04 	addi	sp,sp,-24
   11254:	dfc00515 	stw	ra,20(sp)
   11258:	df000415 	stw	fp,16(sp)
   1125c:	df000404 	addi	fp,sp,16
   11260:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   11264:	e0bfff17 	ldw	r2,-4(fp)
   11268:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   1126c:	e0bffc17 	ldw	r2,-16(fp)
   11270:	10800017 	ldw	r2,0(r2)
   11274:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   11278:	e0bffd17 	ldw	r2,-12(fp)
   1127c:	10800204 	addi	r2,r2,8
   11280:	10800037 	ldwio	r2,0(r2)
   11284:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   11288:	e0bffd17 	ldw	r2,-12(fp)
   1128c:	10800204 	addi	r2,r2,8
   11290:	0007883a 	mov	r3,zero
   11294:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   11298:	e0bffd17 	ldw	r2,-12(fp)
   1129c:	10800204 	addi	r2,r2,8
   112a0:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   112a4:	e0bffe17 	ldw	r2,-8(fp)
   112a8:	1080200c 	andi	r2,r2,128
   112ac:	10000326 	beq	r2,zero,112bc <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   112b0:	e17ffe17 	ldw	r5,-8(fp)
   112b4:	e13ffc17 	ldw	r4,-16(fp)
   112b8:	00112ec0 	call	112ec <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   112bc:	e0bffe17 	ldw	r2,-8(fp)
   112c0:	1081100c 	andi	r2,r2,1088
   112c4:	10000326 	beq	r2,zero,112d4 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   112c8:	e17ffe17 	ldw	r5,-8(fp)
   112cc:	e13ffc17 	ldw	r4,-16(fp)
   112d0:	00113d00 	call	113d0 <altera_avalon_uart_txirq>
  }
  

}
   112d4:	0001883a 	nop
   112d8:	e037883a 	mov	sp,fp
   112dc:	dfc00117 	ldw	ra,4(sp)
   112e0:	df000017 	ldw	fp,0(sp)
   112e4:	dec00204 	addi	sp,sp,8
   112e8:	f800283a 	ret

000112ec <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   112ec:	defffc04 	addi	sp,sp,-16
   112f0:	df000315 	stw	fp,12(sp)
   112f4:	df000304 	addi	fp,sp,12
   112f8:	e13ffe15 	stw	r4,-8(fp)
   112fc:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   11300:	e0bfff17 	ldw	r2,-4(fp)
   11304:	108000cc 	andi	r2,r2,3
   11308:	10002c1e 	bne	r2,zero,113bc <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   1130c:	e0bffe17 	ldw	r2,-8(fp)
   11310:	10800317 	ldw	r2,12(r2)
   11314:	e0bffe17 	ldw	r2,-8(fp)
   11318:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   1131c:	e0bffe17 	ldw	r2,-8(fp)
   11320:	10800317 	ldw	r2,12(r2)
   11324:	10800044 	addi	r2,r2,1
   11328:	10800fcc 	andi	r2,r2,63
   1132c:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   11330:	e0bffe17 	ldw	r2,-8(fp)
   11334:	10800317 	ldw	r2,12(r2)
   11338:	e0fffe17 	ldw	r3,-8(fp)
   1133c:	18c00017 	ldw	r3,0(r3)
   11340:	18c00037 	ldwio	r3,0(r3)
   11344:	1809883a 	mov	r4,r3
   11348:	e0fffe17 	ldw	r3,-8(fp)
   1134c:	1885883a 	add	r2,r3,r2
   11350:	10800704 	addi	r2,r2,28
   11354:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   11358:	e0bffe17 	ldw	r2,-8(fp)
   1135c:	e0fffd17 	ldw	r3,-12(fp)
   11360:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   11364:	e0bffe17 	ldw	r2,-8(fp)
   11368:	10800317 	ldw	r2,12(r2)
   1136c:	10800044 	addi	r2,r2,1
   11370:	10800fcc 	andi	r2,r2,63
   11374:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   11378:	e0bffe17 	ldw	r2,-8(fp)
   1137c:	10c00217 	ldw	r3,8(r2)
   11380:	e0bffd17 	ldw	r2,-12(fp)
   11384:	18800e1e 	bne	r3,r2,113c0 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   11388:	e0bffe17 	ldw	r2,-8(fp)
   1138c:	10c00117 	ldw	r3,4(r2)
   11390:	00bfdfc4 	movi	r2,-129
   11394:	1886703a 	and	r3,r3,r2
   11398:	e0bffe17 	ldw	r2,-8(fp)
   1139c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   113a0:	e0bffe17 	ldw	r2,-8(fp)
   113a4:	10800017 	ldw	r2,0(r2)
   113a8:	10800304 	addi	r2,r2,12
   113ac:	e0fffe17 	ldw	r3,-8(fp)
   113b0:	18c00117 	ldw	r3,4(r3)
   113b4:	10c00035 	stwio	r3,0(r2)
   113b8:	00000106 	br	113c0 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   113bc:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
   113c0:	e037883a 	mov	sp,fp
   113c4:	df000017 	ldw	fp,0(sp)
   113c8:	dec00104 	addi	sp,sp,4
   113cc:	f800283a 	ret

000113d0 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   113d0:	defffb04 	addi	sp,sp,-20
   113d4:	df000415 	stw	fp,16(sp)
   113d8:	df000404 	addi	fp,sp,16
   113dc:	e13ffc15 	stw	r4,-16(fp)
   113e0:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   113e4:	e0bffc17 	ldw	r2,-16(fp)
   113e8:	10c00417 	ldw	r3,16(r2)
   113ec:	e0bffc17 	ldw	r2,-16(fp)
   113f0:	10800517 	ldw	r2,20(r2)
   113f4:	18803226 	beq	r3,r2,114c0 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   113f8:	e0bffc17 	ldw	r2,-16(fp)
   113fc:	10800617 	ldw	r2,24(r2)
   11400:	1080008c 	andi	r2,r2,2
   11404:	10000326 	beq	r2,zero,11414 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   11408:	e0bffd17 	ldw	r2,-12(fp)
   1140c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   11410:	10001d26 	beq	r2,zero,11488 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   11414:	e0bffc17 	ldw	r2,-16(fp)
   11418:	10800417 	ldw	r2,16(r2)
   1141c:	e0bffc17 	ldw	r2,-16(fp)
   11420:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   11424:	e0bffc17 	ldw	r2,-16(fp)
   11428:	10800017 	ldw	r2,0(r2)
   1142c:	10800104 	addi	r2,r2,4
   11430:	e0fffc17 	ldw	r3,-16(fp)
   11434:	18c00417 	ldw	r3,16(r3)
   11438:	e13ffc17 	ldw	r4,-16(fp)
   1143c:	20c7883a 	add	r3,r4,r3
   11440:	18c01704 	addi	r3,r3,92
   11444:	18c00003 	ldbu	r3,0(r3)
   11448:	18c03fcc 	andi	r3,r3,255
   1144c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   11450:	e0bffc17 	ldw	r2,-16(fp)
   11454:	10800417 	ldw	r2,16(r2)
   11458:	10800044 	addi	r2,r2,1
   1145c:	e0fffc17 	ldw	r3,-16(fp)
   11460:	18800415 	stw	r2,16(r3)
   11464:	10c00fcc 	andi	r3,r2,63
   11468:	e0bffc17 	ldw	r2,-16(fp)
   1146c:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   11470:	e0bffc17 	ldw	r2,-16(fp)
   11474:	10800117 	ldw	r2,4(r2)
   11478:	10c01014 	ori	r3,r2,64
   1147c:	e0bffc17 	ldw	r2,-16(fp)
   11480:	10c00115 	stw	r3,4(r2)
   11484:	00000e06 	br	114c0 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   11488:	e0bffc17 	ldw	r2,-16(fp)
   1148c:	10800017 	ldw	r2,0(r2)
   11490:	10800204 	addi	r2,r2,8
   11494:	10800037 	ldwio	r2,0(r2)
   11498:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   1149c:	e0bffd17 	ldw	r2,-12(fp)
   114a0:	1082000c 	andi	r2,r2,2048
   114a4:	1000061e 	bne	r2,zero,114c0 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   114a8:	e0bffc17 	ldw	r2,-16(fp)
   114ac:	10c00117 	ldw	r3,4(r2)
   114b0:	00bfefc4 	movi	r2,-65
   114b4:	1886703a 	and	r3,r3,r2
   114b8:	e0bffc17 	ldw	r2,-16(fp)
   114bc:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   114c0:	e0bffc17 	ldw	r2,-16(fp)
   114c4:	10c00417 	ldw	r3,16(r2)
   114c8:	e0bffc17 	ldw	r2,-16(fp)
   114cc:	10800517 	ldw	r2,20(r2)
   114d0:	1880061e 	bne	r3,r2,114ec <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   114d4:	e0bffc17 	ldw	r2,-16(fp)
   114d8:	10c00117 	ldw	r3,4(r2)
   114dc:	00beefc4 	movi	r2,-1089
   114e0:	1886703a 	and	r3,r3,r2
   114e4:	e0bffc17 	ldw	r2,-16(fp)
   114e8:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   114ec:	e0bffc17 	ldw	r2,-16(fp)
   114f0:	10800017 	ldw	r2,0(r2)
   114f4:	10800304 	addi	r2,r2,12
   114f8:	e0fffc17 	ldw	r3,-16(fp)
   114fc:	18c00117 	ldw	r3,4(r3)
   11500:	10c00035 	stwio	r3,0(r2)
}
   11504:	0001883a 	nop
   11508:	e037883a 	mov	sp,fp
   1150c:	df000017 	ldw	fp,0(sp)
   11510:	dec00104 	addi	sp,sp,4
   11514:	f800283a 	ret

00011518 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   11518:	defffd04 	addi	sp,sp,-12
   1151c:	df000215 	stw	fp,8(sp)
   11520:	df000204 	addi	fp,sp,8
   11524:	e13ffe15 	stw	r4,-8(fp)
   11528:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   1152c:	00000506 	br	11544 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   11530:	e0bfff17 	ldw	r2,-4(fp)
   11534:	1090000c 	andi	r2,r2,16384
   11538:	10000226 	beq	r2,zero,11544 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1153c:	00bffd44 	movi	r2,-11
   11540:	00000606 	br	1155c <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   11544:	e0bffe17 	ldw	r2,-8(fp)
   11548:	10c00417 	ldw	r3,16(r2)
   1154c:	e0bffe17 	ldw	r2,-8(fp)
   11550:	10800517 	ldw	r2,20(r2)
   11554:	18bff61e 	bne	r3,r2,11530 <_gp+0xffff187c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   11558:	0005883a 	mov	r2,zero
}
   1155c:	e037883a 	mov	sp,fp
   11560:	df000017 	ldw	fp,0(sp)
   11564:	dec00104 	addi	sp,sp,4
   11568:	f800283a 	ret

0001156c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1156c:	defffe04 	addi	sp,sp,-8
   11570:	dfc00115 	stw	ra,4(sp)
   11574:	df000015 	stw	fp,0(sp)
   11578:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1157c:	d0a00517 	ldw	r2,-32748(gp)
   11580:	10000326 	beq	r2,zero,11590 <alt_get_errno+0x24>
   11584:	d0a00517 	ldw	r2,-32748(gp)
   11588:	103ee83a 	callr	r2
   1158c:	00000106 	br	11594 <alt_get_errno+0x28>
   11590:	d0a6e104 	addi	r2,gp,-25724
}
   11594:	e037883a 	mov	sp,fp
   11598:	dfc00117 	ldw	ra,4(sp)
   1159c:	df000017 	ldw	fp,0(sp)
   115a0:	dec00204 	addi	sp,sp,8
   115a4:	f800283a 	ret

000115a8 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   115a8:	defff204 	addi	sp,sp,-56
   115ac:	dfc00d15 	stw	ra,52(sp)
   115b0:	df000c15 	stw	fp,48(sp)
   115b4:	df000c04 	addi	fp,sp,48
   115b8:	e13ffc15 	stw	r4,-16(fp)
   115bc:	e17ffd15 	stw	r5,-12(fp)
   115c0:	e1bffe15 	stw	r6,-8(fp)
   115c4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   115c8:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   115cc:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   115d0:	e0bfff17 	ldw	r2,-4(fp)
   115d4:	1090000c 	andi	r2,r2,16384
   115d8:	1005003a 	cmpeq	r2,r2,zero
   115dc:	10803fcc 	andi	r2,r2,255
   115e0:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   115e4:	00001306 	br	11634 <altera_avalon_uart_read+0x8c>
    {
      count++;
   115e8:	e0bff517 	ldw	r2,-44(fp)
   115ec:	10800044 	addi	r2,r2,1
   115f0:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   115f4:	e0bffd17 	ldw	r2,-12(fp)
   115f8:	10c00044 	addi	r3,r2,1
   115fc:	e0fffd15 	stw	r3,-12(fp)
   11600:	e0fffc17 	ldw	r3,-16(fp)
   11604:	18c00217 	ldw	r3,8(r3)
   11608:	e13ffc17 	ldw	r4,-16(fp)
   1160c:	20c7883a 	add	r3,r4,r3
   11610:	18c00704 	addi	r3,r3,28
   11614:	18c00003 	ldbu	r3,0(r3)
   11618:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   1161c:	e0bffc17 	ldw	r2,-16(fp)
   11620:	10800217 	ldw	r2,8(r2)
   11624:	10800044 	addi	r2,r2,1
   11628:	10c00fcc 	andi	r3,r2,63
   1162c:	e0bffc17 	ldw	r2,-16(fp)
   11630:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   11634:	e0fff517 	ldw	r3,-44(fp)
   11638:	e0bffe17 	ldw	r2,-8(fp)
   1163c:	1880050e 	bge	r3,r2,11654 <altera_avalon_uart_read+0xac>
   11640:	e0bffc17 	ldw	r2,-16(fp)
   11644:	10c00217 	ldw	r3,8(r2)
   11648:	e0bffc17 	ldw	r2,-16(fp)
   1164c:	10800317 	ldw	r2,12(r2)
   11650:	18bfe51e 	bne	r3,r2,115e8 <_gp+0xffff1934>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   11654:	e0bff517 	ldw	r2,-44(fp)
   11658:	1000251e 	bne	r2,zero,116f0 <altera_avalon_uart_read+0x148>
   1165c:	e0bffc17 	ldw	r2,-16(fp)
   11660:	10c00217 	ldw	r3,8(r2)
   11664:	e0bffc17 	ldw	r2,-16(fp)
   11668:	10800317 	ldw	r2,12(r2)
   1166c:	1880201e 	bne	r3,r2,116f0 <altera_avalon_uart_read+0x148>
    {
      if (!block)
   11670:	e0bff617 	ldw	r2,-40(fp)
   11674:	1000071e 	bne	r2,zero,11694 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   11678:	001156c0 	call	1156c <alt_get_errno>
   1167c:	1007883a 	mov	r3,r2
   11680:	008002c4 	movi	r2,11
   11684:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   11688:	00800044 	movi	r2,1
   1168c:	e0bff405 	stb	r2,-48(fp)
        break;
   11690:	00001b06 	br	11700 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11694:	0005303a 	rdctl	r2,status
   11698:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1169c:	e0fff917 	ldw	r3,-28(fp)
   116a0:	00bfff84 	movi	r2,-2
   116a4:	1884703a 	and	r2,r3,r2
   116a8:	1001703a 	wrctl	status,r2
  
  return context;
   116ac:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   116b0:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   116b4:	e0bffc17 	ldw	r2,-16(fp)
   116b8:	10800117 	ldw	r2,4(r2)
   116bc:	10c02014 	ori	r3,r2,128
   116c0:	e0bffc17 	ldw	r2,-16(fp)
   116c4:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   116c8:	e0bffc17 	ldw	r2,-16(fp)
   116cc:	10800017 	ldw	r2,0(r2)
   116d0:	10800304 	addi	r2,r2,12
   116d4:	e0fffc17 	ldw	r3,-16(fp)
   116d8:	18c00117 	ldw	r3,4(r3)
   116dc:	10c00035 	stwio	r3,0(r2)
   116e0:	e0bff817 	ldw	r2,-32(fp)
   116e4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   116e8:	e0bffa17 	ldw	r2,-24(fp)
   116ec:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   116f0:	e0bff517 	ldw	r2,-44(fp)
   116f4:	1000021e 	bne	r2,zero,11700 <altera_avalon_uart_read+0x158>
   116f8:	e0bffe17 	ldw	r2,-8(fp)
   116fc:	103fcd1e 	bne	r2,zero,11634 <_gp+0xffff1980>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11700:	0005303a 	rdctl	r2,status
   11704:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11708:	e0fffb17 	ldw	r3,-20(fp)
   1170c:	00bfff84 	movi	r2,-2
   11710:	1884703a 	and	r2,r3,r2
   11714:	1001703a 	wrctl	status,r2
  
  return context;
   11718:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   1171c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   11720:	e0bffc17 	ldw	r2,-16(fp)
   11724:	10800117 	ldw	r2,4(r2)
   11728:	10c02014 	ori	r3,r2,128
   1172c:	e0bffc17 	ldw	r2,-16(fp)
   11730:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   11734:	e0bffc17 	ldw	r2,-16(fp)
   11738:	10800017 	ldw	r2,0(r2)
   1173c:	10800304 	addi	r2,r2,12
   11740:	e0fffc17 	ldw	r3,-16(fp)
   11744:	18c00117 	ldw	r3,4(r3)
   11748:	10c00035 	stwio	r3,0(r2)
   1174c:	e0bff817 	ldw	r2,-32(fp)
   11750:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11754:	e0bff717 	ldw	r2,-36(fp)
   11758:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   1175c:	e0bff403 	ldbu	r2,-48(fp)
   11760:	10000226 	beq	r2,zero,1176c <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   11764:	00bffd44 	movi	r2,-11
   11768:	00000106 	br	11770 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   1176c:	e0bff517 	ldw	r2,-44(fp)
  }
}
   11770:	e037883a 	mov	sp,fp
   11774:	dfc00117 	ldw	ra,4(sp)
   11778:	df000017 	ldw	fp,0(sp)
   1177c:	dec00204 	addi	sp,sp,8
   11780:	f800283a 	ret

00011784 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11784:	defffe04 	addi	sp,sp,-8
   11788:	dfc00115 	stw	ra,4(sp)
   1178c:	df000015 	stw	fp,0(sp)
   11790:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11794:	d0a00517 	ldw	r2,-32748(gp)
   11798:	10000326 	beq	r2,zero,117a8 <alt_get_errno+0x24>
   1179c:	d0a00517 	ldw	r2,-32748(gp)
   117a0:	103ee83a 	callr	r2
   117a4:	00000106 	br	117ac <alt_get_errno+0x28>
   117a8:	d0a6e104 	addi	r2,gp,-25724
}
   117ac:	e037883a 	mov	sp,fp
   117b0:	dfc00117 	ldw	ra,4(sp)
   117b4:	df000017 	ldw	fp,0(sp)
   117b8:	dec00204 	addi	sp,sp,8
   117bc:	f800283a 	ret

000117c0 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   117c0:	defff204 	addi	sp,sp,-56
   117c4:	dfc00d15 	stw	ra,52(sp)
   117c8:	df000c15 	stw	fp,48(sp)
   117cc:	df000c04 	addi	fp,sp,48
   117d0:	e13ffc15 	stw	r4,-16(fp)
   117d4:	e17ffd15 	stw	r5,-12(fp)
   117d8:	e1bffe15 	stw	r6,-8(fp)
   117dc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   117e0:	e0bffe17 	ldw	r2,-8(fp)
   117e4:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   117e8:	e0bfff17 	ldw	r2,-4(fp)
   117ec:	1090000c 	andi	r2,r2,16384
   117f0:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   117f4:	00003c06 	br	118e8 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   117f8:	e0bffc17 	ldw	r2,-16(fp)
   117fc:	10800517 	ldw	r2,20(r2)
   11800:	10800044 	addi	r2,r2,1
   11804:	10800fcc 	andi	r2,r2,63
   11808:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   1180c:	e0bffc17 	ldw	r2,-16(fp)
   11810:	10c00417 	ldw	r3,16(r2)
   11814:	e0bff717 	ldw	r2,-36(fp)
   11818:	1880221e 	bne	r3,r2,118a4 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   1181c:	e0bff517 	ldw	r2,-44(fp)
   11820:	10000526 	beq	r2,zero,11838 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   11824:	00117840 	call	11784 <alt_get_errno>
   11828:	1007883a 	mov	r3,r2
   1182c:	008002c4 	movi	r2,11
   11830:	18800015 	stw	r2,0(r3)
        break;
   11834:	00002e06 	br	118f0 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11838:	0005303a 	rdctl	r2,status
   1183c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11840:	e0fff917 	ldw	r3,-28(fp)
   11844:	00bfff84 	movi	r2,-2
   11848:	1884703a 	and	r2,r3,r2
   1184c:	1001703a 	wrctl	status,r2
  
  return context;
   11850:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   11854:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   11858:	e0bffc17 	ldw	r2,-16(fp)
   1185c:	10800117 	ldw	r2,4(r2)
   11860:	10c11014 	ori	r3,r2,1088
   11864:	e0bffc17 	ldw	r2,-16(fp)
   11868:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   1186c:	e0bffc17 	ldw	r2,-16(fp)
   11870:	10800017 	ldw	r2,0(r2)
   11874:	10800304 	addi	r2,r2,12
   11878:	e0fffc17 	ldw	r3,-16(fp)
   1187c:	18c00117 	ldw	r3,4(r3)
   11880:	10c00035 	stwio	r3,0(r2)
   11884:	e0bff817 	ldw	r2,-32(fp)
   11888:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1188c:	e0bff617 	ldw	r2,-40(fp)
   11890:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   11894:	e0bffc17 	ldw	r2,-16(fp)
   11898:	10c00417 	ldw	r3,16(r2)
   1189c:	e0bff717 	ldw	r2,-36(fp)
   118a0:	18bffc26 	beq	r3,r2,11894 <_gp+0xffff1be0>
      }
    }

    count--;
   118a4:	e0bff417 	ldw	r2,-48(fp)
   118a8:	10bfffc4 	addi	r2,r2,-1
   118ac:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   118b0:	e0bffc17 	ldw	r2,-16(fp)
   118b4:	10c00517 	ldw	r3,20(r2)
   118b8:	e0bffd17 	ldw	r2,-12(fp)
   118bc:	11000044 	addi	r4,r2,1
   118c0:	e13ffd15 	stw	r4,-12(fp)
   118c4:	10800003 	ldbu	r2,0(r2)
   118c8:	1009883a 	mov	r4,r2
   118cc:	e0bffc17 	ldw	r2,-16(fp)
   118d0:	10c5883a 	add	r2,r2,r3
   118d4:	10801704 	addi	r2,r2,92
   118d8:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   118dc:	e0bffc17 	ldw	r2,-16(fp)
   118e0:	e0fff717 	ldw	r3,-36(fp)
   118e4:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   118e8:	e0bff417 	ldw	r2,-48(fp)
   118ec:	103fc21e 	bne	r2,zero,117f8 <_gp+0xffff1b44>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   118f0:	0005303a 	rdctl	r2,status
   118f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   118f8:	e0fffb17 	ldw	r3,-20(fp)
   118fc:	00bfff84 	movi	r2,-2
   11900:	1884703a 	and	r2,r3,r2
   11904:	1001703a 	wrctl	status,r2
  
  return context;
   11908:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   1190c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   11910:	e0bffc17 	ldw	r2,-16(fp)
   11914:	10800117 	ldw	r2,4(r2)
   11918:	10c11014 	ori	r3,r2,1088
   1191c:	e0bffc17 	ldw	r2,-16(fp)
   11920:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   11924:	e0bffc17 	ldw	r2,-16(fp)
   11928:	10800017 	ldw	r2,0(r2)
   1192c:	10800304 	addi	r2,r2,12
   11930:	e0fffc17 	ldw	r3,-16(fp)
   11934:	18c00117 	ldw	r3,4(r3)
   11938:	10c00035 	stwio	r3,0(r2)
   1193c:	e0bff817 	ldw	r2,-32(fp)
   11940:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11944:	e0bffa17 	ldw	r2,-24(fp)
   11948:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   1194c:	e0fffe17 	ldw	r3,-8(fp)
   11950:	e0bff417 	ldw	r2,-48(fp)
   11954:	1885c83a 	sub	r2,r3,r2
}
   11958:	e037883a 	mov	sp,fp
   1195c:	dfc00117 	ldw	ra,4(sp)
   11960:	df000017 	ldw	fp,0(sp)
   11964:	dec00204 	addi	sp,sp,8
   11968:	f800283a 	ret

0001196c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1196c:	defff504 	addi	sp,sp,-44
   11970:	df000a15 	stw	fp,40(sp)
   11974:	df000a04 	addi	fp,sp,40
   11978:	e13ffc15 	stw	r4,-16(fp)
   1197c:	e17ffd15 	stw	r5,-12(fp)
   11980:	e1bffe15 	stw	r6,-8(fp)
   11984:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   11988:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1198c:	d0a6de17 	ldw	r2,-25736(gp)
  
  if (alt_ticks_per_second ())
   11990:	10003c26 	beq	r2,zero,11a84 <alt_alarm_start+0x118>
  {
    if (alarm)
   11994:	e0bffc17 	ldw	r2,-16(fp)
   11998:	10003826 	beq	r2,zero,11a7c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   1199c:	e0bffc17 	ldw	r2,-16(fp)
   119a0:	e0fffe17 	ldw	r3,-8(fp)
   119a4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   119a8:	e0bffc17 	ldw	r2,-16(fp)
   119ac:	e0ffff17 	ldw	r3,-4(fp)
   119b0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   119b4:	0005303a 	rdctl	r2,status
   119b8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   119bc:	e0fff917 	ldw	r3,-28(fp)
   119c0:	00bfff84 	movi	r2,-2
   119c4:	1884703a 	and	r2,r3,r2
   119c8:	1001703a 	wrctl	status,r2
  
  return context;
   119cc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   119d0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   119d4:	d0a6df17 	ldw	r2,-25732(gp)
      
      current_nticks = alt_nticks();
   119d8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   119dc:	e0fffd17 	ldw	r3,-12(fp)
   119e0:	e0bff617 	ldw	r2,-40(fp)
   119e4:	1885883a 	add	r2,r3,r2
   119e8:	10c00044 	addi	r3,r2,1
   119ec:	e0bffc17 	ldw	r2,-16(fp)
   119f0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   119f4:	e0bffc17 	ldw	r2,-16(fp)
   119f8:	10c00217 	ldw	r3,8(r2)
   119fc:	e0bff617 	ldw	r2,-40(fp)
   11a00:	1880042e 	bgeu	r3,r2,11a14 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   11a04:	e0bffc17 	ldw	r2,-16(fp)
   11a08:	00c00044 	movi	r3,1
   11a0c:	10c00405 	stb	r3,16(r2)
   11a10:	00000206 	br	11a1c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   11a14:	e0bffc17 	ldw	r2,-16(fp)
   11a18:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   11a1c:	e0bffc17 	ldw	r2,-16(fp)
   11a20:	d0e00704 	addi	r3,gp,-32740
   11a24:	e0fffa15 	stw	r3,-24(fp)
   11a28:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11a2c:	e0bffb17 	ldw	r2,-20(fp)
   11a30:	e0fffa17 	ldw	r3,-24(fp)
   11a34:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11a38:	e0bffa17 	ldw	r2,-24(fp)
   11a3c:	10c00017 	ldw	r3,0(r2)
   11a40:	e0bffb17 	ldw	r2,-20(fp)
   11a44:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11a48:	e0bffa17 	ldw	r2,-24(fp)
   11a4c:	10800017 	ldw	r2,0(r2)
   11a50:	e0fffb17 	ldw	r3,-20(fp)
   11a54:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11a58:	e0bffa17 	ldw	r2,-24(fp)
   11a5c:	e0fffb17 	ldw	r3,-20(fp)
   11a60:	10c00015 	stw	r3,0(r2)
   11a64:	e0bff817 	ldw	r2,-32(fp)
   11a68:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11a6c:	e0bff717 	ldw	r2,-36(fp)
   11a70:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   11a74:	0005883a 	mov	r2,zero
   11a78:	00000306 	br	11a88 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   11a7c:	00bffa84 	movi	r2,-22
   11a80:	00000106 	br	11a88 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   11a84:	00bfde84 	movi	r2,-134
  }
}
   11a88:	e037883a 	mov	sp,fp
   11a8c:	df000017 	ldw	fp,0(sp)
   11a90:	dec00104 	addi	sp,sp,4
   11a94:	f800283a 	ret

00011a98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11a98:	defffe04 	addi	sp,sp,-8
   11a9c:	dfc00115 	stw	ra,4(sp)
   11aa0:	df000015 	stw	fp,0(sp)
   11aa4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11aa8:	d0a00517 	ldw	r2,-32748(gp)
   11aac:	10000326 	beq	r2,zero,11abc <alt_get_errno+0x24>
   11ab0:	d0a00517 	ldw	r2,-32748(gp)
   11ab4:	103ee83a 	callr	r2
   11ab8:	00000106 	br	11ac0 <alt_get_errno+0x28>
   11abc:	d0a6e104 	addi	r2,gp,-25724
}
   11ac0:	e037883a 	mov	sp,fp
   11ac4:	dfc00117 	ldw	ra,4(sp)
   11ac8:	df000017 	ldw	fp,0(sp)
   11acc:	dec00204 	addi	sp,sp,8
   11ad0:	f800283a 	ret

00011ad4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   11ad4:	defffb04 	addi	sp,sp,-20
   11ad8:	dfc00415 	stw	ra,16(sp)
   11adc:	df000315 	stw	fp,12(sp)
   11ae0:	df000304 	addi	fp,sp,12
   11ae4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   11ae8:	e0bfff17 	ldw	r2,-4(fp)
   11aec:	10000816 	blt	r2,zero,11b10 <close+0x3c>
   11af0:	01400304 	movi	r5,12
   11af4:	e13fff17 	ldw	r4,-4(fp)
   11af8:	0015aa40 	call	15aa4 <__mulsi3>
   11afc:	1007883a 	mov	r3,r2
   11b00:	00800074 	movhi	r2,1
   11b04:	109cc204 	addi	r2,r2,29448
   11b08:	1885883a 	add	r2,r3,r2
   11b0c:	00000106 	br	11b14 <close+0x40>
   11b10:	0005883a 	mov	r2,zero
   11b14:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   11b18:	e0bffd17 	ldw	r2,-12(fp)
   11b1c:	10001926 	beq	r2,zero,11b84 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   11b20:	e0bffd17 	ldw	r2,-12(fp)
   11b24:	10800017 	ldw	r2,0(r2)
   11b28:	10800417 	ldw	r2,16(r2)
   11b2c:	10000626 	beq	r2,zero,11b48 <close+0x74>
   11b30:	e0bffd17 	ldw	r2,-12(fp)
   11b34:	10800017 	ldw	r2,0(r2)
   11b38:	10800417 	ldw	r2,16(r2)
   11b3c:	e13ffd17 	ldw	r4,-12(fp)
   11b40:	103ee83a 	callr	r2
   11b44:	00000106 	br	11b4c <close+0x78>
   11b48:	0005883a 	mov	r2,zero
   11b4c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   11b50:	e13fff17 	ldw	r4,-4(fp)
   11b54:	001243c0 	call	1243c <alt_release_fd>
    if (rval < 0)
   11b58:	e0bffe17 	ldw	r2,-8(fp)
   11b5c:	1000070e 	bge	r2,zero,11b7c <close+0xa8>
    {
      ALT_ERRNO = -rval;
   11b60:	0011a980 	call	11a98 <alt_get_errno>
   11b64:	1007883a 	mov	r3,r2
   11b68:	e0bffe17 	ldw	r2,-8(fp)
   11b6c:	0085c83a 	sub	r2,zero,r2
   11b70:	18800015 	stw	r2,0(r3)
      return -1;
   11b74:	00bfffc4 	movi	r2,-1
   11b78:	00000706 	br	11b98 <close+0xc4>
    }
    return 0;
   11b7c:	0005883a 	mov	r2,zero
   11b80:	00000506 	br	11b98 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11b84:	0011a980 	call	11a98 <alt_get_errno>
   11b88:	1007883a 	mov	r3,r2
   11b8c:	00801444 	movi	r2,81
   11b90:	18800015 	stw	r2,0(r3)
    return -1;
   11b94:	00bfffc4 	movi	r2,-1
  }
}
   11b98:	e037883a 	mov	sp,fp
   11b9c:	dfc00117 	ldw	ra,4(sp)
   11ba0:	df000017 	ldw	fp,0(sp)
   11ba4:	dec00204 	addi	sp,sp,8
   11ba8:	f800283a 	ret

00011bac <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11bac:	deffff04 	addi	sp,sp,-4
   11bb0:	df000015 	stw	fp,0(sp)
   11bb4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   11bb8:	0001883a 	nop
   11bbc:	e037883a 	mov	sp,fp
   11bc0:	df000017 	ldw	fp,0(sp)
   11bc4:	dec00104 	addi	sp,sp,4
   11bc8:	f800283a 	ret

00011bcc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   11bcc:	defffc04 	addi	sp,sp,-16
   11bd0:	df000315 	stw	fp,12(sp)
   11bd4:	df000304 	addi	fp,sp,12
   11bd8:	e13ffd15 	stw	r4,-12(fp)
   11bdc:	e17ffe15 	stw	r5,-8(fp)
   11be0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   11be4:	e0bfff17 	ldw	r2,-4(fp)
}
   11be8:	e037883a 	mov	sp,fp
   11bec:	df000017 	ldw	fp,0(sp)
   11bf0:	dec00104 	addi	sp,sp,4
   11bf4:	f800283a 	ret

00011bf8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11bf8:	defffe04 	addi	sp,sp,-8
   11bfc:	dfc00115 	stw	ra,4(sp)
   11c00:	df000015 	stw	fp,0(sp)
   11c04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11c08:	d0a00517 	ldw	r2,-32748(gp)
   11c0c:	10000326 	beq	r2,zero,11c1c <alt_get_errno+0x24>
   11c10:	d0a00517 	ldw	r2,-32748(gp)
   11c14:	103ee83a 	callr	r2
   11c18:	00000106 	br	11c20 <alt_get_errno+0x28>
   11c1c:	d0a6e104 	addi	r2,gp,-25724
}
   11c20:	e037883a 	mov	sp,fp
   11c24:	dfc00117 	ldw	ra,4(sp)
   11c28:	df000017 	ldw	fp,0(sp)
   11c2c:	dec00204 	addi	sp,sp,8
   11c30:	f800283a 	ret

00011c34 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   11c34:	defffa04 	addi	sp,sp,-24
   11c38:	dfc00515 	stw	ra,20(sp)
   11c3c:	df000415 	stw	fp,16(sp)
   11c40:	df000404 	addi	fp,sp,16
   11c44:	e13ffe15 	stw	r4,-8(fp)
   11c48:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11c4c:	e0bffe17 	ldw	r2,-8(fp)
   11c50:	10000326 	beq	r2,zero,11c60 <alt_dev_llist_insert+0x2c>
   11c54:	e0bffe17 	ldw	r2,-8(fp)
   11c58:	10800217 	ldw	r2,8(r2)
   11c5c:	1000061e 	bne	r2,zero,11c78 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   11c60:	0011bf80 	call	11bf8 <alt_get_errno>
   11c64:	1007883a 	mov	r3,r2
   11c68:	00800584 	movi	r2,22
   11c6c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   11c70:	00bffa84 	movi	r2,-22
   11c74:	00001306 	br	11cc4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   11c78:	e0bffe17 	ldw	r2,-8(fp)
   11c7c:	e0ffff17 	ldw	r3,-4(fp)
   11c80:	e0fffc15 	stw	r3,-16(fp)
   11c84:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11c88:	e0bffd17 	ldw	r2,-12(fp)
   11c8c:	e0fffc17 	ldw	r3,-16(fp)
   11c90:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11c94:	e0bffc17 	ldw	r2,-16(fp)
   11c98:	10c00017 	ldw	r3,0(r2)
   11c9c:	e0bffd17 	ldw	r2,-12(fp)
   11ca0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11ca4:	e0bffc17 	ldw	r2,-16(fp)
   11ca8:	10800017 	ldw	r2,0(r2)
   11cac:	e0fffd17 	ldw	r3,-12(fp)
   11cb0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11cb4:	e0bffc17 	ldw	r2,-16(fp)
   11cb8:	e0fffd17 	ldw	r3,-12(fp)
   11cbc:	10c00015 	stw	r3,0(r2)

  return 0;  
   11cc0:	0005883a 	mov	r2,zero
}
   11cc4:	e037883a 	mov	sp,fp
   11cc8:	dfc00117 	ldw	ra,4(sp)
   11ccc:	df000017 	ldw	fp,0(sp)
   11cd0:	dec00204 	addi	sp,sp,8
   11cd4:	f800283a 	ret

00011cd8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   11cd8:	defffd04 	addi	sp,sp,-12
   11cdc:	dfc00215 	stw	ra,8(sp)
   11ce0:	df000115 	stw	fp,4(sp)
   11ce4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11ce8:	00800074 	movhi	r2,1
   11cec:	10985904 	addi	r2,r2,24932
   11cf0:	e0bfff15 	stw	r2,-4(fp)
   11cf4:	00000606 	br	11d10 <_do_ctors+0x38>
        (*ctor) (); 
   11cf8:	e0bfff17 	ldw	r2,-4(fp)
   11cfc:	10800017 	ldw	r2,0(r2)
   11d00:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11d04:	e0bfff17 	ldw	r2,-4(fp)
   11d08:	10bfff04 	addi	r2,r2,-4
   11d0c:	e0bfff15 	stw	r2,-4(fp)
   11d10:	e0ffff17 	ldw	r3,-4(fp)
   11d14:	00800074 	movhi	r2,1
   11d18:	10985a04 	addi	r2,r2,24936
   11d1c:	18bff62e 	bgeu	r3,r2,11cf8 <_gp+0xffff2044>
        (*ctor) (); 
}
   11d20:	0001883a 	nop
   11d24:	e037883a 	mov	sp,fp
   11d28:	dfc00117 	ldw	ra,4(sp)
   11d2c:	df000017 	ldw	fp,0(sp)
   11d30:	dec00204 	addi	sp,sp,8
   11d34:	f800283a 	ret

00011d38 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   11d38:	defffd04 	addi	sp,sp,-12
   11d3c:	dfc00215 	stw	ra,8(sp)
   11d40:	df000115 	stw	fp,4(sp)
   11d44:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11d48:	00800074 	movhi	r2,1
   11d4c:	10985904 	addi	r2,r2,24932
   11d50:	e0bfff15 	stw	r2,-4(fp)
   11d54:	00000606 	br	11d70 <_do_dtors+0x38>
        (*dtor) (); 
   11d58:	e0bfff17 	ldw	r2,-4(fp)
   11d5c:	10800017 	ldw	r2,0(r2)
   11d60:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11d64:	e0bfff17 	ldw	r2,-4(fp)
   11d68:	10bfff04 	addi	r2,r2,-4
   11d6c:	e0bfff15 	stw	r2,-4(fp)
   11d70:	e0ffff17 	ldw	r3,-4(fp)
   11d74:	00800074 	movhi	r2,1
   11d78:	10985a04 	addi	r2,r2,24936
   11d7c:	18bff62e 	bgeu	r3,r2,11d58 <_gp+0xffff20a4>
        (*dtor) (); 
}
   11d80:	0001883a 	nop
   11d84:	e037883a 	mov	sp,fp
   11d88:	dfc00117 	ldw	ra,4(sp)
   11d8c:	df000017 	ldw	fp,0(sp)
   11d90:	dec00204 	addi	sp,sp,8
   11d94:	f800283a 	ret

00011d98 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11d98:	deffff04 	addi	sp,sp,-4
   11d9c:	df000015 	stw	fp,0(sp)
   11da0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   11da4:	0001883a 	nop
   11da8:	e037883a 	mov	sp,fp
   11dac:	df000017 	ldw	fp,0(sp)
   11db0:	dec00104 	addi	sp,sp,4
   11db4:	f800283a 	ret

00011db8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   11db8:	defff904 	addi	sp,sp,-28
   11dbc:	dfc00615 	stw	ra,24(sp)
   11dc0:	df000515 	stw	fp,20(sp)
   11dc4:	df000504 	addi	fp,sp,20
   11dc8:	e13ffc15 	stw	r4,-16(fp)
   11dcc:	e17ffd15 	stw	r5,-12(fp)
   11dd0:	e1bffe15 	stw	r6,-8(fp)
   11dd4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   11dd8:	e0800217 	ldw	r2,8(fp)
   11ddc:	d8800015 	stw	r2,0(sp)
   11de0:	e1ffff17 	ldw	r7,-4(fp)
   11de4:	e1bffe17 	ldw	r6,-8(fp)
   11de8:	e17ffd17 	ldw	r5,-12(fp)
   11dec:	e13ffc17 	ldw	r4,-16(fp)
   11df0:	0011f680 	call	11f68 <alt_iic_isr_register>
}  
   11df4:	e037883a 	mov	sp,fp
   11df8:	dfc00117 	ldw	ra,4(sp)
   11dfc:	df000017 	ldw	fp,0(sp)
   11e00:	dec00204 	addi	sp,sp,8
   11e04:	f800283a 	ret

00011e08 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   11e08:	defff904 	addi	sp,sp,-28
   11e0c:	df000615 	stw	fp,24(sp)
   11e10:	df000604 	addi	fp,sp,24
   11e14:	e13ffe15 	stw	r4,-8(fp)
   11e18:	e17fff15 	stw	r5,-4(fp)
   11e1c:	e0bfff17 	ldw	r2,-4(fp)
   11e20:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11e24:	0005303a 	rdctl	r2,status
   11e28:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11e2c:	e0fffb17 	ldw	r3,-20(fp)
   11e30:	00bfff84 	movi	r2,-2
   11e34:	1884703a 	and	r2,r3,r2
   11e38:	1001703a 	wrctl	status,r2
  
  return context;
   11e3c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11e40:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   11e44:	00c00044 	movi	r3,1
   11e48:	e0bffa17 	ldw	r2,-24(fp)
   11e4c:	1884983a 	sll	r2,r3,r2
   11e50:	1007883a 	mov	r3,r2
   11e54:	d0a6dd17 	ldw	r2,-25740(gp)
   11e58:	1884b03a 	or	r2,r3,r2
   11e5c:	d0a6dd15 	stw	r2,-25740(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11e60:	d0a6dd17 	ldw	r2,-25740(gp)
   11e64:	100170fa 	wrctl	ienable,r2
   11e68:	e0bffc17 	ldw	r2,-16(fp)
   11e6c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11e70:	e0bffd17 	ldw	r2,-12(fp)
   11e74:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11e78:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   11e7c:	0001883a 	nop
}
   11e80:	e037883a 	mov	sp,fp
   11e84:	df000017 	ldw	fp,0(sp)
   11e88:	dec00104 	addi	sp,sp,4
   11e8c:	f800283a 	ret

00011e90 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   11e90:	defff904 	addi	sp,sp,-28
   11e94:	df000615 	stw	fp,24(sp)
   11e98:	df000604 	addi	fp,sp,24
   11e9c:	e13ffe15 	stw	r4,-8(fp)
   11ea0:	e17fff15 	stw	r5,-4(fp)
   11ea4:	e0bfff17 	ldw	r2,-4(fp)
   11ea8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11eac:	0005303a 	rdctl	r2,status
   11eb0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11eb4:	e0fffb17 	ldw	r3,-20(fp)
   11eb8:	00bfff84 	movi	r2,-2
   11ebc:	1884703a 	and	r2,r3,r2
   11ec0:	1001703a 	wrctl	status,r2
  
  return context;
   11ec4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11ec8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   11ecc:	00c00044 	movi	r3,1
   11ed0:	e0bffa17 	ldw	r2,-24(fp)
   11ed4:	1884983a 	sll	r2,r3,r2
   11ed8:	0084303a 	nor	r2,zero,r2
   11edc:	1007883a 	mov	r3,r2
   11ee0:	d0a6dd17 	ldw	r2,-25740(gp)
   11ee4:	1884703a 	and	r2,r3,r2
   11ee8:	d0a6dd15 	stw	r2,-25740(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11eec:	d0a6dd17 	ldw	r2,-25740(gp)
   11ef0:	100170fa 	wrctl	ienable,r2
   11ef4:	e0bffc17 	ldw	r2,-16(fp)
   11ef8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11efc:	e0bffd17 	ldw	r2,-12(fp)
   11f00:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11f04:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   11f08:	0001883a 	nop
}
   11f0c:	e037883a 	mov	sp,fp
   11f10:	df000017 	ldw	fp,0(sp)
   11f14:	dec00104 	addi	sp,sp,4
   11f18:	f800283a 	ret

00011f1c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   11f1c:	defffc04 	addi	sp,sp,-16
   11f20:	df000315 	stw	fp,12(sp)
   11f24:	df000304 	addi	fp,sp,12
   11f28:	e13ffe15 	stw	r4,-8(fp)
   11f2c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   11f30:	000530fa 	rdctl	r2,ienable
   11f34:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   11f38:	00c00044 	movi	r3,1
   11f3c:	e0bfff17 	ldw	r2,-4(fp)
   11f40:	1884983a 	sll	r2,r3,r2
   11f44:	1007883a 	mov	r3,r2
   11f48:	e0bffd17 	ldw	r2,-12(fp)
   11f4c:	1884703a 	and	r2,r3,r2
   11f50:	1004c03a 	cmpne	r2,r2,zero
   11f54:	10803fcc 	andi	r2,r2,255
}
   11f58:	e037883a 	mov	sp,fp
   11f5c:	df000017 	ldw	fp,0(sp)
   11f60:	dec00104 	addi	sp,sp,4
   11f64:	f800283a 	ret

00011f68 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   11f68:	defff504 	addi	sp,sp,-44
   11f6c:	dfc00a15 	stw	ra,40(sp)
   11f70:	df000915 	stw	fp,36(sp)
   11f74:	df000904 	addi	fp,sp,36
   11f78:	e13ffc15 	stw	r4,-16(fp)
   11f7c:	e17ffd15 	stw	r5,-12(fp)
   11f80:	e1bffe15 	stw	r6,-8(fp)
   11f84:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   11f88:	00bffa84 	movi	r2,-22
   11f8c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   11f90:	e0bffd17 	ldw	r2,-12(fp)
   11f94:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11f98:	e0bff817 	ldw	r2,-32(fp)
   11f9c:	10800808 	cmpgei	r2,r2,32
   11fa0:	1000271e 	bne	r2,zero,12040 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11fa4:	0005303a 	rdctl	r2,status
   11fa8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11fac:	e0fffb17 	ldw	r3,-20(fp)
   11fb0:	00bfff84 	movi	r2,-2
   11fb4:	1884703a 	and	r2,r3,r2
   11fb8:	1001703a 	wrctl	status,r2
  
  return context;
   11fbc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   11fc0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   11fc4:	008000b4 	movhi	r2,2
   11fc8:	10a61c04 	addi	r2,r2,-26512
   11fcc:	e0fff817 	ldw	r3,-32(fp)
   11fd0:	180690fa 	slli	r3,r3,3
   11fd4:	10c5883a 	add	r2,r2,r3
   11fd8:	e0fffe17 	ldw	r3,-8(fp)
   11fdc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   11fe0:	008000b4 	movhi	r2,2
   11fe4:	10a61c04 	addi	r2,r2,-26512
   11fe8:	e0fff817 	ldw	r3,-32(fp)
   11fec:	180690fa 	slli	r3,r3,3
   11ff0:	10c5883a 	add	r2,r2,r3
   11ff4:	10800104 	addi	r2,r2,4
   11ff8:	e0ffff17 	ldw	r3,-4(fp)
   11ffc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   12000:	e0bffe17 	ldw	r2,-8(fp)
   12004:	10000526 	beq	r2,zero,1201c <alt_iic_isr_register+0xb4>
   12008:	e0bff817 	ldw	r2,-32(fp)
   1200c:	100b883a 	mov	r5,r2
   12010:	e13ffc17 	ldw	r4,-16(fp)
   12014:	0011e080 	call	11e08 <alt_ic_irq_enable>
   12018:	00000406 	br	1202c <alt_iic_isr_register+0xc4>
   1201c:	e0bff817 	ldw	r2,-32(fp)
   12020:	100b883a 	mov	r5,r2
   12024:	e13ffc17 	ldw	r4,-16(fp)
   12028:	0011e900 	call	11e90 <alt_ic_irq_disable>
   1202c:	e0bff715 	stw	r2,-36(fp)
   12030:	e0bffa17 	ldw	r2,-24(fp)
   12034:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12038:	e0bff917 	ldw	r2,-28(fp)
   1203c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   12040:	e0bff717 	ldw	r2,-36(fp)
}
   12044:	e037883a 	mov	sp,fp
   12048:	dfc00117 	ldw	ra,4(sp)
   1204c:	df000017 	ldw	fp,0(sp)
   12050:	dec00204 	addi	sp,sp,8
   12054:	f800283a 	ret

00012058 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   12058:	defff804 	addi	sp,sp,-32
   1205c:	dfc00715 	stw	ra,28(sp)
   12060:	df000615 	stw	fp,24(sp)
   12064:	dc000515 	stw	r16,20(sp)
   12068:	df000604 	addi	fp,sp,24
   1206c:	e13ffb15 	stw	r4,-20(fp)
   12070:	e17ffc15 	stw	r5,-16(fp)
   12074:	e1bffd15 	stw	r6,-12(fp)
   12078:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   1207c:	e1bffe17 	ldw	r6,-8(fp)
   12080:	e17ffd17 	ldw	r5,-12(fp)
   12084:	e13ffc17 	ldw	r4,-16(fp)
   12088:	00122e00 	call	122e0 <open>
   1208c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   12090:	e0bffa17 	ldw	r2,-24(fp)
   12094:	10002216 	blt	r2,zero,12120 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   12098:	04000074 	movhi	r16,1
   1209c:	841cc204 	addi	r16,r16,29448
   120a0:	e0bffa17 	ldw	r2,-24(fp)
   120a4:	01400304 	movi	r5,12
   120a8:	1009883a 	mov	r4,r2
   120ac:	0015aa40 	call	15aa4 <__mulsi3>
   120b0:	8085883a 	add	r2,r16,r2
   120b4:	10c00017 	ldw	r3,0(r2)
   120b8:	e0bffb17 	ldw	r2,-20(fp)
   120bc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   120c0:	04000074 	movhi	r16,1
   120c4:	841cc204 	addi	r16,r16,29448
   120c8:	e0bffa17 	ldw	r2,-24(fp)
   120cc:	01400304 	movi	r5,12
   120d0:	1009883a 	mov	r4,r2
   120d4:	0015aa40 	call	15aa4 <__mulsi3>
   120d8:	8085883a 	add	r2,r16,r2
   120dc:	10800104 	addi	r2,r2,4
   120e0:	10c00017 	ldw	r3,0(r2)
   120e4:	e0bffb17 	ldw	r2,-20(fp)
   120e8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   120ec:	04000074 	movhi	r16,1
   120f0:	841cc204 	addi	r16,r16,29448
   120f4:	e0bffa17 	ldw	r2,-24(fp)
   120f8:	01400304 	movi	r5,12
   120fc:	1009883a 	mov	r4,r2
   12100:	0015aa40 	call	15aa4 <__mulsi3>
   12104:	8085883a 	add	r2,r16,r2
   12108:	10800204 	addi	r2,r2,8
   1210c:	10c00017 	ldw	r3,0(r2)
   12110:	e0bffb17 	ldw	r2,-20(fp)
   12114:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   12118:	e13ffa17 	ldw	r4,-24(fp)
   1211c:	001243c0 	call	1243c <alt_release_fd>
  }
} 
   12120:	0001883a 	nop
   12124:	e6ffff04 	addi	sp,fp,-4
   12128:	dfc00217 	ldw	ra,8(sp)
   1212c:	df000117 	ldw	fp,4(sp)
   12130:	dc000017 	ldw	r16,0(sp)
   12134:	dec00304 	addi	sp,sp,12
   12138:	f800283a 	ret

0001213c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1213c:	defffb04 	addi	sp,sp,-20
   12140:	dfc00415 	stw	ra,16(sp)
   12144:	df000315 	stw	fp,12(sp)
   12148:	df000304 	addi	fp,sp,12
   1214c:	e13ffd15 	stw	r4,-12(fp)
   12150:	e17ffe15 	stw	r5,-8(fp)
   12154:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   12158:	01c07fc4 	movi	r7,511
   1215c:	01800044 	movi	r6,1
   12160:	e17ffd17 	ldw	r5,-12(fp)
   12164:	01000074 	movhi	r4,1
   12168:	211cc504 	addi	r4,r4,29460
   1216c:	00120580 	call	12058 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   12170:	01c07fc4 	movi	r7,511
   12174:	000d883a 	mov	r6,zero
   12178:	e17ffe17 	ldw	r5,-8(fp)
   1217c:	01000074 	movhi	r4,1
   12180:	211cc204 	addi	r4,r4,29448
   12184:	00120580 	call	12058 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   12188:	01c07fc4 	movi	r7,511
   1218c:	01800044 	movi	r6,1
   12190:	e17fff17 	ldw	r5,-4(fp)
   12194:	01000074 	movhi	r4,1
   12198:	211cc804 	addi	r4,r4,29472
   1219c:	00120580 	call	12058 <alt_open_fd>
}  
   121a0:	0001883a 	nop
   121a4:	e037883a 	mov	sp,fp
   121a8:	dfc00117 	ldw	ra,4(sp)
   121ac:	df000017 	ldw	fp,0(sp)
   121b0:	dec00204 	addi	sp,sp,8
   121b4:	f800283a 	ret

000121b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   121b8:	defffe04 	addi	sp,sp,-8
   121bc:	dfc00115 	stw	ra,4(sp)
   121c0:	df000015 	stw	fp,0(sp)
   121c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   121c8:	d0a00517 	ldw	r2,-32748(gp)
   121cc:	10000326 	beq	r2,zero,121dc <alt_get_errno+0x24>
   121d0:	d0a00517 	ldw	r2,-32748(gp)
   121d4:	103ee83a 	callr	r2
   121d8:	00000106 	br	121e0 <alt_get_errno+0x28>
   121dc:	d0a6e104 	addi	r2,gp,-25724
}
   121e0:	e037883a 	mov	sp,fp
   121e4:	dfc00117 	ldw	ra,4(sp)
   121e8:	df000017 	ldw	fp,0(sp)
   121ec:	dec00204 	addi	sp,sp,8
   121f0:	f800283a 	ret

000121f4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   121f4:	defffb04 	addi	sp,sp,-20
   121f8:	dfc00415 	stw	ra,16(sp)
   121fc:	df000315 	stw	fp,12(sp)
   12200:	dc000215 	stw	r16,8(sp)
   12204:	df000304 	addi	fp,sp,12
   12208:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1220c:	e0bffe17 	ldw	r2,-8(fp)
   12210:	10800217 	ldw	r2,8(r2)
   12214:	10d00034 	orhi	r3,r2,16384
   12218:	e0bffe17 	ldw	r2,-8(fp)
   1221c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   12220:	e03ffd15 	stw	zero,-12(fp)
   12224:	00002306 	br	122b4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   12228:	04000074 	movhi	r16,1
   1222c:	841cc204 	addi	r16,r16,29448
   12230:	e0bffd17 	ldw	r2,-12(fp)
   12234:	01400304 	movi	r5,12
   12238:	1009883a 	mov	r4,r2
   1223c:	0015aa40 	call	15aa4 <__mulsi3>
   12240:	8085883a 	add	r2,r16,r2
   12244:	10c00017 	ldw	r3,0(r2)
   12248:	e0bffe17 	ldw	r2,-8(fp)
   1224c:	10800017 	ldw	r2,0(r2)
   12250:	1880151e 	bne	r3,r2,122a8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   12254:	04000074 	movhi	r16,1
   12258:	841cc204 	addi	r16,r16,29448
   1225c:	e0bffd17 	ldw	r2,-12(fp)
   12260:	01400304 	movi	r5,12
   12264:	1009883a 	mov	r4,r2
   12268:	0015aa40 	call	15aa4 <__mulsi3>
   1226c:	8085883a 	add	r2,r16,r2
   12270:	10800204 	addi	r2,r2,8
   12274:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   12278:	10000b0e 	bge	r2,zero,122a8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1227c:	01400304 	movi	r5,12
   12280:	e13ffd17 	ldw	r4,-12(fp)
   12284:	0015aa40 	call	15aa4 <__mulsi3>
   12288:	1007883a 	mov	r3,r2
   1228c:	00800074 	movhi	r2,1
   12290:	109cc204 	addi	r2,r2,29448
   12294:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   12298:	e0bffe17 	ldw	r2,-8(fp)
   1229c:	18800226 	beq	r3,r2,122a8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   122a0:	00bffcc4 	movi	r2,-13
   122a4:	00000806 	br	122c8 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   122a8:	e0bffd17 	ldw	r2,-12(fp)
   122ac:	10800044 	addi	r2,r2,1
   122b0:	e0bffd15 	stw	r2,-12(fp)
   122b4:	d0a00417 	ldw	r2,-32752(gp)
   122b8:	1007883a 	mov	r3,r2
   122bc:	e0bffd17 	ldw	r2,-12(fp)
   122c0:	18bfd92e 	bgeu	r3,r2,12228 <_gp+0xffff2574>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   122c4:	0005883a 	mov	r2,zero
}
   122c8:	e6ffff04 	addi	sp,fp,-4
   122cc:	dfc00217 	ldw	ra,8(sp)
   122d0:	df000117 	ldw	fp,4(sp)
   122d4:	dc000017 	ldw	r16,0(sp)
   122d8:	dec00304 	addi	sp,sp,12
   122dc:	f800283a 	ret

000122e0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   122e0:	defff604 	addi	sp,sp,-40
   122e4:	dfc00915 	stw	ra,36(sp)
   122e8:	df000815 	stw	fp,32(sp)
   122ec:	df000804 	addi	fp,sp,32
   122f0:	e13ffd15 	stw	r4,-12(fp)
   122f4:	e17ffe15 	stw	r5,-8(fp)
   122f8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   122fc:	00bfffc4 	movi	r2,-1
   12300:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   12304:	00bffb44 	movi	r2,-19
   12308:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1230c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   12310:	d1600204 	addi	r5,gp,-32760
   12314:	e13ffd17 	ldw	r4,-12(fp)
   12318:	00126880 	call	12688 <alt_find_dev>
   1231c:	e0bff815 	stw	r2,-32(fp)
   12320:	e0bff817 	ldw	r2,-32(fp)
   12324:	1000051e 	bne	r2,zero,1233c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   12328:	e13ffd17 	ldw	r4,-12(fp)
   1232c:	00127180 	call	12718 <alt_find_file>
   12330:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   12334:	00800044 	movi	r2,1
   12338:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1233c:	e0bff817 	ldw	r2,-32(fp)
   12340:	10002b26 	beq	r2,zero,123f0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   12344:	e13ff817 	ldw	r4,-32(fp)
   12348:	00128200 	call	12820 <alt_get_fd>
   1234c:	e0bff915 	stw	r2,-28(fp)
   12350:	e0bff917 	ldw	r2,-28(fp)
   12354:	1000030e 	bge	r2,zero,12364 <open+0x84>
    {
      status = index;
   12358:	e0bff917 	ldw	r2,-28(fp)
   1235c:	e0bffa15 	stw	r2,-24(fp)
   12360:	00002506 	br	123f8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   12364:	01400304 	movi	r5,12
   12368:	e13ff917 	ldw	r4,-28(fp)
   1236c:	0015aa40 	call	15aa4 <__mulsi3>
   12370:	1007883a 	mov	r3,r2
   12374:	00800074 	movhi	r2,1
   12378:	109cc204 	addi	r2,r2,29448
   1237c:	1885883a 	add	r2,r3,r2
   12380:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   12384:	e0fffe17 	ldw	r3,-8(fp)
   12388:	00900034 	movhi	r2,16384
   1238c:	10bfffc4 	addi	r2,r2,-1
   12390:	1886703a 	and	r3,r3,r2
   12394:	e0bffc17 	ldw	r2,-16(fp)
   12398:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1239c:	e0bffb17 	ldw	r2,-20(fp)
   123a0:	1000051e 	bne	r2,zero,123b8 <open+0xd8>
   123a4:	e13ffc17 	ldw	r4,-16(fp)
   123a8:	00121f40 	call	121f4 <alt_file_locked>
   123ac:	e0bffa15 	stw	r2,-24(fp)
   123b0:	e0bffa17 	ldw	r2,-24(fp)
   123b4:	10001016 	blt	r2,zero,123f8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   123b8:	e0bff817 	ldw	r2,-32(fp)
   123bc:	10800317 	ldw	r2,12(r2)
   123c0:	10000826 	beq	r2,zero,123e4 <open+0x104>
   123c4:	e0bff817 	ldw	r2,-32(fp)
   123c8:	10800317 	ldw	r2,12(r2)
   123cc:	e1ffff17 	ldw	r7,-4(fp)
   123d0:	e1bffe17 	ldw	r6,-8(fp)
   123d4:	e17ffd17 	ldw	r5,-12(fp)
   123d8:	e13ffc17 	ldw	r4,-16(fp)
   123dc:	103ee83a 	callr	r2
   123e0:	00000106 	br	123e8 <open+0x108>
   123e4:	0005883a 	mov	r2,zero
   123e8:	e0bffa15 	stw	r2,-24(fp)
   123ec:	00000206 	br	123f8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   123f0:	00bffb44 	movi	r2,-19
   123f4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   123f8:	e0bffa17 	ldw	r2,-24(fp)
   123fc:	1000090e 	bge	r2,zero,12424 <open+0x144>
  {
    alt_release_fd (index);  
   12400:	e13ff917 	ldw	r4,-28(fp)
   12404:	001243c0 	call	1243c <alt_release_fd>
    ALT_ERRNO = -status;
   12408:	00121b80 	call	121b8 <alt_get_errno>
   1240c:	1007883a 	mov	r3,r2
   12410:	e0bffa17 	ldw	r2,-24(fp)
   12414:	0085c83a 	sub	r2,zero,r2
   12418:	18800015 	stw	r2,0(r3)
    return -1;
   1241c:	00bfffc4 	movi	r2,-1
   12420:	00000106 	br	12428 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   12424:	e0bff917 	ldw	r2,-28(fp)
}
   12428:	e037883a 	mov	sp,fp
   1242c:	dfc00117 	ldw	ra,4(sp)
   12430:	df000017 	ldw	fp,0(sp)
   12434:	dec00204 	addi	sp,sp,8
   12438:	f800283a 	ret

0001243c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1243c:	defffc04 	addi	sp,sp,-16
   12440:	dfc00315 	stw	ra,12(sp)
   12444:	df000215 	stw	fp,8(sp)
   12448:	dc000115 	stw	r16,4(sp)
   1244c:	df000204 	addi	fp,sp,8
   12450:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   12454:	e0bffe17 	ldw	r2,-8(fp)
   12458:	108000d0 	cmplti	r2,r2,3
   1245c:	1000111e 	bne	r2,zero,124a4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   12460:	04000074 	movhi	r16,1
   12464:	841cc204 	addi	r16,r16,29448
   12468:	e0bffe17 	ldw	r2,-8(fp)
   1246c:	01400304 	movi	r5,12
   12470:	1009883a 	mov	r4,r2
   12474:	0015aa40 	call	15aa4 <__mulsi3>
   12478:	8085883a 	add	r2,r16,r2
   1247c:	10800204 	addi	r2,r2,8
   12480:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   12484:	04000074 	movhi	r16,1
   12488:	841cc204 	addi	r16,r16,29448
   1248c:	e0bffe17 	ldw	r2,-8(fp)
   12490:	01400304 	movi	r5,12
   12494:	1009883a 	mov	r4,r2
   12498:	0015aa40 	call	15aa4 <__mulsi3>
   1249c:	8085883a 	add	r2,r16,r2
   124a0:	10000015 	stw	zero,0(r2)
  }
}
   124a4:	0001883a 	nop
   124a8:	e6ffff04 	addi	sp,fp,-4
   124ac:	dfc00217 	ldw	ra,8(sp)
   124b0:	df000117 	ldw	fp,4(sp)
   124b4:	dc000017 	ldw	r16,0(sp)
   124b8:	dec00304 	addi	sp,sp,12
   124bc:	f800283a 	ret

000124c0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   124c0:	defffa04 	addi	sp,sp,-24
   124c4:	df000515 	stw	fp,20(sp)
   124c8:	df000504 	addi	fp,sp,20
   124cc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   124d0:	0005303a 	rdctl	r2,status
   124d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   124d8:	e0fffc17 	ldw	r3,-16(fp)
   124dc:	00bfff84 	movi	r2,-2
   124e0:	1884703a 	and	r2,r3,r2
   124e4:	1001703a 	wrctl	status,r2
  
  return context;
   124e8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   124ec:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   124f0:	e0bfff17 	ldw	r2,-4(fp)
   124f4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   124f8:	e0bffd17 	ldw	r2,-12(fp)
   124fc:	10800017 	ldw	r2,0(r2)
   12500:	e0fffd17 	ldw	r3,-12(fp)
   12504:	18c00117 	ldw	r3,4(r3)
   12508:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1250c:	e0bffd17 	ldw	r2,-12(fp)
   12510:	10800117 	ldw	r2,4(r2)
   12514:	e0fffd17 	ldw	r3,-12(fp)
   12518:	18c00017 	ldw	r3,0(r3)
   1251c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   12520:	e0bffd17 	ldw	r2,-12(fp)
   12524:	e0fffd17 	ldw	r3,-12(fp)
   12528:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1252c:	e0bffd17 	ldw	r2,-12(fp)
   12530:	e0fffd17 	ldw	r3,-12(fp)
   12534:	10c00015 	stw	r3,0(r2)
   12538:	e0bffb17 	ldw	r2,-20(fp)
   1253c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12540:	e0bffe17 	ldw	r2,-8(fp)
   12544:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   12548:	0001883a 	nop
   1254c:	e037883a 	mov	sp,fp
   12550:	df000017 	ldw	fp,0(sp)
   12554:	dec00104 	addi	sp,sp,4
   12558:	f800283a 	ret

0001255c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1255c:	defffb04 	addi	sp,sp,-20
   12560:	dfc00415 	stw	ra,16(sp)
   12564:	df000315 	stw	fp,12(sp)
   12568:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1256c:	d0a00717 	ldw	r2,-32740(gp)
   12570:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   12574:	d0a6df17 	ldw	r2,-25732(gp)
   12578:	10800044 	addi	r2,r2,1
   1257c:	d0a6df15 	stw	r2,-25732(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   12580:	00002e06 	br	1263c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   12584:	e0bffd17 	ldw	r2,-12(fp)
   12588:	10800017 	ldw	r2,0(r2)
   1258c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   12590:	e0bffd17 	ldw	r2,-12(fp)
   12594:	10800403 	ldbu	r2,16(r2)
   12598:	10803fcc 	andi	r2,r2,255
   1259c:	10000426 	beq	r2,zero,125b0 <alt_tick+0x54>
   125a0:	d0a6df17 	ldw	r2,-25732(gp)
   125a4:	1000021e 	bne	r2,zero,125b0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   125a8:	e0bffd17 	ldw	r2,-12(fp)
   125ac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   125b0:	e0bffd17 	ldw	r2,-12(fp)
   125b4:	10800217 	ldw	r2,8(r2)
   125b8:	d0e6df17 	ldw	r3,-25732(gp)
   125bc:	18801d36 	bltu	r3,r2,12634 <alt_tick+0xd8>
   125c0:	e0bffd17 	ldw	r2,-12(fp)
   125c4:	10800403 	ldbu	r2,16(r2)
   125c8:	10803fcc 	andi	r2,r2,255
   125cc:	1000191e 	bne	r2,zero,12634 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   125d0:	e0bffd17 	ldw	r2,-12(fp)
   125d4:	10800317 	ldw	r2,12(r2)
   125d8:	e0fffd17 	ldw	r3,-12(fp)
   125dc:	18c00517 	ldw	r3,20(r3)
   125e0:	1809883a 	mov	r4,r3
   125e4:	103ee83a 	callr	r2
   125e8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   125ec:	e0bfff17 	ldw	r2,-4(fp)
   125f0:	1000031e 	bne	r2,zero,12600 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   125f4:	e13ffd17 	ldw	r4,-12(fp)
   125f8:	00124c00 	call	124c0 <alt_alarm_stop>
   125fc:	00000d06 	br	12634 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   12600:	e0bffd17 	ldw	r2,-12(fp)
   12604:	10c00217 	ldw	r3,8(r2)
   12608:	e0bfff17 	ldw	r2,-4(fp)
   1260c:	1887883a 	add	r3,r3,r2
   12610:	e0bffd17 	ldw	r2,-12(fp)
   12614:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   12618:	e0bffd17 	ldw	r2,-12(fp)
   1261c:	10c00217 	ldw	r3,8(r2)
   12620:	d0a6df17 	ldw	r2,-25732(gp)
   12624:	1880032e 	bgeu	r3,r2,12634 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   12628:	e0bffd17 	ldw	r2,-12(fp)
   1262c:	00c00044 	movi	r3,1
   12630:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   12634:	e0bffe17 	ldw	r2,-8(fp)
   12638:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1263c:	e0fffd17 	ldw	r3,-12(fp)
   12640:	d0a00704 	addi	r2,gp,-32740
   12644:	18bfcf1e 	bne	r3,r2,12584 <_gp+0xffff28d0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   12648:	0001883a 	nop
}
   1264c:	0001883a 	nop
   12650:	e037883a 	mov	sp,fp
   12654:	dfc00117 	ldw	ra,4(sp)
   12658:	df000017 	ldw	fp,0(sp)
   1265c:	dec00204 	addi	sp,sp,8
   12660:	f800283a 	ret

00012664 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   12664:	deffff04 	addi	sp,sp,-4
   12668:	df000015 	stw	fp,0(sp)
   1266c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   12670:	000170fa 	wrctl	ienable,zero
}
   12674:	0001883a 	nop
   12678:	e037883a 	mov	sp,fp
   1267c:	df000017 	ldw	fp,0(sp)
   12680:	dec00104 	addi	sp,sp,4
   12684:	f800283a 	ret

00012688 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   12688:	defffa04 	addi	sp,sp,-24
   1268c:	dfc00515 	stw	ra,20(sp)
   12690:	df000415 	stw	fp,16(sp)
   12694:	df000404 	addi	fp,sp,16
   12698:	e13ffe15 	stw	r4,-8(fp)
   1269c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   126a0:	e0bfff17 	ldw	r2,-4(fp)
   126a4:	10800017 	ldw	r2,0(r2)
   126a8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   126ac:	e13ffe17 	ldw	r4,-8(fp)
   126b0:	00141100 	call	14110 <strlen>
   126b4:	10800044 	addi	r2,r2,1
   126b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   126bc:	00000d06 	br	126f4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   126c0:	e0bffc17 	ldw	r2,-16(fp)
   126c4:	10800217 	ldw	r2,8(r2)
   126c8:	e0fffd17 	ldw	r3,-12(fp)
   126cc:	180d883a 	mov	r6,r3
   126d0:	e17ffe17 	ldw	r5,-8(fp)
   126d4:	1009883a 	mov	r4,r2
   126d8:	00138380 	call	13838 <memcmp>
   126dc:	1000021e 	bne	r2,zero,126e8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   126e0:	e0bffc17 	ldw	r2,-16(fp)
   126e4:	00000706 	br	12704 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   126e8:	e0bffc17 	ldw	r2,-16(fp)
   126ec:	10800017 	ldw	r2,0(r2)
   126f0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   126f4:	e0fffc17 	ldw	r3,-16(fp)
   126f8:	e0bfff17 	ldw	r2,-4(fp)
   126fc:	18bff01e 	bne	r3,r2,126c0 <_gp+0xffff2a0c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   12700:	0005883a 	mov	r2,zero
}
   12704:	e037883a 	mov	sp,fp
   12708:	dfc00117 	ldw	ra,4(sp)
   1270c:	df000017 	ldw	fp,0(sp)
   12710:	dec00204 	addi	sp,sp,8
   12714:	f800283a 	ret

00012718 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   12718:	defffb04 	addi	sp,sp,-20
   1271c:	dfc00415 	stw	ra,16(sp)
   12720:	df000315 	stw	fp,12(sp)
   12724:	df000304 	addi	fp,sp,12
   12728:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1272c:	d0a00017 	ldw	r2,-32768(gp)
   12730:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   12734:	00003106 	br	127fc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   12738:	e0bffd17 	ldw	r2,-12(fp)
   1273c:	10800217 	ldw	r2,8(r2)
   12740:	1009883a 	mov	r4,r2
   12744:	00141100 	call	14110 <strlen>
   12748:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1274c:	e0bffd17 	ldw	r2,-12(fp)
   12750:	10c00217 	ldw	r3,8(r2)
   12754:	e0bffe17 	ldw	r2,-8(fp)
   12758:	10bfffc4 	addi	r2,r2,-1
   1275c:	1885883a 	add	r2,r3,r2
   12760:	10800003 	ldbu	r2,0(r2)
   12764:	10803fcc 	andi	r2,r2,255
   12768:	1080201c 	xori	r2,r2,128
   1276c:	10bfe004 	addi	r2,r2,-128
   12770:	10800bd8 	cmpnei	r2,r2,47
   12774:	1000031e 	bne	r2,zero,12784 <alt_find_file+0x6c>
    {
      len -= 1;
   12778:	e0bffe17 	ldw	r2,-8(fp)
   1277c:	10bfffc4 	addi	r2,r2,-1
   12780:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   12784:	e0bffe17 	ldw	r2,-8(fp)
   12788:	e0ffff17 	ldw	r3,-4(fp)
   1278c:	1885883a 	add	r2,r3,r2
   12790:	10800003 	ldbu	r2,0(r2)
   12794:	10803fcc 	andi	r2,r2,255
   12798:	1080201c 	xori	r2,r2,128
   1279c:	10bfe004 	addi	r2,r2,-128
   127a0:	10800be0 	cmpeqi	r2,r2,47
   127a4:	1000081e 	bne	r2,zero,127c8 <alt_find_file+0xb0>
   127a8:	e0bffe17 	ldw	r2,-8(fp)
   127ac:	e0ffff17 	ldw	r3,-4(fp)
   127b0:	1885883a 	add	r2,r3,r2
   127b4:	10800003 	ldbu	r2,0(r2)
   127b8:	10803fcc 	andi	r2,r2,255
   127bc:	1080201c 	xori	r2,r2,128
   127c0:	10bfe004 	addi	r2,r2,-128
   127c4:	10000a1e 	bne	r2,zero,127f0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   127c8:	e0bffd17 	ldw	r2,-12(fp)
   127cc:	10800217 	ldw	r2,8(r2)
   127d0:	e0fffe17 	ldw	r3,-8(fp)
   127d4:	180d883a 	mov	r6,r3
   127d8:	e17fff17 	ldw	r5,-4(fp)
   127dc:	1009883a 	mov	r4,r2
   127e0:	00138380 	call	13838 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   127e4:	1000021e 	bne	r2,zero,127f0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   127e8:	e0bffd17 	ldw	r2,-12(fp)
   127ec:	00000706 	br	1280c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   127f0:	e0bffd17 	ldw	r2,-12(fp)
   127f4:	10800017 	ldw	r2,0(r2)
   127f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   127fc:	e0fffd17 	ldw	r3,-12(fp)
   12800:	d0a00004 	addi	r2,gp,-32768
   12804:	18bfcc1e 	bne	r3,r2,12738 <_gp+0xffff2a84>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   12808:	0005883a 	mov	r2,zero
}
   1280c:	e037883a 	mov	sp,fp
   12810:	dfc00117 	ldw	ra,4(sp)
   12814:	df000017 	ldw	fp,0(sp)
   12818:	dec00204 	addi	sp,sp,8
   1281c:	f800283a 	ret

00012820 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   12820:	defffa04 	addi	sp,sp,-24
   12824:	dfc00515 	stw	ra,20(sp)
   12828:	df000415 	stw	fp,16(sp)
   1282c:	dc000315 	stw	r16,12(sp)
   12830:	df000404 	addi	fp,sp,16
   12834:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   12838:	00bffa04 	movi	r2,-24
   1283c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12840:	e03ffc15 	stw	zero,-16(fp)
   12844:	00001d06 	br	128bc <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   12848:	04000074 	movhi	r16,1
   1284c:	841cc204 	addi	r16,r16,29448
   12850:	e0bffc17 	ldw	r2,-16(fp)
   12854:	01400304 	movi	r5,12
   12858:	1009883a 	mov	r4,r2
   1285c:	0015aa40 	call	15aa4 <__mulsi3>
   12860:	8085883a 	add	r2,r16,r2
   12864:	10800017 	ldw	r2,0(r2)
   12868:	1000111e 	bne	r2,zero,128b0 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   1286c:	04000074 	movhi	r16,1
   12870:	841cc204 	addi	r16,r16,29448
   12874:	e0bffc17 	ldw	r2,-16(fp)
   12878:	01400304 	movi	r5,12
   1287c:	1009883a 	mov	r4,r2
   12880:	0015aa40 	call	15aa4 <__mulsi3>
   12884:	8085883a 	add	r2,r16,r2
   12888:	e0fffe17 	ldw	r3,-8(fp)
   1288c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   12890:	d0e00417 	ldw	r3,-32752(gp)
   12894:	e0bffc17 	ldw	r2,-16(fp)
   12898:	1880020e 	bge	r3,r2,128a4 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   1289c:	e0bffc17 	ldw	r2,-16(fp)
   128a0:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
   128a4:	e0bffc17 	ldw	r2,-16(fp)
   128a8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   128ac:	00000606 	br	128c8 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   128b0:	e0bffc17 	ldw	r2,-16(fp)
   128b4:	10800044 	addi	r2,r2,1
   128b8:	e0bffc15 	stw	r2,-16(fp)
   128bc:	e0bffc17 	ldw	r2,-16(fp)
   128c0:	10800810 	cmplti	r2,r2,32
   128c4:	103fe01e 	bne	r2,zero,12848 <_gp+0xffff2b94>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   128c8:	e0bffd17 	ldw	r2,-12(fp)
}
   128cc:	e6ffff04 	addi	sp,fp,-4
   128d0:	dfc00217 	ldw	ra,8(sp)
   128d4:	df000117 	ldw	fp,4(sp)
   128d8:	dc000017 	ldw	r16,0(sp)
   128dc:	dec00304 	addi	sp,sp,12
   128e0:	f800283a 	ret

000128e4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   128e4:	defffe04 	addi	sp,sp,-8
   128e8:	df000115 	stw	fp,4(sp)
   128ec:	df000104 	addi	fp,sp,4
   128f0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   128f4:	e0bfff17 	ldw	r2,-4(fp)
   128f8:	10bffe84 	addi	r2,r2,-6
   128fc:	10c00428 	cmpgeui	r3,r2,16
   12900:	18001a1e 	bne	r3,zero,1296c <alt_exception_cause_generated_bad_addr+0x88>
   12904:	100690ba 	slli	r3,r2,2
   12908:	00800074 	movhi	r2,1
   1290c:	108a4704 	addi	r2,r2,10524
   12910:	1885883a 	add	r2,r3,r2
   12914:	10800017 	ldw	r2,0(r2)
   12918:	1000683a 	jmp	r2
   1291c:	0001295c 	xori	zero,zero,1189
   12920:	0001295c 	xori	zero,zero,1189
   12924:	0001296c 	andhi	zero,zero,1189
   12928:	0001296c 	andhi	zero,zero,1189
   1292c:	0001296c 	andhi	zero,zero,1189
   12930:	0001295c 	xori	zero,zero,1189
   12934:	00012964 	muli	zero,zero,1189
   12938:	0001296c 	andhi	zero,zero,1189
   1293c:	0001295c 	xori	zero,zero,1189
   12940:	0001295c 	xori	zero,zero,1189
   12944:	0001296c 	andhi	zero,zero,1189
   12948:	0001295c 	xori	zero,zero,1189
   1294c:	00012964 	muli	zero,zero,1189
   12950:	0001296c 	andhi	zero,zero,1189
   12954:	0001296c 	andhi	zero,zero,1189
   12958:	0001295c 	xori	zero,zero,1189
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1295c:	00800044 	movi	r2,1
   12960:	00000306 	br	12970 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   12964:	0005883a 	mov	r2,zero
   12968:	00000106 	br	12970 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1296c:	0005883a 	mov	r2,zero
  }
}
   12970:	e037883a 	mov	sp,fp
   12974:	df000017 	ldw	fp,0(sp)
   12978:	dec00104 	addi	sp,sp,4
   1297c:	f800283a 	ret

00012980 <atexit>:
   12980:	200b883a 	mov	r5,r4
   12984:	000f883a 	mov	r7,zero
   12988:	000d883a 	mov	r6,zero
   1298c:	0009883a 	mov	r4,zero
   12990:	00142fc1 	jmpi	142fc <__register_exitproc>

00012994 <exit>:
   12994:	defffe04 	addi	sp,sp,-8
   12998:	000b883a 	mov	r5,zero
   1299c:	dc000015 	stw	r16,0(sp)
   129a0:	dfc00115 	stw	ra,4(sp)
   129a4:	2021883a 	mov	r16,r4
   129a8:	00144140 	call	14414 <__call_exitprocs>
   129ac:	00800074 	movhi	r2,1
   129b0:	109f3604 	addi	r2,r2,31960
   129b4:	11000017 	ldw	r4,0(r2)
   129b8:	20800f17 	ldw	r2,60(r4)
   129bc:	10000126 	beq	r2,zero,129c4 <exit+0x30>
   129c0:	103ee83a 	callr	r2
   129c4:	8009883a 	mov	r4,r16
   129c8:	0015acc0 	call	15acc <_exit>

000129cc <_fputs_r>:
   129cc:	defff804 	addi	sp,sp,-32
   129d0:	dc400615 	stw	r17,24(sp)
   129d4:	2023883a 	mov	r17,r4
   129d8:	2809883a 	mov	r4,r5
   129dc:	dc000515 	stw	r16,20(sp)
   129e0:	dfc00715 	stw	ra,28(sp)
   129e4:	3021883a 	mov	r16,r6
   129e8:	d9400315 	stw	r5,12(sp)
   129ec:	00141100 	call	14110 <strlen>
   129f0:	d8800215 	stw	r2,8(sp)
   129f4:	d8800415 	stw	r2,16(sp)
   129f8:	d8800304 	addi	r2,sp,12
   129fc:	d8800015 	stw	r2,0(sp)
   12a00:	00800044 	movi	r2,1
   12a04:	d8800115 	stw	r2,4(sp)
   12a08:	88000226 	beq	r17,zero,12a14 <_fputs_r+0x48>
   12a0c:	88800e17 	ldw	r2,56(r17)
   12a10:	10001226 	beq	r2,zero,12a5c <_fputs_r+0x90>
   12a14:	8080030b 	ldhu	r2,12(r16)
   12a18:	10c8000c 	andi	r3,r2,8192
   12a1c:	1800061e 	bne	r3,zero,12a38 <_fputs_r+0x6c>
   12a20:	81001917 	ldw	r4,100(r16)
   12a24:	00f7ffc4 	movi	r3,-8193
   12a28:	10880014 	ori	r2,r2,8192
   12a2c:	20c6703a 	and	r3,r4,r3
   12a30:	8080030d 	sth	r2,12(r16)
   12a34:	80c01915 	stw	r3,100(r16)
   12a38:	d80d883a 	mov	r6,sp
   12a3c:	800b883a 	mov	r5,r16
   12a40:	8809883a 	mov	r4,r17
   12a44:	0012a800 	call	12a80 <__sfvwrite_r>
   12a48:	dfc00717 	ldw	ra,28(sp)
   12a4c:	dc400617 	ldw	r17,24(sp)
   12a50:	dc000517 	ldw	r16,20(sp)
   12a54:	dec00804 	addi	sp,sp,32
   12a58:	f800283a 	ret
   12a5c:	8809883a 	mov	r4,r17
   12a60:	0014b9c0 	call	14b9c <__sinit>
   12a64:	003feb06 	br	12a14 <_gp+0xffff2d60>

00012a68 <fputs>:
   12a68:	00800074 	movhi	r2,1
   12a6c:	109f3704 	addi	r2,r2,31964
   12a70:	280d883a 	mov	r6,r5
   12a74:	200b883a 	mov	r5,r4
   12a78:	11000017 	ldw	r4,0(r2)
   12a7c:	00129cc1 	jmpi	129cc <_fputs_r>

00012a80 <__sfvwrite_r>:
   12a80:	30800217 	ldw	r2,8(r6)
   12a84:	10006726 	beq	r2,zero,12c24 <__sfvwrite_r+0x1a4>
   12a88:	28c0030b 	ldhu	r3,12(r5)
   12a8c:	defff404 	addi	sp,sp,-48
   12a90:	dd400715 	stw	r21,28(sp)
   12a94:	dd000615 	stw	r20,24(sp)
   12a98:	dc000215 	stw	r16,8(sp)
   12a9c:	dfc00b15 	stw	ra,44(sp)
   12aa0:	df000a15 	stw	fp,40(sp)
   12aa4:	ddc00915 	stw	r23,36(sp)
   12aa8:	dd800815 	stw	r22,32(sp)
   12aac:	dcc00515 	stw	r19,20(sp)
   12ab0:	dc800415 	stw	r18,16(sp)
   12ab4:	dc400315 	stw	r17,12(sp)
   12ab8:	1880020c 	andi	r2,r3,8
   12abc:	2821883a 	mov	r16,r5
   12ac0:	202b883a 	mov	r21,r4
   12ac4:	3029883a 	mov	r20,r6
   12ac8:	10002726 	beq	r2,zero,12b68 <__sfvwrite_r+0xe8>
   12acc:	28800417 	ldw	r2,16(r5)
   12ad0:	10002526 	beq	r2,zero,12b68 <__sfvwrite_r+0xe8>
   12ad4:	1880008c 	andi	r2,r3,2
   12ad8:	a4400017 	ldw	r17,0(r20)
   12adc:	10002a26 	beq	r2,zero,12b88 <__sfvwrite_r+0x108>
   12ae0:	05a00034 	movhi	r22,32768
   12ae4:	0027883a 	mov	r19,zero
   12ae8:	0025883a 	mov	r18,zero
   12aec:	b5bf0004 	addi	r22,r22,-1024
   12af0:	980d883a 	mov	r6,r19
   12af4:	a809883a 	mov	r4,r21
   12af8:	90004626 	beq	r18,zero,12c14 <__sfvwrite_r+0x194>
   12afc:	900f883a 	mov	r7,r18
   12b00:	b480022e 	bgeu	r22,r18,12b0c <__sfvwrite_r+0x8c>
   12b04:	01e00034 	movhi	r7,32768
   12b08:	39ff0004 	addi	r7,r7,-1024
   12b0c:	80800917 	ldw	r2,36(r16)
   12b10:	81400717 	ldw	r5,28(r16)
   12b14:	103ee83a 	callr	r2
   12b18:	00805a0e 	bge	zero,r2,12c84 <__sfvwrite_r+0x204>
   12b1c:	a0c00217 	ldw	r3,8(r20)
   12b20:	98a7883a 	add	r19,r19,r2
   12b24:	90a5c83a 	sub	r18,r18,r2
   12b28:	1885c83a 	sub	r2,r3,r2
   12b2c:	a0800215 	stw	r2,8(r20)
   12b30:	103fef1e 	bne	r2,zero,12af0 <_gp+0xffff2e3c>
   12b34:	0005883a 	mov	r2,zero
   12b38:	dfc00b17 	ldw	ra,44(sp)
   12b3c:	df000a17 	ldw	fp,40(sp)
   12b40:	ddc00917 	ldw	r23,36(sp)
   12b44:	dd800817 	ldw	r22,32(sp)
   12b48:	dd400717 	ldw	r21,28(sp)
   12b4c:	dd000617 	ldw	r20,24(sp)
   12b50:	dcc00517 	ldw	r19,20(sp)
   12b54:	dc800417 	ldw	r18,16(sp)
   12b58:	dc400317 	ldw	r17,12(sp)
   12b5c:	dc000217 	ldw	r16,8(sp)
   12b60:	dec00c04 	addi	sp,sp,48
   12b64:	f800283a 	ret
   12b68:	800b883a 	mov	r5,r16
   12b6c:	a809883a 	mov	r4,r21
   12b70:	00141a80 	call	141a8 <__swsetup_r>
   12b74:	1000ee1e 	bne	r2,zero,12f30 <__sfvwrite_r+0x4b0>
   12b78:	80c0030b 	ldhu	r3,12(r16)
   12b7c:	a4400017 	ldw	r17,0(r20)
   12b80:	1880008c 	andi	r2,r3,2
   12b84:	103fd61e 	bne	r2,zero,12ae0 <_gp+0xffff2e2c>
   12b88:	1880004c 	andi	r2,r3,1
   12b8c:	1000421e 	bne	r2,zero,12c98 <__sfvwrite_r+0x218>
   12b90:	0039883a 	mov	fp,zero
   12b94:	0025883a 	mov	r18,zero
   12b98:	90001a26 	beq	r18,zero,12c04 <__sfvwrite_r+0x184>
   12b9c:	1880800c 	andi	r2,r3,512
   12ba0:	84c00217 	ldw	r19,8(r16)
   12ba4:	10002126 	beq	r2,zero,12c2c <__sfvwrite_r+0x1ac>
   12ba8:	982f883a 	mov	r23,r19
   12bac:	94c09636 	bltu	r18,r19,12e08 <__sfvwrite_r+0x388>
   12bb0:	1881200c 	andi	r2,r3,1152
   12bb4:	1000a11e 	bne	r2,zero,12e3c <__sfvwrite_r+0x3bc>
   12bb8:	81000017 	ldw	r4,0(r16)
   12bbc:	b80d883a 	mov	r6,r23
   12bc0:	e00b883a 	mov	r5,fp
   12bc4:	00139fc0 	call	139fc <memmove>
   12bc8:	80c00217 	ldw	r3,8(r16)
   12bcc:	81000017 	ldw	r4,0(r16)
   12bd0:	9005883a 	mov	r2,r18
   12bd4:	1ce7c83a 	sub	r19,r3,r19
   12bd8:	25cf883a 	add	r7,r4,r23
   12bdc:	84c00215 	stw	r19,8(r16)
   12be0:	81c00015 	stw	r7,0(r16)
   12be4:	a0c00217 	ldw	r3,8(r20)
   12be8:	e0b9883a 	add	fp,fp,r2
   12bec:	90a5c83a 	sub	r18,r18,r2
   12bf0:	18a7c83a 	sub	r19,r3,r2
   12bf4:	a4c00215 	stw	r19,8(r20)
   12bf8:	983fce26 	beq	r19,zero,12b34 <_gp+0xffff2e80>
   12bfc:	80c0030b 	ldhu	r3,12(r16)
   12c00:	903fe61e 	bne	r18,zero,12b9c <_gp+0xffff2ee8>
   12c04:	8f000017 	ldw	fp,0(r17)
   12c08:	8c800117 	ldw	r18,4(r17)
   12c0c:	8c400204 	addi	r17,r17,8
   12c10:	003fe106 	br	12b98 <_gp+0xffff2ee4>
   12c14:	8cc00017 	ldw	r19,0(r17)
   12c18:	8c800117 	ldw	r18,4(r17)
   12c1c:	8c400204 	addi	r17,r17,8
   12c20:	003fb306 	br	12af0 <_gp+0xffff2e3c>
   12c24:	0005883a 	mov	r2,zero
   12c28:	f800283a 	ret
   12c2c:	81000017 	ldw	r4,0(r16)
   12c30:	80800417 	ldw	r2,16(r16)
   12c34:	11005a36 	bltu	r2,r4,12da0 <__sfvwrite_r+0x320>
   12c38:	85c00517 	ldw	r23,20(r16)
   12c3c:	95c05836 	bltu	r18,r23,12da0 <__sfvwrite_r+0x320>
   12c40:	00a00034 	movhi	r2,32768
   12c44:	10bfffc4 	addi	r2,r2,-1
   12c48:	9009883a 	mov	r4,r18
   12c4c:	1480012e 	bgeu	r2,r18,12c54 <__sfvwrite_r+0x1d4>
   12c50:	1009883a 	mov	r4,r2
   12c54:	b80b883a 	mov	r5,r23
   12c58:	00158f00 	call	158f0 <__divsi3>
   12c5c:	b80b883a 	mov	r5,r23
   12c60:	1009883a 	mov	r4,r2
   12c64:	0015aa40 	call	15aa4 <__mulsi3>
   12c68:	81400717 	ldw	r5,28(r16)
   12c6c:	80c00917 	ldw	r3,36(r16)
   12c70:	100f883a 	mov	r7,r2
   12c74:	e00d883a 	mov	r6,fp
   12c78:	a809883a 	mov	r4,r21
   12c7c:	183ee83a 	callr	r3
   12c80:	00bfd816 	blt	zero,r2,12be4 <_gp+0xffff2f30>
   12c84:	8080030b 	ldhu	r2,12(r16)
   12c88:	10801014 	ori	r2,r2,64
   12c8c:	8080030d 	sth	r2,12(r16)
   12c90:	00bfffc4 	movi	r2,-1
   12c94:	003fa806 	br	12b38 <_gp+0xffff2e84>
   12c98:	0027883a 	mov	r19,zero
   12c9c:	0011883a 	mov	r8,zero
   12ca0:	0039883a 	mov	fp,zero
   12ca4:	0025883a 	mov	r18,zero
   12ca8:	90001f26 	beq	r18,zero,12d28 <__sfvwrite_r+0x2a8>
   12cac:	40005a26 	beq	r8,zero,12e18 <__sfvwrite_r+0x398>
   12cb0:	982d883a 	mov	r22,r19
   12cb4:	94c0012e 	bgeu	r18,r19,12cbc <__sfvwrite_r+0x23c>
   12cb8:	902d883a 	mov	r22,r18
   12cbc:	81000017 	ldw	r4,0(r16)
   12cc0:	80800417 	ldw	r2,16(r16)
   12cc4:	b02f883a 	mov	r23,r22
   12cc8:	81c00517 	ldw	r7,20(r16)
   12ccc:	1100032e 	bgeu	r2,r4,12cdc <__sfvwrite_r+0x25c>
   12cd0:	80c00217 	ldw	r3,8(r16)
   12cd4:	38c7883a 	add	r3,r7,r3
   12cd8:	1d801816 	blt	r3,r22,12d3c <__sfvwrite_r+0x2bc>
   12cdc:	b1c03e16 	blt	r22,r7,12dd8 <__sfvwrite_r+0x358>
   12ce0:	80800917 	ldw	r2,36(r16)
   12ce4:	81400717 	ldw	r5,28(r16)
   12ce8:	e00d883a 	mov	r6,fp
   12cec:	da000115 	stw	r8,4(sp)
   12cf0:	a809883a 	mov	r4,r21
   12cf4:	103ee83a 	callr	r2
   12cf8:	102f883a 	mov	r23,r2
   12cfc:	da000117 	ldw	r8,4(sp)
   12d00:	00bfe00e 	bge	zero,r2,12c84 <_gp+0xffff2fd0>
   12d04:	9de7c83a 	sub	r19,r19,r23
   12d08:	98001f26 	beq	r19,zero,12d88 <__sfvwrite_r+0x308>
   12d0c:	a0800217 	ldw	r2,8(r20)
   12d10:	e5f9883a 	add	fp,fp,r23
   12d14:	95e5c83a 	sub	r18,r18,r23
   12d18:	15efc83a 	sub	r23,r2,r23
   12d1c:	a5c00215 	stw	r23,8(r20)
   12d20:	b83f8426 	beq	r23,zero,12b34 <_gp+0xffff2e80>
   12d24:	903fe11e 	bne	r18,zero,12cac <_gp+0xffff2ff8>
   12d28:	8f000017 	ldw	fp,0(r17)
   12d2c:	8c800117 	ldw	r18,4(r17)
   12d30:	0011883a 	mov	r8,zero
   12d34:	8c400204 	addi	r17,r17,8
   12d38:	003fdb06 	br	12ca8 <_gp+0xffff2ff4>
   12d3c:	180d883a 	mov	r6,r3
   12d40:	e00b883a 	mov	r5,fp
   12d44:	da000115 	stw	r8,4(sp)
   12d48:	d8c00015 	stw	r3,0(sp)
   12d4c:	00139fc0 	call	139fc <memmove>
   12d50:	d8c00017 	ldw	r3,0(sp)
   12d54:	80800017 	ldw	r2,0(r16)
   12d58:	800b883a 	mov	r5,r16
   12d5c:	a809883a 	mov	r4,r21
   12d60:	10c5883a 	add	r2,r2,r3
   12d64:	80800015 	stw	r2,0(r16)
   12d68:	d8c00015 	stw	r3,0(sp)
   12d6c:	00147b00 	call	147b0 <_fflush_r>
   12d70:	d8c00017 	ldw	r3,0(sp)
   12d74:	da000117 	ldw	r8,4(sp)
   12d78:	103fc21e 	bne	r2,zero,12c84 <_gp+0xffff2fd0>
   12d7c:	182f883a 	mov	r23,r3
   12d80:	9de7c83a 	sub	r19,r19,r23
   12d84:	983fe11e 	bne	r19,zero,12d0c <_gp+0xffff3058>
   12d88:	800b883a 	mov	r5,r16
   12d8c:	a809883a 	mov	r4,r21
   12d90:	00147b00 	call	147b0 <_fflush_r>
   12d94:	103fbb1e 	bne	r2,zero,12c84 <_gp+0xffff2fd0>
   12d98:	0011883a 	mov	r8,zero
   12d9c:	003fdb06 	br	12d0c <_gp+0xffff3058>
   12da0:	94c0012e 	bgeu	r18,r19,12da8 <__sfvwrite_r+0x328>
   12da4:	9027883a 	mov	r19,r18
   12da8:	980d883a 	mov	r6,r19
   12dac:	e00b883a 	mov	r5,fp
   12db0:	00139fc0 	call	139fc <memmove>
   12db4:	80800217 	ldw	r2,8(r16)
   12db8:	80c00017 	ldw	r3,0(r16)
   12dbc:	14c5c83a 	sub	r2,r2,r19
   12dc0:	1cc7883a 	add	r3,r3,r19
   12dc4:	80800215 	stw	r2,8(r16)
   12dc8:	80c00015 	stw	r3,0(r16)
   12dcc:	10004326 	beq	r2,zero,12edc <__sfvwrite_r+0x45c>
   12dd0:	9805883a 	mov	r2,r19
   12dd4:	003f8306 	br	12be4 <_gp+0xffff2f30>
   12dd8:	b00d883a 	mov	r6,r22
   12ddc:	e00b883a 	mov	r5,fp
   12de0:	da000115 	stw	r8,4(sp)
   12de4:	00139fc0 	call	139fc <memmove>
   12de8:	80800217 	ldw	r2,8(r16)
   12dec:	80c00017 	ldw	r3,0(r16)
   12df0:	da000117 	ldw	r8,4(sp)
   12df4:	1585c83a 	sub	r2,r2,r22
   12df8:	1dad883a 	add	r22,r3,r22
   12dfc:	80800215 	stw	r2,8(r16)
   12e00:	85800015 	stw	r22,0(r16)
   12e04:	003fbf06 	br	12d04 <_gp+0xffff3050>
   12e08:	81000017 	ldw	r4,0(r16)
   12e0c:	9027883a 	mov	r19,r18
   12e10:	902f883a 	mov	r23,r18
   12e14:	003f6906 	br	12bbc <_gp+0xffff2f08>
   12e18:	900d883a 	mov	r6,r18
   12e1c:	01400284 	movi	r5,10
   12e20:	e009883a 	mov	r4,fp
   12e24:	00137540 	call	13754 <memchr>
   12e28:	10003e26 	beq	r2,zero,12f24 <__sfvwrite_r+0x4a4>
   12e2c:	10800044 	addi	r2,r2,1
   12e30:	1727c83a 	sub	r19,r2,fp
   12e34:	02000044 	movi	r8,1
   12e38:	003f9d06 	br	12cb0 <_gp+0xffff2ffc>
   12e3c:	80800517 	ldw	r2,20(r16)
   12e40:	81400417 	ldw	r5,16(r16)
   12e44:	81c00017 	ldw	r7,0(r16)
   12e48:	10a7883a 	add	r19,r2,r2
   12e4c:	9885883a 	add	r2,r19,r2
   12e50:	1026d7fa 	srli	r19,r2,31
   12e54:	396dc83a 	sub	r22,r7,r5
   12e58:	b1000044 	addi	r4,r22,1
   12e5c:	9885883a 	add	r2,r19,r2
   12e60:	1027d07a 	srai	r19,r2,1
   12e64:	2485883a 	add	r2,r4,r18
   12e68:	980d883a 	mov	r6,r19
   12e6c:	9880022e 	bgeu	r19,r2,12e78 <__sfvwrite_r+0x3f8>
   12e70:	1027883a 	mov	r19,r2
   12e74:	100d883a 	mov	r6,r2
   12e78:	18c1000c 	andi	r3,r3,1024
   12e7c:	18001c26 	beq	r3,zero,12ef0 <__sfvwrite_r+0x470>
   12e80:	300b883a 	mov	r5,r6
   12e84:	a809883a 	mov	r4,r21
   12e88:	0012f480 	call	12f48 <_malloc_r>
   12e8c:	102f883a 	mov	r23,r2
   12e90:	10002926 	beq	r2,zero,12f38 <__sfvwrite_r+0x4b8>
   12e94:	81400417 	ldw	r5,16(r16)
   12e98:	b00d883a 	mov	r6,r22
   12e9c:	1009883a 	mov	r4,r2
   12ea0:	00138b40 	call	138b4 <memcpy>
   12ea4:	8080030b 	ldhu	r2,12(r16)
   12ea8:	00fedfc4 	movi	r3,-1153
   12eac:	10c4703a 	and	r2,r2,r3
   12eb0:	10802014 	ori	r2,r2,128
   12eb4:	8080030d 	sth	r2,12(r16)
   12eb8:	bd89883a 	add	r4,r23,r22
   12ebc:	9d8fc83a 	sub	r7,r19,r22
   12ec0:	85c00415 	stw	r23,16(r16)
   12ec4:	84c00515 	stw	r19,20(r16)
   12ec8:	81000015 	stw	r4,0(r16)
   12ecc:	9027883a 	mov	r19,r18
   12ed0:	81c00215 	stw	r7,8(r16)
   12ed4:	902f883a 	mov	r23,r18
   12ed8:	003f3806 	br	12bbc <_gp+0xffff2f08>
   12edc:	800b883a 	mov	r5,r16
   12ee0:	a809883a 	mov	r4,r21
   12ee4:	00147b00 	call	147b0 <_fflush_r>
   12ee8:	103fb926 	beq	r2,zero,12dd0 <_gp+0xffff311c>
   12eec:	003f6506 	br	12c84 <_gp+0xffff2fd0>
   12ef0:	a809883a 	mov	r4,r21
   12ef4:	0013b580 	call	13b58 <_realloc_r>
   12ef8:	102f883a 	mov	r23,r2
   12efc:	103fee1e 	bne	r2,zero,12eb8 <_gp+0xffff3204>
   12f00:	81400417 	ldw	r5,16(r16)
   12f04:	a809883a 	mov	r4,r21
   12f08:	0014d100 	call	14d10 <_free_r>
   12f0c:	8080030b 	ldhu	r2,12(r16)
   12f10:	00ffdfc4 	movi	r3,-129
   12f14:	1884703a 	and	r2,r3,r2
   12f18:	00c00304 	movi	r3,12
   12f1c:	a8c00015 	stw	r3,0(r21)
   12f20:	003f5906 	br	12c88 <_gp+0xffff2fd4>
   12f24:	94c00044 	addi	r19,r18,1
   12f28:	02000044 	movi	r8,1
   12f2c:	003f6006 	br	12cb0 <_gp+0xffff2ffc>
   12f30:	00bfffc4 	movi	r2,-1
   12f34:	003f0006 	br	12b38 <_gp+0xffff2e84>
   12f38:	00800304 	movi	r2,12
   12f3c:	a8800015 	stw	r2,0(r21)
   12f40:	8080030b 	ldhu	r2,12(r16)
   12f44:	003f5006 	br	12c88 <_gp+0xffff2fd4>

00012f48 <_malloc_r>:
   12f48:	defff504 	addi	sp,sp,-44
   12f4c:	dc800315 	stw	r18,12(sp)
   12f50:	dfc00a15 	stw	ra,40(sp)
   12f54:	df000915 	stw	fp,36(sp)
   12f58:	ddc00815 	stw	r23,32(sp)
   12f5c:	dd800715 	stw	r22,28(sp)
   12f60:	dd400615 	stw	r21,24(sp)
   12f64:	dd000515 	stw	r20,20(sp)
   12f68:	dcc00415 	stw	r19,16(sp)
   12f6c:	dc400215 	stw	r17,8(sp)
   12f70:	dc000115 	stw	r16,4(sp)
   12f74:	288002c4 	addi	r2,r5,11
   12f78:	00c00584 	movi	r3,22
   12f7c:	2025883a 	mov	r18,r4
   12f80:	18807f2e 	bgeu	r3,r2,13180 <_malloc_r+0x238>
   12f84:	047ffe04 	movi	r17,-8
   12f88:	1462703a 	and	r17,r2,r17
   12f8c:	8800a316 	blt	r17,zero,1321c <_malloc_r+0x2d4>
   12f90:	8940a236 	bltu	r17,r5,1321c <_malloc_r+0x2d4>
   12f94:	0015df40 	call	15df4 <__malloc_lock>
   12f98:	00807dc4 	movi	r2,503
   12f9c:	1441e92e 	bgeu	r2,r17,13744 <_malloc_r+0x7fc>
   12fa0:	8804d27a 	srli	r2,r17,9
   12fa4:	1000a126 	beq	r2,zero,1322c <_malloc_r+0x2e4>
   12fa8:	00c00104 	movi	r3,4
   12fac:	18811e36 	bltu	r3,r2,13428 <_malloc_r+0x4e0>
   12fb0:	8804d1ba 	srli	r2,r17,6
   12fb4:	12000e44 	addi	r8,r2,57
   12fb8:	11c00e04 	addi	r7,r2,56
   12fbc:	4209883a 	add	r4,r8,r8
   12fc0:	04c00074 	movhi	r19,1
   12fc4:	2109883a 	add	r4,r4,r4
   12fc8:	9cde2b04 	addi	r19,r19,30892
   12fcc:	2109883a 	add	r4,r4,r4
   12fd0:	9909883a 	add	r4,r19,r4
   12fd4:	24000117 	ldw	r16,4(r4)
   12fd8:	213ffe04 	addi	r4,r4,-8
   12fdc:	24009726 	beq	r4,r16,1323c <_malloc_r+0x2f4>
   12fe0:	80800117 	ldw	r2,4(r16)
   12fe4:	01bfff04 	movi	r6,-4
   12fe8:	014003c4 	movi	r5,15
   12fec:	1184703a 	and	r2,r2,r6
   12ff0:	1447c83a 	sub	r3,r2,r17
   12ff4:	28c00716 	blt	r5,r3,13014 <_malloc_r+0xcc>
   12ff8:	1800920e 	bge	r3,zero,13244 <_malloc_r+0x2fc>
   12ffc:	84000317 	ldw	r16,12(r16)
   13000:	24008e26 	beq	r4,r16,1323c <_malloc_r+0x2f4>
   13004:	80800117 	ldw	r2,4(r16)
   13008:	1184703a 	and	r2,r2,r6
   1300c:	1447c83a 	sub	r3,r2,r17
   13010:	28fff90e 	bge	r5,r3,12ff8 <_gp+0xffff3344>
   13014:	3809883a 	mov	r4,r7
   13018:	01800074 	movhi	r6,1
   1301c:	9c000417 	ldw	r16,16(r19)
   13020:	319e2b04 	addi	r6,r6,30892
   13024:	32000204 	addi	r8,r6,8
   13028:	82013426 	beq	r16,r8,134fc <_malloc_r+0x5b4>
   1302c:	80c00117 	ldw	r3,4(r16)
   13030:	00bfff04 	movi	r2,-4
   13034:	188e703a 	and	r7,r3,r2
   13038:	3c45c83a 	sub	r2,r7,r17
   1303c:	00c003c4 	movi	r3,15
   13040:	18811f16 	blt	r3,r2,134c0 <_malloc_r+0x578>
   13044:	32000515 	stw	r8,20(r6)
   13048:	32000415 	stw	r8,16(r6)
   1304c:	10007f0e 	bge	r2,zero,1324c <_malloc_r+0x304>
   13050:	00807fc4 	movi	r2,511
   13054:	11c0fd36 	bltu	r2,r7,1344c <_malloc_r+0x504>
   13058:	3806d0fa 	srli	r3,r7,3
   1305c:	01c00044 	movi	r7,1
   13060:	30800117 	ldw	r2,4(r6)
   13064:	19400044 	addi	r5,r3,1
   13068:	294b883a 	add	r5,r5,r5
   1306c:	1807d0ba 	srai	r3,r3,2
   13070:	294b883a 	add	r5,r5,r5
   13074:	294b883a 	add	r5,r5,r5
   13078:	298b883a 	add	r5,r5,r6
   1307c:	38c6983a 	sll	r3,r7,r3
   13080:	29c00017 	ldw	r7,0(r5)
   13084:	2a7ffe04 	addi	r9,r5,-8
   13088:	1886b03a 	or	r3,r3,r2
   1308c:	82400315 	stw	r9,12(r16)
   13090:	81c00215 	stw	r7,8(r16)
   13094:	30c00115 	stw	r3,4(r6)
   13098:	2c000015 	stw	r16,0(r5)
   1309c:	3c000315 	stw	r16,12(r7)
   130a0:	2005d0ba 	srai	r2,r4,2
   130a4:	01400044 	movi	r5,1
   130a8:	288a983a 	sll	r5,r5,r2
   130ac:	19406f36 	bltu	r3,r5,1326c <_malloc_r+0x324>
   130b0:	28c4703a 	and	r2,r5,r3
   130b4:	10000a1e 	bne	r2,zero,130e0 <_malloc_r+0x198>
   130b8:	00bfff04 	movi	r2,-4
   130bc:	294b883a 	add	r5,r5,r5
   130c0:	2088703a 	and	r4,r4,r2
   130c4:	28c4703a 	and	r2,r5,r3
   130c8:	21000104 	addi	r4,r4,4
   130cc:	1000041e 	bne	r2,zero,130e0 <_malloc_r+0x198>
   130d0:	294b883a 	add	r5,r5,r5
   130d4:	28c4703a 	and	r2,r5,r3
   130d8:	21000104 	addi	r4,r4,4
   130dc:	103ffc26 	beq	r2,zero,130d0 <_gp+0xffff341c>
   130e0:	02bfff04 	movi	r10,-4
   130e4:	024003c4 	movi	r9,15
   130e8:	21800044 	addi	r6,r4,1
   130ec:	318d883a 	add	r6,r6,r6
   130f0:	318d883a 	add	r6,r6,r6
   130f4:	318d883a 	add	r6,r6,r6
   130f8:	998d883a 	add	r6,r19,r6
   130fc:	333ffe04 	addi	r12,r6,-8
   13100:	2017883a 	mov	r11,r4
   13104:	31800104 	addi	r6,r6,4
   13108:	34000017 	ldw	r16,0(r6)
   1310c:	31fffd04 	addi	r7,r6,-12
   13110:	81c0041e 	bne	r16,r7,13124 <_malloc_r+0x1dc>
   13114:	0000fb06 	br	13504 <_malloc_r+0x5bc>
   13118:	1801030e 	bge	r3,zero,13528 <_malloc_r+0x5e0>
   1311c:	84000317 	ldw	r16,12(r16)
   13120:	81c0f826 	beq	r16,r7,13504 <_malloc_r+0x5bc>
   13124:	80800117 	ldw	r2,4(r16)
   13128:	1284703a 	and	r2,r2,r10
   1312c:	1447c83a 	sub	r3,r2,r17
   13130:	48fff90e 	bge	r9,r3,13118 <_gp+0xffff3464>
   13134:	80800317 	ldw	r2,12(r16)
   13138:	81000217 	ldw	r4,8(r16)
   1313c:	89400054 	ori	r5,r17,1
   13140:	81400115 	stw	r5,4(r16)
   13144:	20800315 	stw	r2,12(r4)
   13148:	11000215 	stw	r4,8(r2)
   1314c:	8463883a 	add	r17,r16,r17
   13150:	9c400515 	stw	r17,20(r19)
   13154:	9c400415 	stw	r17,16(r19)
   13158:	18800054 	ori	r2,r3,1
   1315c:	88800115 	stw	r2,4(r17)
   13160:	8a000315 	stw	r8,12(r17)
   13164:	8a000215 	stw	r8,8(r17)
   13168:	88e3883a 	add	r17,r17,r3
   1316c:	88c00015 	stw	r3,0(r17)
   13170:	9009883a 	mov	r4,r18
   13174:	0015e180 	call	15e18 <__malloc_unlock>
   13178:	80800204 	addi	r2,r16,8
   1317c:	00001b06 	br	131ec <_malloc_r+0x2a4>
   13180:	04400404 	movi	r17,16
   13184:	89402536 	bltu	r17,r5,1321c <_malloc_r+0x2d4>
   13188:	0015df40 	call	15df4 <__malloc_lock>
   1318c:	00800184 	movi	r2,6
   13190:	01000084 	movi	r4,2
   13194:	04c00074 	movhi	r19,1
   13198:	1085883a 	add	r2,r2,r2
   1319c:	9cde2b04 	addi	r19,r19,30892
   131a0:	1085883a 	add	r2,r2,r2
   131a4:	9885883a 	add	r2,r19,r2
   131a8:	14000117 	ldw	r16,4(r2)
   131ac:	10fffe04 	addi	r3,r2,-8
   131b0:	80c0d926 	beq	r16,r3,13518 <_malloc_r+0x5d0>
   131b4:	80c00117 	ldw	r3,4(r16)
   131b8:	81000317 	ldw	r4,12(r16)
   131bc:	00bfff04 	movi	r2,-4
   131c0:	1884703a 	and	r2,r3,r2
   131c4:	81400217 	ldw	r5,8(r16)
   131c8:	8085883a 	add	r2,r16,r2
   131cc:	10c00117 	ldw	r3,4(r2)
   131d0:	29000315 	stw	r4,12(r5)
   131d4:	21400215 	stw	r5,8(r4)
   131d8:	18c00054 	ori	r3,r3,1
   131dc:	10c00115 	stw	r3,4(r2)
   131e0:	9009883a 	mov	r4,r18
   131e4:	0015e180 	call	15e18 <__malloc_unlock>
   131e8:	80800204 	addi	r2,r16,8
   131ec:	dfc00a17 	ldw	ra,40(sp)
   131f0:	df000917 	ldw	fp,36(sp)
   131f4:	ddc00817 	ldw	r23,32(sp)
   131f8:	dd800717 	ldw	r22,28(sp)
   131fc:	dd400617 	ldw	r21,24(sp)
   13200:	dd000517 	ldw	r20,20(sp)
   13204:	dcc00417 	ldw	r19,16(sp)
   13208:	dc800317 	ldw	r18,12(sp)
   1320c:	dc400217 	ldw	r17,8(sp)
   13210:	dc000117 	ldw	r16,4(sp)
   13214:	dec00b04 	addi	sp,sp,44
   13218:	f800283a 	ret
   1321c:	00800304 	movi	r2,12
   13220:	90800015 	stw	r2,0(r18)
   13224:	0005883a 	mov	r2,zero
   13228:	003ff006 	br	131ec <_gp+0xffff3538>
   1322c:	01002004 	movi	r4,128
   13230:	02001004 	movi	r8,64
   13234:	01c00fc4 	movi	r7,63
   13238:	003f6106 	br	12fc0 <_gp+0xffff330c>
   1323c:	4009883a 	mov	r4,r8
   13240:	003f7506 	br	13018 <_gp+0xffff3364>
   13244:	81000317 	ldw	r4,12(r16)
   13248:	003fde06 	br	131c4 <_gp+0xffff3510>
   1324c:	81c5883a 	add	r2,r16,r7
   13250:	11400117 	ldw	r5,4(r2)
   13254:	9009883a 	mov	r4,r18
   13258:	29400054 	ori	r5,r5,1
   1325c:	11400115 	stw	r5,4(r2)
   13260:	0015e180 	call	15e18 <__malloc_unlock>
   13264:	80800204 	addi	r2,r16,8
   13268:	003fe006 	br	131ec <_gp+0xffff3538>
   1326c:	9c000217 	ldw	r16,8(r19)
   13270:	00bfff04 	movi	r2,-4
   13274:	85800117 	ldw	r22,4(r16)
   13278:	b0ac703a 	and	r22,r22,r2
   1327c:	b4400336 	bltu	r22,r17,1328c <_malloc_r+0x344>
   13280:	b445c83a 	sub	r2,r22,r17
   13284:	00c003c4 	movi	r3,15
   13288:	18805d16 	blt	r3,r2,13400 <_malloc_r+0x4b8>
   1328c:	05c00074 	movhi	r23,1
   13290:	008000b4 	movhi	r2,2
   13294:	10a61104 	addi	r2,r2,-26556
   13298:	bddf3804 	addi	r23,r23,31968
   1329c:	15400017 	ldw	r21,0(r2)
   132a0:	b8c00017 	ldw	r3,0(r23)
   132a4:	00bfffc4 	movi	r2,-1
   132a8:	858d883a 	add	r6,r16,r22
   132ac:	8d6b883a 	add	r21,r17,r21
   132b0:	1880ea26 	beq	r3,r2,1365c <_malloc_r+0x714>
   132b4:	ad4403c4 	addi	r21,r21,4111
   132b8:	00bc0004 	movi	r2,-4096
   132bc:	a8aa703a 	and	r21,r21,r2
   132c0:	a80b883a 	mov	r5,r21
   132c4:	9009883a 	mov	r4,r18
   132c8:	d9800015 	stw	r6,0(sp)
   132cc:	00140bc0 	call	140bc <_sbrk_r>
   132d0:	1029883a 	mov	r20,r2
   132d4:	00bfffc4 	movi	r2,-1
   132d8:	d9800017 	ldw	r6,0(sp)
   132dc:	a080e826 	beq	r20,r2,13680 <_malloc_r+0x738>
   132e0:	a180a636 	bltu	r20,r6,1357c <_malloc_r+0x634>
   132e4:	070000b4 	movhi	fp,2
   132e8:	e7261204 	addi	fp,fp,-26552
   132ec:	e0800017 	ldw	r2,0(fp)
   132f0:	a887883a 	add	r3,r21,r2
   132f4:	e0c00015 	stw	r3,0(fp)
   132f8:	3500e626 	beq	r6,r20,13694 <_malloc_r+0x74c>
   132fc:	b9000017 	ldw	r4,0(r23)
   13300:	00bfffc4 	movi	r2,-1
   13304:	2080ee26 	beq	r4,r2,136c0 <_malloc_r+0x778>
   13308:	a185c83a 	sub	r2,r20,r6
   1330c:	10c5883a 	add	r2,r2,r3
   13310:	e0800015 	stw	r2,0(fp)
   13314:	a0c001cc 	andi	r3,r20,7
   13318:	1800bc26 	beq	r3,zero,1360c <_malloc_r+0x6c4>
   1331c:	a0e9c83a 	sub	r20,r20,r3
   13320:	00840204 	movi	r2,4104
   13324:	a5000204 	addi	r20,r20,8
   13328:	10c7c83a 	sub	r3,r2,r3
   1332c:	a545883a 	add	r2,r20,r21
   13330:	1083ffcc 	andi	r2,r2,4095
   13334:	18abc83a 	sub	r21,r3,r2
   13338:	a80b883a 	mov	r5,r21
   1333c:	9009883a 	mov	r4,r18
   13340:	00140bc0 	call	140bc <_sbrk_r>
   13344:	00ffffc4 	movi	r3,-1
   13348:	10c0e126 	beq	r2,r3,136d0 <_malloc_r+0x788>
   1334c:	1505c83a 	sub	r2,r2,r20
   13350:	1545883a 	add	r2,r2,r21
   13354:	10800054 	ori	r2,r2,1
   13358:	e0c00017 	ldw	r3,0(fp)
   1335c:	9d000215 	stw	r20,8(r19)
   13360:	a0800115 	stw	r2,4(r20)
   13364:	a8c7883a 	add	r3,r21,r3
   13368:	e0c00015 	stw	r3,0(fp)
   1336c:	84c00e26 	beq	r16,r19,133a8 <_malloc_r+0x460>
   13370:	018003c4 	movi	r6,15
   13374:	3580a72e 	bgeu	r6,r22,13614 <_malloc_r+0x6cc>
   13378:	81400117 	ldw	r5,4(r16)
   1337c:	013ffe04 	movi	r4,-8
   13380:	b0bffd04 	addi	r2,r22,-12
   13384:	1104703a 	and	r2,r2,r4
   13388:	2900004c 	andi	r4,r5,1
   1338c:	2088b03a 	or	r4,r4,r2
   13390:	81000115 	stw	r4,4(r16)
   13394:	01400144 	movi	r5,5
   13398:	8089883a 	add	r4,r16,r2
   1339c:	21400115 	stw	r5,4(r4)
   133a0:	21400215 	stw	r5,8(r4)
   133a4:	3080cd36 	bltu	r6,r2,136dc <_malloc_r+0x794>
   133a8:	008000b4 	movhi	r2,2
   133ac:	10a61004 	addi	r2,r2,-26560
   133b0:	11000017 	ldw	r4,0(r2)
   133b4:	20c0012e 	bgeu	r4,r3,133bc <_malloc_r+0x474>
   133b8:	10c00015 	stw	r3,0(r2)
   133bc:	008000b4 	movhi	r2,2
   133c0:	10a60f04 	addi	r2,r2,-26564
   133c4:	11000017 	ldw	r4,0(r2)
   133c8:	9c000217 	ldw	r16,8(r19)
   133cc:	20c0012e 	bgeu	r4,r3,133d4 <_malloc_r+0x48c>
   133d0:	10c00015 	stw	r3,0(r2)
   133d4:	80c00117 	ldw	r3,4(r16)
   133d8:	00bfff04 	movi	r2,-4
   133dc:	1886703a 	and	r3,r3,r2
   133e0:	1c45c83a 	sub	r2,r3,r17
   133e4:	1c400236 	bltu	r3,r17,133f0 <_malloc_r+0x4a8>
   133e8:	00c003c4 	movi	r3,15
   133ec:	18800416 	blt	r3,r2,13400 <_malloc_r+0x4b8>
   133f0:	9009883a 	mov	r4,r18
   133f4:	0015e180 	call	15e18 <__malloc_unlock>
   133f8:	0005883a 	mov	r2,zero
   133fc:	003f7b06 	br	131ec <_gp+0xffff3538>
   13400:	88c00054 	ori	r3,r17,1
   13404:	80c00115 	stw	r3,4(r16)
   13408:	8463883a 	add	r17,r16,r17
   1340c:	10800054 	ori	r2,r2,1
   13410:	9c400215 	stw	r17,8(r19)
   13414:	88800115 	stw	r2,4(r17)
   13418:	9009883a 	mov	r4,r18
   1341c:	0015e180 	call	15e18 <__malloc_unlock>
   13420:	80800204 	addi	r2,r16,8
   13424:	003f7106 	br	131ec <_gp+0xffff3538>
   13428:	00c00504 	movi	r3,20
   1342c:	18804a2e 	bgeu	r3,r2,13558 <_malloc_r+0x610>
   13430:	00c01504 	movi	r3,84
   13434:	18806e36 	bltu	r3,r2,135f0 <_malloc_r+0x6a8>
   13438:	8804d33a 	srli	r2,r17,12
   1343c:	12001bc4 	addi	r8,r2,111
   13440:	11c01b84 	addi	r7,r2,110
   13444:	4209883a 	add	r4,r8,r8
   13448:	003edd06 	br	12fc0 <_gp+0xffff330c>
   1344c:	3804d27a 	srli	r2,r7,9
   13450:	00c00104 	movi	r3,4
   13454:	1880442e 	bgeu	r3,r2,13568 <_malloc_r+0x620>
   13458:	00c00504 	movi	r3,20
   1345c:	18808136 	bltu	r3,r2,13664 <_malloc_r+0x71c>
   13460:	11401704 	addi	r5,r2,92
   13464:	10c016c4 	addi	r3,r2,91
   13468:	294b883a 	add	r5,r5,r5
   1346c:	294b883a 	add	r5,r5,r5
   13470:	294b883a 	add	r5,r5,r5
   13474:	994b883a 	add	r5,r19,r5
   13478:	28800017 	ldw	r2,0(r5)
   1347c:	01800074 	movhi	r6,1
   13480:	297ffe04 	addi	r5,r5,-8
   13484:	319e2b04 	addi	r6,r6,30892
   13488:	28806526 	beq	r5,r2,13620 <_malloc_r+0x6d8>
   1348c:	01bfff04 	movi	r6,-4
   13490:	10c00117 	ldw	r3,4(r2)
   13494:	1986703a 	and	r3,r3,r6
   13498:	38c0022e 	bgeu	r7,r3,134a4 <_malloc_r+0x55c>
   1349c:	10800217 	ldw	r2,8(r2)
   134a0:	28bffb1e 	bne	r5,r2,13490 <_gp+0xffff37dc>
   134a4:	11400317 	ldw	r5,12(r2)
   134a8:	98c00117 	ldw	r3,4(r19)
   134ac:	81400315 	stw	r5,12(r16)
   134b0:	80800215 	stw	r2,8(r16)
   134b4:	2c000215 	stw	r16,8(r5)
   134b8:	14000315 	stw	r16,12(r2)
   134bc:	003ef806 	br	130a0 <_gp+0xffff33ec>
   134c0:	88c00054 	ori	r3,r17,1
   134c4:	80c00115 	stw	r3,4(r16)
   134c8:	8463883a 	add	r17,r16,r17
   134cc:	34400515 	stw	r17,20(r6)
   134d0:	34400415 	stw	r17,16(r6)
   134d4:	10c00054 	ori	r3,r2,1
   134d8:	8a000315 	stw	r8,12(r17)
   134dc:	8a000215 	stw	r8,8(r17)
   134e0:	88c00115 	stw	r3,4(r17)
   134e4:	88a3883a 	add	r17,r17,r2
   134e8:	88800015 	stw	r2,0(r17)
   134ec:	9009883a 	mov	r4,r18
   134f0:	0015e180 	call	15e18 <__malloc_unlock>
   134f4:	80800204 	addi	r2,r16,8
   134f8:	003f3c06 	br	131ec <_gp+0xffff3538>
   134fc:	30c00117 	ldw	r3,4(r6)
   13500:	003ee706 	br	130a0 <_gp+0xffff33ec>
   13504:	5ac00044 	addi	r11,r11,1
   13508:	588000cc 	andi	r2,r11,3
   1350c:	31800204 	addi	r6,r6,8
   13510:	103efd1e 	bne	r2,zero,13108 <_gp+0xffff3454>
   13514:	00002406 	br	135a8 <_malloc_r+0x660>
   13518:	14000317 	ldw	r16,12(r2)
   1351c:	143f251e 	bne	r2,r16,131b4 <_gp+0xffff3500>
   13520:	21000084 	addi	r4,r4,2
   13524:	003ebc06 	br	13018 <_gp+0xffff3364>
   13528:	8085883a 	add	r2,r16,r2
   1352c:	10c00117 	ldw	r3,4(r2)
   13530:	81000317 	ldw	r4,12(r16)
   13534:	81400217 	ldw	r5,8(r16)
   13538:	18c00054 	ori	r3,r3,1
   1353c:	10c00115 	stw	r3,4(r2)
   13540:	29000315 	stw	r4,12(r5)
   13544:	21400215 	stw	r5,8(r4)
   13548:	9009883a 	mov	r4,r18
   1354c:	0015e180 	call	15e18 <__malloc_unlock>
   13550:	80800204 	addi	r2,r16,8
   13554:	003f2506 	br	131ec <_gp+0xffff3538>
   13558:	12001704 	addi	r8,r2,92
   1355c:	11c016c4 	addi	r7,r2,91
   13560:	4209883a 	add	r4,r8,r8
   13564:	003e9606 	br	12fc0 <_gp+0xffff330c>
   13568:	3804d1ba 	srli	r2,r7,6
   1356c:	11400e44 	addi	r5,r2,57
   13570:	10c00e04 	addi	r3,r2,56
   13574:	294b883a 	add	r5,r5,r5
   13578:	003fbc06 	br	1346c <_gp+0xffff37b8>
   1357c:	84ff5926 	beq	r16,r19,132e4 <_gp+0xffff3630>
   13580:	00800074 	movhi	r2,1
   13584:	109e2b04 	addi	r2,r2,30892
   13588:	14000217 	ldw	r16,8(r2)
   1358c:	00bfff04 	movi	r2,-4
   13590:	80c00117 	ldw	r3,4(r16)
   13594:	1886703a 	and	r3,r3,r2
   13598:	003f9106 	br	133e0 <_gp+0xffff372c>
   1359c:	60800217 	ldw	r2,8(r12)
   135a0:	213fffc4 	addi	r4,r4,-1
   135a4:	1300651e 	bne	r2,r12,1373c <_malloc_r+0x7f4>
   135a8:	208000cc 	andi	r2,r4,3
   135ac:	633ffe04 	addi	r12,r12,-8
   135b0:	103ffa1e 	bne	r2,zero,1359c <_gp+0xffff38e8>
   135b4:	98800117 	ldw	r2,4(r19)
   135b8:	0146303a 	nor	r3,zero,r5
   135bc:	1884703a 	and	r2,r3,r2
   135c0:	98800115 	stw	r2,4(r19)
   135c4:	294b883a 	add	r5,r5,r5
   135c8:	117f2836 	bltu	r2,r5,1326c <_gp+0xffff35b8>
   135cc:	283f2726 	beq	r5,zero,1326c <_gp+0xffff35b8>
   135d0:	2886703a 	and	r3,r5,r2
   135d4:	5809883a 	mov	r4,r11
   135d8:	183ec31e 	bne	r3,zero,130e8 <_gp+0xffff3434>
   135dc:	294b883a 	add	r5,r5,r5
   135e0:	2886703a 	and	r3,r5,r2
   135e4:	21000104 	addi	r4,r4,4
   135e8:	183ffc26 	beq	r3,zero,135dc <_gp+0xffff3928>
   135ec:	003ebe06 	br	130e8 <_gp+0xffff3434>
   135f0:	00c05504 	movi	r3,340
   135f4:	18801236 	bltu	r3,r2,13640 <_malloc_r+0x6f8>
   135f8:	8804d3fa 	srli	r2,r17,15
   135fc:	12001e04 	addi	r8,r2,120
   13600:	11c01dc4 	addi	r7,r2,119
   13604:	4209883a 	add	r4,r8,r8
   13608:	003e6d06 	br	12fc0 <_gp+0xffff330c>
   1360c:	00c40004 	movi	r3,4096
   13610:	003f4606 	br	1332c <_gp+0xffff3678>
   13614:	00800044 	movi	r2,1
   13618:	a0800115 	stw	r2,4(r20)
   1361c:	003f7406 	br	133f0 <_gp+0xffff373c>
   13620:	1805d0ba 	srai	r2,r3,2
   13624:	01c00044 	movi	r7,1
   13628:	30c00117 	ldw	r3,4(r6)
   1362c:	388e983a 	sll	r7,r7,r2
   13630:	2805883a 	mov	r2,r5
   13634:	38c6b03a 	or	r3,r7,r3
   13638:	30c00115 	stw	r3,4(r6)
   1363c:	003f9b06 	br	134ac <_gp+0xffff37f8>
   13640:	00c15504 	movi	r3,1364
   13644:	18801a36 	bltu	r3,r2,136b0 <_malloc_r+0x768>
   13648:	8804d4ba 	srli	r2,r17,18
   1364c:	12001f44 	addi	r8,r2,125
   13650:	11c01f04 	addi	r7,r2,124
   13654:	4209883a 	add	r4,r8,r8
   13658:	003e5906 	br	12fc0 <_gp+0xffff330c>
   1365c:	ad400404 	addi	r21,r21,16
   13660:	003f1706 	br	132c0 <_gp+0xffff360c>
   13664:	00c01504 	movi	r3,84
   13668:	18802336 	bltu	r3,r2,136f8 <_malloc_r+0x7b0>
   1366c:	3804d33a 	srli	r2,r7,12
   13670:	11401bc4 	addi	r5,r2,111
   13674:	10c01b84 	addi	r3,r2,110
   13678:	294b883a 	add	r5,r5,r5
   1367c:	003f7b06 	br	1346c <_gp+0xffff37b8>
   13680:	9c000217 	ldw	r16,8(r19)
   13684:	00bfff04 	movi	r2,-4
   13688:	80c00117 	ldw	r3,4(r16)
   1368c:	1886703a 	and	r3,r3,r2
   13690:	003f5306 	br	133e0 <_gp+0xffff372c>
   13694:	3083ffcc 	andi	r2,r6,4095
   13698:	103f181e 	bne	r2,zero,132fc <_gp+0xffff3648>
   1369c:	99000217 	ldw	r4,8(r19)
   136a0:	b545883a 	add	r2,r22,r21
   136a4:	10800054 	ori	r2,r2,1
   136a8:	20800115 	stw	r2,4(r4)
   136ac:	003f3e06 	br	133a8 <_gp+0xffff36f4>
   136b0:	01003f84 	movi	r4,254
   136b4:	02001fc4 	movi	r8,127
   136b8:	01c01f84 	movi	r7,126
   136bc:	003e4006 	br	12fc0 <_gp+0xffff330c>
   136c0:	00800074 	movhi	r2,1
   136c4:	109f3804 	addi	r2,r2,31968
   136c8:	15000015 	stw	r20,0(r2)
   136cc:	003f1106 	br	13314 <_gp+0xffff3660>
   136d0:	00800044 	movi	r2,1
   136d4:	002b883a 	mov	r21,zero
   136d8:	003f1f06 	br	13358 <_gp+0xffff36a4>
   136dc:	81400204 	addi	r5,r16,8
   136e0:	9009883a 	mov	r4,r18
   136e4:	0014d100 	call	14d10 <_free_r>
   136e8:	008000b4 	movhi	r2,2
   136ec:	10a61204 	addi	r2,r2,-26552
   136f0:	10c00017 	ldw	r3,0(r2)
   136f4:	003f2c06 	br	133a8 <_gp+0xffff36f4>
   136f8:	00c05504 	movi	r3,340
   136fc:	18800536 	bltu	r3,r2,13714 <_malloc_r+0x7cc>
   13700:	3804d3fa 	srli	r2,r7,15
   13704:	11401e04 	addi	r5,r2,120
   13708:	10c01dc4 	addi	r3,r2,119
   1370c:	294b883a 	add	r5,r5,r5
   13710:	003f5606 	br	1346c <_gp+0xffff37b8>
   13714:	00c15504 	movi	r3,1364
   13718:	18800536 	bltu	r3,r2,13730 <_malloc_r+0x7e8>
   1371c:	3804d4ba 	srli	r2,r7,18
   13720:	11401f44 	addi	r5,r2,125
   13724:	10c01f04 	addi	r3,r2,124
   13728:	294b883a 	add	r5,r5,r5
   1372c:	003f4f06 	br	1346c <_gp+0xffff37b8>
   13730:	01403f84 	movi	r5,254
   13734:	00c01f84 	movi	r3,126
   13738:	003f4c06 	br	1346c <_gp+0xffff37b8>
   1373c:	98800117 	ldw	r2,4(r19)
   13740:	003fa006 	br	135c4 <_gp+0xffff3910>
   13744:	8808d0fa 	srli	r4,r17,3
   13748:	20800044 	addi	r2,r4,1
   1374c:	1085883a 	add	r2,r2,r2
   13750:	003e9006 	br	13194 <_gp+0xffff34e0>

00013754 <memchr>:
   13754:	208000cc 	andi	r2,r4,3
   13758:	280f883a 	mov	r7,r5
   1375c:	10003426 	beq	r2,zero,13830 <memchr+0xdc>
   13760:	30bfffc4 	addi	r2,r6,-1
   13764:	30001a26 	beq	r6,zero,137d0 <memchr+0x7c>
   13768:	20c00003 	ldbu	r3,0(r4)
   1376c:	29803fcc 	andi	r6,r5,255
   13770:	30c0051e 	bne	r6,r3,13788 <memchr+0x34>
   13774:	00001806 	br	137d8 <memchr+0x84>
   13778:	10001526 	beq	r2,zero,137d0 <memchr+0x7c>
   1377c:	20c00003 	ldbu	r3,0(r4)
   13780:	10bfffc4 	addi	r2,r2,-1
   13784:	30c01426 	beq	r6,r3,137d8 <memchr+0x84>
   13788:	21000044 	addi	r4,r4,1
   1378c:	20c000cc 	andi	r3,r4,3
   13790:	183ff91e 	bne	r3,zero,13778 <_gp+0xffff3ac4>
   13794:	020000c4 	movi	r8,3
   13798:	40801136 	bltu	r8,r2,137e0 <memchr+0x8c>
   1379c:	10000c26 	beq	r2,zero,137d0 <memchr+0x7c>
   137a0:	20c00003 	ldbu	r3,0(r4)
   137a4:	29403fcc 	andi	r5,r5,255
   137a8:	28c00b26 	beq	r5,r3,137d8 <memchr+0x84>
   137ac:	20c00044 	addi	r3,r4,1
   137b0:	39803fcc 	andi	r6,r7,255
   137b4:	2089883a 	add	r4,r4,r2
   137b8:	00000306 	br	137c8 <memchr+0x74>
   137bc:	18c00044 	addi	r3,r3,1
   137c0:	197fffc3 	ldbu	r5,-1(r3)
   137c4:	31400526 	beq	r6,r5,137dc <memchr+0x88>
   137c8:	1805883a 	mov	r2,r3
   137cc:	20fffb1e 	bne	r4,r3,137bc <_gp+0xffff3b08>
   137d0:	0005883a 	mov	r2,zero
   137d4:	f800283a 	ret
   137d8:	2005883a 	mov	r2,r4
   137dc:	f800283a 	ret
   137e0:	28c03fcc 	andi	r3,r5,255
   137e4:	1812923a 	slli	r9,r3,8
   137e8:	02ffbff4 	movhi	r11,65279
   137ec:	02a02074 	movhi	r10,32897
   137f0:	48d2b03a 	or	r9,r9,r3
   137f4:	4806943a 	slli	r3,r9,16
   137f8:	5affbfc4 	addi	r11,r11,-257
   137fc:	52a02004 	addi	r10,r10,-32640
   13800:	48d2b03a 	or	r9,r9,r3
   13804:	20c00017 	ldw	r3,0(r4)
   13808:	48c6f03a 	xor	r3,r9,r3
   1380c:	1acd883a 	add	r6,r3,r11
   13810:	00c6303a 	nor	r3,zero,r3
   13814:	30c6703a 	and	r3,r6,r3
   13818:	1a86703a 	and	r3,r3,r10
   1381c:	183fe01e 	bne	r3,zero,137a0 <_gp+0xffff3aec>
   13820:	10bfff04 	addi	r2,r2,-4
   13824:	21000104 	addi	r4,r4,4
   13828:	40bff636 	bltu	r8,r2,13804 <_gp+0xffff3b50>
   1382c:	003fdb06 	br	1379c <_gp+0xffff3ae8>
   13830:	3005883a 	mov	r2,r6
   13834:	003fd706 	br	13794 <_gp+0xffff3ae0>

00013838 <memcmp>:
   13838:	01c000c4 	movi	r7,3
   1383c:	3980192e 	bgeu	r7,r6,138a4 <memcmp+0x6c>
   13840:	2144b03a 	or	r2,r4,r5
   13844:	11c4703a 	and	r2,r2,r7
   13848:	10000f26 	beq	r2,zero,13888 <memcmp+0x50>
   1384c:	20800003 	ldbu	r2,0(r4)
   13850:	28c00003 	ldbu	r3,0(r5)
   13854:	10c0151e 	bne	r2,r3,138ac <memcmp+0x74>
   13858:	31bfff84 	addi	r6,r6,-2
   1385c:	01ffffc4 	movi	r7,-1
   13860:	00000406 	br	13874 <memcmp+0x3c>
   13864:	20800003 	ldbu	r2,0(r4)
   13868:	28c00003 	ldbu	r3,0(r5)
   1386c:	31bfffc4 	addi	r6,r6,-1
   13870:	10c00e1e 	bne	r2,r3,138ac <memcmp+0x74>
   13874:	21000044 	addi	r4,r4,1
   13878:	29400044 	addi	r5,r5,1
   1387c:	31fff91e 	bne	r6,r7,13864 <_gp+0xffff3bb0>
   13880:	0005883a 	mov	r2,zero
   13884:	f800283a 	ret
   13888:	20c00017 	ldw	r3,0(r4)
   1388c:	28800017 	ldw	r2,0(r5)
   13890:	18bfee1e 	bne	r3,r2,1384c <_gp+0xffff3b98>
   13894:	31bfff04 	addi	r6,r6,-4
   13898:	21000104 	addi	r4,r4,4
   1389c:	29400104 	addi	r5,r5,4
   138a0:	39bff936 	bltu	r7,r6,13888 <_gp+0xffff3bd4>
   138a4:	303fe91e 	bne	r6,zero,1384c <_gp+0xffff3b98>
   138a8:	003ff506 	br	13880 <_gp+0xffff3bcc>
   138ac:	10c5c83a 	sub	r2,r2,r3
   138b0:	f800283a 	ret

000138b4 <memcpy>:
   138b4:	defffd04 	addi	sp,sp,-12
   138b8:	dfc00215 	stw	ra,8(sp)
   138bc:	dc400115 	stw	r17,4(sp)
   138c0:	dc000015 	stw	r16,0(sp)
   138c4:	00c003c4 	movi	r3,15
   138c8:	2005883a 	mov	r2,r4
   138cc:	1980452e 	bgeu	r3,r6,139e4 <memcpy+0x130>
   138d0:	2906b03a 	or	r3,r5,r4
   138d4:	18c000cc 	andi	r3,r3,3
   138d8:	1800441e 	bne	r3,zero,139ec <memcpy+0x138>
   138dc:	347ffc04 	addi	r17,r6,-16
   138e0:	8822d13a 	srli	r17,r17,4
   138e4:	28c00104 	addi	r3,r5,4
   138e8:	23400104 	addi	r13,r4,4
   138ec:	8820913a 	slli	r16,r17,4
   138f0:	2b000204 	addi	r12,r5,8
   138f4:	22c00204 	addi	r11,r4,8
   138f8:	84000504 	addi	r16,r16,20
   138fc:	2a800304 	addi	r10,r5,12
   13900:	22400304 	addi	r9,r4,12
   13904:	2c21883a 	add	r16,r5,r16
   13908:	2811883a 	mov	r8,r5
   1390c:	200f883a 	mov	r7,r4
   13910:	41000017 	ldw	r4,0(r8)
   13914:	1fc00017 	ldw	ra,0(r3)
   13918:	63c00017 	ldw	r15,0(r12)
   1391c:	39000015 	stw	r4,0(r7)
   13920:	53800017 	ldw	r14,0(r10)
   13924:	6fc00015 	stw	ra,0(r13)
   13928:	5bc00015 	stw	r15,0(r11)
   1392c:	4b800015 	stw	r14,0(r9)
   13930:	18c00404 	addi	r3,r3,16
   13934:	39c00404 	addi	r7,r7,16
   13938:	42000404 	addi	r8,r8,16
   1393c:	6b400404 	addi	r13,r13,16
   13940:	63000404 	addi	r12,r12,16
   13944:	5ac00404 	addi	r11,r11,16
   13948:	52800404 	addi	r10,r10,16
   1394c:	4a400404 	addi	r9,r9,16
   13950:	1c3fef1e 	bne	r3,r16,13910 <_gp+0xffff3c5c>
   13954:	89c00044 	addi	r7,r17,1
   13958:	380e913a 	slli	r7,r7,4
   1395c:	310003cc 	andi	r4,r6,15
   13960:	02c000c4 	movi	r11,3
   13964:	11c7883a 	add	r3,r2,r7
   13968:	29cb883a 	add	r5,r5,r7
   1396c:	5900212e 	bgeu	r11,r4,139f4 <memcpy+0x140>
   13970:	1813883a 	mov	r9,r3
   13974:	2811883a 	mov	r8,r5
   13978:	200f883a 	mov	r7,r4
   1397c:	42800017 	ldw	r10,0(r8)
   13980:	4a400104 	addi	r9,r9,4
   13984:	39ffff04 	addi	r7,r7,-4
   13988:	4abfff15 	stw	r10,-4(r9)
   1398c:	42000104 	addi	r8,r8,4
   13990:	59fffa36 	bltu	r11,r7,1397c <_gp+0xffff3cc8>
   13994:	213fff04 	addi	r4,r4,-4
   13998:	2008d0ba 	srli	r4,r4,2
   1399c:	318000cc 	andi	r6,r6,3
   139a0:	21000044 	addi	r4,r4,1
   139a4:	2109883a 	add	r4,r4,r4
   139a8:	2109883a 	add	r4,r4,r4
   139ac:	1907883a 	add	r3,r3,r4
   139b0:	290b883a 	add	r5,r5,r4
   139b4:	30000626 	beq	r6,zero,139d0 <memcpy+0x11c>
   139b8:	198d883a 	add	r6,r3,r6
   139bc:	29c00003 	ldbu	r7,0(r5)
   139c0:	18c00044 	addi	r3,r3,1
   139c4:	29400044 	addi	r5,r5,1
   139c8:	19ffffc5 	stb	r7,-1(r3)
   139cc:	19bffb1e 	bne	r3,r6,139bc <_gp+0xffff3d08>
   139d0:	dfc00217 	ldw	ra,8(sp)
   139d4:	dc400117 	ldw	r17,4(sp)
   139d8:	dc000017 	ldw	r16,0(sp)
   139dc:	dec00304 	addi	sp,sp,12
   139e0:	f800283a 	ret
   139e4:	2007883a 	mov	r3,r4
   139e8:	003ff206 	br	139b4 <_gp+0xffff3d00>
   139ec:	2007883a 	mov	r3,r4
   139f0:	003ff106 	br	139b8 <_gp+0xffff3d04>
   139f4:	200d883a 	mov	r6,r4
   139f8:	003fee06 	br	139b4 <_gp+0xffff3d00>

000139fc <memmove>:
   139fc:	2005883a 	mov	r2,r4
   13a00:	29000b2e 	bgeu	r5,r4,13a30 <memmove+0x34>
   13a04:	298f883a 	add	r7,r5,r6
   13a08:	21c0092e 	bgeu	r4,r7,13a30 <memmove+0x34>
   13a0c:	2187883a 	add	r3,r4,r6
   13a10:	198bc83a 	sub	r5,r3,r6
   13a14:	30004826 	beq	r6,zero,13b38 <memmove+0x13c>
   13a18:	39ffffc4 	addi	r7,r7,-1
   13a1c:	39000003 	ldbu	r4,0(r7)
   13a20:	18ffffc4 	addi	r3,r3,-1
   13a24:	19000005 	stb	r4,0(r3)
   13a28:	28fffb1e 	bne	r5,r3,13a18 <_gp+0xffff3d64>
   13a2c:	f800283a 	ret
   13a30:	00c003c4 	movi	r3,15
   13a34:	1980412e 	bgeu	r3,r6,13b3c <memmove+0x140>
   13a38:	2886b03a 	or	r3,r5,r2
   13a3c:	18c000cc 	andi	r3,r3,3
   13a40:	1800401e 	bne	r3,zero,13b44 <memmove+0x148>
   13a44:	33fffc04 	addi	r15,r6,-16
   13a48:	781ed13a 	srli	r15,r15,4
   13a4c:	28c00104 	addi	r3,r5,4
   13a50:	13400104 	addi	r13,r2,4
   13a54:	781c913a 	slli	r14,r15,4
   13a58:	2b000204 	addi	r12,r5,8
   13a5c:	12c00204 	addi	r11,r2,8
   13a60:	73800504 	addi	r14,r14,20
   13a64:	2a800304 	addi	r10,r5,12
   13a68:	12400304 	addi	r9,r2,12
   13a6c:	2b9d883a 	add	r14,r5,r14
   13a70:	2811883a 	mov	r8,r5
   13a74:	100f883a 	mov	r7,r2
   13a78:	41000017 	ldw	r4,0(r8)
   13a7c:	39c00404 	addi	r7,r7,16
   13a80:	18c00404 	addi	r3,r3,16
   13a84:	393ffc15 	stw	r4,-16(r7)
   13a88:	193ffc17 	ldw	r4,-16(r3)
   13a8c:	6b400404 	addi	r13,r13,16
   13a90:	5ac00404 	addi	r11,r11,16
   13a94:	693ffc15 	stw	r4,-16(r13)
   13a98:	61000017 	ldw	r4,0(r12)
   13a9c:	4a400404 	addi	r9,r9,16
   13aa0:	42000404 	addi	r8,r8,16
   13aa4:	593ffc15 	stw	r4,-16(r11)
   13aa8:	51000017 	ldw	r4,0(r10)
   13aac:	63000404 	addi	r12,r12,16
   13ab0:	52800404 	addi	r10,r10,16
   13ab4:	493ffc15 	stw	r4,-16(r9)
   13ab8:	1bbfef1e 	bne	r3,r14,13a78 <_gp+0xffff3dc4>
   13abc:	79000044 	addi	r4,r15,1
   13ac0:	2008913a 	slli	r4,r4,4
   13ac4:	328003cc 	andi	r10,r6,15
   13ac8:	02c000c4 	movi	r11,3
   13acc:	1107883a 	add	r3,r2,r4
   13ad0:	290b883a 	add	r5,r5,r4
   13ad4:	5a801e2e 	bgeu	r11,r10,13b50 <memmove+0x154>
   13ad8:	1813883a 	mov	r9,r3
   13adc:	2811883a 	mov	r8,r5
   13ae0:	500f883a 	mov	r7,r10
   13ae4:	41000017 	ldw	r4,0(r8)
   13ae8:	4a400104 	addi	r9,r9,4
   13aec:	39ffff04 	addi	r7,r7,-4
   13af0:	493fff15 	stw	r4,-4(r9)
   13af4:	42000104 	addi	r8,r8,4
   13af8:	59fffa36 	bltu	r11,r7,13ae4 <_gp+0xffff3e30>
   13afc:	513fff04 	addi	r4,r10,-4
   13b00:	2008d0ba 	srli	r4,r4,2
   13b04:	318000cc 	andi	r6,r6,3
   13b08:	21000044 	addi	r4,r4,1
   13b0c:	2109883a 	add	r4,r4,r4
   13b10:	2109883a 	add	r4,r4,r4
   13b14:	1907883a 	add	r3,r3,r4
   13b18:	290b883a 	add	r5,r5,r4
   13b1c:	30000b26 	beq	r6,zero,13b4c <memmove+0x150>
   13b20:	198d883a 	add	r6,r3,r6
   13b24:	29c00003 	ldbu	r7,0(r5)
   13b28:	18c00044 	addi	r3,r3,1
   13b2c:	29400044 	addi	r5,r5,1
   13b30:	19ffffc5 	stb	r7,-1(r3)
   13b34:	19bffb1e 	bne	r3,r6,13b24 <_gp+0xffff3e70>
   13b38:	f800283a 	ret
   13b3c:	1007883a 	mov	r3,r2
   13b40:	003ff606 	br	13b1c <_gp+0xffff3e68>
   13b44:	1007883a 	mov	r3,r2
   13b48:	003ff506 	br	13b20 <_gp+0xffff3e6c>
   13b4c:	f800283a 	ret
   13b50:	500d883a 	mov	r6,r10
   13b54:	003ff106 	br	13b1c <_gp+0xffff3e68>

00013b58 <_realloc_r>:
   13b58:	defff604 	addi	sp,sp,-40
   13b5c:	dc800215 	stw	r18,8(sp)
   13b60:	dfc00915 	stw	ra,36(sp)
   13b64:	df000815 	stw	fp,32(sp)
   13b68:	ddc00715 	stw	r23,28(sp)
   13b6c:	dd800615 	stw	r22,24(sp)
   13b70:	dd400515 	stw	r21,20(sp)
   13b74:	dd000415 	stw	r20,16(sp)
   13b78:	dcc00315 	stw	r19,12(sp)
   13b7c:	dc400115 	stw	r17,4(sp)
   13b80:	dc000015 	stw	r16,0(sp)
   13b84:	3025883a 	mov	r18,r6
   13b88:	2800b726 	beq	r5,zero,13e68 <_realloc_r+0x310>
   13b8c:	282b883a 	mov	r21,r5
   13b90:	2029883a 	mov	r20,r4
   13b94:	0015df40 	call	15df4 <__malloc_lock>
   13b98:	a8bfff17 	ldw	r2,-4(r21)
   13b9c:	043fff04 	movi	r16,-4
   13ba0:	90c002c4 	addi	r3,r18,11
   13ba4:	01000584 	movi	r4,22
   13ba8:	acfffe04 	addi	r19,r21,-8
   13bac:	1420703a 	and	r16,r2,r16
   13bb0:	20c0332e 	bgeu	r4,r3,13c80 <_realloc_r+0x128>
   13bb4:	047ffe04 	movi	r17,-8
   13bb8:	1c62703a 	and	r17,r3,r17
   13bbc:	8807883a 	mov	r3,r17
   13bc0:	88005816 	blt	r17,zero,13d24 <_realloc_r+0x1cc>
   13bc4:	8c805736 	bltu	r17,r18,13d24 <_realloc_r+0x1cc>
   13bc8:	80c0300e 	bge	r16,r3,13c8c <_realloc_r+0x134>
   13bcc:	07000074 	movhi	fp,1
   13bd0:	e71e2b04 	addi	fp,fp,30892
   13bd4:	e1c00217 	ldw	r7,8(fp)
   13bd8:	9c09883a 	add	r4,r19,r16
   13bdc:	22000117 	ldw	r8,4(r4)
   13be0:	21c06326 	beq	r4,r7,13d70 <_realloc_r+0x218>
   13be4:	017fff84 	movi	r5,-2
   13be8:	414a703a 	and	r5,r8,r5
   13bec:	214b883a 	add	r5,r4,r5
   13bf0:	29800117 	ldw	r6,4(r5)
   13bf4:	3180004c 	andi	r6,r6,1
   13bf8:	30003f26 	beq	r6,zero,13cf8 <_realloc_r+0x1a0>
   13bfc:	1080004c 	andi	r2,r2,1
   13c00:	10008326 	beq	r2,zero,13e10 <_realloc_r+0x2b8>
   13c04:	900b883a 	mov	r5,r18
   13c08:	a009883a 	mov	r4,r20
   13c0c:	0012f480 	call	12f48 <_malloc_r>
   13c10:	1025883a 	mov	r18,r2
   13c14:	10011e26 	beq	r2,zero,14090 <_realloc_r+0x538>
   13c18:	a93fff17 	ldw	r4,-4(r21)
   13c1c:	10fffe04 	addi	r3,r2,-8
   13c20:	00bfff84 	movi	r2,-2
   13c24:	2084703a 	and	r2,r4,r2
   13c28:	9885883a 	add	r2,r19,r2
   13c2c:	1880ee26 	beq	r3,r2,13fe8 <_realloc_r+0x490>
   13c30:	81bfff04 	addi	r6,r16,-4
   13c34:	00800904 	movi	r2,36
   13c38:	1180b836 	bltu	r2,r6,13f1c <_realloc_r+0x3c4>
   13c3c:	00c004c4 	movi	r3,19
   13c40:	19809636 	bltu	r3,r6,13e9c <_realloc_r+0x344>
   13c44:	9005883a 	mov	r2,r18
   13c48:	a807883a 	mov	r3,r21
   13c4c:	19000017 	ldw	r4,0(r3)
   13c50:	11000015 	stw	r4,0(r2)
   13c54:	19000117 	ldw	r4,4(r3)
   13c58:	11000115 	stw	r4,4(r2)
   13c5c:	18c00217 	ldw	r3,8(r3)
   13c60:	10c00215 	stw	r3,8(r2)
   13c64:	a80b883a 	mov	r5,r21
   13c68:	a009883a 	mov	r4,r20
   13c6c:	0014d100 	call	14d10 <_free_r>
   13c70:	a009883a 	mov	r4,r20
   13c74:	0015e180 	call	15e18 <__malloc_unlock>
   13c78:	9005883a 	mov	r2,r18
   13c7c:	00001206 	br	13cc8 <_realloc_r+0x170>
   13c80:	00c00404 	movi	r3,16
   13c84:	1823883a 	mov	r17,r3
   13c88:	003fce06 	br	13bc4 <_gp+0xffff3f10>
   13c8c:	a825883a 	mov	r18,r21
   13c90:	8445c83a 	sub	r2,r16,r17
   13c94:	00c003c4 	movi	r3,15
   13c98:	18802636 	bltu	r3,r2,13d34 <_realloc_r+0x1dc>
   13c9c:	99800117 	ldw	r6,4(r19)
   13ca0:	9c07883a 	add	r3,r19,r16
   13ca4:	3180004c 	andi	r6,r6,1
   13ca8:	3420b03a 	or	r16,r6,r16
   13cac:	9c000115 	stw	r16,4(r19)
   13cb0:	18800117 	ldw	r2,4(r3)
   13cb4:	10800054 	ori	r2,r2,1
   13cb8:	18800115 	stw	r2,4(r3)
   13cbc:	a009883a 	mov	r4,r20
   13cc0:	0015e180 	call	15e18 <__malloc_unlock>
   13cc4:	9005883a 	mov	r2,r18
   13cc8:	dfc00917 	ldw	ra,36(sp)
   13ccc:	df000817 	ldw	fp,32(sp)
   13cd0:	ddc00717 	ldw	r23,28(sp)
   13cd4:	dd800617 	ldw	r22,24(sp)
   13cd8:	dd400517 	ldw	r21,20(sp)
   13cdc:	dd000417 	ldw	r20,16(sp)
   13ce0:	dcc00317 	ldw	r19,12(sp)
   13ce4:	dc800217 	ldw	r18,8(sp)
   13ce8:	dc400117 	ldw	r17,4(sp)
   13cec:	dc000017 	ldw	r16,0(sp)
   13cf0:	dec00a04 	addi	sp,sp,40
   13cf4:	f800283a 	ret
   13cf8:	017fff04 	movi	r5,-4
   13cfc:	414a703a 	and	r5,r8,r5
   13d00:	814d883a 	add	r6,r16,r5
   13d04:	30c01f16 	blt	r6,r3,13d84 <_realloc_r+0x22c>
   13d08:	20800317 	ldw	r2,12(r4)
   13d0c:	20c00217 	ldw	r3,8(r4)
   13d10:	a825883a 	mov	r18,r21
   13d14:	3021883a 	mov	r16,r6
   13d18:	18800315 	stw	r2,12(r3)
   13d1c:	10c00215 	stw	r3,8(r2)
   13d20:	003fdb06 	br	13c90 <_gp+0xffff3fdc>
   13d24:	00800304 	movi	r2,12
   13d28:	a0800015 	stw	r2,0(r20)
   13d2c:	0005883a 	mov	r2,zero
   13d30:	003fe506 	br	13cc8 <_gp+0xffff4014>
   13d34:	98c00117 	ldw	r3,4(r19)
   13d38:	9c4b883a 	add	r5,r19,r17
   13d3c:	11000054 	ori	r4,r2,1
   13d40:	18c0004c 	andi	r3,r3,1
   13d44:	1c62b03a 	or	r17,r3,r17
   13d48:	9c400115 	stw	r17,4(r19)
   13d4c:	29000115 	stw	r4,4(r5)
   13d50:	2885883a 	add	r2,r5,r2
   13d54:	10c00117 	ldw	r3,4(r2)
   13d58:	29400204 	addi	r5,r5,8
   13d5c:	a009883a 	mov	r4,r20
   13d60:	18c00054 	ori	r3,r3,1
   13d64:	10c00115 	stw	r3,4(r2)
   13d68:	0014d100 	call	14d10 <_free_r>
   13d6c:	003fd306 	br	13cbc <_gp+0xffff4008>
   13d70:	017fff04 	movi	r5,-4
   13d74:	414a703a 	and	r5,r8,r5
   13d78:	89800404 	addi	r6,r17,16
   13d7c:	8151883a 	add	r8,r16,r5
   13d80:	4180590e 	bge	r8,r6,13ee8 <_realloc_r+0x390>
   13d84:	1080004c 	andi	r2,r2,1
   13d88:	103f9e1e 	bne	r2,zero,13c04 <_gp+0xffff3f50>
   13d8c:	adbffe17 	ldw	r22,-8(r21)
   13d90:	00bfff04 	movi	r2,-4
   13d94:	9dadc83a 	sub	r22,r19,r22
   13d98:	b1800117 	ldw	r6,4(r22)
   13d9c:	3084703a 	and	r2,r6,r2
   13da0:	20002026 	beq	r4,zero,13e24 <_realloc_r+0x2cc>
   13da4:	80af883a 	add	r23,r16,r2
   13da8:	b96f883a 	add	r23,r23,r5
   13dac:	21c05f26 	beq	r4,r7,13f2c <_realloc_r+0x3d4>
   13db0:	b8c01c16 	blt	r23,r3,13e24 <_realloc_r+0x2cc>
   13db4:	20800317 	ldw	r2,12(r4)
   13db8:	20c00217 	ldw	r3,8(r4)
   13dbc:	81bfff04 	addi	r6,r16,-4
   13dc0:	01000904 	movi	r4,36
   13dc4:	18800315 	stw	r2,12(r3)
   13dc8:	10c00215 	stw	r3,8(r2)
   13dcc:	b0c00217 	ldw	r3,8(r22)
   13dd0:	b0800317 	ldw	r2,12(r22)
   13dd4:	b4800204 	addi	r18,r22,8
   13dd8:	18800315 	stw	r2,12(r3)
   13ddc:	10c00215 	stw	r3,8(r2)
   13de0:	21801b36 	bltu	r4,r6,13e50 <_realloc_r+0x2f8>
   13de4:	008004c4 	movi	r2,19
   13de8:	1180352e 	bgeu	r2,r6,13ec0 <_realloc_r+0x368>
   13dec:	a8800017 	ldw	r2,0(r21)
   13df0:	b0800215 	stw	r2,8(r22)
   13df4:	a8800117 	ldw	r2,4(r21)
   13df8:	b0800315 	stw	r2,12(r22)
   13dfc:	008006c4 	movi	r2,27
   13e00:	11807f36 	bltu	r2,r6,14000 <_realloc_r+0x4a8>
   13e04:	b0800404 	addi	r2,r22,16
   13e08:	ad400204 	addi	r21,r21,8
   13e0c:	00002d06 	br	13ec4 <_realloc_r+0x36c>
   13e10:	adbffe17 	ldw	r22,-8(r21)
   13e14:	00bfff04 	movi	r2,-4
   13e18:	9dadc83a 	sub	r22,r19,r22
   13e1c:	b1000117 	ldw	r4,4(r22)
   13e20:	2084703a 	and	r2,r4,r2
   13e24:	b03f7726 	beq	r22,zero,13c04 <_gp+0xffff3f50>
   13e28:	80af883a 	add	r23,r16,r2
   13e2c:	b8ff7516 	blt	r23,r3,13c04 <_gp+0xffff3f50>
   13e30:	b0800317 	ldw	r2,12(r22)
   13e34:	b0c00217 	ldw	r3,8(r22)
   13e38:	81bfff04 	addi	r6,r16,-4
   13e3c:	01000904 	movi	r4,36
   13e40:	18800315 	stw	r2,12(r3)
   13e44:	10c00215 	stw	r3,8(r2)
   13e48:	b4800204 	addi	r18,r22,8
   13e4c:	21bfe52e 	bgeu	r4,r6,13de4 <_gp+0xffff4130>
   13e50:	a80b883a 	mov	r5,r21
   13e54:	9009883a 	mov	r4,r18
   13e58:	00139fc0 	call	139fc <memmove>
   13e5c:	b821883a 	mov	r16,r23
   13e60:	b027883a 	mov	r19,r22
   13e64:	003f8a06 	br	13c90 <_gp+0xffff3fdc>
   13e68:	300b883a 	mov	r5,r6
   13e6c:	dfc00917 	ldw	ra,36(sp)
   13e70:	df000817 	ldw	fp,32(sp)
   13e74:	ddc00717 	ldw	r23,28(sp)
   13e78:	dd800617 	ldw	r22,24(sp)
   13e7c:	dd400517 	ldw	r21,20(sp)
   13e80:	dd000417 	ldw	r20,16(sp)
   13e84:	dcc00317 	ldw	r19,12(sp)
   13e88:	dc800217 	ldw	r18,8(sp)
   13e8c:	dc400117 	ldw	r17,4(sp)
   13e90:	dc000017 	ldw	r16,0(sp)
   13e94:	dec00a04 	addi	sp,sp,40
   13e98:	0012f481 	jmpi	12f48 <_malloc_r>
   13e9c:	a8c00017 	ldw	r3,0(r21)
   13ea0:	90c00015 	stw	r3,0(r18)
   13ea4:	a8c00117 	ldw	r3,4(r21)
   13ea8:	90c00115 	stw	r3,4(r18)
   13eac:	00c006c4 	movi	r3,27
   13eb0:	19804536 	bltu	r3,r6,13fc8 <_realloc_r+0x470>
   13eb4:	90800204 	addi	r2,r18,8
   13eb8:	a8c00204 	addi	r3,r21,8
   13ebc:	003f6306 	br	13c4c <_gp+0xffff3f98>
   13ec0:	9005883a 	mov	r2,r18
   13ec4:	a8c00017 	ldw	r3,0(r21)
   13ec8:	b821883a 	mov	r16,r23
   13ecc:	b027883a 	mov	r19,r22
   13ed0:	10c00015 	stw	r3,0(r2)
   13ed4:	a8c00117 	ldw	r3,4(r21)
   13ed8:	10c00115 	stw	r3,4(r2)
   13edc:	a8c00217 	ldw	r3,8(r21)
   13ee0:	10c00215 	stw	r3,8(r2)
   13ee4:	003f6a06 	br	13c90 <_gp+0xffff3fdc>
   13ee8:	9c67883a 	add	r19,r19,r17
   13eec:	4445c83a 	sub	r2,r8,r17
   13ef0:	e4c00215 	stw	r19,8(fp)
   13ef4:	10800054 	ori	r2,r2,1
   13ef8:	98800115 	stw	r2,4(r19)
   13efc:	a8bfff17 	ldw	r2,-4(r21)
   13f00:	a009883a 	mov	r4,r20
   13f04:	1080004c 	andi	r2,r2,1
   13f08:	1462b03a 	or	r17,r2,r17
   13f0c:	ac7fff15 	stw	r17,-4(r21)
   13f10:	0015e180 	call	15e18 <__malloc_unlock>
   13f14:	a805883a 	mov	r2,r21
   13f18:	003f6b06 	br	13cc8 <_gp+0xffff4014>
   13f1c:	a80b883a 	mov	r5,r21
   13f20:	9009883a 	mov	r4,r18
   13f24:	00139fc0 	call	139fc <memmove>
   13f28:	003f4e06 	br	13c64 <_gp+0xffff3fb0>
   13f2c:	89000404 	addi	r4,r17,16
   13f30:	b93fbc16 	blt	r23,r4,13e24 <_gp+0xffff4170>
   13f34:	b0800317 	ldw	r2,12(r22)
   13f38:	b0c00217 	ldw	r3,8(r22)
   13f3c:	81bfff04 	addi	r6,r16,-4
   13f40:	01000904 	movi	r4,36
   13f44:	18800315 	stw	r2,12(r3)
   13f48:	10c00215 	stw	r3,8(r2)
   13f4c:	b4800204 	addi	r18,r22,8
   13f50:	21804336 	bltu	r4,r6,14060 <_realloc_r+0x508>
   13f54:	008004c4 	movi	r2,19
   13f58:	11803f2e 	bgeu	r2,r6,14058 <_realloc_r+0x500>
   13f5c:	a8800017 	ldw	r2,0(r21)
   13f60:	b0800215 	stw	r2,8(r22)
   13f64:	a8800117 	ldw	r2,4(r21)
   13f68:	b0800315 	stw	r2,12(r22)
   13f6c:	008006c4 	movi	r2,27
   13f70:	11803f36 	bltu	r2,r6,14070 <_realloc_r+0x518>
   13f74:	b0800404 	addi	r2,r22,16
   13f78:	ad400204 	addi	r21,r21,8
   13f7c:	a8c00017 	ldw	r3,0(r21)
   13f80:	10c00015 	stw	r3,0(r2)
   13f84:	a8c00117 	ldw	r3,4(r21)
   13f88:	10c00115 	stw	r3,4(r2)
   13f8c:	a8c00217 	ldw	r3,8(r21)
   13f90:	10c00215 	stw	r3,8(r2)
   13f94:	b447883a 	add	r3,r22,r17
   13f98:	bc45c83a 	sub	r2,r23,r17
   13f9c:	e0c00215 	stw	r3,8(fp)
   13fa0:	10800054 	ori	r2,r2,1
   13fa4:	18800115 	stw	r2,4(r3)
   13fa8:	b0800117 	ldw	r2,4(r22)
   13fac:	a009883a 	mov	r4,r20
   13fb0:	1080004c 	andi	r2,r2,1
   13fb4:	1462b03a 	or	r17,r2,r17
   13fb8:	b4400115 	stw	r17,4(r22)
   13fbc:	0015e180 	call	15e18 <__malloc_unlock>
   13fc0:	9005883a 	mov	r2,r18
   13fc4:	003f4006 	br	13cc8 <_gp+0xffff4014>
   13fc8:	a8c00217 	ldw	r3,8(r21)
   13fcc:	90c00215 	stw	r3,8(r18)
   13fd0:	a8c00317 	ldw	r3,12(r21)
   13fd4:	90c00315 	stw	r3,12(r18)
   13fd8:	30801126 	beq	r6,r2,14020 <_realloc_r+0x4c8>
   13fdc:	90800404 	addi	r2,r18,16
   13fe0:	a8c00404 	addi	r3,r21,16
   13fe4:	003f1906 	br	13c4c <_gp+0xffff3f98>
   13fe8:	90ffff17 	ldw	r3,-4(r18)
   13fec:	00bfff04 	movi	r2,-4
   13ff0:	a825883a 	mov	r18,r21
   13ff4:	1884703a 	and	r2,r3,r2
   13ff8:	80a1883a 	add	r16,r16,r2
   13ffc:	003f2406 	br	13c90 <_gp+0xffff3fdc>
   14000:	a8800217 	ldw	r2,8(r21)
   14004:	b0800415 	stw	r2,16(r22)
   14008:	a8800317 	ldw	r2,12(r21)
   1400c:	b0800515 	stw	r2,20(r22)
   14010:	31000a26 	beq	r6,r4,1403c <_realloc_r+0x4e4>
   14014:	b0800604 	addi	r2,r22,24
   14018:	ad400404 	addi	r21,r21,16
   1401c:	003fa906 	br	13ec4 <_gp+0xffff4210>
   14020:	a9000417 	ldw	r4,16(r21)
   14024:	90800604 	addi	r2,r18,24
   14028:	a8c00604 	addi	r3,r21,24
   1402c:	91000415 	stw	r4,16(r18)
   14030:	a9000517 	ldw	r4,20(r21)
   14034:	91000515 	stw	r4,20(r18)
   14038:	003f0406 	br	13c4c <_gp+0xffff3f98>
   1403c:	a8c00417 	ldw	r3,16(r21)
   14040:	ad400604 	addi	r21,r21,24
   14044:	b0800804 	addi	r2,r22,32
   14048:	b0c00615 	stw	r3,24(r22)
   1404c:	a8ffff17 	ldw	r3,-4(r21)
   14050:	b0c00715 	stw	r3,28(r22)
   14054:	003f9b06 	br	13ec4 <_gp+0xffff4210>
   14058:	9005883a 	mov	r2,r18
   1405c:	003fc706 	br	13f7c <_gp+0xffff42c8>
   14060:	a80b883a 	mov	r5,r21
   14064:	9009883a 	mov	r4,r18
   14068:	00139fc0 	call	139fc <memmove>
   1406c:	003fc906 	br	13f94 <_gp+0xffff42e0>
   14070:	a8800217 	ldw	r2,8(r21)
   14074:	b0800415 	stw	r2,16(r22)
   14078:	a8800317 	ldw	r2,12(r21)
   1407c:	b0800515 	stw	r2,20(r22)
   14080:	31000726 	beq	r6,r4,140a0 <_realloc_r+0x548>
   14084:	b0800604 	addi	r2,r22,24
   14088:	ad400404 	addi	r21,r21,16
   1408c:	003fbb06 	br	13f7c <_gp+0xffff42c8>
   14090:	a009883a 	mov	r4,r20
   14094:	0015e180 	call	15e18 <__malloc_unlock>
   14098:	0005883a 	mov	r2,zero
   1409c:	003f0a06 	br	13cc8 <_gp+0xffff4014>
   140a0:	a8c00417 	ldw	r3,16(r21)
   140a4:	ad400604 	addi	r21,r21,24
   140a8:	b0800804 	addi	r2,r22,32
   140ac:	b0c00615 	stw	r3,24(r22)
   140b0:	a8ffff17 	ldw	r3,-4(r21)
   140b4:	b0c00715 	stw	r3,28(r22)
   140b8:	003fb006 	br	13f7c <_gp+0xffff42c8>

000140bc <_sbrk_r>:
   140bc:	defffd04 	addi	sp,sp,-12
   140c0:	dc000015 	stw	r16,0(sp)
   140c4:	040000b4 	movhi	r16,2
   140c8:	dc400115 	stw	r17,4(sp)
   140cc:	84260e04 	addi	r16,r16,-26568
   140d0:	2023883a 	mov	r17,r4
   140d4:	2809883a 	mov	r4,r5
   140d8:	dfc00215 	stw	ra,8(sp)
   140dc:	80000015 	stw	zero,0(r16)
   140e0:	0015f7c0 	call	15f7c <sbrk>
   140e4:	00ffffc4 	movi	r3,-1
   140e8:	10c00526 	beq	r2,r3,14100 <_sbrk_r+0x44>
   140ec:	dfc00217 	ldw	ra,8(sp)
   140f0:	dc400117 	ldw	r17,4(sp)
   140f4:	dc000017 	ldw	r16,0(sp)
   140f8:	dec00304 	addi	sp,sp,12
   140fc:	f800283a 	ret
   14100:	80c00017 	ldw	r3,0(r16)
   14104:	183ff926 	beq	r3,zero,140ec <_gp+0xffff4438>
   14108:	88c00015 	stw	r3,0(r17)
   1410c:	003ff706 	br	140ec <_gp+0xffff4438>

00014110 <strlen>:
   14110:	208000cc 	andi	r2,r4,3
   14114:	10002026 	beq	r2,zero,14198 <strlen+0x88>
   14118:	20800007 	ldb	r2,0(r4)
   1411c:	10002026 	beq	r2,zero,141a0 <strlen+0x90>
   14120:	2005883a 	mov	r2,r4
   14124:	00000206 	br	14130 <strlen+0x20>
   14128:	10c00007 	ldb	r3,0(r2)
   1412c:	18001826 	beq	r3,zero,14190 <strlen+0x80>
   14130:	10800044 	addi	r2,r2,1
   14134:	10c000cc 	andi	r3,r2,3
   14138:	183ffb1e 	bne	r3,zero,14128 <_gp+0xffff4474>
   1413c:	10c00017 	ldw	r3,0(r2)
   14140:	01ffbff4 	movhi	r7,65279
   14144:	39ffbfc4 	addi	r7,r7,-257
   14148:	00ca303a 	nor	r5,zero,r3
   1414c:	01a02074 	movhi	r6,32897
   14150:	19c7883a 	add	r3,r3,r7
   14154:	31a02004 	addi	r6,r6,-32640
   14158:	1946703a 	and	r3,r3,r5
   1415c:	1986703a 	and	r3,r3,r6
   14160:	1800091e 	bne	r3,zero,14188 <strlen+0x78>
   14164:	10800104 	addi	r2,r2,4
   14168:	10c00017 	ldw	r3,0(r2)
   1416c:	19cb883a 	add	r5,r3,r7
   14170:	00c6303a 	nor	r3,zero,r3
   14174:	28c6703a 	and	r3,r5,r3
   14178:	1986703a 	and	r3,r3,r6
   1417c:	183ff926 	beq	r3,zero,14164 <_gp+0xffff44b0>
   14180:	00000106 	br	14188 <strlen+0x78>
   14184:	10800044 	addi	r2,r2,1
   14188:	10c00007 	ldb	r3,0(r2)
   1418c:	183ffd1e 	bne	r3,zero,14184 <_gp+0xffff44d0>
   14190:	1105c83a 	sub	r2,r2,r4
   14194:	f800283a 	ret
   14198:	2005883a 	mov	r2,r4
   1419c:	003fe706 	br	1413c <_gp+0xffff4488>
   141a0:	0005883a 	mov	r2,zero
   141a4:	f800283a 	ret

000141a8 <__swsetup_r>:
   141a8:	00800074 	movhi	r2,1
   141ac:	defffd04 	addi	sp,sp,-12
   141b0:	109f3704 	addi	r2,r2,31964
   141b4:	dc400115 	stw	r17,4(sp)
   141b8:	2023883a 	mov	r17,r4
   141bc:	11000017 	ldw	r4,0(r2)
   141c0:	dc000015 	stw	r16,0(sp)
   141c4:	dfc00215 	stw	ra,8(sp)
   141c8:	2821883a 	mov	r16,r5
   141cc:	20000226 	beq	r4,zero,141d8 <__swsetup_r+0x30>
   141d0:	20800e17 	ldw	r2,56(r4)
   141d4:	10003126 	beq	r2,zero,1429c <__swsetup_r+0xf4>
   141d8:	8080030b 	ldhu	r2,12(r16)
   141dc:	10c0020c 	andi	r3,r2,8
   141e0:	1009883a 	mov	r4,r2
   141e4:	18000f26 	beq	r3,zero,14224 <__swsetup_r+0x7c>
   141e8:	80c00417 	ldw	r3,16(r16)
   141ec:	18001526 	beq	r3,zero,14244 <__swsetup_r+0x9c>
   141f0:	1100004c 	andi	r4,r2,1
   141f4:	20001c1e 	bne	r4,zero,14268 <__swsetup_r+0xc0>
   141f8:	1080008c 	andi	r2,r2,2
   141fc:	1000291e 	bne	r2,zero,142a4 <__swsetup_r+0xfc>
   14200:	80800517 	ldw	r2,20(r16)
   14204:	80800215 	stw	r2,8(r16)
   14208:	18001c26 	beq	r3,zero,1427c <__swsetup_r+0xd4>
   1420c:	0005883a 	mov	r2,zero
   14210:	dfc00217 	ldw	ra,8(sp)
   14214:	dc400117 	ldw	r17,4(sp)
   14218:	dc000017 	ldw	r16,0(sp)
   1421c:	dec00304 	addi	sp,sp,12
   14220:	f800283a 	ret
   14224:	2080040c 	andi	r2,r4,16
   14228:	10002e26 	beq	r2,zero,142e4 <__swsetup_r+0x13c>
   1422c:	2080010c 	andi	r2,r4,4
   14230:	10001e1e 	bne	r2,zero,142ac <__swsetup_r+0x104>
   14234:	80c00417 	ldw	r3,16(r16)
   14238:	20800214 	ori	r2,r4,8
   1423c:	8080030d 	sth	r2,12(r16)
   14240:	183feb1e 	bne	r3,zero,141f0 <_gp+0xffff453c>
   14244:	1100a00c 	andi	r4,r2,640
   14248:	01408004 	movi	r5,512
   1424c:	217fe826 	beq	r4,r5,141f0 <_gp+0xffff453c>
   14250:	800b883a 	mov	r5,r16
   14254:	8809883a 	mov	r4,r17
   14258:	00151a80 	call	151a8 <__smakebuf_r>
   1425c:	8080030b 	ldhu	r2,12(r16)
   14260:	80c00417 	ldw	r3,16(r16)
   14264:	003fe206 	br	141f0 <_gp+0xffff453c>
   14268:	80800517 	ldw	r2,20(r16)
   1426c:	80000215 	stw	zero,8(r16)
   14270:	0085c83a 	sub	r2,zero,r2
   14274:	80800615 	stw	r2,24(r16)
   14278:	183fe41e 	bne	r3,zero,1420c <_gp+0xffff4558>
   1427c:	80c0030b 	ldhu	r3,12(r16)
   14280:	0005883a 	mov	r2,zero
   14284:	1900200c 	andi	r4,r3,128
   14288:	203fe126 	beq	r4,zero,14210 <_gp+0xffff455c>
   1428c:	18c01014 	ori	r3,r3,64
   14290:	80c0030d 	sth	r3,12(r16)
   14294:	00bfffc4 	movi	r2,-1
   14298:	003fdd06 	br	14210 <_gp+0xffff455c>
   1429c:	0014b9c0 	call	14b9c <__sinit>
   142a0:	003fcd06 	br	141d8 <_gp+0xffff4524>
   142a4:	0005883a 	mov	r2,zero
   142a8:	003fd606 	br	14204 <_gp+0xffff4550>
   142ac:	81400c17 	ldw	r5,48(r16)
   142b0:	28000626 	beq	r5,zero,142cc <__swsetup_r+0x124>
   142b4:	80801004 	addi	r2,r16,64
   142b8:	28800326 	beq	r5,r2,142c8 <__swsetup_r+0x120>
   142bc:	8809883a 	mov	r4,r17
   142c0:	0014d100 	call	14d10 <_free_r>
   142c4:	8100030b 	ldhu	r4,12(r16)
   142c8:	80000c15 	stw	zero,48(r16)
   142cc:	80c00417 	ldw	r3,16(r16)
   142d0:	00bff6c4 	movi	r2,-37
   142d4:	1108703a 	and	r4,r2,r4
   142d8:	80000115 	stw	zero,4(r16)
   142dc:	80c00015 	stw	r3,0(r16)
   142e0:	003fd506 	br	14238 <_gp+0xffff4584>
   142e4:	00800244 	movi	r2,9
   142e8:	88800015 	stw	r2,0(r17)
   142ec:	20801014 	ori	r2,r4,64
   142f0:	8080030d 	sth	r2,12(r16)
   142f4:	00bfffc4 	movi	r2,-1
   142f8:	003fc506 	br	14210 <_gp+0xffff455c>

000142fc <__register_exitproc>:
   142fc:	defffa04 	addi	sp,sp,-24
   14300:	dc000315 	stw	r16,12(sp)
   14304:	04000074 	movhi	r16,1
   14308:	841f3604 	addi	r16,r16,31960
   1430c:	80c00017 	ldw	r3,0(r16)
   14310:	dc400415 	stw	r17,16(sp)
   14314:	dfc00515 	stw	ra,20(sp)
   14318:	18805217 	ldw	r2,328(r3)
   1431c:	2023883a 	mov	r17,r4
   14320:	10003726 	beq	r2,zero,14400 <__register_exitproc+0x104>
   14324:	10c00117 	ldw	r3,4(r2)
   14328:	010007c4 	movi	r4,31
   1432c:	20c00e16 	blt	r4,r3,14368 <__register_exitproc+0x6c>
   14330:	1a000044 	addi	r8,r3,1
   14334:	8800221e 	bne	r17,zero,143c0 <__register_exitproc+0xc4>
   14338:	18c00084 	addi	r3,r3,2
   1433c:	18c7883a 	add	r3,r3,r3
   14340:	18c7883a 	add	r3,r3,r3
   14344:	12000115 	stw	r8,4(r2)
   14348:	10c7883a 	add	r3,r2,r3
   1434c:	19400015 	stw	r5,0(r3)
   14350:	0005883a 	mov	r2,zero
   14354:	dfc00517 	ldw	ra,20(sp)
   14358:	dc400417 	ldw	r17,16(sp)
   1435c:	dc000317 	ldw	r16,12(sp)
   14360:	dec00604 	addi	sp,sp,24
   14364:	f800283a 	ret
   14368:	00800034 	movhi	r2,0
   1436c:	10800004 	addi	r2,r2,0
   14370:	10002626 	beq	r2,zero,1440c <__register_exitproc+0x110>
   14374:	01006404 	movi	r4,400
   14378:	d9400015 	stw	r5,0(sp)
   1437c:	d9800115 	stw	r6,4(sp)
   14380:	d9c00215 	stw	r7,8(sp)
   14384:	00000000 	call	0 <__reset-0x10000>
   14388:	d9400017 	ldw	r5,0(sp)
   1438c:	d9800117 	ldw	r6,4(sp)
   14390:	d9c00217 	ldw	r7,8(sp)
   14394:	10001d26 	beq	r2,zero,1440c <__register_exitproc+0x110>
   14398:	81000017 	ldw	r4,0(r16)
   1439c:	10000115 	stw	zero,4(r2)
   143a0:	02000044 	movi	r8,1
   143a4:	22405217 	ldw	r9,328(r4)
   143a8:	0007883a 	mov	r3,zero
   143ac:	12400015 	stw	r9,0(r2)
   143b0:	20805215 	stw	r2,328(r4)
   143b4:	10006215 	stw	zero,392(r2)
   143b8:	10006315 	stw	zero,396(r2)
   143bc:	883fde26 	beq	r17,zero,14338 <_gp+0xffff4684>
   143c0:	18c9883a 	add	r4,r3,r3
   143c4:	2109883a 	add	r4,r4,r4
   143c8:	1109883a 	add	r4,r2,r4
   143cc:	21802215 	stw	r6,136(r4)
   143d0:	01800044 	movi	r6,1
   143d4:	12406217 	ldw	r9,392(r2)
   143d8:	30cc983a 	sll	r6,r6,r3
   143dc:	4992b03a 	or	r9,r9,r6
   143e0:	12406215 	stw	r9,392(r2)
   143e4:	21c04215 	stw	r7,264(r4)
   143e8:	01000084 	movi	r4,2
   143ec:	893fd21e 	bne	r17,r4,14338 <_gp+0xffff4684>
   143f0:	11006317 	ldw	r4,396(r2)
   143f4:	218cb03a 	or	r6,r4,r6
   143f8:	11806315 	stw	r6,396(r2)
   143fc:	003fce06 	br	14338 <_gp+0xffff4684>
   14400:	18805304 	addi	r2,r3,332
   14404:	18805215 	stw	r2,328(r3)
   14408:	003fc606 	br	14324 <_gp+0xffff4670>
   1440c:	00bfffc4 	movi	r2,-1
   14410:	003fd006 	br	14354 <_gp+0xffff46a0>

00014414 <__call_exitprocs>:
   14414:	defff504 	addi	sp,sp,-44
   14418:	df000915 	stw	fp,36(sp)
   1441c:	dd400615 	stw	r21,24(sp)
   14420:	dc800315 	stw	r18,12(sp)
   14424:	dfc00a15 	stw	ra,40(sp)
   14428:	ddc00815 	stw	r23,32(sp)
   1442c:	dd800715 	stw	r22,28(sp)
   14430:	dd000515 	stw	r20,20(sp)
   14434:	dcc00415 	stw	r19,16(sp)
   14438:	dc400215 	stw	r17,8(sp)
   1443c:	dc000115 	stw	r16,4(sp)
   14440:	d9000015 	stw	r4,0(sp)
   14444:	2839883a 	mov	fp,r5
   14448:	04800044 	movi	r18,1
   1444c:	057fffc4 	movi	r21,-1
   14450:	00800074 	movhi	r2,1
   14454:	109f3604 	addi	r2,r2,31960
   14458:	12000017 	ldw	r8,0(r2)
   1445c:	45005217 	ldw	r20,328(r8)
   14460:	44c05204 	addi	r19,r8,328
   14464:	a0001c26 	beq	r20,zero,144d8 <__call_exitprocs+0xc4>
   14468:	a0800117 	ldw	r2,4(r20)
   1446c:	15ffffc4 	addi	r23,r2,-1
   14470:	b8000d16 	blt	r23,zero,144a8 <__call_exitprocs+0x94>
   14474:	14000044 	addi	r16,r2,1
   14478:	8421883a 	add	r16,r16,r16
   1447c:	8421883a 	add	r16,r16,r16
   14480:	84402004 	addi	r17,r16,128
   14484:	a463883a 	add	r17,r20,r17
   14488:	a421883a 	add	r16,r20,r16
   1448c:	e0001e26 	beq	fp,zero,14508 <__call_exitprocs+0xf4>
   14490:	80804017 	ldw	r2,256(r16)
   14494:	e0801c26 	beq	fp,r2,14508 <__call_exitprocs+0xf4>
   14498:	bdffffc4 	addi	r23,r23,-1
   1449c:	843fff04 	addi	r16,r16,-4
   144a0:	8c7fff04 	addi	r17,r17,-4
   144a4:	bd7ff91e 	bne	r23,r21,1448c <_gp+0xffff47d8>
   144a8:	00800034 	movhi	r2,0
   144ac:	10800004 	addi	r2,r2,0
   144b0:	10000926 	beq	r2,zero,144d8 <__call_exitprocs+0xc4>
   144b4:	a0800117 	ldw	r2,4(r20)
   144b8:	1000301e 	bne	r2,zero,1457c <__call_exitprocs+0x168>
   144bc:	a0800017 	ldw	r2,0(r20)
   144c0:	10003226 	beq	r2,zero,1458c <__call_exitprocs+0x178>
   144c4:	a009883a 	mov	r4,r20
   144c8:	98800015 	stw	r2,0(r19)
   144cc:	00000000 	call	0 <__reset-0x10000>
   144d0:	9d000017 	ldw	r20,0(r19)
   144d4:	a03fe41e 	bne	r20,zero,14468 <_gp+0xffff47b4>
   144d8:	dfc00a17 	ldw	ra,40(sp)
   144dc:	df000917 	ldw	fp,36(sp)
   144e0:	ddc00817 	ldw	r23,32(sp)
   144e4:	dd800717 	ldw	r22,28(sp)
   144e8:	dd400617 	ldw	r21,24(sp)
   144ec:	dd000517 	ldw	r20,20(sp)
   144f0:	dcc00417 	ldw	r19,16(sp)
   144f4:	dc800317 	ldw	r18,12(sp)
   144f8:	dc400217 	ldw	r17,8(sp)
   144fc:	dc000117 	ldw	r16,4(sp)
   14500:	dec00b04 	addi	sp,sp,44
   14504:	f800283a 	ret
   14508:	a0800117 	ldw	r2,4(r20)
   1450c:	80c00017 	ldw	r3,0(r16)
   14510:	10bfffc4 	addi	r2,r2,-1
   14514:	15c01426 	beq	r2,r23,14568 <__call_exitprocs+0x154>
   14518:	80000015 	stw	zero,0(r16)
   1451c:	183fde26 	beq	r3,zero,14498 <_gp+0xffff47e4>
   14520:	95c8983a 	sll	r4,r18,r23
   14524:	a0806217 	ldw	r2,392(r20)
   14528:	a5800117 	ldw	r22,4(r20)
   1452c:	2084703a 	and	r2,r4,r2
   14530:	10000b26 	beq	r2,zero,14560 <__call_exitprocs+0x14c>
   14534:	a0806317 	ldw	r2,396(r20)
   14538:	2088703a 	and	r4,r4,r2
   1453c:	20000c1e 	bne	r4,zero,14570 <__call_exitprocs+0x15c>
   14540:	89400017 	ldw	r5,0(r17)
   14544:	d9000017 	ldw	r4,0(sp)
   14548:	183ee83a 	callr	r3
   1454c:	a0800117 	ldw	r2,4(r20)
   14550:	15bfbf1e 	bne	r2,r22,14450 <_gp+0xffff479c>
   14554:	98800017 	ldw	r2,0(r19)
   14558:	153fcf26 	beq	r2,r20,14498 <_gp+0xffff47e4>
   1455c:	003fbc06 	br	14450 <_gp+0xffff479c>
   14560:	183ee83a 	callr	r3
   14564:	003ff906 	br	1454c <_gp+0xffff4898>
   14568:	a5c00115 	stw	r23,4(r20)
   1456c:	003feb06 	br	1451c <_gp+0xffff4868>
   14570:	89000017 	ldw	r4,0(r17)
   14574:	183ee83a 	callr	r3
   14578:	003ff406 	br	1454c <_gp+0xffff4898>
   1457c:	a0800017 	ldw	r2,0(r20)
   14580:	a027883a 	mov	r19,r20
   14584:	1029883a 	mov	r20,r2
   14588:	003fb606 	br	14464 <_gp+0xffff47b0>
   1458c:	0005883a 	mov	r2,zero
   14590:	003ffb06 	br	14580 <_gp+0xffff48cc>

00014594 <__sflush_r>:
   14594:	2880030b 	ldhu	r2,12(r5)
   14598:	defffb04 	addi	sp,sp,-20
   1459c:	dcc00315 	stw	r19,12(sp)
   145a0:	dc400115 	stw	r17,4(sp)
   145a4:	dfc00415 	stw	ra,16(sp)
   145a8:	dc800215 	stw	r18,8(sp)
   145ac:	dc000015 	stw	r16,0(sp)
   145b0:	10c0020c 	andi	r3,r2,8
   145b4:	2823883a 	mov	r17,r5
   145b8:	2027883a 	mov	r19,r4
   145bc:	1800311e 	bne	r3,zero,14684 <__sflush_r+0xf0>
   145c0:	28c00117 	ldw	r3,4(r5)
   145c4:	10820014 	ori	r2,r2,2048
   145c8:	2880030d 	sth	r2,12(r5)
   145cc:	00c04b0e 	bge	zero,r3,146fc <__sflush_r+0x168>
   145d0:	8a000a17 	ldw	r8,40(r17)
   145d4:	40002326 	beq	r8,zero,14664 <__sflush_r+0xd0>
   145d8:	9c000017 	ldw	r16,0(r19)
   145dc:	10c4000c 	andi	r3,r2,4096
   145e0:	98000015 	stw	zero,0(r19)
   145e4:	18004826 	beq	r3,zero,14708 <__sflush_r+0x174>
   145e8:	89801417 	ldw	r6,80(r17)
   145ec:	10c0010c 	andi	r3,r2,4
   145f0:	18000626 	beq	r3,zero,1460c <__sflush_r+0x78>
   145f4:	88c00117 	ldw	r3,4(r17)
   145f8:	88800c17 	ldw	r2,48(r17)
   145fc:	30cdc83a 	sub	r6,r6,r3
   14600:	10000226 	beq	r2,zero,1460c <__sflush_r+0x78>
   14604:	88800f17 	ldw	r2,60(r17)
   14608:	308dc83a 	sub	r6,r6,r2
   1460c:	89400717 	ldw	r5,28(r17)
   14610:	000f883a 	mov	r7,zero
   14614:	9809883a 	mov	r4,r19
   14618:	403ee83a 	callr	r8
   1461c:	00ffffc4 	movi	r3,-1
   14620:	10c04426 	beq	r2,r3,14734 <__sflush_r+0x1a0>
   14624:	88c0030b 	ldhu	r3,12(r17)
   14628:	89000417 	ldw	r4,16(r17)
   1462c:	88000115 	stw	zero,4(r17)
   14630:	197dffcc 	andi	r5,r3,63487
   14634:	8940030d 	sth	r5,12(r17)
   14638:	89000015 	stw	r4,0(r17)
   1463c:	18c4000c 	andi	r3,r3,4096
   14640:	18002c1e 	bne	r3,zero,146f4 <__sflush_r+0x160>
   14644:	89400c17 	ldw	r5,48(r17)
   14648:	9c000015 	stw	r16,0(r19)
   1464c:	28000526 	beq	r5,zero,14664 <__sflush_r+0xd0>
   14650:	88801004 	addi	r2,r17,64
   14654:	28800226 	beq	r5,r2,14660 <__sflush_r+0xcc>
   14658:	9809883a 	mov	r4,r19
   1465c:	0014d100 	call	14d10 <_free_r>
   14660:	88000c15 	stw	zero,48(r17)
   14664:	0005883a 	mov	r2,zero
   14668:	dfc00417 	ldw	ra,16(sp)
   1466c:	dcc00317 	ldw	r19,12(sp)
   14670:	dc800217 	ldw	r18,8(sp)
   14674:	dc400117 	ldw	r17,4(sp)
   14678:	dc000017 	ldw	r16,0(sp)
   1467c:	dec00504 	addi	sp,sp,20
   14680:	f800283a 	ret
   14684:	2c800417 	ldw	r18,16(r5)
   14688:	903ff626 	beq	r18,zero,14664 <_gp+0xffff49b0>
   1468c:	2c000017 	ldw	r16,0(r5)
   14690:	108000cc 	andi	r2,r2,3
   14694:	2c800015 	stw	r18,0(r5)
   14698:	84a1c83a 	sub	r16,r16,r18
   1469c:	1000131e 	bne	r2,zero,146ec <__sflush_r+0x158>
   146a0:	28800517 	ldw	r2,20(r5)
   146a4:	88800215 	stw	r2,8(r17)
   146a8:	04000316 	blt	zero,r16,146b8 <__sflush_r+0x124>
   146ac:	003fed06 	br	14664 <_gp+0xffff49b0>
   146b0:	90a5883a 	add	r18,r18,r2
   146b4:	043feb0e 	bge	zero,r16,14664 <_gp+0xffff49b0>
   146b8:	88800917 	ldw	r2,36(r17)
   146bc:	89400717 	ldw	r5,28(r17)
   146c0:	800f883a 	mov	r7,r16
   146c4:	900d883a 	mov	r6,r18
   146c8:	9809883a 	mov	r4,r19
   146cc:	103ee83a 	callr	r2
   146d0:	80a1c83a 	sub	r16,r16,r2
   146d4:	00bff616 	blt	zero,r2,146b0 <_gp+0xffff49fc>
   146d8:	88c0030b 	ldhu	r3,12(r17)
   146dc:	00bfffc4 	movi	r2,-1
   146e0:	18c01014 	ori	r3,r3,64
   146e4:	88c0030d 	sth	r3,12(r17)
   146e8:	003fdf06 	br	14668 <_gp+0xffff49b4>
   146ec:	0005883a 	mov	r2,zero
   146f0:	003fec06 	br	146a4 <_gp+0xffff49f0>
   146f4:	88801415 	stw	r2,80(r17)
   146f8:	003fd206 	br	14644 <_gp+0xffff4990>
   146fc:	28c00f17 	ldw	r3,60(r5)
   14700:	00ffb316 	blt	zero,r3,145d0 <_gp+0xffff491c>
   14704:	003fd706 	br	14664 <_gp+0xffff49b0>
   14708:	89400717 	ldw	r5,28(r17)
   1470c:	000d883a 	mov	r6,zero
   14710:	01c00044 	movi	r7,1
   14714:	9809883a 	mov	r4,r19
   14718:	403ee83a 	callr	r8
   1471c:	100d883a 	mov	r6,r2
   14720:	00bfffc4 	movi	r2,-1
   14724:	30801426 	beq	r6,r2,14778 <__sflush_r+0x1e4>
   14728:	8880030b 	ldhu	r2,12(r17)
   1472c:	8a000a17 	ldw	r8,40(r17)
   14730:	003fae06 	br	145ec <_gp+0xffff4938>
   14734:	98c00017 	ldw	r3,0(r19)
   14738:	183fba26 	beq	r3,zero,14624 <_gp+0xffff4970>
   1473c:	01000744 	movi	r4,29
   14740:	19000626 	beq	r3,r4,1475c <__sflush_r+0x1c8>
   14744:	01000584 	movi	r4,22
   14748:	19000426 	beq	r3,r4,1475c <__sflush_r+0x1c8>
   1474c:	88c0030b 	ldhu	r3,12(r17)
   14750:	18c01014 	ori	r3,r3,64
   14754:	88c0030d 	sth	r3,12(r17)
   14758:	003fc306 	br	14668 <_gp+0xffff49b4>
   1475c:	8880030b 	ldhu	r2,12(r17)
   14760:	88c00417 	ldw	r3,16(r17)
   14764:	88000115 	stw	zero,4(r17)
   14768:	10bdffcc 	andi	r2,r2,63487
   1476c:	8880030d 	sth	r2,12(r17)
   14770:	88c00015 	stw	r3,0(r17)
   14774:	003fb306 	br	14644 <_gp+0xffff4990>
   14778:	98800017 	ldw	r2,0(r19)
   1477c:	103fea26 	beq	r2,zero,14728 <_gp+0xffff4a74>
   14780:	00c00744 	movi	r3,29
   14784:	10c00226 	beq	r2,r3,14790 <__sflush_r+0x1fc>
   14788:	00c00584 	movi	r3,22
   1478c:	10c0031e 	bne	r2,r3,1479c <__sflush_r+0x208>
   14790:	9c000015 	stw	r16,0(r19)
   14794:	0005883a 	mov	r2,zero
   14798:	003fb306 	br	14668 <_gp+0xffff49b4>
   1479c:	88c0030b 	ldhu	r3,12(r17)
   147a0:	3005883a 	mov	r2,r6
   147a4:	18c01014 	ori	r3,r3,64
   147a8:	88c0030d 	sth	r3,12(r17)
   147ac:	003fae06 	br	14668 <_gp+0xffff49b4>

000147b0 <_fflush_r>:
   147b0:	defffd04 	addi	sp,sp,-12
   147b4:	dc000115 	stw	r16,4(sp)
   147b8:	dfc00215 	stw	ra,8(sp)
   147bc:	2021883a 	mov	r16,r4
   147c0:	20000226 	beq	r4,zero,147cc <_fflush_r+0x1c>
   147c4:	20800e17 	ldw	r2,56(r4)
   147c8:	10000c26 	beq	r2,zero,147fc <_fflush_r+0x4c>
   147cc:	2880030f 	ldh	r2,12(r5)
   147d0:	1000051e 	bne	r2,zero,147e8 <_fflush_r+0x38>
   147d4:	0005883a 	mov	r2,zero
   147d8:	dfc00217 	ldw	ra,8(sp)
   147dc:	dc000117 	ldw	r16,4(sp)
   147e0:	dec00304 	addi	sp,sp,12
   147e4:	f800283a 	ret
   147e8:	8009883a 	mov	r4,r16
   147ec:	dfc00217 	ldw	ra,8(sp)
   147f0:	dc000117 	ldw	r16,4(sp)
   147f4:	dec00304 	addi	sp,sp,12
   147f8:	00145941 	jmpi	14594 <__sflush_r>
   147fc:	d9400015 	stw	r5,0(sp)
   14800:	0014b9c0 	call	14b9c <__sinit>
   14804:	d9400017 	ldw	r5,0(sp)
   14808:	003ff006 	br	147cc <_gp+0xffff4b18>

0001480c <fflush>:
   1480c:	20000526 	beq	r4,zero,14824 <fflush+0x18>
   14810:	00800074 	movhi	r2,1
   14814:	109f3704 	addi	r2,r2,31964
   14818:	200b883a 	mov	r5,r4
   1481c:	11000017 	ldw	r4,0(r2)
   14820:	00147b01 	jmpi	147b0 <_fflush_r>
   14824:	00800074 	movhi	r2,1
   14828:	109f3604 	addi	r2,r2,31960
   1482c:	11000017 	ldw	r4,0(r2)
   14830:	01400074 	movhi	r5,1
   14834:	2951ec04 	addi	r5,r5,18352
   14838:	00150e41 	jmpi	150e4 <_fwalk_reent>

0001483c <__fp_unlock>:
   1483c:	0005883a 	mov	r2,zero
   14840:	f800283a 	ret

00014844 <_cleanup_r>:
   14844:	01400074 	movhi	r5,1
   14848:	29559f04 	addi	r5,r5,22140
   1484c:	00150e41 	jmpi	150e4 <_fwalk_reent>

00014850 <__sinit.part.1>:
   14850:	defff704 	addi	sp,sp,-36
   14854:	00c00074 	movhi	r3,1
   14858:	dfc00815 	stw	ra,32(sp)
   1485c:	ddc00715 	stw	r23,28(sp)
   14860:	dd800615 	stw	r22,24(sp)
   14864:	dd400515 	stw	r21,20(sp)
   14868:	dd000415 	stw	r20,16(sp)
   1486c:	dcc00315 	stw	r19,12(sp)
   14870:	dc800215 	stw	r18,8(sp)
   14874:	dc400115 	stw	r17,4(sp)
   14878:	dc000015 	stw	r16,0(sp)
   1487c:	18d21104 	addi	r3,r3,18500
   14880:	24000117 	ldw	r16,4(r4)
   14884:	20c00f15 	stw	r3,60(r4)
   14888:	2080bb04 	addi	r2,r4,748
   1488c:	00c000c4 	movi	r3,3
   14890:	20c0b915 	stw	r3,740(r4)
   14894:	2080ba15 	stw	r2,744(r4)
   14898:	2000b815 	stw	zero,736(r4)
   1489c:	05c00204 	movi	r23,8
   148a0:	00800104 	movi	r2,4
   148a4:	2025883a 	mov	r18,r4
   148a8:	b80d883a 	mov	r6,r23
   148ac:	81001704 	addi	r4,r16,92
   148b0:	000b883a 	mov	r5,zero
   148b4:	80000015 	stw	zero,0(r16)
   148b8:	80000115 	stw	zero,4(r16)
   148bc:	80000215 	stw	zero,8(r16)
   148c0:	8080030d 	sth	r2,12(r16)
   148c4:	80001915 	stw	zero,100(r16)
   148c8:	8000038d 	sth	zero,14(r16)
   148cc:	80000415 	stw	zero,16(r16)
   148d0:	80000515 	stw	zero,20(r16)
   148d4:	80000615 	stw	zero,24(r16)
   148d8:	00153640 	call	15364 <memset>
   148dc:	05800074 	movhi	r22,1
   148e0:	94400217 	ldw	r17,8(r18)
   148e4:	05400074 	movhi	r21,1
   148e8:	05000074 	movhi	r20,1
   148ec:	04c00074 	movhi	r19,1
   148f0:	b5952304 	addi	r22,r22,21644
   148f4:	ad553a04 	addi	r21,r21,21736
   148f8:	a5155904 	addi	r20,r20,21860
   148fc:	9cd57004 	addi	r19,r19,21952
   14900:	85800815 	stw	r22,32(r16)
   14904:	85400915 	stw	r21,36(r16)
   14908:	85000a15 	stw	r20,40(r16)
   1490c:	84c00b15 	stw	r19,44(r16)
   14910:	84000715 	stw	r16,28(r16)
   14914:	00800284 	movi	r2,10
   14918:	8880030d 	sth	r2,12(r17)
   1491c:	00800044 	movi	r2,1
   14920:	b80d883a 	mov	r6,r23
   14924:	89001704 	addi	r4,r17,92
   14928:	000b883a 	mov	r5,zero
   1492c:	88000015 	stw	zero,0(r17)
   14930:	88000115 	stw	zero,4(r17)
   14934:	88000215 	stw	zero,8(r17)
   14938:	88001915 	stw	zero,100(r17)
   1493c:	8880038d 	sth	r2,14(r17)
   14940:	88000415 	stw	zero,16(r17)
   14944:	88000515 	stw	zero,20(r17)
   14948:	88000615 	stw	zero,24(r17)
   1494c:	00153640 	call	15364 <memset>
   14950:	94000317 	ldw	r16,12(r18)
   14954:	00800484 	movi	r2,18
   14958:	8c400715 	stw	r17,28(r17)
   1495c:	8d800815 	stw	r22,32(r17)
   14960:	8d400915 	stw	r21,36(r17)
   14964:	8d000a15 	stw	r20,40(r17)
   14968:	8cc00b15 	stw	r19,44(r17)
   1496c:	8080030d 	sth	r2,12(r16)
   14970:	00800084 	movi	r2,2
   14974:	80000015 	stw	zero,0(r16)
   14978:	80000115 	stw	zero,4(r16)
   1497c:	80000215 	stw	zero,8(r16)
   14980:	80001915 	stw	zero,100(r16)
   14984:	8080038d 	sth	r2,14(r16)
   14988:	80000415 	stw	zero,16(r16)
   1498c:	80000515 	stw	zero,20(r16)
   14990:	80000615 	stw	zero,24(r16)
   14994:	b80d883a 	mov	r6,r23
   14998:	000b883a 	mov	r5,zero
   1499c:	81001704 	addi	r4,r16,92
   149a0:	00153640 	call	15364 <memset>
   149a4:	00800044 	movi	r2,1
   149a8:	84000715 	stw	r16,28(r16)
   149ac:	85800815 	stw	r22,32(r16)
   149b0:	85400915 	stw	r21,36(r16)
   149b4:	85000a15 	stw	r20,40(r16)
   149b8:	84c00b15 	stw	r19,44(r16)
   149bc:	90800e15 	stw	r2,56(r18)
   149c0:	dfc00817 	ldw	ra,32(sp)
   149c4:	ddc00717 	ldw	r23,28(sp)
   149c8:	dd800617 	ldw	r22,24(sp)
   149cc:	dd400517 	ldw	r21,20(sp)
   149d0:	dd000417 	ldw	r20,16(sp)
   149d4:	dcc00317 	ldw	r19,12(sp)
   149d8:	dc800217 	ldw	r18,8(sp)
   149dc:	dc400117 	ldw	r17,4(sp)
   149e0:	dc000017 	ldw	r16,0(sp)
   149e4:	dec00904 	addi	sp,sp,36
   149e8:	f800283a 	ret

000149ec <__fp_lock>:
   149ec:	0005883a 	mov	r2,zero
   149f0:	f800283a 	ret

000149f4 <__sfmoreglue>:
   149f4:	defffc04 	addi	sp,sp,-16
   149f8:	dc800215 	stw	r18,8(sp)
   149fc:	2825883a 	mov	r18,r5
   14a00:	dc000015 	stw	r16,0(sp)
   14a04:	01401a04 	movi	r5,104
   14a08:	2021883a 	mov	r16,r4
   14a0c:	913fffc4 	addi	r4,r18,-1
   14a10:	dfc00315 	stw	ra,12(sp)
   14a14:	dc400115 	stw	r17,4(sp)
   14a18:	0015aa40 	call	15aa4 <__mulsi3>
   14a1c:	8009883a 	mov	r4,r16
   14a20:	11401d04 	addi	r5,r2,116
   14a24:	1023883a 	mov	r17,r2
   14a28:	0012f480 	call	12f48 <_malloc_r>
   14a2c:	1021883a 	mov	r16,r2
   14a30:	10000726 	beq	r2,zero,14a50 <__sfmoreglue+0x5c>
   14a34:	11000304 	addi	r4,r2,12
   14a38:	10000015 	stw	zero,0(r2)
   14a3c:	14800115 	stw	r18,4(r2)
   14a40:	11000215 	stw	r4,8(r2)
   14a44:	89801a04 	addi	r6,r17,104
   14a48:	000b883a 	mov	r5,zero
   14a4c:	00153640 	call	15364 <memset>
   14a50:	8005883a 	mov	r2,r16
   14a54:	dfc00317 	ldw	ra,12(sp)
   14a58:	dc800217 	ldw	r18,8(sp)
   14a5c:	dc400117 	ldw	r17,4(sp)
   14a60:	dc000017 	ldw	r16,0(sp)
   14a64:	dec00404 	addi	sp,sp,16
   14a68:	f800283a 	ret

00014a6c <__sfp>:
   14a6c:	defffb04 	addi	sp,sp,-20
   14a70:	dc000015 	stw	r16,0(sp)
   14a74:	04000074 	movhi	r16,1
   14a78:	841f3604 	addi	r16,r16,31960
   14a7c:	dcc00315 	stw	r19,12(sp)
   14a80:	2027883a 	mov	r19,r4
   14a84:	81000017 	ldw	r4,0(r16)
   14a88:	dfc00415 	stw	ra,16(sp)
   14a8c:	dc800215 	stw	r18,8(sp)
   14a90:	20800e17 	ldw	r2,56(r4)
   14a94:	dc400115 	stw	r17,4(sp)
   14a98:	1000021e 	bne	r2,zero,14aa4 <__sfp+0x38>
   14a9c:	00148500 	call	14850 <__sinit.part.1>
   14aa0:	81000017 	ldw	r4,0(r16)
   14aa4:	2480b804 	addi	r18,r4,736
   14aa8:	047fffc4 	movi	r17,-1
   14aac:	91000117 	ldw	r4,4(r18)
   14ab0:	94000217 	ldw	r16,8(r18)
   14ab4:	213fffc4 	addi	r4,r4,-1
   14ab8:	20000a16 	blt	r4,zero,14ae4 <__sfp+0x78>
   14abc:	8080030f 	ldh	r2,12(r16)
   14ac0:	10000c26 	beq	r2,zero,14af4 <__sfp+0x88>
   14ac4:	80c01d04 	addi	r3,r16,116
   14ac8:	00000206 	br	14ad4 <__sfp+0x68>
   14acc:	18bfe60f 	ldh	r2,-104(r3)
   14ad0:	10000826 	beq	r2,zero,14af4 <__sfp+0x88>
   14ad4:	213fffc4 	addi	r4,r4,-1
   14ad8:	1c3ffd04 	addi	r16,r3,-12
   14adc:	18c01a04 	addi	r3,r3,104
   14ae0:	247ffa1e 	bne	r4,r17,14acc <_gp+0xffff4e18>
   14ae4:	90800017 	ldw	r2,0(r18)
   14ae8:	10001d26 	beq	r2,zero,14b60 <__sfp+0xf4>
   14aec:	1025883a 	mov	r18,r2
   14af0:	003fee06 	br	14aac <_gp+0xffff4df8>
   14af4:	00bfffc4 	movi	r2,-1
   14af8:	8080038d 	sth	r2,14(r16)
   14afc:	00800044 	movi	r2,1
   14b00:	8080030d 	sth	r2,12(r16)
   14b04:	80001915 	stw	zero,100(r16)
   14b08:	80000015 	stw	zero,0(r16)
   14b0c:	80000215 	stw	zero,8(r16)
   14b10:	80000115 	stw	zero,4(r16)
   14b14:	80000415 	stw	zero,16(r16)
   14b18:	80000515 	stw	zero,20(r16)
   14b1c:	80000615 	stw	zero,24(r16)
   14b20:	01800204 	movi	r6,8
   14b24:	000b883a 	mov	r5,zero
   14b28:	81001704 	addi	r4,r16,92
   14b2c:	00153640 	call	15364 <memset>
   14b30:	8005883a 	mov	r2,r16
   14b34:	80000c15 	stw	zero,48(r16)
   14b38:	80000d15 	stw	zero,52(r16)
   14b3c:	80001115 	stw	zero,68(r16)
   14b40:	80001215 	stw	zero,72(r16)
   14b44:	dfc00417 	ldw	ra,16(sp)
   14b48:	dcc00317 	ldw	r19,12(sp)
   14b4c:	dc800217 	ldw	r18,8(sp)
   14b50:	dc400117 	ldw	r17,4(sp)
   14b54:	dc000017 	ldw	r16,0(sp)
   14b58:	dec00504 	addi	sp,sp,20
   14b5c:	f800283a 	ret
   14b60:	01400104 	movi	r5,4
   14b64:	9809883a 	mov	r4,r19
   14b68:	00149f40 	call	149f4 <__sfmoreglue>
   14b6c:	90800015 	stw	r2,0(r18)
   14b70:	103fde1e 	bne	r2,zero,14aec <_gp+0xffff4e38>
   14b74:	00800304 	movi	r2,12
   14b78:	98800015 	stw	r2,0(r19)
   14b7c:	0005883a 	mov	r2,zero
   14b80:	003ff006 	br	14b44 <_gp+0xffff4e90>

00014b84 <_cleanup>:
   14b84:	00800074 	movhi	r2,1
   14b88:	109f3604 	addi	r2,r2,31960
   14b8c:	11000017 	ldw	r4,0(r2)
   14b90:	01400074 	movhi	r5,1
   14b94:	29559f04 	addi	r5,r5,22140
   14b98:	00150e41 	jmpi	150e4 <_fwalk_reent>

00014b9c <__sinit>:
   14b9c:	20800e17 	ldw	r2,56(r4)
   14ba0:	10000126 	beq	r2,zero,14ba8 <__sinit+0xc>
   14ba4:	f800283a 	ret
   14ba8:	00148501 	jmpi	14850 <__sinit.part.1>

00014bac <__sfp_lock_acquire>:
   14bac:	f800283a 	ret

00014bb0 <__sfp_lock_release>:
   14bb0:	f800283a 	ret

00014bb4 <__sinit_lock_acquire>:
   14bb4:	f800283a 	ret

00014bb8 <__sinit_lock_release>:
   14bb8:	f800283a 	ret

00014bbc <__fp_lock_all>:
   14bbc:	00800074 	movhi	r2,1
   14bc0:	109f3704 	addi	r2,r2,31964
   14bc4:	11000017 	ldw	r4,0(r2)
   14bc8:	01400074 	movhi	r5,1
   14bcc:	29527b04 	addi	r5,r5,18924
   14bd0:	00150201 	jmpi	15020 <_fwalk>

00014bd4 <__fp_unlock_all>:
   14bd4:	00800074 	movhi	r2,1
   14bd8:	109f3704 	addi	r2,r2,31964
   14bdc:	11000017 	ldw	r4,0(r2)
   14be0:	01400074 	movhi	r5,1
   14be4:	29520f04 	addi	r5,r5,18492
   14be8:	00150201 	jmpi	15020 <_fwalk>

00014bec <_malloc_trim_r>:
   14bec:	defffb04 	addi	sp,sp,-20
   14bf0:	dcc00315 	stw	r19,12(sp)
   14bf4:	04c00074 	movhi	r19,1
   14bf8:	dc800215 	stw	r18,8(sp)
   14bfc:	dc400115 	stw	r17,4(sp)
   14c00:	dc000015 	stw	r16,0(sp)
   14c04:	dfc00415 	stw	ra,16(sp)
   14c08:	2821883a 	mov	r16,r5
   14c0c:	9cde2b04 	addi	r19,r19,30892
   14c10:	2025883a 	mov	r18,r4
   14c14:	0015df40 	call	15df4 <__malloc_lock>
   14c18:	98800217 	ldw	r2,8(r19)
   14c1c:	14400117 	ldw	r17,4(r2)
   14c20:	00bfff04 	movi	r2,-4
   14c24:	88a2703a 	and	r17,r17,r2
   14c28:	8c21c83a 	sub	r16,r17,r16
   14c2c:	8403fbc4 	addi	r16,r16,4079
   14c30:	8020d33a 	srli	r16,r16,12
   14c34:	0083ffc4 	movi	r2,4095
   14c38:	843fffc4 	addi	r16,r16,-1
   14c3c:	8020933a 	slli	r16,r16,12
   14c40:	1400060e 	bge	r2,r16,14c5c <_malloc_trim_r+0x70>
   14c44:	000b883a 	mov	r5,zero
   14c48:	9009883a 	mov	r4,r18
   14c4c:	00140bc0 	call	140bc <_sbrk_r>
   14c50:	98c00217 	ldw	r3,8(r19)
   14c54:	1c47883a 	add	r3,r3,r17
   14c58:	10c00a26 	beq	r2,r3,14c84 <_malloc_trim_r+0x98>
   14c5c:	9009883a 	mov	r4,r18
   14c60:	0015e180 	call	15e18 <__malloc_unlock>
   14c64:	0005883a 	mov	r2,zero
   14c68:	dfc00417 	ldw	ra,16(sp)
   14c6c:	dcc00317 	ldw	r19,12(sp)
   14c70:	dc800217 	ldw	r18,8(sp)
   14c74:	dc400117 	ldw	r17,4(sp)
   14c78:	dc000017 	ldw	r16,0(sp)
   14c7c:	dec00504 	addi	sp,sp,20
   14c80:	f800283a 	ret
   14c84:	040bc83a 	sub	r5,zero,r16
   14c88:	9009883a 	mov	r4,r18
   14c8c:	00140bc0 	call	140bc <_sbrk_r>
   14c90:	00ffffc4 	movi	r3,-1
   14c94:	10c00d26 	beq	r2,r3,14ccc <_malloc_trim_r+0xe0>
   14c98:	00c000b4 	movhi	r3,2
   14c9c:	18e61204 	addi	r3,r3,-26552
   14ca0:	18800017 	ldw	r2,0(r3)
   14ca4:	99000217 	ldw	r4,8(r19)
   14ca8:	8c23c83a 	sub	r17,r17,r16
   14cac:	8c400054 	ori	r17,r17,1
   14cb0:	1421c83a 	sub	r16,r2,r16
   14cb4:	24400115 	stw	r17,4(r4)
   14cb8:	9009883a 	mov	r4,r18
   14cbc:	1c000015 	stw	r16,0(r3)
   14cc0:	0015e180 	call	15e18 <__malloc_unlock>
   14cc4:	00800044 	movi	r2,1
   14cc8:	003fe706 	br	14c68 <_gp+0xffff4fb4>
   14ccc:	000b883a 	mov	r5,zero
   14cd0:	9009883a 	mov	r4,r18
   14cd4:	00140bc0 	call	140bc <_sbrk_r>
   14cd8:	99000217 	ldw	r4,8(r19)
   14cdc:	014003c4 	movi	r5,15
   14ce0:	1107c83a 	sub	r3,r2,r4
   14ce4:	28ffdd0e 	bge	r5,r3,14c5c <_gp+0xffff4fa8>
   14ce8:	01400074 	movhi	r5,1
   14cec:	295f3804 	addi	r5,r5,31968
   14cf0:	29400017 	ldw	r5,0(r5)
   14cf4:	18c00054 	ori	r3,r3,1
   14cf8:	20c00115 	stw	r3,4(r4)
   14cfc:	00c000b4 	movhi	r3,2
   14d00:	1145c83a 	sub	r2,r2,r5
   14d04:	18e61204 	addi	r3,r3,-26552
   14d08:	18800015 	stw	r2,0(r3)
   14d0c:	003fd306 	br	14c5c <_gp+0xffff4fa8>

00014d10 <_free_r>:
   14d10:	28004126 	beq	r5,zero,14e18 <_free_r+0x108>
   14d14:	defffd04 	addi	sp,sp,-12
   14d18:	dc400115 	stw	r17,4(sp)
   14d1c:	dc000015 	stw	r16,0(sp)
   14d20:	2023883a 	mov	r17,r4
   14d24:	2821883a 	mov	r16,r5
   14d28:	dfc00215 	stw	ra,8(sp)
   14d2c:	0015df40 	call	15df4 <__malloc_lock>
   14d30:	81ffff17 	ldw	r7,-4(r16)
   14d34:	00bfff84 	movi	r2,-2
   14d38:	01000074 	movhi	r4,1
   14d3c:	81bffe04 	addi	r6,r16,-8
   14d40:	3884703a 	and	r2,r7,r2
   14d44:	211e2b04 	addi	r4,r4,30892
   14d48:	308b883a 	add	r5,r6,r2
   14d4c:	2a400117 	ldw	r9,4(r5)
   14d50:	22000217 	ldw	r8,8(r4)
   14d54:	00ffff04 	movi	r3,-4
   14d58:	48c6703a 	and	r3,r9,r3
   14d5c:	2a005726 	beq	r5,r8,14ebc <_free_r+0x1ac>
   14d60:	28c00115 	stw	r3,4(r5)
   14d64:	39c0004c 	andi	r7,r7,1
   14d68:	3800091e 	bne	r7,zero,14d90 <_free_r+0x80>
   14d6c:	823ffe17 	ldw	r8,-8(r16)
   14d70:	22400204 	addi	r9,r4,8
   14d74:	320dc83a 	sub	r6,r6,r8
   14d78:	31c00217 	ldw	r7,8(r6)
   14d7c:	1205883a 	add	r2,r2,r8
   14d80:	3a406526 	beq	r7,r9,14f18 <_free_r+0x208>
   14d84:	32000317 	ldw	r8,12(r6)
   14d88:	3a000315 	stw	r8,12(r7)
   14d8c:	41c00215 	stw	r7,8(r8)
   14d90:	28cf883a 	add	r7,r5,r3
   14d94:	39c00117 	ldw	r7,4(r7)
   14d98:	39c0004c 	andi	r7,r7,1
   14d9c:	38003a26 	beq	r7,zero,14e88 <_free_r+0x178>
   14da0:	10c00054 	ori	r3,r2,1
   14da4:	30c00115 	stw	r3,4(r6)
   14da8:	3087883a 	add	r3,r6,r2
   14dac:	18800015 	stw	r2,0(r3)
   14db0:	00c07fc4 	movi	r3,511
   14db4:	18801936 	bltu	r3,r2,14e1c <_free_r+0x10c>
   14db8:	1004d0fa 	srli	r2,r2,3
   14dbc:	01c00044 	movi	r7,1
   14dc0:	21400117 	ldw	r5,4(r4)
   14dc4:	10c00044 	addi	r3,r2,1
   14dc8:	18c7883a 	add	r3,r3,r3
   14dcc:	1005d0ba 	srai	r2,r2,2
   14dd0:	18c7883a 	add	r3,r3,r3
   14dd4:	18c7883a 	add	r3,r3,r3
   14dd8:	1907883a 	add	r3,r3,r4
   14ddc:	3884983a 	sll	r2,r7,r2
   14de0:	19c00017 	ldw	r7,0(r3)
   14de4:	1a3ffe04 	addi	r8,r3,-8
   14de8:	1144b03a 	or	r2,r2,r5
   14dec:	32000315 	stw	r8,12(r6)
   14df0:	31c00215 	stw	r7,8(r6)
   14df4:	20800115 	stw	r2,4(r4)
   14df8:	19800015 	stw	r6,0(r3)
   14dfc:	39800315 	stw	r6,12(r7)
   14e00:	8809883a 	mov	r4,r17
   14e04:	dfc00217 	ldw	ra,8(sp)
   14e08:	dc400117 	ldw	r17,4(sp)
   14e0c:	dc000017 	ldw	r16,0(sp)
   14e10:	dec00304 	addi	sp,sp,12
   14e14:	0015e181 	jmpi	15e18 <__malloc_unlock>
   14e18:	f800283a 	ret
   14e1c:	100ad27a 	srli	r5,r2,9
   14e20:	00c00104 	movi	r3,4
   14e24:	19404a36 	bltu	r3,r5,14f50 <_free_r+0x240>
   14e28:	100ad1ba 	srli	r5,r2,6
   14e2c:	28c00e44 	addi	r3,r5,57
   14e30:	18c7883a 	add	r3,r3,r3
   14e34:	29400e04 	addi	r5,r5,56
   14e38:	18c7883a 	add	r3,r3,r3
   14e3c:	18c7883a 	add	r3,r3,r3
   14e40:	1909883a 	add	r4,r3,r4
   14e44:	20c00017 	ldw	r3,0(r4)
   14e48:	01c00074 	movhi	r7,1
   14e4c:	213ffe04 	addi	r4,r4,-8
   14e50:	39de2b04 	addi	r7,r7,30892
   14e54:	20c04426 	beq	r4,r3,14f68 <_free_r+0x258>
   14e58:	01ffff04 	movi	r7,-4
   14e5c:	19400117 	ldw	r5,4(r3)
   14e60:	29ca703a 	and	r5,r5,r7
   14e64:	1140022e 	bgeu	r2,r5,14e70 <_free_r+0x160>
   14e68:	18c00217 	ldw	r3,8(r3)
   14e6c:	20fffb1e 	bne	r4,r3,14e5c <_gp+0xffff51a8>
   14e70:	19000317 	ldw	r4,12(r3)
   14e74:	31000315 	stw	r4,12(r6)
   14e78:	30c00215 	stw	r3,8(r6)
   14e7c:	21800215 	stw	r6,8(r4)
   14e80:	19800315 	stw	r6,12(r3)
   14e84:	003fde06 	br	14e00 <_gp+0xffff514c>
   14e88:	29c00217 	ldw	r7,8(r5)
   14e8c:	10c5883a 	add	r2,r2,r3
   14e90:	00c00074 	movhi	r3,1
   14e94:	18de2d04 	addi	r3,r3,30900
   14e98:	38c03b26 	beq	r7,r3,14f88 <_free_r+0x278>
   14e9c:	2a000317 	ldw	r8,12(r5)
   14ea0:	11400054 	ori	r5,r2,1
   14ea4:	3087883a 	add	r3,r6,r2
   14ea8:	3a000315 	stw	r8,12(r7)
   14eac:	41c00215 	stw	r7,8(r8)
   14eb0:	31400115 	stw	r5,4(r6)
   14eb4:	18800015 	stw	r2,0(r3)
   14eb8:	003fbd06 	br	14db0 <_gp+0xffff50fc>
   14ebc:	39c0004c 	andi	r7,r7,1
   14ec0:	10c5883a 	add	r2,r2,r3
   14ec4:	3800071e 	bne	r7,zero,14ee4 <_free_r+0x1d4>
   14ec8:	81fffe17 	ldw	r7,-8(r16)
   14ecc:	31cdc83a 	sub	r6,r6,r7
   14ed0:	30c00317 	ldw	r3,12(r6)
   14ed4:	31400217 	ldw	r5,8(r6)
   14ed8:	11c5883a 	add	r2,r2,r7
   14edc:	28c00315 	stw	r3,12(r5)
   14ee0:	19400215 	stw	r5,8(r3)
   14ee4:	10c00054 	ori	r3,r2,1
   14ee8:	30c00115 	stw	r3,4(r6)
   14eec:	00c00074 	movhi	r3,1
   14ef0:	18df3904 	addi	r3,r3,31972
   14ef4:	18c00017 	ldw	r3,0(r3)
   14ef8:	21800215 	stw	r6,8(r4)
   14efc:	10ffc036 	bltu	r2,r3,14e00 <_gp+0xffff514c>
   14f00:	008000b4 	movhi	r2,2
   14f04:	10a61104 	addi	r2,r2,-26556
   14f08:	11400017 	ldw	r5,0(r2)
   14f0c:	8809883a 	mov	r4,r17
   14f10:	0014bec0 	call	14bec <_malloc_trim_r>
   14f14:	003fba06 	br	14e00 <_gp+0xffff514c>
   14f18:	28c9883a 	add	r4,r5,r3
   14f1c:	21000117 	ldw	r4,4(r4)
   14f20:	2100004c 	andi	r4,r4,1
   14f24:	2000391e 	bne	r4,zero,1500c <_free_r+0x2fc>
   14f28:	29c00217 	ldw	r7,8(r5)
   14f2c:	29000317 	ldw	r4,12(r5)
   14f30:	1885883a 	add	r2,r3,r2
   14f34:	10c00054 	ori	r3,r2,1
   14f38:	39000315 	stw	r4,12(r7)
   14f3c:	21c00215 	stw	r7,8(r4)
   14f40:	30c00115 	stw	r3,4(r6)
   14f44:	308d883a 	add	r6,r6,r2
   14f48:	30800015 	stw	r2,0(r6)
   14f4c:	003fac06 	br	14e00 <_gp+0xffff514c>
   14f50:	00c00504 	movi	r3,20
   14f54:	19401536 	bltu	r3,r5,14fac <_free_r+0x29c>
   14f58:	28c01704 	addi	r3,r5,92
   14f5c:	18c7883a 	add	r3,r3,r3
   14f60:	294016c4 	addi	r5,r5,91
   14f64:	003fb406 	br	14e38 <_gp+0xffff5184>
   14f68:	280bd0ba 	srai	r5,r5,2
   14f6c:	00c00044 	movi	r3,1
   14f70:	38800117 	ldw	r2,4(r7)
   14f74:	194a983a 	sll	r5,r3,r5
   14f78:	2007883a 	mov	r3,r4
   14f7c:	2884b03a 	or	r2,r5,r2
   14f80:	38800115 	stw	r2,4(r7)
   14f84:	003fbb06 	br	14e74 <_gp+0xffff51c0>
   14f88:	21800515 	stw	r6,20(r4)
   14f8c:	21800415 	stw	r6,16(r4)
   14f90:	10c00054 	ori	r3,r2,1
   14f94:	31c00315 	stw	r7,12(r6)
   14f98:	31c00215 	stw	r7,8(r6)
   14f9c:	30c00115 	stw	r3,4(r6)
   14fa0:	308d883a 	add	r6,r6,r2
   14fa4:	30800015 	stw	r2,0(r6)
   14fa8:	003f9506 	br	14e00 <_gp+0xffff514c>
   14fac:	00c01504 	movi	r3,84
   14fb0:	19400536 	bltu	r3,r5,14fc8 <_free_r+0x2b8>
   14fb4:	100ad33a 	srli	r5,r2,12
   14fb8:	28c01bc4 	addi	r3,r5,111
   14fbc:	18c7883a 	add	r3,r3,r3
   14fc0:	29401b84 	addi	r5,r5,110
   14fc4:	003f9c06 	br	14e38 <_gp+0xffff5184>
   14fc8:	00c05504 	movi	r3,340
   14fcc:	19400536 	bltu	r3,r5,14fe4 <_free_r+0x2d4>
   14fd0:	100ad3fa 	srli	r5,r2,15
   14fd4:	28c01e04 	addi	r3,r5,120
   14fd8:	18c7883a 	add	r3,r3,r3
   14fdc:	29401dc4 	addi	r5,r5,119
   14fe0:	003f9506 	br	14e38 <_gp+0xffff5184>
   14fe4:	00c15504 	movi	r3,1364
   14fe8:	19400536 	bltu	r3,r5,15000 <_free_r+0x2f0>
   14fec:	100ad4ba 	srli	r5,r2,18
   14ff0:	28c01f44 	addi	r3,r5,125
   14ff4:	18c7883a 	add	r3,r3,r3
   14ff8:	29401f04 	addi	r5,r5,124
   14ffc:	003f8e06 	br	14e38 <_gp+0xffff5184>
   15000:	00c03f84 	movi	r3,254
   15004:	01401f84 	movi	r5,126
   15008:	003f8b06 	br	14e38 <_gp+0xffff5184>
   1500c:	10c00054 	ori	r3,r2,1
   15010:	30c00115 	stw	r3,4(r6)
   15014:	308d883a 	add	r6,r6,r2
   15018:	30800015 	stw	r2,0(r6)
   1501c:	003f7806 	br	14e00 <_gp+0xffff514c>

00015020 <_fwalk>:
   15020:	defff704 	addi	sp,sp,-36
   15024:	dd000415 	stw	r20,16(sp)
   15028:	dfc00815 	stw	ra,32(sp)
   1502c:	ddc00715 	stw	r23,28(sp)
   15030:	dd800615 	stw	r22,24(sp)
   15034:	dd400515 	stw	r21,20(sp)
   15038:	dcc00315 	stw	r19,12(sp)
   1503c:	dc800215 	stw	r18,8(sp)
   15040:	dc400115 	stw	r17,4(sp)
   15044:	dc000015 	stw	r16,0(sp)
   15048:	2500b804 	addi	r20,r4,736
   1504c:	a0002326 	beq	r20,zero,150dc <_fwalk+0xbc>
   15050:	282b883a 	mov	r21,r5
   15054:	002f883a 	mov	r23,zero
   15058:	05800044 	movi	r22,1
   1505c:	04ffffc4 	movi	r19,-1
   15060:	a4400117 	ldw	r17,4(r20)
   15064:	a4800217 	ldw	r18,8(r20)
   15068:	8c7fffc4 	addi	r17,r17,-1
   1506c:	88000d16 	blt	r17,zero,150a4 <_fwalk+0x84>
   15070:	94000304 	addi	r16,r18,12
   15074:	94800384 	addi	r18,r18,14
   15078:	8080000b 	ldhu	r2,0(r16)
   1507c:	8c7fffc4 	addi	r17,r17,-1
   15080:	813ffd04 	addi	r4,r16,-12
   15084:	b080042e 	bgeu	r22,r2,15098 <_fwalk+0x78>
   15088:	9080000f 	ldh	r2,0(r18)
   1508c:	14c00226 	beq	r2,r19,15098 <_fwalk+0x78>
   15090:	a83ee83a 	callr	r21
   15094:	b8aeb03a 	or	r23,r23,r2
   15098:	84001a04 	addi	r16,r16,104
   1509c:	94801a04 	addi	r18,r18,104
   150a0:	8cfff51e 	bne	r17,r19,15078 <_gp+0xffff53c4>
   150a4:	a5000017 	ldw	r20,0(r20)
   150a8:	a03fed1e 	bne	r20,zero,15060 <_gp+0xffff53ac>
   150ac:	b805883a 	mov	r2,r23
   150b0:	dfc00817 	ldw	ra,32(sp)
   150b4:	ddc00717 	ldw	r23,28(sp)
   150b8:	dd800617 	ldw	r22,24(sp)
   150bc:	dd400517 	ldw	r21,20(sp)
   150c0:	dd000417 	ldw	r20,16(sp)
   150c4:	dcc00317 	ldw	r19,12(sp)
   150c8:	dc800217 	ldw	r18,8(sp)
   150cc:	dc400117 	ldw	r17,4(sp)
   150d0:	dc000017 	ldw	r16,0(sp)
   150d4:	dec00904 	addi	sp,sp,36
   150d8:	f800283a 	ret
   150dc:	002f883a 	mov	r23,zero
   150e0:	003ff206 	br	150ac <_gp+0xffff53f8>

000150e4 <_fwalk_reent>:
   150e4:	defff704 	addi	sp,sp,-36
   150e8:	dd000415 	stw	r20,16(sp)
   150ec:	dfc00815 	stw	ra,32(sp)
   150f0:	ddc00715 	stw	r23,28(sp)
   150f4:	dd800615 	stw	r22,24(sp)
   150f8:	dd400515 	stw	r21,20(sp)
   150fc:	dcc00315 	stw	r19,12(sp)
   15100:	dc800215 	stw	r18,8(sp)
   15104:	dc400115 	stw	r17,4(sp)
   15108:	dc000015 	stw	r16,0(sp)
   1510c:	2500b804 	addi	r20,r4,736
   15110:	a0002326 	beq	r20,zero,151a0 <_fwalk_reent+0xbc>
   15114:	282b883a 	mov	r21,r5
   15118:	2027883a 	mov	r19,r4
   1511c:	002f883a 	mov	r23,zero
   15120:	05800044 	movi	r22,1
   15124:	04bfffc4 	movi	r18,-1
   15128:	a4400117 	ldw	r17,4(r20)
   1512c:	a4000217 	ldw	r16,8(r20)
   15130:	8c7fffc4 	addi	r17,r17,-1
   15134:	88000c16 	blt	r17,zero,15168 <_fwalk_reent+0x84>
   15138:	84000304 	addi	r16,r16,12
   1513c:	8080000b 	ldhu	r2,0(r16)
   15140:	8c7fffc4 	addi	r17,r17,-1
   15144:	817ffd04 	addi	r5,r16,-12
   15148:	b080052e 	bgeu	r22,r2,15160 <_fwalk_reent+0x7c>
   1514c:	8080008f 	ldh	r2,2(r16)
   15150:	9809883a 	mov	r4,r19
   15154:	14800226 	beq	r2,r18,15160 <_fwalk_reent+0x7c>
   15158:	a83ee83a 	callr	r21
   1515c:	b8aeb03a 	or	r23,r23,r2
   15160:	84001a04 	addi	r16,r16,104
   15164:	8cbff51e 	bne	r17,r18,1513c <_gp+0xffff5488>
   15168:	a5000017 	ldw	r20,0(r20)
   1516c:	a03fee1e 	bne	r20,zero,15128 <_gp+0xffff5474>
   15170:	b805883a 	mov	r2,r23
   15174:	dfc00817 	ldw	ra,32(sp)
   15178:	ddc00717 	ldw	r23,28(sp)
   1517c:	dd800617 	ldw	r22,24(sp)
   15180:	dd400517 	ldw	r21,20(sp)
   15184:	dd000417 	ldw	r20,16(sp)
   15188:	dcc00317 	ldw	r19,12(sp)
   1518c:	dc800217 	ldw	r18,8(sp)
   15190:	dc400117 	ldw	r17,4(sp)
   15194:	dc000017 	ldw	r16,0(sp)
   15198:	dec00904 	addi	sp,sp,36
   1519c:	f800283a 	ret
   151a0:	002f883a 	mov	r23,zero
   151a4:	003ff206 	br	15170 <_gp+0xffff54bc>

000151a8 <__smakebuf_r>:
   151a8:	2880030b 	ldhu	r2,12(r5)
   151ac:	10c0008c 	andi	r3,r2,2
   151b0:	1800411e 	bne	r3,zero,152b8 <__smakebuf_r+0x110>
   151b4:	deffec04 	addi	sp,sp,-80
   151b8:	dc000f15 	stw	r16,60(sp)
   151bc:	2821883a 	mov	r16,r5
   151c0:	2940038f 	ldh	r5,14(r5)
   151c4:	dc401015 	stw	r17,64(sp)
   151c8:	dfc01315 	stw	ra,76(sp)
   151cc:	dcc01215 	stw	r19,72(sp)
   151d0:	dc801115 	stw	r18,68(sp)
   151d4:	2023883a 	mov	r17,r4
   151d8:	28001c16 	blt	r5,zero,1524c <__smakebuf_r+0xa4>
   151dc:	d80d883a 	mov	r6,sp
   151e0:	00157800 	call	15780 <_fstat_r>
   151e4:	10001816 	blt	r2,zero,15248 <__smakebuf_r+0xa0>
   151e8:	d8800117 	ldw	r2,4(sp)
   151ec:	00e00014 	movui	r3,32768
   151f0:	10bc000c 	andi	r2,r2,61440
   151f4:	14c80020 	cmpeqi	r19,r2,8192
   151f8:	10c03726 	beq	r2,r3,152d8 <__smakebuf_r+0x130>
   151fc:	80c0030b 	ldhu	r3,12(r16)
   15200:	18c20014 	ori	r3,r3,2048
   15204:	80c0030d 	sth	r3,12(r16)
   15208:	00c80004 	movi	r3,8192
   1520c:	10c0521e 	bne	r2,r3,15358 <__smakebuf_r+0x1b0>
   15210:	8140038f 	ldh	r5,14(r16)
   15214:	8809883a 	mov	r4,r17
   15218:	00157dc0 	call	157dc <_isatty_r>
   1521c:	10004c26 	beq	r2,zero,15350 <__smakebuf_r+0x1a8>
   15220:	8080030b 	ldhu	r2,12(r16)
   15224:	80c010c4 	addi	r3,r16,67
   15228:	80c00015 	stw	r3,0(r16)
   1522c:	10800054 	ori	r2,r2,1
   15230:	8080030d 	sth	r2,12(r16)
   15234:	00800044 	movi	r2,1
   15238:	80c00415 	stw	r3,16(r16)
   1523c:	80800515 	stw	r2,20(r16)
   15240:	04810004 	movi	r18,1024
   15244:	00000706 	br	15264 <__smakebuf_r+0xbc>
   15248:	8080030b 	ldhu	r2,12(r16)
   1524c:	10c0200c 	andi	r3,r2,128
   15250:	18001f1e 	bne	r3,zero,152d0 <__smakebuf_r+0x128>
   15254:	04810004 	movi	r18,1024
   15258:	10820014 	ori	r2,r2,2048
   1525c:	8080030d 	sth	r2,12(r16)
   15260:	0027883a 	mov	r19,zero
   15264:	900b883a 	mov	r5,r18
   15268:	8809883a 	mov	r4,r17
   1526c:	0012f480 	call	12f48 <_malloc_r>
   15270:	10002c26 	beq	r2,zero,15324 <__smakebuf_r+0x17c>
   15274:	80c0030b 	ldhu	r3,12(r16)
   15278:	01000074 	movhi	r4,1
   1527c:	21121104 	addi	r4,r4,18500
   15280:	89000f15 	stw	r4,60(r17)
   15284:	18c02014 	ori	r3,r3,128
   15288:	80c0030d 	sth	r3,12(r16)
   1528c:	80800015 	stw	r2,0(r16)
   15290:	80800415 	stw	r2,16(r16)
   15294:	84800515 	stw	r18,20(r16)
   15298:	98001a1e 	bne	r19,zero,15304 <__smakebuf_r+0x15c>
   1529c:	dfc01317 	ldw	ra,76(sp)
   152a0:	dcc01217 	ldw	r19,72(sp)
   152a4:	dc801117 	ldw	r18,68(sp)
   152a8:	dc401017 	ldw	r17,64(sp)
   152ac:	dc000f17 	ldw	r16,60(sp)
   152b0:	dec01404 	addi	sp,sp,80
   152b4:	f800283a 	ret
   152b8:	288010c4 	addi	r2,r5,67
   152bc:	28800015 	stw	r2,0(r5)
   152c0:	28800415 	stw	r2,16(r5)
   152c4:	00800044 	movi	r2,1
   152c8:	28800515 	stw	r2,20(r5)
   152cc:	f800283a 	ret
   152d0:	04801004 	movi	r18,64
   152d4:	003fe006 	br	15258 <_gp+0xffff55a4>
   152d8:	81000a17 	ldw	r4,40(r16)
   152dc:	00c00074 	movhi	r3,1
   152e0:	18d55904 	addi	r3,r3,21860
   152e4:	20ffc51e 	bne	r4,r3,151fc <_gp+0xffff5548>
   152e8:	8080030b 	ldhu	r2,12(r16)
   152ec:	04810004 	movi	r18,1024
   152f0:	84801315 	stw	r18,76(r16)
   152f4:	1484b03a 	or	r2,r2,r18
   152f8:	8080030d 	sth	r2,12(r16)
   152fc:	0027883a 	mov	r19,zero
   15300:	003fd806 	br	15264 <_gp+0xffff55b0>
   15304:	8140038f 	ldh	r5,14(r16)
   15308:	8809883a 	mov	r4,r17
   1530c:	00157dc0 	call	157dc <_isatty_r>
   15310:	103fe226 	beq	r2,zero,1529c <_gp+0xffff55e8>
   15314:	8080030b 	ldhu	r2,12(r16)
   15318:	10800054 	ori	r2,r2,1
   1531c:	8080030d 	sth	r2,12(r16)
   15320:	003fde06 	br	1529c <_gp+0xffff55e8>
   15324:	8080030b 	ldhu	r2,12(r16)
   15328:	10c0800c 	andi	r3,r2,512
   1532c:	183fdb1e 	bne	r3,zero,1529c <_gp+0xffff55e8>
   15330:	10800094 	ori	r2,r2,2
   15334:	80c010c4 	addi	r3,r16,67
   15338:	8080030d 	sth	r2,12(r16)
   1533c:	00800044 	movi	r2,1
   15340:	80c00015 	stw	r3,0(r16)
   15344:	80c00415 	stw	r3,16(r16)
   15348:	80800515 	stw	r2,20(r16)
   1534c:	003fd306 	br	1529c <_gp+0xffff55e8>
   15350:	04810004 	movi	r18,1024
   15354:	003fc306 	br	15264 <_gp+0xffff55b0>
   15358:	0027883a 	mov	r19,zero
   1535c:	04810004 	movi	r18,1024
   15360:	003fc006 	br	15264 <_gp+0xffff55b0>

00015364 <memset>:
   15364:	20c000cc 	andi	r3,r4,3
   15368:	2005883a 	mov	r2,r4
   1536c:	18004426 	beq	r3,zero,15480 <memset+0x11c>
   15370:	31ffffc4 	addi	r7,r6,-1
   15374:	30004026 	beq	r6,zero,15478 <memset+0x114>
   15378:	2813883a 	mov	r9,r5
   1537c:	200d883a 	mov	r6,r4
   15380:	2007883a 	mov	r3,r4
   15384:	00000406 	br	15398 <memset+0x34>
   15388:	3a3fffc4 	addi	r8,r7,-1
   1538c:	31800044 	addi	r6,r6,1
   15390:	38003926 	beq	r7,zero,15478 <memset+0x114>
   15394:	400f883a 	mov	r7,r8
   15398:	18c00044 	addi	r3,r3,1
   1539c:	32400005 	stb	r9,0(r6)
   153a0:	1a0000cc 	andi	r8,r3,3
   153a4:	403ff81e 	bne	r8,zero,15388 <_gp+0xffff56d4>
   153a8:	010000c4 	movi	r4,3
   153ac:	21c02d2e 	bgeu	r4,r7,15464 <memset+0x100>
   153b0:	29003fcc 	andi	r4,r5,255
   153b4:	200c923a 	slli	r6,r4,8
   153b8:	3108b03a 	or	r4,r6,r4
   153bc:	200c943a 	slli	r6,r4,16
   153c0:	218cb03a 	or	r6,r4,r6
   153c4:	010003c4 	movi	r4,15
   153c8:	21c0182e 	bgeu	r4,r7,1542c <memset+0xc8>
   153cc:	3b3ffc04 	addi	r12,r7,-16
   153d0:	6018d13a 	srli	r12,r12,4
   153d4:	1a000104 	addi	r8,r3,4
   153d8:	1ac00204 	addi	r11,r3,8
   153dc:	6008913a 	slli	r4,r12,4
   153e0:	1a800304 	addi	r10,r3,12
   153e4:	1813883a 	mov	r9,r3
   153e8:	21000504 	addi	r4,r4,20
   153ec:	1909883a 	add	r4,r3,r4
   153f0:	49800015 	stw	r6,0(r9)
   153f4:	41800015 	stw	r6,0(r8)
   153f8:	59800015 	stw	r6,0(r11)
   153fc:	51800015 	stw	r6,0(r10)
   15400:	42000404 	addi	r8,r8,16
   15404:	4a400404 	addi	r9,r9,16
   15408:	5ac00404 	addi	r11,r11,16
   1540c:	52800404 	addi	r10,r10,16
   15410:	413ff71e 	bne	r8,r4,153f0 <_gp+0xffff573c>
   15414:	63000044 	addi	r12,r12,1
   15418:	6018913a 	slli	r12,r12,4
   1541c:	39c003cc 	andi	r7,r7,15
   15420:	010000c4 	movi	r4,3
   15424:	1b07883a 	add	r3,r3,r12
   15428:	21c00e2e 	bgeu	r4,r7,15464 <memset+0x100>
   1542c:	1813883a 	mov	r9,r3
   15430:	3811883a 	mov	r8,r7
   15434:	010000c4 	movi	r4,3
   15438:	49800015 	stw	r6,0(r9)
   1543c:	423fff04 	addi	r8,r8,-4
   15440:	4a400104 	addi	r9,r9,4
   15444:	223ffc36 	bltu	r4,r8,15438 <_gp+0xffff5784>
   15448:	393fff04 	addi	r4,r7,-4
   1544c:	2008d0ba 	srli	r4,r4,2
   15450:	39c000cc 	andi	r7,r7,3
   15454:	21000044 	addi	r4,r4,1
   15458:	2109883a 	add	r4,r4,r4
   1545c:	2109883a 	add	r4,r4,r4
   15460:	1907883a 	add	r3,r3,r4
   15464:	38000526 	beq	r7,zero,1547c <memset+0x118>
   15468:	19cf883a 	add	r7,r3,r7
   1546c:	19400005 	stb	r5,0(r3)
   15470:	18c00044 	addi	r3,r3,1
   15474:	38fffd1e 	bne	r7,r3,1546c <_gp+0xffff57b8>
   15478:	f800283a 	ret
   1547c:	f800283a 	ret
   15480:	2007883a 	mov	r3,r4
   15484:	300f883a 	mov	r7,r6
   15488:	003fc706 	br	153a8 <_gp+0xffff56f4>

0001548c <__sread>:
   1548c:	defffe04 	addi	sp,sp,-8
   15490:	dc000015 	stw	r16,0(sp)
   15494:	2821883a 	mov	r16,r5
   15498:	2940038f 	ldh	r5,14(r5)
   1549c:	dfc00115 	stw	ra,4(sp)
   154a0:	00158900 	call	15890 <_read_r>
   154a4:	10000716 	blt	r2,zero,154c4 <__sread+0x38>
   154a8:	80c01417 	ldw	r3,80(r16)
   154ac:	1887883a 	add	r3,r3,r2
   154b0:	80c01415 	stw	r3,80(r16)
   154b4:	dfc00117 	ldw	ra,4(sp)
   154b8:	dc000017 	ldw	r16,0(sp)
   154bc:	dec00204 	addi	sp,sp,8
   154c0:	f800283a 	ret
   154c4:	80c0030b 	ldhu	r3,12(r16)
   154c8:	18fbffcc 	andi	r3,r3,61439
   154cc:	80c0030d 	sth	r3,12(r16)
   154d0:	dfc00117 	ldw	ra,4(sp)
   154d4:	dc000017 	ldw	r16,0(sp)
   154d8:	dec00204 	addi	sp,sp,8
   154dc:	f800283a 	ret

000154e0 <__seofread>:
   154e0:	0005883a 	mov	r2,zero
   154e4:	f800283a 	ret

000154e8 <__swrite>:
   154e8:	2880030b 	ldhu	r2,12(r5)
   154ec:	defffb04 	addi	sp,sp,-20
   154f0:	dcc00315 	stw	r19,12(sp)
   154f4:	dc800215 	stw	r18,8(sp)
   154f8:	dc400115 	stw	r17,4(sp)
   154fc:	dc000015 	stw	r16,0(sp)
   15500:	dfc00415 	stw	ra,16(sp)
   15504:	10c0400c 	andi	r3,r2,256
   15508:	2821883a 	mov	r16,r5
   1550c:	2023883a 	mov	r17,r4
   15510:	3025883a 	mov	r18,r6
   15514:	3827883a 	mov	r19,r7
   15518:	18000526 	beq	r3,zero,15530 <__swrite+0x48>
   1551c:	2940038f 	ldh	r5,14(r5)
   15520:	01c00084 	movi	r7,2
   15524:	000d883a 	mov	r6,zero
   15528:	00158300 	call	15830 <_lseek_r>
   1552c:	8080030b 	ldhu	r2,12(r16)
   15530:	8140038f 	ldh	r5,14(r16)
   15534:	10bbffcc 	andi	r2,r2,61439
   15538:	980f883a 	mov	r7,r19
   1553c:	900d883a 	mov	r6,r18
   15540:	8809883a 	mov	r4,r17
   15544:	8080030d 	sth	r2,12(r16)
   15548:	dfc00417 	ldw	ra,16(sp)
   1554c:	dcc00317 	ldw	r19,12(sp)
   15550:	dc800217 	ldw	r18,8(sp)
   15554:	dc400117 	ldw	r17,4(sp)
   15558:	dc000017 	ldw	r16,0(sp)
   1555c:	dec00504 	addi	sp,sp,20
   15560:	00155c81 	jmpi	155c8 <_write_r>

00015564 <__sseek>:
   15564:	defffe04 	addi	sp,sp,-8
   15568:	dc000015 	stw	r16,0(sp)
   1556c:	2821883a 	mov	r16,r5
   15570:	2940038f 	ldh	r5,14(r5)
   15574:	dfc00115 	stw	ra,4(sp)
   15578:	00158300 	call	15830 <_lseek_r>
   1557c:	00ffffc4 	movi	r3,-1
   15580:	10c00826 	beq	r2,r3,155a4 <__sseek+0x40>
   15584:	80c0030b 	ldhu	r3,12(r16)
   15588:	80801415 	stw	r2,80(r16)
   1558c:	18c40014 	ori	r3,r3,4096
   15590:	80c0030d 	sth	r3,12(r16)
   15594:	dfc00117 	ldw	ra,4(sp)
   15598:	dc000017 	ldw	r16,0(sp)
   1559c:	dec00204 	addi	sp,sp,8
   155a0:	f800283a 	ret
   155a4:	80c0030b 	ldhu	r3,12(r16)
   155a8:	18fbffcc 	andi	r3,r3,61439
   155ac:	80c0030d 	sth	r3,12(r16)
   155b0:	dfc00117 	ldw	ra,4(sp)
   155b4:	dc000017 	ldw	r16,0(sp)
   155b8:	dec00204 	addi	sp,sp,8
   155bc:	f800283a 	ret

000155c0 <__sclose>:
   155c0:	2940038f 	ldh	r5,14(r5)
   155c4:	00156281 	jmpi	15628 <_close_r>

000155c8 <_write_r>:
   155c8:	defffd04 	addi	sp,sp,-12
   155cc:	2805883a 	mov	r2,r5
   155d0:	dc000015 	stw	r16,0(sp)
   155d4:	040000b4 	movhi	r16,2
   155d8:	dc400115 	stw	r17,4(sp)
   155dc:	300b883a 	mov	r5,r6
   155e0:	84260e04 	addi	r16,r16,-26568
   155e4:	2023883a 	mov	r17,r4
   155e8:	380d883a 	mov	r6,r7
   155ec:	1009883a 	mov	r4,r2
   155f0:	dfc00215 	stw	ra,8(sp)
   155f4:	80000015 	stw	zero,0(r16)
   155f8:	00160680 	call	16068 <write>
   155fc:	00ffffc4 	movi	r3,-1
   15600:	10c00526 	beq	r2,r3,15618 <_write_r+0x50>
   15604:	dfc00217 	ldw	ra,8(sp)
   15608:	dc400117 	ldw	r17,4(sp)
   1560c:	dc000017 	ldw	r16,0(sp)
   15610:	dec00304 	addi	sp,sp,12
   15614:	f800283a 	ret
   15618:	80c00017 	ldw	r3,0(r16)
   1561c:	183ff926 	beq	r3,zero,15604 <_gp+0xffff5950>
   15620:	88c00015 	stw	r3,0(r17)
   15624:	003ff706 	br	15604 <_gp+0xffff5950>

00015628 <_close_r>:
   15628:	defffd04 	addi	sp,sp,-12
   1562c:	dc000015 	stw	r16,0(sp)
   15630:	040000b4 	movhi	r16,2
   15634:	dc400115 	stw	r17,4(sp)
   15638:	84260e04 	addi	r16,r16,-26568
   1563c:	2023883a 	mov	r17,r4
   15640:	2809883a 	mov	r4,r5
   15644:	dfc00215 	stw	ra,8(sp)
   15648:	80000015 	stw	zero,0(r16)
   1564c:	0011ad40 	call	11ad4 <close>
   15650:	00ffffc4 	movi	r3,-1
   15654:	10c00526 	beq	r2,r3,1566c <_close_r+0x44>
   15658:	dfc00217 	ldw	ra,8(sp)
   1565c:	dc400117 	ldw	r17,4(sp)
   15660:	dc000017 	ldw	r16,0(sp)
   15664:	dec00304 	addi	sp,sp,12
   15668:	f800283a 	ret
   1566c:	80c00017 	ldw	r3,0(r16)
   15670:	183ff926 	beq	r3,zero,15658 <_gp+0xffff59a4>
   15674:	88c00015 	stw	r3,0(r17)
   15678:	003ff706 	br	15658 <_gp+0xffff59a4>

0001567c <_fclose_r>:
   1567c:	28003926 	beq	r5,zero,15764 <_fclose_r+0xe8>
   15680:	defffc04 	addi	sp,sp,-16
   15684:	dc400115 	stw	r17,4(sp)
   15688:	dc000015 	stw	r16,0(sp)
   1568c:	dfc00315 	stw	ra,12(sp)
   15690:	dc800215 	stw	r18,8(sp)
   15694:	2023883a 	mov	r17,r4
   15698:	2821883a 	mov	r16,r5
   1569c:	20000226 	beq	r4,zero,156a8 <_fclose_r+0x2c>
   156a0:	20800e17 	ldw	r2,56(r4)
   156a4:	10002726 	beq	r2,zero,15744 <_fclose_r+0xc8>
   156a8:	8080030f 	ldh	r2,12(r16)
   156ac:	1000071e 	bne	r2,zero,156cc <_fclose_r+0x50>
   156b0:	0005883a 	mov	r2,zero
   156b4:	dfc00317 	ldw	ra,12(sp)
   156b8:	dc800217 	ldw	r18,8(sp)
   156bc:	dc400117 	ldw	r17,4(sp)
   156c0:	dc000017 	ldw	r16,0(sp)
   156c4:	dec00404 	addi	sp,sp,16
   156c8:	f800283a 	ret
   156cc:	800b883a 	mov	r5,r16
   156d0:	8809883a 	mov	r4,r17
   156d4:	00145940 	call	14594 <__sflush_r>
   156d8:	1025883a 	mov	r18,r2
   156dc:	80800b17 	ldw	r2,44(r16)
   156e0:	10000426 	beq	r2,zero,156f4 <_fclose_r+0x78>
   156e4:	81400717 	ldw	r5,28(r16)
   156e8:	8809883a 	mov	r4,r17
   156ec:	103ee83a 	callr	r2
   156f0:	10001616 	blt	r2,zero,1574c <_fclose_r+0xd0>
   156f4:	8080030b 	ldhu	r2,12(r16)
   156f8:	1080200c 	andi	r2,r2,128
   156fc:	1000151e 	bne	r2,zero,15754 <_fclose_r+0xd8>
   15700:	81400c17 	ldw	r5,48(r16)
   15704:	28000526 	beq	r5,zero,1571c <_fclose_r+0xa0>
   15708:	80801004 	addi	r2,r16,64
   1570c:	28800226 	beq	r5,r2,15718 <_fclose_r+0x9c>
   15710:	8809883a 	mov	r4,r17
   15714:	0014d100 	call	14d10 <_free_r>
   15718:	80000c15 	stw	zero,48(r16)
   1571c:	81401117 	ldw	r5,68(r16)
   15720:	28000326 	beq	r5,zero,15730 <_fclose_r+0xb4>
   15724:	8809883a 	mov	r4,r17
   15728:	0014d100 	call	14d10 <_free_r>
   1572c:	80001115 	stw	zero,68(r16)
   15730:	0014bac0 	call	14bac <__sfp_lock_acquire>
   15734:	8000030d 	sth	zero,12(r16)
   15738:	0014bb00 	call	14bb0 <__sfp_lock_release>
   1573c:	9005883a 	mov	r2,r18
   15740:	003fdc06 	br	156b4 <_gp+0xffff5a00>
   15744:	0014b9c0 	call	14b9c <__sinit>
   15748:	003fd706 	br	156a8 <_gp+0xffff59f4>
   1574c:	04bfffc4 	movi	r18,-1
   15750:	003fe806 	br	156f4 <_gp+0xffff5a40>
   15754:	81400417 	ldw	r5,16(r16)
   15758:	8809883a 	mov	r4,r17
   1575c:	0014d100 	call	14d10 <_free_r>
   15760:	003fe706 	br	15700 <_gp+0xffff5a4c>
   15764:	0005883a 	mov	r2,zero
   15768:	f800283a 	ret

0001576c <fclose>:
   1576c:	00800074 	movhi	r2,1
   15770:	109f3704 	addi	r2,r2,31964
   15774:	200b883a 	mov	r5,r4
   15778:	11000017 	ldw	r4,0(r2)
   1577c:	001567c1 	jmpi	1567c <_fclose_r>

00015780 <_fstat_r>:
   15780:	defffd04 	addi	sp,sp,-12
   15784:	2805883a 	mov	r2,r5
   15788:	dc000015 	stw	r16,0(sp)
   1578c:	040000b4 	movhi	r16,2
   15790:	dc400115 	stw	r17,4(sp)
   15794:	84260e04 	addi	r16,r16,-26568
   15798:	2023883a 	mov	r17,r4
   1579c:	300b883a 	mov	r5,r6
   157a0:	1009883a 	mov	r4,r2
   157a4:	dfc00215 	stw	ra,8(sp)
   157a8:	80000015 	stw	zero,0(r16)
   157ac:	0015b3c0 	call	15b3c <fstat>
   157b0:	00ffffc4 	movi	r3,-1
   157b4:	10c00526 	beq	r2,r3,157cc <_fstat_r+0x4c>
   157b8:	dfc00217 	ldw	ra,8(sp)
   157bc:	dc400117 	ldw	r17,4(sp)
   157c0:	dc000017 	ldw	r16,0(sp)
   157c4:	dec00304 	addi	sp,sp,12
   157c8:	f800283a 	ret
   157cc:	80c00017 	ldw	r3,0(r16)
   157d0:	183ff926 	beq	r3,zero,157b8 <_gp+0xffff5b04>
   157d4:	88c00015 	stw	r3,0(r17)
   157d8:	003ff706 	br	157b8 <_gp+0xffff5b04>

000157dc <_isatty_r>:
   157dc:	defffd04 	addi	sp,sp,-12
   157e0:	dc000015 	stw	r16,0(sp)
   157e4:	040000b4 	movhi	r16,2
   157e8:	dc400115 	stw	r17,4(sp)
   157ec:	84260e04 	addi	r16,r16,-26568
   157f0:	2023883a 	mov	r17,r4
   157f4:	2809883a 	mov	r4,r5
   157f8:	dfc00215 	stw	ra,8(sp)
   157fc:	80000015 	stw	zero,0(r16)
   15800:	0015c300 	call	15c30 <isatty>
   15804:	00ffffc4 	movi	r3,-1
   15808:	10c00526 	beq	r2,r3,15820 <_isatty_r+0x44>
   1580c:	dfc00217 	ldw	ra,8(sp)
   15810:	dc400117 	ldw	r17,4(sp)
   15814:	dc000017 	ldw	r16,0(sp)
   15818:	dec00304 	addi	sp,sp,12
   1581c:	f800283a 	ret
   15820:	80c00017 	ldw	r3,0(r16)
   15824:	183ff926 	beq	r3,zero,1580c <_gp+0xffff5b58>
   15828:	88c00015 	stw	r3,0(r17)
   1582c:	003ff706 	br	1580c <_gp+0xffff5b58>

00015830 <_lseek_r>:
   15830:	defffd04 	addi	sp,sp,-12
   15834:	2805883a 	mov	r2,r5
   15838:	dc000015 	stw	r16,0(sp)
   1583c:	040000b4 	movhi	r16,2
   15840:	dc400115 	stw	r17,4(sp)
   15844:	300b883a 	mov	r5,r6
   15848:	84260e04 	addi	r16,r16,-26568
   1584c:	2023883a 	mov	r17,r4
   15850:	380d883a 	mov	r6,r7
   15854:	1009883a 	mov	r4,r2
   15858:	dfc00215 	stw	ra,8(sp)
   1585c:	80000015 	stw	zero,0(r16)
   15860:	0015d180 	call	15d18 <lseek>
   15864:	00ffffc4 	movi	r3,-1
   15868:	10c00526 	beq	r2,r3,15880 <_lseek_r+0x50>
   1586c:	dfc00217 	ldw	ra,8(sp)
   15870:	dc400117 	ldw	r17,4(sp)
   15874:	dc000017 	ldw	r16,0(sp)
   15878:	dec00304 	addi	sp,sp,12
   1587c:	f800283a 	ret
   15880:	80c00017 	ldw	r3,0(r16)
   15884:	183ff926 	beq	r3,zero,1586c <_gp+0xffff5bb8>
   15888:	88c00015 	stw	r3,0(r17)
   1588c:	003ff706 	br	1586c <_gp+0xffff5bb8>

00015890 <_read_r>:
   15890:	defffd04 	addi	sp,sp,-12
   15894:	2805883a 	mov	r2,r5
   15898:	dc000015 	stw	r16,0(sp)
   1589c:	040000b4 	movhi	r16,2
   158a0:	dc400115 	stw	r17,4(sp)
   158a4:	300b883a 	mov	r5,r6
   158a8:	84260e04 	addi	r16,r16,-26568
   158ac:	2023883a 	mov	r17,r4
   158b0:	380d883a 	mov	r6,r7
   158b4:	1009883a 	mov	r4,r2
   158b8:	dfc00215 	stw	ra,8(sp)
   158bc:	80000015 	stw	zero,0(r16)
   158c0:	0015e780 	call	15e78 <read>
   158c4:	00ffffc4 	movi	r3,-1
   158c8:	10c00526 	beq	r2,r3,158e0 <_read_r+0x50>
   158cc:	dfc00217 	ldw	ra,8(sp)
   158d0:	dc400117 	ldw	r17,4(sp)
   158d4:	dc000017 	ldw	r16,0(sp)
   158d8:	dec00304 	addi	sp,sp,12
   158dc:	f800283a 	ret
   158e0:	80c00017 	ldw	r3,0(r16)
   158e4:	183ff926 	beq	r3,zero,158cc <_gp+0xffff5c18>
   158e8:	88c00015 	stw	r3,0(r17)
   158ec:	003ff706 	br	158cc <_gp+0xffff5c18>

000158f0 <__divsi3>:
   158f0:	20001b16 	blt	r4,zero,15960 <__divsi3+0x70>
   158f4:	000f883a 	mov	r7,zero
   158f8:	28001616 	blt	r5,zero,15954 <__divsi3+0x64>
   158fc:	200d883a 	mov	r6,r4
   15900:	29001a2e 	bgeu	r5,r4,1596c <__divsi3+0x7c>
   15904:	00800804 	movi	r2,32
   15908:	00c00044 	movi	r3,1
   1590c:	00000106 	br	15914 <__divsi3+0x24>
   15910:	10000d26 	beq	r2,zero,15948 <__divsi3+0x58>
   15914:	294b883a 	add	r5,r5,r5
   15918:	10bfffc4 	addi	r2,r2,-1
   1591c:	18c7883a 	add	r3,r3,r3
   15920:	293ffb36 	bltu	r5,r4,15910 <_gp+0xffff5c5c>
   15924:	0005883a 	mov	r2,zero
   15928:	18000726 	beq	r3,zero,15948 <__divsi3+0x58>
   1592c:	0005883a 	mov	r2,zero
   15930:	31400236 	bltu	r6,r5,1593c <__divsi3+0x4c>
   15934:	314dc83a 	sub	r6,r6,r5
   15938:	10c4b03a 	or	r2,r2,r3
   1593c:	1806d07a 	srli	r3,r3,1
   15940:	280ad07a 	srli	r5,r5,1
   15944:	183ffa1e 	bne	r3,zero,15930 <_gp+0xffff5c7c>
   15948:	38000126 	beq	r7,zero,15950 <__divsi3+0x60>
   1594c:	0085c83a 	sub	r2,zero,r2
   15950:	f800283a 	ret
   15954:	014bc83a 	sub	r5,zero,r5
   15958:	39c0005c 	xori	r7,r7,1
   1595c:	003fe706 	br	158fc <_gp+0xffff5c48>
   15960:	0109c83a 	sub	r4,zero,r4
   15964:	01c00044 	movi	r7,1
   15968:	003fe306 	br	158f8 <_gp+0xffff5c44>
   1596c:	00c00044 	movi	r3,1
   15970:	003fee06 	br	1592c <_gp+0xffff5c78>

00015974 <__modsi3>:
   15974:	20001716 	blt	r4,zero,159d4 <__modsi3+0x60>
   15978:	000f883a 	mov	r7,zero
   1597c:	2005883a 	mov	r2,r4
   15980:	28001216 	blt	r5,zero,159cc <__modsi3+0x58>
   15984:	2900162e 	bgeu	r5,r4,159e0 <__modsi3+0x6c>
   15988:	01800804 	movi	r6,32
   1598c:	00c00044 	movi	r3,1
   15990:	00000106 	br	15998 <__modsi3+0x24>
   15994:	30000a26 	beq	r6,zero,159c0 <__modsi3+0x4c>
   15998:	294b883a 	add	r5,r5,r5
   1599c:	31bfffc4 	addi	r6,r6,-1
   159a0:	18c7883a 	add	r3,r3,r3
   159a4:	293ffb36 	bltu	r5,r4,15994 <_gp+0xffff5ce0>
   159a8:	18000526 	beq	r3,zero,159c0 <__modsi3+0x4c>
   159ac:	1806d07a 	srli	r3,r3,1
   159b0:	11400136 	bltu	r2,r5,159b8 <__modsi3+0x44>
   159b4:	1145c83a 	sub	r2,r2,r5
   159b8:	280ad07a 	srli	r5,r5,1
   159bc:	183ffb1e 	bne	r3,zero,159ac <_gp+0xffff5cf8>
   159c0:	38000126 	beq	r7,zero,159c8 <__modsi3+0x54>
   159c4:	0085c83a 	sub	r2,zero,r2
   159c8:	f800283a 	ret
   159cc:	014bc83a 	sub	r5,zero,r5
   159d0:	003fec06 	br	15984 <_gp+0xffff5cd0>
   159d4:	0109c83a 	sub	r4,zero,r4
   159d8:	01c00044 	movi	r7,1
   159dc:	003fe706 	br	1597c <_gp+0xffff5cc8>
   159e0:	00c00044 	movi	r3,1
   159e4:	003ff106 	br	159ac <_gp+0xffff5cf8>

000159e8 <__udivsi3>:
   159e8:	200d883a 	mov	r6,r4
   159ec:	2900152e 	bgeu	r5,r4,15a44 <__udivsi3+0x5c>
   159f0:	28001416 	blt	r5,zero,15a44 <__udivsi3+0x5c>
   159f4:	00800804 	movi	r2,32
   159f8:	00c00044 	movi	r3,1
   159fc:	00000206 	br	15a08 <__udivsi3+0x20>
   15a00:	10000e26 	beq	r2,zero,15a3c <__udivsi3+0x54>
   15a04:	28000516 	blt	r5,zero,15a1c <__udivsi3+0x34>
   15a08:	294b883a 	add	r5,r5,r5
   15a0c:	10bfffc4 	addi	r2,r2,-1
   15a10:	18c7883a 	add	r3,r3,r3
   15a14:	293ffa36 	bltu	r5,r4,15a00 <_gp+0xffff5d4c>
   15a18:	18000826 	beq	r3,zero,15a3c <__udivsi3+0x54>
   15a1c:	0005883a 	mov	r2,zero
   15a20:	31400236 	bltu	r6,r5,15a2c <__udivsi3+0x44>
   15a24:	314dc83a 	sub	r6,r6,r5
   15a28:	10c4b03a 	or	r2,r2,r3
   15a2c:	1806d07a 	srli	r3,r3,1
   15a30:	280ad07a 	srli	r5,r5,1
   15a34:	183ffa1e 	bne	r3,zero,15a20 <_gp+0xffff5d6c>
   15a38:	f800283a 	ret
   15a3c:	0005883a 	mov	r2,zero
   15a40:	f800283a 	ret
   15a44:	00c00044 	movi	r3,1
   15a48:	003ff406 	br	15a1c <_gp+0xffff5d68>

00015a4c <__umodsi3>:
   15a4c:	2005883a 	mov	r2,r4
   15a50:	2900122e 	bgeu	r5,r4,15a9c <__umodsi3+0x50>
   15a54:	28001116 	blt	r5,zero,15a9c <__umodsi3+0x50>
   15a58:	01800804 	movi	r6,32
   15a5c:	00c00044 	movi	r3,1
   15a60:	00000206 	br	15a6c <__umodsi3+0x20>
   15a64:	30000c26 	beq	r6,zero,15a98 <__umodsi3+0x4c>
   15a68:	28000516 	blt	r5,zero,15a80 <__umodsi3+0x34>
   15a6c:	294b883a 	add	r5,r5,r5
   15a70:	31bfffc4 	addi	r6,r6,-1
   15a74:	18c7883a 	add	r3,r3,r3
   15a78:	293ffa36 	bltu	r5,r4,15a64 <_gp+0xffff5db0>
   15a7c:	18000626 	beq	r3,zero,15a98 <__umodsi3+0x4c>
   15a80:	1806d07a 	srli	r3,r3,1
   15a84:	11400136 	bltu	r2,r5,15a8c <__umodsi3+0x40>
   15a88:	1145c83a 	sub	r2,r2,r5
   15a8c:	280ad07a 	srli	r5,r5,1
   15a90:	183ffb1e 	bne	r3,zero,15a80 <_gp+0xffff5dcc>
   15a94:	f800283a 	ret
   15a98:	f800283a 	ret
   15a9c:	00c00044 	movi	r3,1
   15aa0:	003ff706 	br	15a80 <_gp+0xffff5dcc>

00015aa4 <__mulsi3>:
   15aa4:	0005883a 	mov	r2,zero
   15aa8:	20000726 	beq	r4,zero,15ac8 <__mulsi3+0x24>
   15aac:	20c0004c 	andi	r3,r4,1
   15ab0:	2008d07a 	srli	r4,r4,1
   15ab4:	18000126 	beq	r3,zero,15abc <__mulsi3+0x18>
   15ab8:	1145883a 	add	r2,r2,r5
   15abc:	294b883a 	add	r5,r5,r5
   15ac0:	203ffa1e 	bne	r4,zero,15aac <_gp+0xffff5df8>
   15ac4:	f800283a 	ret
   15ac8:	f800283a 	ret

00015acc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   15acc:	defffd04 	addi	sp,sp,-12
   15ad0:	df000215 	stw	fp,8(sp)
   15ad4:	df000204 	addi	fp,sp,8
   15ad8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   15adc:	0001883a 	nop
   15ae0:	e0bfff17 	ldw	r2,-4(fp)
   15ae4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   15ae8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   15aec:	10000226 	beq	r2,zero,15af8 <_exit+0x2c>
    ALT_SIM_FAIL();
   15af0:	002af070 	cmpltui	zero,zero,43969
   15af4:	00000106 	br	15afc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   15af8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   15afc:	003fff06 	br	15afc <_gp+0xffff5e48>

00015b00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15b00:	defffe04 	addi	sp,sp,-8
   15b04:	dfc00115 	stw	ra,4(sp)
   15b08:	df000015 	stw	fp,0(sp)
   15b0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15b10:	d0a00517 	ldw	r2,-32748(gp)
   15b14:	10000326 	beq	r2,zero,15b24 <alt_get_errno+0x24>
   15b18:	d0a00517 	ldw	r2,-32748(gp)
   15b1c:	103ee83a 	callr	r2
   15b20:	00000106 	br	15b28 <alt_get_errno+0x28>
   15b24:	d0a6e104 	addi	r2,gp,-25724
}
   15b28:	e037883a 	mov	sp,fp
   15b2c:	dfc00117 	ldw	ra,4(sp)
   15b30:	df000017 	ldw	fp,0(sp)
   15b34:	dec00204 	addi	sp,sp,8
   15b38:	f800283a 	ret

00015b3c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   15b3c:	defffb04 	addi	sp,sp,-20
   15b40:	dfc00415 	stw	ra,16(sp)
   15b44:	df000315 	stw	fp,12(sp)
   15b48:	df000304 	addi	fp,sp,12
   15b4c:	e13ffe15 	stw	r4,-8(fp)
   15b50:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   15b54:	e0bffe17 	ldw	r2,-8(fp)
   15b58:	10000816 	blt	r2,zero,15b7c <fstat+0x40>
   15b5c:	01400304 	movi	r5,12
   15b60:	e13ffe17 	ldw	r4,-8(fp)
   15b64:	0015aa40 	call	15aa4 <__mulsi3>
   15b68:	1007883a 	mov	r3,r2
   15b6c:	00800074 	movhi	r2,1
   15b70:	109cc204 	addi	r2,r2,29448
   15b74:	1885883a 	add	r2,r3,r2
   15b78:	00000106 	br	15b80 <fstat+0x44>
   15b7c:	0005883a 	mov	r2,zero
   15b80:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   15b84:	e0bffd17 	ldw	r2,-12(fp)
   15b88:	10001026 	beq	r2,zero,15bcc <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   15b8c:	e0bffd17 	ldw	r2,-12(fp)
   15b90:	10800017 	ldw	r2,0(r2)
   15b94:	10800817 	ldw	r2,32(r2)
   15b98:	10000726 	beq	r2,zero,15bb8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   15b9c:	e0bffd17 	ldw	r2,-12(fp)
   15ba0:	10800017 	ldw	r2,0(r2)
   15ba4:	10800817 	ldw	r2,32(r2)
   15ba8:	e17fff17 	ldw	r5,-4(fp)
   15bac:	e13ffd17 	ldw	r4,-12(fp)
   15bb0:	103ee83a 	callr	r2
   15bb4:	00000a06 	br	15be0 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   15bb8:	e0bfff17 	ldw	r2,-4(fp)
   15bbc:	00c80004 	movi	r3,8192
   15bc0:	10c00115 	stw	r3,4(r2)
      return 0;
   15bc4:	0005883a 	mov	r2,zero
   15bc8:	00000506 	br	15be0 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   15bcc:	0015b000 	call	15b00 <alt_get_errno>
   15bd0:	1007883a 	mov	r3,r2
   15bd4:	00801444 	movi	r2,81
   15bd8:	18800015 	stw	r2,0(r3)
    return -1;
   15bdc:	00bfffc4 	movi	r2,-1
  }
}
   15be0:	e037883a 	mov	sp,fp
   15be4:	dfc00117 	ldw	ra,4(sp)
   15be8:	df000017 	ldw	fp,0(sp)
   15bec:	dec00204 	addi	sp,sp,8
   15bf0:	f800283a 	ret

00015bf4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15bf4:	defffe04 	addi	sp,sp,-8
   15bf8:	dfc00115 	stw	ra,4(sp)
   15bfc:	df000015 	stw	fp,0(sp)
   15c00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15c04:	d0a00517 	ldw	r2,-32748(gp)
   15c08:	10000326 	beq	r2,zero,15c18 <alt_get_errno+0x24>
   15c0c:	d0a00517 	ldw	r2,-32748(gp)
   15c10:	103ee83a 	callr	r2
   15c14:	00000106 	br	15c1c <alt_get_errno+0x28>
   15c18:	d0a6e104 	addi	r2,gp,-25724
}
   15c1c:	e037883a 	mov	sp,fp
   15c20:	dfc00117 	ldw	ra,4(sp)
   15c24:	df000017 	ldw	fp,0(sp)
   15c28:	dec00204 	addi	sp,sp,8
   15c2c:	f800283a 	ret

00015c30 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   15c30:	deffed04 	addi	sp,sp,-76
   15c34:	dfc01215 	stw	ra,72(sp)
   15c38:	df001115 	stw	fp,68(sp)
   15c3c:	df001104 	addi	fp,sp,68
   15c40:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   15c44:	e0bfff17 	ldw	r2,-4(fp)
   15c48:	10000816 	blt	r2,zero,15c6c <isatty+0x3c>
   15c4c:	01400304 	movi	r5,12
   15c50:	e13fff17 	ldw	r4,-4(fp)
   15c54:	0015aa40 	call	15aa4 <__mulsi3>
   15c58:	1007883a 	mov	r3,r2
   15c5c:	00800074 	movhi	r2,1
   15c60:	109cc204 	addi	r2,r2,29448
   15c64:	1885883a 	add	r2,r3,r2
   15c68:	00000106 	br	15c70 <isatty+0x40>
   15c6c:	0005883a 	mov	r2,zero
   15c70:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   15c74:	e0bfef17 	ldw	r2,-68(fp)
   15c78:	10000e26 	beq	r2,zero,15cb4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   15c7c:	e0bfef17 	ldw	r2,-68(fp)
   15c80:	10800017 	ldw	r2,0(r2)
   15c84:	10800817 	ldw	r2,32(r2)
   15c88:	1000021e 	bne	r2,zero,15c94 <isatty+0x64>
    {
      return 1;
   15c8c:	00800044 	movi	r2,1
   15c90:	00000d06 	br	15cc8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   15c94:	e0bff004 	addi	r2,fp,-64
   15c98:	100b883a 	mov	r5,r2
   15c9c:	e13fff17 	ldw	r4,-4(fp)
   15ca0:	0015b3c0 	call	15b3c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   15ca4:	e0bff117 	ldw	r2,-60(fp)
   15ca8:	10880020 	cmpeqi	r2,r2,8192
   15cac:	10803fcc 	andi	r2,r2,255
   15cb0:	00000506 	br	15cc8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   15cb4:	0015bf40 	call	15bf4 <alt_get_errno>
   15cb8:	1007883a 	mov	r3,r2
   15cbc:	00801444 	movi	r2,81
   15cc0:	18800015 	stw	r2,0(r3)
    return 0;
   15cc4:	0005883a 	mov	r2,zero
  }
}
   15cc8:	e037883a 	mov	sp,fp
   15ccc:	dfc00117 	ldw	ra,4(sp)
   15cd0:	df000017 	ldw	fp,0(sp)
   15cd4:	dec00204 	addi	sp,sp,8
   15cd8:	f800283a 	ret

00015cdc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15cdc:	defffe04 	addi	sp,sp,-8
   15ce0:	dfc00115 	stw	ra,4(sp)
   15ce4:	df000015 	stw	fp,0(sp)
   15ce8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15cec:	d0a00517 	ldw	r2,-32748(gp)
   15cf0:	10000326 	beq	r2,zero,15d00 <alt_get_errno+0x24>
   15cf4:	d0a00517 	ldw	r2,-32748(gp)
   15cf8:	103ee83a 	callr	r2
   15cfc:	00000106 	br	15d04 <alt_get_errno+0x28>
   15d00:	d0a6e104 	addi	r2,gp,-25724
}
   15d04:	e037883a 	mov	sp,fp
   15d08:	dfc00117 	ldw	ra,4(sp)
   15d0c:	df000017 	ldw	fp,0(sp)
   15d10:	dec00204 	addi	sp,sp,8
   15d14:	f800283a 	ret

00015d18 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   15d18:	defff904 	addi	sp,sp,-28
   15d1c:	dfc00615 	stw	ra,24(sp)
   15d20:	df000515 	stw	fp,20(sp)
   15d24:	df000504 	addi	fp,sp,20
   15d28:	e13ffd15 	stw	r4,-12(fp)
   15d2c:	e17ffe15 	stw	r5,-8(fp)
   15d30:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   15d34:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   15d38:	e0bffd17 	ldw	r2,-12(fp)
   15d3c:	10000816 	blt	r2,zero,15d60 <lseek+0x48>
   15d40:	01400304 	movi	r5,12
   15d44:	e13ffd17 	ldw	r4,-12(fp)
   15d48:	0015aa40 	call	15aa4 <__mulsi3>
   15d4c:	1007883a 	mov	r3,r2
   15d50:	00800074 	movhi	r2,1
   15d54:	109cc204 	addi	r2,r2,29448
   15d58:	1885883a 	add	r2,r3,r2
   15d5c:	00000106 	br	15d64 <lseek+0x4c>
   15d60:	0005883a 	mov	r2,zero
   15d64:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   15d68:	e0bffc17 	ldw	r2,-16(fp)
   15d6c:	10001026 	beq	r2,zero,15db0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   15d70:	e0bffc17 	ldw	r2,-16(fp)
   15d74:	10800017 	ldw	r2,0(r2)
   15d78:	10800717 	ldw	r2,28(r2)
   15d7c:	10000926 	beq	r2,zero,15da4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   15d80:	e0bffc17 	ldw	r2,-16(fp)
   15d84:	10800017 	ldw	r2,0(r2)
   15d88:	10800717 	ldw	r2,28(r2)
   15d8c:	e1bfff17 	ldw	r6,-4(fp)
   15d90:	e17ffe17 	ldw	r5,-8(fp)
   15d94:	e13ffc17 	ldw	r4,-16(fp)
   15d98:	103ee83a 	callr	r2
   15d9c:	e0bffb15 	stw	r2,-20(fp)
   15da0:	00000506 	br	15db8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   15da4:	00bfde84 	movi	r2,-134
   15da8:	e0bffb15 	stw	r2,-20(fp)
   15dac:	00000206 	br	15db8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   15db0:	00bfebc4 	movi	r2,-81
   15db4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   15db8:	e0bffb17 	ldw	r2,-20(fp)
   15dbc:	1000070e 	bge	r2,zero,15ddc <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   15dc0:	0015cdc0 	call	15cdc <alt_get_errno>
   15dc4:	1007883a 	mov	r3,r2
   15dc8:	e0bffb17 	ldw	r2,-20(fp)
   15dcc:	0085c83a 	sub	r2,zero,r2
   15dd0:	18800015 	stw	r2,0(r3)
    rc = -1;
   15dd4:	00bfffc4 	movi	r2,-1
   15dd8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   15ddc:	e0bffb17 	ldw	r2,-20(fp)
}
   15de0:	e037883a 	mov	sp,fp
   15de4:	dfc00117 	ldw	ra,4(sp)
   15de8:	df000017 	ldw	fp,0(sp)
   15dec:	dec00204 	addi	sp,sp,8
   15df0:	f800283a 	ret

00015df4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   15df4:	defffe04 	addi	sp,sp,-8
   15df8:	df000115 	stw	fp,4(sp)
   15dfc:	df000104 	addi	fp,sp,4
   15e00:	e13fff15 	stw	r4,-4(fp)
}
   15e04:	0001883a 	nop
   15e08:	e037883a 	mov	sp,fp
   15e0c:	df000017 	ldw	fp,0(sp)
   15e10:	dec00104 	addi	sp,sp,4
   15e14:	f800283a 	ret

00015e18 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   15e18:	defffe04 	addi	sp,sp,-8
   15e1c:	df000115 	stw	fp,4(sp)
   15e20:	df000104 	addi	fp,sp,4
   15e24:	e13fff15 	stw	r4,-4(fp)
}
   15e28:	0001883a 	nop
   15e2c:	e037883a 	mov	sp,fp
   15e30:	df000017 	ldw	fp,0(sp)
   15e34:	dec00104 	addi	sp,sp,4
   15e38:	f800283a 	ret

00015e3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15e3c:	defffe04 	addi	sp,sp,-8
   15e40:	dfc00115 	stw	ra,4(sp)
   15e44:	df000015 	stw	fp,0(sp)
   15e48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15e4c:	d0a00517 	ldw	r2,-32748(gp)
   15e50:	10000326 	beq	r2,zero,15e60 <alt_get_errno+0x24>
   15e54:	d0a00517 	ldw	r2,-32748(gp)
   15e58:	103ee83a 	callr	r2
   15e5c:	00000106 	br	15e64 <alt_get_errno+0x28>
   15e60:	d0a6e104 	addi	r2,gp,-25724
}
   15e64:	e037883a 	mov	sp,fp
   15e68:	dfc00117 	ldw	ra,4(sp)
   15e6c:	df000017 	ldw	fp,0(sp)
   15e70:	dec00204 	addi	sp,sp,8
   15e74:	f800283a 	ret

00015e78 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   15e78:	defff904 	addi	sp,sp,-28
   15e7c:	dfc00615 	stw	ra,24(sp)
   15e80:	df000515 	stw	fp,20(sp)
   15e84:	df000504 	addi	fp,sp,20
   15e88:	e13ffd15 	stw	r4,-12(fp)
   15e8c:	e17ffe15 	stw	r5,-8(fp)
   15e90:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   15e94:	e0bffd17 	ldw	r2,-12(fp)
   15e98:	10000816 	blt	r2,zero,15ebc <read+0x44>
   15e9c:	01400304 	movi	r5,12
   15ea0:	e13ffd17 	ldw	r4,-12(fp)
   15ea4:	0015aa40 	call	15aa4 <__mulsi3>
   15ea8:	1007883a 	mov	r3,r2
   15eac:	00800074 	movhi	r2,1
   15eb0:	109cc204 	addi	r2,r2,29448
   15eb4:	1885883a 	add	r2,r3,r2
   15eb8:	00000106 	br	15ec0 <read+0x48>
   15ebc:	0005883a 	mov	r2,zero
   15ec0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   15ec4:	e0bffb17 	ldw	r2,-20(fp)
   15ec8:	10002226 	beq	r2,zero,15f54 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   15ecc:	e0bffb17 	ldw	r2,-20(fp)
   15ed0:	10800217 	ldw	r2,8(r2)
   15ed4:	108000cc 	andi	r2,r2,3
   15ed8:	10800060 	cmpeqi	r2,r2,1
   15edc:	1000181e 	bne	r2,zero,15f40 <read+0xc8>
        (fd->dev->read))
   15ee0:	e0bffb17 	ldw	r2,-20(fp)
   15ee4:	10800017 	ldw	r2,0(r2)
   15ee8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   15eec:	10001426 	beq	r2,zero,15f40 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   15ef0:	e0bffb17 	ldw	r2,-20(fp)
   15ef4:	10800017 	ldw	r2,0(r2)
   15ef8:	10800517 	ldw	r2,20(r2)
   15efc:	e0ffff17 	ldw	r3,-4(fp)
   15f00:	180d883a 	mov	r6,r3
   15f04:	e17ffe17 	ldw	r5,-8(fp)
   15f08:	e13ffb17 	ldw	r4,-20(fp)
   15f0c:	103ee83a 	callr	r2
   15f10:	e0bffc15 	stw	r2,-16(fp)
   15f14:	e0bffc17 	ldw	r2,-16(fp)
   15f18:	1000070e 	bge	r2,zero,15f38 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   15f1c:	0015e3c0 	call	15e3c <alt_get_errno>
   15f20:	1007883a 	mov	r3,r2
   15f24:	e0bffc17 	ldw	r2,-16(fp)
   15f28:	0085c83a 	sub	r2,zero,r2
   15f2c:	18800015 	stw	r2,0(r3)
          return -1;
   15f30:	00bfffc4 	movi	r2,-1
   15f34:	00000c06 	br	15f68 <read+0xf0>
        }
        return rval;
   15f38:	e0bffc17 	ldw	r2,-16(fp)
   15f3c:	00000a06 	br	15f68 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   15f40:	0015e3c0 	call	15e3c <alt_get_errno>
   15f44:	1007883a 	mov	r3,r2
   15f48:	00800344 	movi	r2,13
   15f4c:	18800015 	stw	r2,0(r3)
   15f50:	00000406 	br	15f64 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   15f54:	0015e3c0 	call	15e3c <alt_get_errno>
   15f58:	1007883a 	mov	r3,r2
   15f5c:	00801444 	movi	r2,81
   15f60:	18800015 	stw	r2,0(r3)
  }
  return -1;
   15f64:	00bfffc4 	movi	r2,-1
}
   15f68:	e037883a 	mov	sp,fp
   15f6c:	dfc00117 	ldw	ra,4(sp)
   15f70:	df000017 	ldw	fp,0(sp)
   15f74:	dec00204 	addi	sp,sp,8
   15f78:	f800283a 	ret

00015f7c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   15f7c:	defff904 	addi	sp,sp,-28
   15f80:	df000615 	stw	fp,24(sp)
   15f84:	df000604 	addi	fp,sp,24
   15f88:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15f8c:	0005303a 	rdctl	r2,status
   15f90:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15f94:	e0fffe17 	ldw	r3,-8(fp)
   15f98:	00bfff84 	movi	r2,-2
   15f9c:	1884703a 	and	r2,r3,r2
   15fa0:	1001703a 	wrctl	status,r2
  
  return context;
   15fa4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   15fa8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   15fac:	d0a00d17 	ldw	r2,-32716(gp)
   15fb0:	10c000c4 	addi	r3,r2,3
   15fb4:	00bfff04 	movi	r2,-4
   15fb8:	1884703a 	and	r2,r3,r2
   15fbc:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   15fc0:	d0e00d17 	ldw	r3,-32716(gp)
   15fc4:	e0bfff17 	ldw	r2,-4(fp)
   15fc8:	1887883a 	add	r3,r3,r2
   15fcc:	008000b4 	movhi	r2,2
   15fd0:	10a71004 	addi	r2,r2,-25536
   15fd4:	10c0062e 	bgeu	r2,r3,15ff0 <sbrk+0x74>
   15fd8:	e0bffb17 	ldw	r2,-20(fp)
   15fdc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15fe0:	e0bffa17 	ldw	r2,-24(fp)
   15fe4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   15fe8:	00bfffc4 	movi	r2,-1
   15fec:	00000b06 	br	1601c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   15ff0:	d0a00d17 	ldw	r2,-32716(gp)
   15ff4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   15ff8:	d0e00d17 	ldw	r3,-32716(gp)
   15ffc:	e0bfff17 	ldw	r2,-4(fp)
   16000:	1885883a 	add	r2,r3,r2
   16004:	d0a00d15 	stw	r2,-32716(gp)
   16008:	e0bffb17 	ldw	r2,-20(fp)
   1600c:	e0bffc15 	stw	r2,-16(fp)
   16010:	e0bffc17 	ldw	r2,-16(fp)
   16014:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   16018:	e0bffd17 	ldw	r2,-12(fp)
} 
   1601c:	e037883a 	mov	sp,fp
   16020:	df000017 	ldw	fp,0(sp)
   16024:	dec00104 	addi	sp,sp,4
   16028:	f800283a 	ret

0001602c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1602c:	defffe04 	addi	sp,sp,-8
   16030:	dfc00115 	stw	ra,4(sp)
   16034:	df000015 	stw	fp,0(sp)
   16038:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1603c:	d0a00517 	ldw	r2,-32748(gp)
   16040:	10000326 	beq	r2,zero,16050 <alt_get_errno+0x24>
   16044:	d0a00517 	ldw	r2,-32748(gp)
   16048:	103ee83a 	callr	r2
   1604c:	00000106 	br	16054 <alt_get_errno+0x28>
   16050:	d0a6e104 	addi	r2,gp,-25724
}
   16054:	e037883a 	mov	sp,fp
   16058:	dfc00117 	ldw	ra,4(sp)
   1605c:	df000017 	ldw	fp,0(sp)
   16060:	dec00204 	addi	sp,sp,8
   16064:	f800283a 	ret

00016068 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   16068:	defff904 	addi	sp,sp,-28
   1606c:	dfc00615 	stw	ra,24(sp)
   16070:	df000515 	stw	fp,20(sp)
   16074:	df000504 	addi	fp,sp,20
   16078:	e13ffd15 	stw	r4,-12(fp)
   1607c:	e17ffe15 	stw	r5,-8(fp)
   16080:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   16084:	e0bffd17 	ldw	r2,-12(fp)
   16088:	10000816 	blt	r2,zero,160ac <write+0x44>
   1608c:	01400304 	movi	r5,12
   16090:	e13ffd17 	ldw	r4,-12(fp)
   16094:	0015aa40 	call	15aa4 <__mulsi3>
   16098:	1007883a 	mov	r3,r2
   1609c:	00800074 	movhi	r2,1
   160a0:	109cc204 	addi	r2,r2,29448
   160a4:	1885883a 	add	r2,r3,r2
   160a8:	00000106 	br	160b0 <write+0x48>
   160ac:	0005883a 	mov	r2,zero
   160b0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   160b4:	e0bffb17 	ldw	r2,-20(fp)
   160b8:	10002126 	beq	r2,zero,16140 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   160bc:	e0bffb17 	ldw	r2,-20(fp)
   160c0:	10800217 	ldw	r2,8(r2)
   160c4:	108000cc 	andi	r2,r2,3
   160c8:	10001826 	beq	r2,zero,1612c <write+0xc4>
   160cc:	e0bffb17 	ldw	r2,-20(fp)
   160d0:	10800017 	ldw	r2,0(r2)
   160d4:	10800617 	ldw	r2,24(r2)
   160d8:	10001426 	beq	r2,zero,1612c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   160dc:	e0bffb17 	ldw	r2,-20(fp)
   160e0:	10800017 	ldw	r2,0(r2)
   160e4:	10800617 	ldw	r2,24(r2)
   160e8:	e0ffff17 	ldw	r3,-4(fp)
   160ec:	180d883a 	mov	r6,r3
   160f0:	e17ffe17 	ldw	r5,-8(fp)
   160f4:	e13ffb17 	ldw	r4,-20(fp)
   160f8:	103ee83a 	callr	r2
   160fc:	e0bffc15 	stw	r2,-16(fp)
   16100:	e0bffc17 	ldw	r2,-16(fp)
   16104:	1000070e 	bge	r2,zero,16124 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   16108:	001602c0 	call	1602c <alt_get_errno>
   1610c:	1007883a 	mov	r3,r2
   16110:	e0bffc17 	ldw	r2,-16(fp)
   16114:	0085c83a 	sub	r2,zero,r2
   16118:	18800015 	stw	r2,0(r3)
        return -1;
   1611c:	00bfffc4 	movi	r2,-1
   16120:	00000c06 	br	16154 <write+0xec>
      }
      return rval;
   16124:	e0bffc17 	ldw	r2,-16(fp)
   16128:	00000a06 	br	16154 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1612c:	001602c0 	call	1602c <alt_get_errno>
   16130:	1007883a 	mov	r3,r2
   16134:	00800344 	movi	r2,13
   16138:	18800015 	stw	r2,0(r3)
   1613c:	00000406 	br	16150 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   16140:	001602c0 	call	1602c <alt_get_errno>
   16144:	1007883a 	mov	r3,r2
   16148:	00801444 	movi	r2,81
   1614c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   16150:	00bfffc4 	movi	r2,-1
}
   16154:	e037883a 	mov	sp,fp
   16158:	dfc00117 	ldw	ra,4(sp)
   1615c:	df000017 	ldw	fp,0(sp)
   16160:	dec00204 	addi	sp,sp,8
   16164:	f800283a 	ret
