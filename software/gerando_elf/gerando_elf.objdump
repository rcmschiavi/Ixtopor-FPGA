
gerando_elf.elf:     file format elf32-littlenios2
gerando_elf.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000004b4 memsz 0x000004b4 flags r-x
    LOAD off    0x000014d4 vaddr 0x000104d4 paddr 0x00010660 align 2**12
         filesz 0x0000018c memsz 0x0000018c flags rw-
    LOAD off    0x000017ec vaddr 0x000107ec paddr 0x000107ec align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  00001660  2**0
                  CONTENTS
  2 .text         00000484  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000030  000104a4  000104a4  000014a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000018c  000104d4  00010660  000014d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  000107ec  000107ec  000017ec  2**2
                  ALLOC, SMALL_DATA
  6 .memoria      00000000  000107fc  000107fc  00001660  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000258  00000000  00000000  00001688  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00002e86  00000000  00000000  000018e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000100f  00000000  00000000  00004766  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000011ca  00000000  00000000  00005775  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000002c0  00000000  00000000  00006940  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000e2a  00000000  00000000  00006c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000463  00000000  00000000  00007a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00007e90  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000120  00000000  00000000  00007ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00009072  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00009075  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00009078  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00009079  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0000907a  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0000907e  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00009082  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00009086  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0000908f  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  000090a1  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000031  00000000  00000000  000090a7  2**0
                  CONTENTS, READONLY
 29 .jdi          000036bf  00000000  00000000  000090d8  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000ae52e  00000000  00000000  0000c797  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
000104a4 l    d  .rodata	00000000 .rodata
000104d4 l    d  .rwdata	00000000 .rwdata
000107ec l    d  .bss	00000000 .bss
000107fc l    d  .memoria	00000000 .memoria
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Oi_Mundo_bsp//obj/HAL/src/crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000104d4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000105b4 l     O .rwdata	0000002c adc_1
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00010424 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00010330 g     F .text	0000002c alt_main
00010090 g     F .text	00000080 _puts_r
00010660 g       *ABS*	00000000 __flash_rwdata_start
00010644 g     O .rwdata	00000004 jtag_uart
0001049c g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
000107ec g     O .bss	00000004 errno
000107f4 g     O .bss	00000004 alt_argv
00018638 g       *ABS*	00000000 _gp
000105e0 g     O .rwdata	00000030 alt_fd_list
00010110 g     F .text	00000014 puts
00010648 g     O .rwdata	00000004 alt_max_fd
00010638 g     O .rwdata	00000004 _global_impure_ptr
000107fc g       *ABS*	00000000 __bss_end
00010610 g     O .rwdata	00000028 alt_dev_null
00010420 g     F .text	00000004 alt_dcache_flush_all
00010660 g       *ABS*	00000000 __ram_rwdata_end
0001064c g     O .rwdata	00000008 alt_dev_list
0001035c g     F .text	00000060 write
000104d4 g       *ABS*	00000000 __ram_rodata_end
000107fc g       *ABS*	00000000 end
00019c40 g       *ABS*	00000000 __alt_stack_pointer
000103ec g     F .text	00000034 altera_avalon_jtag_uart_write
00010020 g     F .text	0000003c _start
000103dc g     F .text	00000010 alt_sys_init
000104d4 g       *ABS*	00000000 __ram_rwdata_start
000104a4 g       *ABS*	00000000 __ram_rodata_start
000107fc g       *ABS*	00000000 __alt_stack_base
00010000 g       *ABS*	00000000 __alt_mem_memoria
0001042c g     F .text	0000006c alt_dev_llist_insert
00010140 g     F .text	000000b8 __sfvwrite_small_dev
000107ec g       *ABS*	00000000 __bss_start
0001005c g     F .text	00000034 main
000107f0 g     O .bss	00000004 alt_envp
0001065c g     O .rwdata	00000004 alt_errno
000104a4 g       *ABS*	00000000 __flash_rodata_start
000103bc g     F .text	00000020 alt_irq_init
000101f8 g     F .text	00000058 _write_r
0001063c g     O .rwdata	00000004 _impure_ptr
000107f8 g     O .bss	00000004 alt_argc
00010654 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010660 g       *ABS*	00000000 _edata
000107fc g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
00019c40 g       *ABS*	00000000 __alt_data_end
00010640 g     O .rwdata	00000004 uart
0001000c g       .entry	00000000 _exit
00010124 g     F .text	0000001c strlen
00010498 g     F .text	00000004 alt_icache_flush_all
00010250 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dee71014 	ori	sp,sp,40000
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6a18e14 	ori	gp,gp,34360
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	1081fb14 	ori	r2,r2,2028

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18c1ff14 	ori	r3,r3,2044

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <__alt_data_end+0xffff6404>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	00102500 	call	10250 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	00103300 	call	10330 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <__alt_data_end+0xffff6418>

0001005c <main>:
 */

#include <stdio.h>

int main()
{
   1005c:	defffe04 	addi	sp,sp,-8
   10060:	dfc00115 	stw	ra,4(sp)
   10064:	df000015 	stw	fp,0(sp)
   10068:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
   1006c:	01000074 	movhi	r4,1
   10070:	21012904 	addi	r4,r4,1188
   10074:	00101100 	call	10110 <puts>

  return 0;
   10078:	0005883a 	mov	r2,zero
}
   1007c:	e037883a 	mov	sp,fp
   10080:	dfc00117 	ldw	ra,4(sp)
   10084:	df000017 	ldw	fp,0(sp)
   10088:	dec00204 	addi	sp,sp,8
   1008c:	f800283a 	ret

00010090 <_puts_r>:
   10090:	defffd04 	addi	sp,sp,-12
   10094:	dc000015 	stw	r16,0(sp)
   10098:	2021883a 	mov	r16,r4
   1009c:	2809883a 	mov	r4,r5
   100a0:	dfc00215 	stw	ra,8(sp)
   100a4:	dc400115 	stw	r17,4(sp)
   100a8:	2823883a 	mov	r17,r5
   100ac:	00101240 	call	10124 <strlen>
   100b0:	81400217 	ldw	r5,8(r16)
   100b4:	01000074 	movhi	r4,1
   100b8:	21005004 	addi	r4,r4,320
   100bc:	29000115 	stw	r4,4(r5)
   100c0:	100f883a 	mov	r7,r2
   100c4:	880d883a 	mov	r6,r17
   100c8:	8009883a 	mov	r4,r16
   100cc:	00101400 	call	10140 <__sfvwrite_small_dev>
   100d0:	00ffffc4 	movi	r3,-1
   100d4:	10c00926 	beq	r2,r3,100fc <_puts_r+0x6c>
   100d8:	81400217 	ldw	r5,8(r16)
   100dc:	01800074 	movhi	r6,1
   100e0:	01c00044 	movi	r7,1
   100e4:	28800117 	ldw	r2,4(r5)
   100e8:	31812e04 	addi	r6,r6,1208
   100ec:	8009883a 	mov	r4,r16
   100f0:	103ee83a 	callr	r2
   100f4:	10bfffe0 	cmpeqi	r2,r2,-1
   100f8:	0085c83a 	sub	r2,zero,r2
   100fc:	dfc00217 	ldw	ra,8(sp)
   10100:	dc400117 	ldw	r17,4(sp)
   10104:	dc000017 	ldw	r16,0(sp)
   10108:	dec00304 	addi	sp,sp,12
   1010c:	f800283a 	ret

00010110 <puts>:
   10110:	00800074 	movhi	r2,1
   10114:	10818f04 	addi	r2,r2,1596
   10118:	200b883a 	mov	r5,r4
   1011c:	11000017 	ldw	r4,0(r2)
   10120:	00100901 	jmpi	10090 <_puts_r>

00010124 <strlen>:
   10124:	2005883a 	mov	r2,r4
   10128:	10c00007 	ldb	r3,0(r2)
   1012c:	18000226 	beq	r3,zero,10138 <strlen+0x14>
   10130:	10800044 	addi	r2,r2,1
   10134:	003ffc06 	br	10128 <__alt_data_end+0xffff64e8>
   10138:	1105c83a 	sub	r2,r2,r4
   1013c:	f800283a 	ret

00010140 <__sfvwrite_small_dev>:
   10140:	2880000b 	ldhu	r2,0(r5)
   10144:	1080020c 	andi	r2,r2,8
   10148:	10002126 	beq	r2,zero,101d0 <__sfvwrite_small_dev+0x90>
   1014c:	2880008f 	ldh	r2,2(r5)
   10150:	defffa04 	addi	sp,sp,-24
   10154:	dc000015 	stw	r16,0(sp)
   10158:	dfc00515 	stw	ra,20(sp)
   1015c:	dd000415 	stw	r20,16(sp)
   10160:	dcc00315 	stw	r19,12(sp)
   10164:	dc800215 	stw	r18,8(sp)
   10168:	dc400115 	stw	r17,4(sp)
   1016c:	2821883a 	mov	r16,r5
   10170:	10001216 	blt	r2,zero,101bc <__sfvwrite_small_dev+0x7c>
   10174:	2027883a 	mov	r19,r4
   10178:	3025883a 	mov	r18,r6
   1017c:	3823883a 	mov	r17,r7
   10180:	05010004 	movi	r20,1024
   10184:	04400b0e 	bge	zero,r17,101b4 <__sfvwrite_small_dev+0x74>
   10188:	880f883a 	mov	r7,r17
   1018c:	a440010e 	bge	r20,r17,10194 <__sfvwrite_small_dev+0x54>
   10190:	01c10004 	movi	r7,1024
   10194:	8140008f 	ldh	r5,2(r16)
   10198:	900d883a 	mov	r6,r18
   1019c:	9809883a 	mov	r4,r19
   101a0:	00101f80 	call	101f8 <_write_r>
   101a4:	0080050e 	bge	zero,r2,101bc <__sfvwrite_small_dev+0x7c>
   101a8:	88a3c83a 	sub	r17,r17,r2
   101ac:	90a5883a 	add	r18,r18,r2
   101b0:	003ff406 	br	10184 <__alt_data_end+0xffff6544>
   101b4:	0005883a 	mov	r2,zero
   101b8:	00000706 	br	101d8 <__sfvwrite_small_dev+0x98>
   101bc:	8080000b 	ldhu	r2,0(r16)
   101c0:	10801014 	ori	r2,r2,64
   101c4:	8080000d 	sth	r2,0(r16)
   101c8:	00bfffc4 	movi	r2,-1
   101cc:	00000206 	br	101d8 <__sfvwrite_small_dev+0x98>
   101d0:	00bfffc4 	movi	r2,-1
   101d4:	f800283a 	ret
   101d8:	dfc00517 	ldw	ra,20(sp)
   101dc:	dd000417 	ldw	r20,16(sp)
   101e0:	dcc00317 	ldw	r19,12(sp)
   101e4:	dc800217 	ldw	r18,8(sp)
   101e8:	dc400117 	ldw	r17,4(sp)
   101ec:	dc000017 	ldw	r16,0(sp)
   101f0:	dec00604 	addi	sp,sp,24
   101f4:	f800283a 	ret

000101f8 <_write_r>:
   101f8:	defffd04 	addi	sp,sp,-12
   101fc:	dc000015 	stw	r16,0(sp)
   10200:	04000074 	movhi	r16,1
   10204:	dc400115 	stw	r17,4(sp)
   10208:	8401fb04 	addi	r16,r16,2028
   1020c:	2023883a 	mov	r17,r4
   10210:	2809883a 	mov	r4,r5
   10214:	300b883a 	mov	r5,r6
   10218:	380d883a 	mov	r6,r7
   1021c:	dfc00215 	stw	ra,8(sp)
   10220:	80000015 	stw	zero,0(r16)
   10224:	001035c0 	call	1035c <write>
   10228:	00ffffc4 	movi	r3,-1
   1022c:	10c0031e 	bne	r2,r3,1023c <_write_r+0x44>
   10230:	80c00017 	ldw	r3,0(r16)
   10234:	18000126 	beq	r3,zero,1023c <_write_r+0x44>
   10238:	88c00015 	stw	r3,0(r17)
   1023c:	dfc00217 	ldw	ra,8(sp)
   10240:	dc400117 	ldw	r17,4(sp)
   10244:	dc000017 	ldw	r16,0(sp)
   10248:	dec00304 	addi	sp,sp,12
   1024c:	f800283a 	ret

00010250 <alt_load>:
   10250:	deffff04 	addi	sp,sp,-4
   10254:	01000074 	movhi	r4,1
   10258:	01400074 	movhi	r5,1
   1025c:	dfc00015 	stw	ra,0(sp)
   10260:	21013504 	addi	r4,r4,1236
   10264:	29419804 	addi	r5,r5,1632
   10268:	2140061e 	bne	r4,r5,10284 <alt_load+0x34>
   1026c:	01000074 	movhi	r4,1
   10270:	01400074 	movhi	r5,1
   10274:	21000804 	addi	r4,r4,32
   10278:	29400804 	addi	r5,r5,32
   1027c:	2140121e 	bne	r4,r5,102c8 <alt_load+0x78>
   10280:	00000b06 	br	102b0 <alt_load+0x60>
   10284:	00c00074 	movhi	r3,1
   10288:	18c19804 	addi	r3,r3,1632
   1028c:	1907c83a 	sub	r3,r3,r4
   10290:	0005883a 	mov	r2,zero
   10294:	10fff526 	beq	r2,r3,1026c <__alt_data_end+0xffff662c>
   10298:	114f883a 	add	r7,r2,r5
   1029c:	39c00017 	ldw	r7,0(r7)
   102a0:	110d883a 	add	r6,r2,r4
   102a4:	10800104 	addi	r2,r2,4
   102a8:	31c00015 	stw	r7,0(r6)
   102ac:	003ff906 	br	10294 <__alt_data_end+0xffff6654>
   102b0:	01000074 	movhi	r4,1
   102b4:	01400074 	movhi	r5,1
   102b8:	21012904 	addi	r4,r4,1188
   102bc:	29412904 	addi	r5,r5,1188
   102c0:	2140101e 	bne	r4,r5,10304 <alt_load+0xb4>
   102c4:	00000b06 	br	102f4 <alt_load+0xa4>
   102c8:	00c00074 	movhi	r3,1
   102cc:	18c00804 	addi	r3,r3,32
   102d0:	1907c83a 	sub	r3,r3,r4
   102d4:	0005883a 	mov	r2,zero
   102d8:	10fff526 	beq	r2,r3,102b0 <__alt_data_end+0xffff6670>
   102dc:	114f883a 	add	r7,r2,r5
   102e0:	39c00017 	ldw	r7,0(r7)
   102e4:	110d883a 	add	r6,r2,r4
   102e8:	10800104 	addi	r2,r2,4
   102ec:	31c00015 	stw	r7,0(r6)
   102f0:	003ff906 	br	102d8 <__alt_data_end+0xffff6698>
   102f4:	00104200 	call	10420 <alt_dcache_flush_all>
   102f8:	dfc00017 	ldw	ra,0(sp)
   102fc:	dec00104 	addi	sp,sp,4
   10300:	00104981 	jmpi	10498 <alt_icache_flush_all>
   10304:	00c00074 	movhi	r3,1
   10308:	18c13504 	addi	r3,r3,1236
   1030c:	1907c83a 	sub	r3,r3,r4
   10310:	0005883a 	mov	r2,zero
   10314:	18bff726 	beq	r3,r2,102f4 <__alt_data_end+0xffff66b4>
   10318:	114f883a 	add	r7,r2,r5
   1031c:	39c00017 	ldw	r7,0(r7)
   10320:	110d883a 	add	r6,r2,r4
   10324:	10800104 	addi	r2,r2,4
   10328:	31c00015 	stw	r7,0(r6)
   1032c:	003ff906 	br	10314 <__alt_data_end+0xffff66d4>

00010330 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10330:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10334:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10338:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1033c:	00103bc0 	call	103bc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10340:	00103dc0 	call	103dc <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10344:	d1a06e17 	ldw	r6,-32328(gp)
   10348:	d1606f17 	ldw	r5,-32324(gp)
   1034c:	d1207017 	ldw	r4,-32320(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   10350:	dfc00017 	ldw	ra,0(sp)
   10354:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10358:	001005c1 	jmpi	1005c <main>

0001035c <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   1035c:	00800044 	movi	r2,1
   10360:	20800226 	beq	r4,r2,1036c <write+0x10>
   10364:	00800084 	movi	r2,2
   10368:	2080041e 	bne	r4,r2,1037c <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   1036c:	01000074 	movhi	r4,1
   10370:	000f883a 	mov	r7,zero
   10374:	21019104 	addi	r4,r4,1604
   10378:	00103ec1 	jmpi	103ec <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   1037c:	d0a00917 	ldw	r2,-32732(gp)
   10380:	10000926 	beq	r2,zero,103a8 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10384:	deffff04 	addi	sp,sp,-4
   10388:	dfc00015 	stw	ra,0(sp)
   1038c:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   10390:	00c01444 	movi	r3,81
   10394:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   10398:	00bfffc4 	movi	r2,-1
   1039c:	dfc00017 	ldw	ra,0(sp)
   103a0:	dec00104 	addi	sp,sp,4
   103a4:	f800283a 	ret
   103a8:	d0a06d04 	addi	r2,gp,-32332
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   103ac:	00c01444 	movi	r3,81
   103b0:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   103b4:	00bfffc4 	movi	r2,-1
   103b8:	f800283a 	ret

000103bc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   103bc:	deffff04 	addi	sp,sp,-4
   103c0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   103c4:	001049c0 	call	1049c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   103c8:	00800044 	movi	r2,1
   103cc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   103d0:	dfc00017 	ldw	ra,0(sp)
   103d4:	dec00104 	addi	sp,sp,4
   103d8:	f800283a 	ret

000103dc <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   103dc:	01000074 	movhi	r4,1
   103e0:	d1600504 	addi	r5,gp,-32748
   103e4:	21016d04 	addi	r4,r4,1460
   103e8:	001042c1 	jmpi	1042c <alt_dev_llist_insert>

000103ec <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   103ec:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   103f0:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   103f4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   103f8:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   103fc:	2980072e 	bgeu	r5,r6,1041c <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10400:	38c00037 	ldwio	r3,0(r7)
   10404:	18ffffec 	andhi	r3,r3,65535
   10408:	183ffc26 	beq	r3,zero,103fc <__alt_data_end+0xffff67bc>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   1040c:	28c00007 	ldb	r3,0(r5)
   10410:	20c00035 	stwio	r3,0(r4)
   10414:	29400044 	addi	r5,r5,1
   10418:	003ff806 	br	103fc <__alt_data_end+0xffff67bc>

  return count;
}
   1041c:	f800283a 	ret

00010420 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10420:	f800283a 	ret

00010424 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   10424:	3005883a 	mov	r2,r6
   10428:	f800283a 	ret

0001042c <alt_dev_llist_insert>:
   1042c:	20000226 	beq	r4,zero,10438 <alt_dev_llist_insert+0xc>
   10430:	20800217 	ldw	r2,8(r4)
   10434:	1000101e 	bne	r2,zero,10478 <alt_dev_llist_insert+0x4c>
   10438:	d0a00917 	ldw	r2,-32732(gp)
   1043c:	10000926 	beq	r2,zero,10464 <alt_dev_llist_insert+0x38>
   10440:	deffff04 	addi	sp,sp,-4
   10444:	dfc00015 	stw	ra,0(sp)
   10448:	103ee83a 	callr	r2
   1044c:	00c00584 	movi	r3,22
   10450:	10c00015 	stw	r3,0(r2)
   10454:	00bffa84 	movi	r2,-22
   10458:	dfc00017 	ldw	ra,0(sp)
   1045c:	dec00104 	addi	sp,sp,4
   10460:	f800283a 	ret
   10464:	d0a06d04 	addi	r2,gp,-32332
   10468:	00c00584 	movi	r3,22
   1046c:	10c00015 	stw	r3,0(r2)
   10470:	00bffa84 	movi	r2,-22
   10474:	f800283a 	ret
   10478:	28800017 	ldw	r2,0(r5)
   1047c:	21400115 	stw	r5,4(r4)
   10480:	20800015 	stw	r2,0(r4)
   10484:	28800017 	ldw	r2,0(r5)
   10488:	11000115 	stw	r4,4(r2)
   1048c:	29000015 	stw	r4,0(r5)
   10490:	0005883a 	mov	r2,zero
   10494:	f800283a 	ret

00010498 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10498:	f800283a 	ret

0001049c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   1049c:	000170fa 	wrctl	ienable,zero
   104a0:	f800283a 	ret
