
testandp_adc.elf:     file format elf32-littlenios2
testandp_adc.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010230

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000020e4 memsz 0x000020e4 flags r-x
    LOAD off    0x00003104 vaddr 0x00012104 paddr 0x000123fc align 2**12
         filesz 0x000002f8 memsz 0x000002f8 flags rw-
    LOAD off    0x000036f4 vaddr 0x000126f4 paddr 0x000126f4 align 2**12
         filesz 0x00000000 memsz 0x00000128 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001e90  00010230  00010230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000044  000120c0  000120c0  000030c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002f8  00012104  000123fc  00003104  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000128  000126f4  000126f4  000036f4  2**2
                  ALLOC, SMALL_DATA
  6 .memoria      00000000  0001281c  0001281c  000033fc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000033fc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000005f0  00000000  00000000  00003420  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00006fe7  00000000  00000000  00003a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000292b  00000000  00000000  0000a9f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002d9b  00000000  00000000  0000d322  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000a6c  00000000  00000000  000100c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001d99  00000000  00000000  00010b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000015da  00000000  00000000  000128c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00013ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002a8  00000000  00000000  00013ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00015bea  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00015bed  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00015bf0  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00015bf1  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00015bf2  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00015bf6  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00015bfa  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00015bfe  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00015c07  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00015c10  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  00015c19  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000031  00000000  00000000  00015c1f  2**0
                  CONTENTS, READONLY
 29 .jdi          000036bf  00000000  00000000  00015c50  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000ae52e  00000000  00000000  0001930f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010230 l    d  .text	00000000 .text
000120c0 l    d  .rodata	00000000 .rodata
00012104 l    d  .rwdata	00000000 .rwdata
000126f4 l    d  .bss	00000000 .bss
0001281c l    d  .memoria	00000000 .memoria
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../_bspGeral//obj/HAL/src/crt0.o
00010268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000106dc l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00012114 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00010dc8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00010f44 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001101c l     F .text	00000034 alt_dev_reg
000121f4 l     O .rwdata	0000002c adc_1
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00011188 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_adc.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00011528 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000115c0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000115ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00012718 g     O .bss	00000004 alt_instruction_exception_handler
00010eb4 g     F .text	00000060 alt_main
0001062c g     F .text	00000080 _puts_r
0001271c g     O .bss	00000100 alt_irq
000123fc g       *ABS*	00000000 __flash_rwdata_start
000105e0 g     F .text	0000004c printf
00012708 g     O .bss	00000004 altera_avalon_timer_ts_freq
000123d0 g     O .rwdata	00000004 jtag_uart
00011c80 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
000126f4 g     O .bss	00000004 errno
000126fc g     O .bss	00000004 alt_argv
0001a3c8 g       *ABS*	00000000 _gp
00010f14 g     F .text	00000030 usleep
00012248 g     O .rwdata	00000180 alt_fd_list
0001178c g     F .text	00000090 alt_find_dev
000120c0 g       *ABS*	00000000 __DTOR_END__
000106ac g     F .text	00000014 puts
00011ca4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000105a4 g     F .text	0000003c _printf_r
000104e8 g     F .text	00000064 .hidden __udivsi3
000123e8 g     O .rwdata	00000004 alt_max_fd
000123c8 g     O .rwdata	00000004 _global_impure_ptr
0001281c g       *ABS*	00000000 __bss_end
000119ec g     F .text	000000f0 alt_iic_isr_register
0001127c g     F .text	0000003c alt_up_adc_open_dev
00011b78 g     F .text	00000108 alt_tick
000119a0 g     F .text	0000004c alt_ic_irq_enabled
00011adc g     F .text	0000009c alt_alarm_stop
0001270c g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000d4 alt_irq_handler
00012220 g     O .rwdata	00000028 alt_dev_null
000115a0 g     F .text	00000020 alt_dcache_flush_all
000123fc g       *ABS*	00000000 __ram_rwdata_end
000123e0 g     O .rwdata	00000008 alt_dev_list
00010f80 g     F .text	0000009c write
00012104 g       *ABS*	00000000 __ram_rodata_end
0001054c g     F .text	00000058 .hidden __umodsi3
0001281c g       *ABS*	00000000 end
000101d0 g     F .exceptions	00000060 alt_instruction_exception_entry
000120c0 g       *ABS*	00000000 __CTOR_LIST__
00019c40 g       *ABS*	00000000 __alt_stack_pointer
00011200 g     F .text	0000007c alt_avalon_timer_sc_init
000110f4 g     F .text	00000094 altera_avalon_jtag_uart_write
00010748 g     F .text	0000052c ___vfprintf_internal_r
00011efc g     F .text	00000190 __call_exitprocs
00010230 g     F .text	0000003c _start
00012710 g     O .bss	00000004 _alt_tick_rate
00012104 g     O .rwdata	00000010 decodif
00012714 g     O .bss	00000004 _alt_nticks
00011088 g     F .text	0000006c alt_sys_init
00011da4 g     F .text	00000158 __register_exitproc
00010da0 g     F .text	00000028 .hidden __mulsi3
00012104 g       *ABS*	00000000 __ram_rwdata_start
000120c0 g       *ABS*	00000000 __ram_rodata_start
000113d0 g     F .text	00000158 alt_busy_sleep
00011d74 g     F .text	00000030 memcmp
0001281c g       *ABS*	00000000 __alt_stack_base
00010000 g       *ABS*	00000000 __alt_mem_memoria
00011628 g     F .text	000000a4 alt_dev_llist_insert
00010c90 g     F .text	000000b8 __sfvwrite_small_dev
000126f4 g       *ABS*	00000000 __bss_start
0001026c g     F .text	00000184 main
00012700 g     O .bss	00000004 alt_envp
000123ec g     O .rwdata	00000004 alt_errno
000112b8 g     F .text	00000118 alt_up_adc_read
000103f0 g     F .text	00000084 .hidden __divsi3
000120c0 g       *ABS*	00000000 __CTOR_END__
000120c0 g       *ABS*	00000000 __flash_rodata_start
000120c0 g       *ABS*	00000000 __DTOR_LIST__
00011050 g     F .text	00000038 alt_irq_init
00011d40 g     F .text	00000014 atexit
00010d48 g     F .text	00000058 _write_r
000123cc g     O .rwdata	00000004 _impure_ptr
000126f8 g     O .bss	00000004 alt_argc
00012704 g     O .bss	00000004 altera_avalon_timer_ts_base
0001172c g     F .text	00000060 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
000123d8 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
0001183c g     F .text	00000050 alt_ic_isr_register
000123fc g       *ABS*	00000000 _edata
0001281c g       *ABS*	00000000 _end
00010230 g       *ABS*	00000000 __ram_exceptions_end
00011914 g     F .text	0000008c alt_ic_irq_disable
00011d54 g     F .text	00000020 exit
00010474 g     F .text	00000074 .hidden __modsi3
00019c40 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
000123d4 g     O .rwdata	00000004 uart
0001208c g     F .text	00000034 _exit
000106c0 g     F .text	0000001c strlen
0001181c g     F .text	00000020 alt_icache_flush_all
000123f0 g     O .rwdata	00000004 alt_priority_mask
0001188c g     F .text	00000088 alt_ic_irq_enable
00010c74 g     F .text	0000001c __vfprintf_internal
000123f4 g     O .rwdata	00000008 alt_alarm_list
000116cc g     F .text	00000060 _do_ctors
00011564 g     F .text	0000003c close
00010e30 g     F .text	00000084 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408c14 	ori	at,at,560
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101d00 	call	101d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001426 	beq	r2,zero,1018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	00800074 	movhi	r2,1
   10140:	1089c704 	addi	r2,r2,10012
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	00800074 	movhi	r2,1
   10158:	1089c704 	addi	r2,r2,10012
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	1009883a 	mov	r4,r2
   10174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1017c:	0005313a 	rdctl	r2,ipending
   10180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	00000706 	br	101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1018c:	e0bffc17 	ldw	r2,-16(fp)
   10190:	1085883a 	add	r2,r2,r2
   10194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10198:	e0bffd17 	ldw	r2,-12(fp)
   1019c:	10800044 	addi	r2,r2,1
   101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a4:	003fe106 	br	1012c <_gp+0xffff5d64>

    active = alt_irq_pending ();
   101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101ac:	e0bffb17 	ldw	r2,-20(fp)
   101b0:	103fdb1e 	bne	r2,zero,10120 <_gp+0xffff5d58>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b4:	0001883a 	nop
}
   101b8:	0001883a 	nop
   101bc:	e037883a 	mov	sp,fp
   101c0:	dfc00117 	ldw	ra,4(sp)
   101c4:	df000017 	ldw	fp,0(sp)
   101c8:	dec00204 	addi	sp,sp,8
   101cc:	f800283a 	ret

000101d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101d0:	defffb04 	addi	sp,sp,-20
   101d4:	dfc00415 	stw	ra,16(sp)
   101d8:	df000315 	stw	fp,12(sp)
   101dc:	df000304 	addi	fp,sp,12
   101e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101e4:	00bfffc4 	movi	r2,-1
   101e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   101ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101f0:	d0a0d417 	ldw	r2,-31920(gp)
   101f4:	10000726 	beq	r2,zero,10214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101f8:	d0a0d417 	ldw	r2,-31920(gp)
   101fc:	e0fffd17 	ldw	r3,-12(fp)
   10200:	e1bffe17 	ldw	r6,-8(fp)
   10204:	e17fff17 	ldw	r5,-4(fp)
   10208:	1809883a 	mov	r4,r3
   1020c:	103ee83a 	callr	r2
   10210:	00000206 	br	1021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   10218:	0005883a 	mov	r2,zero
}
   1021c:	e037883a 	mov	sp,fp
   10220:	dfc00117 	ldw	ra,4(sp)
   10224:	df000017 	ldw	fp,0(sp)
   10228:	dec00204 	addi	sp,sp,8
   1022c:	f800283a 	ret

Disassembly of section .text:

00010230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10230:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10234:	dee71014 	ori	sp,sp,40000
    movhi gp, %hi(_gp)
   10238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1023c:	d6a8f214 	ori	gp,gp,41928
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10244:	1089bd14 	ori	r2,r2,9972

    movhi r3, %hi(__bss_end)
   10248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1024c:	18ca0714 	ori	r3,r3,10268

    beq r2, r3, 1f
   10250:	10c00326 	beq	r2,r3,10260 <_start+0x30>

0:
    stw zero, (r2)
   10254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1025c:	10fffd36 	bltu	r2,r3,10254 <_gp+0xffff5e8c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10260:	0010e300 	call	10e30 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10264:	0010eb40 	call	10eb4 <alt_main>

00010268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10268:	003fff06 	br	10268 <_gp+0xffff5ea0>

0001026c <main>:
#define hex_1 HEX_1_BASE
#define hex_2 HEX_2_BASE
#define hex_3 HEX_3_BASE

int main()
{
   1026c:	defff804 	addi	sp,sp,-32
   10270:	dfc00715 	stw	ra,28(sp)
   10274:	df000615 	stw	fp,24(sp)
   10278:	df000604 	addi	fp,sp,24
  alt_up_adc_dev *adc = alt_up_adc_open_dev("/dev/adc_1");
   1027c:	01000074 	movhi	r4,1
   10280:	21083004 	addi	r4,r4,8384
   10284:	001127c0 	call	1127c <alt_up_adc_open_dev>
   10288:	e0bffa15 	stw	r2,-24(fp)
  alt_up_adc_auto_disable(adc);
   1028c:	e0bffa17 	ldw	r2,-24(fp)
   10290:	10800a17 	ldw	r2,40(r2)
   10294:	10800104 	addi	r2,r2,4
   10298:	0007883a 	mov	r3,zero
   1029c:	10c00035 	stwio	r3,0(r2)
  printf("Hello from Nios II!\n");
   102a0:	01000074 	movhi	r4,1
   102a4:	21083304 	addi	r4,r4,8396
   102a8:	00106ac0 	call	106ac <puts>
  delay(100);
   102ac:	010000b4 	movhi	r4,2
   102b0:	2121a804 	addi	r4,r4,-31072
   102b4:	0010f140 	call	10f14 <usleep>
  while(1){
	    alt_up_adc_update(adc);
   102b8:	e0bffa17 	ldw	r2,-24(fp)
   102bc:	10800a17 	ldw	r2,40(r2)
   102c0:	0007883a 	mov	r3,zero
   102c4:	10c00035 	stwio	r3,0(r2)
	  	delay(100);
   102c8:	010000b4 	movhi	r4,2
   102cc:	2121a804 	addi	r4,r4,-31072
   102d0:	0010f140 	call	10f14 <usleep>
	  	int leitura = analogRead(adc, 0);
   102d4:	000b883a 	mov	r5,zero
   102d8:	e13ffa17 	ldw	r4,-24(fp)
   102dc:	00112b80 	call	112b8 <alt_up_adc_read>
   102e0:	e0bffb15 	stw	r2,-20(fp)
	  	int milhares = leitura/1000;
   102e4:	e0bffb17 	ldw	r2,-20(fp)
   102e8:	0140fa04 	movi	r5,1000
   102ec:	1009883a 	mov	r4,r2
   102f0:	00103f00 	call	103f0 <__divsi3>
   102f4:	e0bffc15 	stw	r2,-16(fp)
	  	int centenas = (leitura%1000)/100;
   102f8:	e0bffb17 	ldw	r2,-20(fp)
   102fc:	0140fa04 	movi	r5,1000
   10300:	1009883a 	mov	r4,r2
   10304:	00104740 	call	10474 <__modsi3>
   10308:	01401904 	movi	r5,100
   1030c:	1009883a 	mov	r4,r2
   10310:	00103f00 	call	103f0 <__divsi3>
   10314:	e0bffd15 	stw	r2,-12(fp)
	  	int dezenas = (leitura%100)/10;
   10318:	e0bffb17 	ldw	r2,-20(fp)
   1031c:	01401904 	movi	r5,100
   10320:	1009883a 	mov	r4,r2
   10324:	00104740 	call	10474 <__modsi3>
   10328:	01400284 	movi	r5,10
   1032c:	1009883a 	mov	r4,r2
   10330:	00103f00 	call	103f0 <__divsi3>
   10334:	e0bffe15 	stw	r2,-8(fp)
	  	int unidades = leitura%10;
   10338:	e0bffb17 	ldw	r2,-20(fp)
   1033c:	01400284 	movi	r5,10
   10340:	1009883a 	mov	r4,r2
   10344:	00104740 	call	10474 <__modsi3>
   10348:	e0bfff15 	stw	r2,-4(fp)

	  	printf("\nOK %u",leitura );
   1034c:	e17ffb17 	ldw	r5,-20(fp)
   10350:	01000074 	movhi	r4,1
   10354:	21083804 	addi	r4,r4,8416
   10358:	00105e00 	call	105e0 <printf>
	  	saida ( hex_0,decodif[unidades]);
   1035c:	00800074 	movhi	r2,1
   10360:	10884104 	addi	r2,r2,8452
   10364:	e0ffff17 	ldw	r3,-4(fp)
   10368:	10c5883a 	add	r2,r2,r3
   1036c:	10800003 	ldbu	r2,0(r2)
   10370:	10c03fcc 	andi	r3,r2,255
   10374:	008000b4 	movhi	r2,2
   10378:	10846004 	addi	r2,r2,4480
   1037c:	10c00035 	stwio	r3,0(r2)
	  	saida ( hex_1,decodif[dezenas]);
   10380:	00800074 	movhi	r2,1
   10384:	10884104 	addi	r2,r2,8452
   10388:	e0fffe17 	ldw	r3,-8(fp)
   1038c:	10c5883a 	add	r2,r2,r3
   10390:	10800003 	ldbu	r2,0(r2)
   10394:	10c03fcc 	andi	r3,r2,255
   10398:	008000b4 	movhi	r2,2
   1039c:	10844c04 	addi	r2,r2,4400
   103a0:	10c00035 	stwio	r3,0(r2)
	  	saida ( hex_2,decodif[centenas]);
   103a4:	00800074 	movhi	r2,1
   103a8:	10884104 	addi	r2,r2,8452
   103ac:	e0fffd17 	ldw	r3,-12(fp)
   103b0:	10c5883a 	add	r2,r2,r3
   103b4:	10800003 	ldbu	r2,0(r2)
   103b8:	10c03fcc 	andi	r3,r2,255
   103bc:	008000b4 	movhi	r2,2
   103c0:	10845004 	addi	r2,r2,4416
   103c4:	10c00035 	stwio	r3,0(r2)
	  	saida ( hex_3,decodif[milhares]);
   103c8:	00800074 	movhi	r2,1
   103cc:	10884104 	addi	r2,r2,8452
   103d0:	e0fffc17 	ldw	r3,-16(fp)
   103d4:	10c5883a 	add	r2,r2,r3
   103d8:	10800003 	ldbu	r2,0(r2)
   103dc:	10c03fcc 	andi	r3,r2,255
   103e0:	008000b4 	movhi	r2,2
   103e4:	10845404 	addi	r2,r2,4432
   103e8:	10c00035 	stwio	r3,0(r2)
  }
   103ec:	003fb206 	br	102b8 <_gp+0xffff5ef0>

000103f0 <__divsi3>:
   103f0:	20001b16 	blt	r4,zero,10460 <__divsi3+0x70>
   103f4:	000f883a 	mov	r7,zero
   103f8:	28001616 	blt	r5,zero,10454 <__divsi3+0x64>
   103fc:	200d883a 	mov	r6,r4
   10400:	29001a2e 	bgeu	r5,r4,1046c <__divsi3+0x7c>
   10404:	00800804 	movi	r2,32
   10408:	00c00044 	movi	r3,1
   1040c:	00000106 	br	10414 <__divsi3+0x24>
   10410:	10000d26 	beq	r2,zero,10448 <__divsi3+0x58>
   10414:	294b883a 	add	r5,r5,r5
   10418:	10bfffc4 	addi	r2,r2,-1
   1041c:	18c7883a 	add	r3,r3,r3
   10420:	293ffb36 	bltu	r5,r4,10410 <_gp+0xffff6048>
   10424:	0005883a 	mov	r2,zero
   10428:	18000726 	beq	r3,zero,10448 <__divsi3+0x58>
   1042c:	0005883a 	mov	r2,zero
   10430:	31400236 	bltu	r6,r5,1043c <__divsi3+0x4c>
   10434:	314dc83a 	sub	r6,r6,r5
   10438:	10c4b03a 	or	r2,r2,r3
   1043c:	1806d07a 	srli	r3,r3,1
   10440:	280ad07a 	srli	r5,r5,1
   10444:	183ffa1e 	bne	r3,zero,10430 <_gp+0xffff6068>
   10448:	38000126 	beq	r7,zero,10450 <__divsi3+0x60>
   1044c:	0085c83a 	sub	r2,zero,r2
   10450:	f800283a 	ret
   10454:	014bc83a 	sub	r5,zero,r5
   10458:	39c0005c 	xori	r7,r7,1
   1045c:	003fe706 	br	103fc <_gp+0xffff6034>
   10460:	0109c83a 	sub	r4,zero,r4
   10464:	01c00044 	movi	r7,1
   10468:	003fe306 	br	103f8 <_gp+0xffff6030>
   1046c:	00c00044 	movi	r3,1
   10470:	003fee06 	br	1042c <_gp+0xffff6064>

00010474 <__modsi3>:
   10474:	20001716 	blt	r4,zero,104d4 <__modsi3+0x60>
   10478:	000f883a 	mov	r7,zero
   1047c:	2005883a 	mov	r2,r4
   10480:	28001216 	blt	r5,zero,104cc <__modsi3+0x58>
   10484:	2900162e 	bgeu	r5,r4,104e0 <__modsi3+0x6c>
   10488:	01800804 	movi	r6,32
   1048c:	00c00044 	movi	r3,1
   10490:	00000106 	br	10498 <__modsi3+0x24>
   10494:	30000a26 	beq	r6,zero,104c0 <__modsi3+0x4c>
   10498:	294b883a 	add	r5,r5,r5
   1049c:	31bfffc4 	addi	r6,r6,-1
   104a0:	18c7883a 	add	r3,r3,r3
   104a4:	293ffb36 	bltu	r5,r4,10494 <_gp+0xffff60cc>
   104a8:	18000526 	beq	r3,zero,104c0 <__modsi3+0x4c>
   104ac:	1806d07a 	srli	r3,r3,1
   104b0:	11400136 	bltu	r2,r5,104b8 <__modsi3+0x44>
   104b4:	1145c83a 	sub	r2,r2,r5
   104b8:	280ad07a 	srli	r5,r5,1
   104bc:	183ffb1e 	bne	r3,zero,104ac <_gp+0xffff60e4>
   104c0:	38000126 	beq	r7,zero,104c8 <__modsi3+0x54>
   104c4:	0085c83a 	sub	r2,zero,r2
   104c8:	f800283a 	ret
   104cc:	014bc83a 	sub	r5,zero,r5
   104d0:	003fec06 	br	10484 <_gp+0xffff60bc>
   104d4:	0109c83a 	sub	r4,zero,r4
   104d8:	01c00044 	movi	r7,1
   104dc:	003fe706 	br	1047c <_gp+0xffff60b4>
   104e0:	00c00044 	movi	r3,1
   104e4:	003ff106 	br	104ac <_gp+0xffff60e4>

000104e8 <__udivsi3>:
   104e8:	200d883a 	mov	r6,r4
   104ec:	2900152e 	bgeu	r5,r4,10544 <__udivsi3+0x5c>
   104f0:	28001416 	blt	r5,zero,10544 <__udivsi3+0x5c>
   104f4:	00800804 	movi	r2,32
   104f8:	00c00044 	movi	r3,1
   104fc:	00000206 	br	10508 <__udivsi3+0x20>
   10500:	10000e26 	beq	r2,zero,1053c <__udivsi3+0x54>
   10504:	28000516 	blt	r5,zero,1051c <__udivsi3+0x34>
   10508:	294b883a 	add	r5,r5,r5
   1050c:	10bfffc4 	addi	r2,r2,-1
   10510:	18c7883a 	add	r3,r3,r3
   10514:	293ffa36 	bltu	r5,r4,10500 <_gp+0xffff6138>
   10518:	18000826 	beq	r3,zero,1053c <__udivsi3+0x54>
   1051c:	0005883a 	mov	r2,zero
   10520:	31400236 	bltu	r6,r5,1052c <__udivsi3+0x44>
   10524:	314dc83a 	sub	r6,r6,r5
   10528:	10c4b03a 	or	r2,r2,r3
   1052c:	1806d07a 	srli	r3,r3,1
   10530:	280ad07a 	srli	r5,r5,1
   10534:	183ffa1e 	bne	r3,zero,10520 <_gp+0xffff6158>
   10538:	f800283a 	ret
   1053c:	0005883a 	mov	r2,zero
   10540:	f800283a 	ret
   10544:	00c00044 	movi	r3,1
   10548:	003ff406 	br	1051c <_gp+0xffff6154>

0001054c <__umodsi3>:
   1054c:	2005883a 	mov	r2,r4
   10550:	2900122e 	bgeu	r5,r4,1059c <__umodsi3+0x50>
   10554:	28001116 	blt	r5,zero,1059c <__umodsi3+0x50>
   10558:	01800804 	movi	r6,32
   1055c:	00c00044 	movi	r3,1
   10560:	00000206 	br	1056c <__umodsi3+0x20>
   10564:	30000c26 	beq	r6,zero,10598 <__umodsi3+0x4c>
   10568:	28000516 	blt	r5,zero,10580 <__umodsi3+0x34>
   1056c:	294b883a 	add	r5,r5,r5
   10570:	31bfffc4 	addi	r6,r6,-1
   10574:	18c7883a 	add	r3,r3,r3
   10578:	293ffa36 	bltu	r5,r4,10564 <_gp+0xffff619c>
   1057c:	18000626 	beq	r3,zero,10598 <__umodsi3+0x4c>
   10580:	1806d07a 	srli	r3,r3,1
   10584:	11400136 	bltu	r2,r5,1058c <__umodsi3+0x40>
   10588:	1145c83a 	sub	r2,r2,r5
   1058c:	280ad07a 	srli	r5,r5,1
   10590:	183ffb1e 	bne	r3,zero,10580 <_gp+0xffff61b8>
   10594:	f800283a 	ret
   10598:	f800283a 	ret
   1059c:	00c00044 	movi	r3,1
   105a0:	003ff706 	br	10580 <_gp+0xffff61b8>

000105a4 <_printf_r>:
   105a4:	defffd04 	addi	sp,sp,-12
   105a8:	dfc00015 	stw	ra,0(sp)
   105ac:	d9800115 	stw	r6,4(sp)
   105b0:	d9c00215 	stw	r7,8(sp)
   105b4:	20c00217 	ldw	r3,8(r4)
   105b8:	01800074 	movhi	r6,1
   105bc:	31832404 	addi	r6,r6,3216
   105c0:	19800115 	stw	r6,4(r3)
   105c4:	280d883a 	mov	r6,r5
   105c8:	21400217 	ldw	r5,8(r4)
   105cc:	d9c00104 	addi	r7,sp,4
   105d0:	00107480 	call	10748 <___vfprintf_internal_r>
   105d4:	dfc00017 	ldw	ra,0(sp)
   105d8:	dec00304 	addi	sp,sp,12
   105dc:	f800283a 	ret

000105e0 <printf>:
   105e0:	defffc04 	addi	sp,sp,-16
   105e4:	dfc00015 	stw	ra,0(sp)
   105e8:	d9400115 	stw	r5,4(sp)
   105ec:	d9800215 	stw	r6,8(sp)
   105f0:	d9c00315 	stw	r7,12(sp)
   105f4:	00800074 	movhi	r2,1
   105f8:	1088f304 	addi	r2,r2,9164
   105fc:	10800017 	ldw	r2,0(r2)
   10600:	01400074 	movhi	r5,1
   10604:	29432404 	addi	r5,r5,3216
   10608:	10c00217 	ldw	r3,8(r2)
   1060c:	d9800104 	addi	r6,sp,4
   10610:	19400115 	stw	r5,4(r3)
   10614:	200b883a 	mov	r5,r4
   10618:	11000217 	ldw	r4,8(r2)
   1061c:	0010c740 	call	10c74 <__vfprintf_internal>
   10620:	dfc00017 	ldw	ra,0(sp)
   10624:	dec00404 	addi	sp,sp,16
   10628:	f800283a 	ret

0001062c <_puts_r>:
   1062c:	defffd04 	addi	sp,sp,-12
   10630:	dc000015 	stw	r16,0(sp)
   10634:	2021883a 	mov	r16,r4
   10638:	2809883a 	mov	r4,r5
   1063c:	dfc00215 	stw	ra,8(sp)
   10640:	dc400115 	stw	r17,4(sp)
   10644:	2823883a 	mov	r17,r5
   10648:	00106c00 	call	106c0 <strlen>
   1064c:	81400217 	ldw	r5,8(r16)
   10650:	01000074 	movhi	r4,1
   10654:	21032404 	addi	r4,r4,3216
   10658:	29000115 	stw	r4,4(r5)
   1065c:	100f883a 	mov	r7,r2
   10660:	880d883a 	mov	r6,r17
   10664:	8009883a 	mov	r4,r16
   10668:	0010c900 	call	10c90 <__sfvwrite_small_dev>
   1066c:	00ffffc4 	movi	r3,-1
   10670:	10c00926 	beq	r2,r3,10698 <_puts_r+0x6c>
   10674:	81400217 	ldw	r5,8(r16)
   10678:	01800074 	movhi	r6,1
   1067c:	01c00044 	movi	r7,1
   10680:	28800117 	ldw	r2,4(r5)
   10684:	31883a04 	addi	r6,r6,8424
   10688:	8009883a 	mov	r4,r16
   1068c:	103ee83a 	callr	r2
   10690:	10bfffe0 	cmpeqi	r2,r2,-1
   10694:	0085c83a 	sub	r2,zero,r2
   10698:	dfc00217 	ldw	ra,8(sp)
   1069c:	dc400117 	ldw	r17,4(sp)
   106a0:	dc000017 	ldw	r16,0(sp)
   106a4:	dec00304 	addi	sp,sp,12
   106a8:	f800283a 	ret

000106ac <puts>:
   106ac:	00800074 	movhi	r2,1
   106b0:	1088f304 	addi	r2,r2,9164
   106b4:	200b883a 	mov	r5,r4
   106b8:	11000017 	ldw	r4,0(r2)
   106bc:	001062c1 	jmpi	1062c <_puts_r>

000106c0 <strlen>:
   106c0:	2005883a 	mov	r2,r4
   106c4:	10c00007 	ldb	r3,0(r2)
   106c8:	18000226 	beq	r3,zero,106d4 <strlen+0x14>
   106cc:	10800044 	addi	r2,r2,1
   106d0:	003ffc06 	br	106c4 <_gp+0xffff62fc>
   106d4:	1105c83a 	sub	r2,r2,r4
   106d8:	f800283a 	ret

000106dc <print_repeat>:
   106dc:	defffb04 	addi	sp,sp,-20
   106e0:	dc800315 	stw	r18,12(sp)
   106e4:	dc400215 	stw	r17,8(sp)
   106e8:	dc000115 	stw	r16,4(sp)
   106ec:	dfc00415 	stw	ra,16(sp)
   106f0:	2025883a 	mov	r18,r4
   106f4:	2823883a 	mov	r17,r5
   106f8:	d9800005 	stb	r6,0(sp)
   106fc:	3821883a 	mov	r16,r7
   10700:	04000a0e 	bge	zero,r16,1072c <print_repeat+0x50>
   10704:	88800117 	ldw	r2,4(r17)
   10708:	01c00044 	movi	r7,1
   1070c:	d80d883a 	mov	r6,sp
   10710:	880b883a 	mov	r5,r17
   10714:	9009883a 	mov	r4,r18
   10718:	103ee83a 	callr	r2
   1071c:	843fffc4 	addi	r16,r16,-1
   10720:	103ff726 	beq	r2,zero,10700 <_gp+0xffff6338>
   10724:	00bfffc4 	movi	r2,-1
   10728:	00000106 	br	10730 <print_repeat+0x54>
   1072c:	0005883a 	mov	r2,zero
   10730:	dfc00417 	ldw	ra,16(sp)
   10734:	dc800317 	ldw	r18,12(sp)
   10738:	dc400217 	ldw	r17,8(sp)
   1073c:	dc000117 	ldw	r16,4(sp)
   10740:	dec00504 	addi	sp,sp,20
   10744:	f800283a 	ret

00010748 <___vfprintf_internal_r>:
   10748:	deffe504 	addi	sp,sp,-108
   1074c:	d8c00804 	addi	r3,sp,32
   10750:	ddc01815 	stw	r23,96(sp)
   10754:	dd801715 	stw	r22,92(sp)
   10758:	dd401615 	stw	r21,88(sp)
   1075c:	dd001515 	stw	r20,84(sp)
   10760:	dcc01415 	stw	r19,80(sp)
   10764:	dc801315 	stw	r18,76(sp)
   10768:	dc401215 	stw	r17,72(sp)
   1076c:	dc001115 	stw	r16,68(sp)
   10770:	dfc01a15 	stw	ra,104(sp)
   10774:	df001915 	stw	fp,100(sp)
   10778:	2029883a 	mov	r20,r4
   1077c:	2823883a 	mov	r17,r5
   10780:	382d883a 	mov	r22,r7
   10784:	d9800f15 	stw	r6,60(sp)
   10788:	0021883a 	mov	r16,zero
   1078c:	d8000e15 	stw	zero,56(sp)
   10790:	d8000a15 	stw	zero,40(sp)
   10794:	002b883a 	mov	r21,zero
   10798:	0027883a 	mov	r19,zero
   1079c:	0025883a 	mov	r18,zero
   107a0:	d8000c15 	stw	zero,48(sp)
   107a4:	d8000b15 	stw	zero,44(sp)
   107a8:	002f883a 	mov	r23,zero
   107ac:	d8c00915 	stw	r3,36(sp)
   107b0:	d8c00f17 	ldw	r3,60(sp)
   107b4:	19000003 	ldbu	r4,0(r3)
   107b8:	20803fcc 	andi	r2,r4,255
   107bc:	1080201c 	xori	r2,r2,128
   107c0:	10bfe004 	addi	r2,r2,-128
   107c4:	10011e26 	beq	r2,zero,10c40 <___vfprintf_internal_r+0x4f8>
   107c8:	00c00044 	movi	r3,1
   107cc:	b8c01426 	beq	r23,r3,10820 <___vfprintf_internal_r+0xd8>
   107d0:	1dc00216 	blt	r3,r23,107dc <___vfprintf_internal_r+0x94>
   107d4:	b8000626 	beq	r23,zero,107f0 <___vfprintf_internal_r+0xa8>
   107d8:	00011506 	br	10c30 <___vfprintf_internal_r+0x4e8>
   107dc:	01400084 	movi	r5,2
   107e0:	b9401d26 	beq	r23,r5,10858 <___vfprintf_internal_r+0x110>
   107e4:	014000c4 	movi	r5,3
   107e8:	b9402b26 	beq	r23,r5,10898 <___vfprintf_internal_r+0x150>
   107ec:	00011006 	br	10c30 <___vfprintf_internal_r+0x4e8>
   107f0:	01400944 	movi	r5,37
   107f4:	1140fc26 	beq	r2,r5,10be8 <___vfprintf_internal_r+0x4a0>
   107f8:	88800117 	ldw	r2,4(r17)
   107fc:	d9000005 	stb	r4,0(sp)
   10800:	01c00044 	movi	r7,1
   10804:	d80d883a 	mov	r6,sp
   10808:	880b883a 	mov	r5,r17
   1080c:	a009883a 	mov	r4,r20
   10810:	103ee83a 	callr	r2
   10814:	1000d81e 	bne	r2,zero,10b78 <___vfprintf_internal_r+0x430>
   10818:	84000044 	addi	r16,r16,1
   1081c:	00010406 	br	10c30 <___vfprintf_internal_r+0x4e8>
   10820:	01400c04 	movi	r5,48
   10824:	1140fa26 	beq	r2,r5,10c10 <___vfprintf_internal_r+0x4c8>
   10828:	01400944 	movi	r5,37
   1082c:	11400a1e 	bne	r2,r5,10858 <___vfprintf_internal_r+0x110>
   10830:	d8800005 	stb	r2,0(sp)
   10834:	88800117 	ldw	r2,4(r17)
   10838:	b80f883a 	mov	r7,r23
   1083c:	d80d883a 	mov	r6,sp
   10840:	880b883a 	mov	r5,r17
   10844:	a009883a 	mov	r4,r20
   10848:	103ee83a 	callr	r2
   1084c:	1000ca1e 	bne	r2,zero,10b78 <___vfprintf_internal_r+0x430>
   10850:	84000044 	addi	r16,r16,1
   10854:	0000f506 	br	10c2c <___vfprintf_internal_r+0x4e4>
   10858:	25fff404 	addi	r23,r4,-48
   1085c:	bdc03fcc 	andi	r23,r23,255
   10860:	00c00244 	movi	r3,9
   10864:	1dc00936 	bltu	r3,r23,1088c <___vfprintf_internal_r+0x144>
   10868:	00bfffc4 	movi	r2,-1
   1086c:	90800426 	beq	r18,r2,10880 <___vfprintf_internal_r+0x138>
   10870:	01400284 	movi	r5,10
   10874:	9009883a 	mov	r4,r18
   10878:	0010da00 	call	10da0 <__mulsi3>
   1087c:	00000106 	br	10884 <___vfprintf_internal_r+0x13c>
   10880:	0005883a 	mov	r2,zero
   10884:	b8a5883a 	add	r18,r23,r2
   10888:	0000e206 	br	10c14 <___vfprintf_internal_r+0x4cc>
   1088c:	01400b84 	movi	r5,46
   10890:	1140e426 	beq	r2,r5,10c24 <___vfprintf_internal_r+0x4dc>
   10894:	05c00084 	movi	r23,2
   10898:	213ff404 	addi	r4,r4,-48
   1089c:	27003fcc 	andi	fp,r4,255
   108a0:	00c00244 	movi	r3,9
   108a4:	1f000936 	bltu	r3,fp,108cc <___vfprintf_internal_r+0x184>
   108a8:	00bfffc4 	movi	r2,-1
   108ac:	98800426 	beq	r19,r2,108c0 <___vfprintf_internal_r+0x178>
   108b0:	01400284 	movi	r5,10
   108b4:	9809883a 	mov	r4,r19
   108b8:	0010da00 	call	10da0 <__mulsi3>
   108bc:	00000106 	br	108c4 <___vfprintf_internal_r+0x17c>
   108c0:	0005883a 	mov	r2,zero
   108c4:	e0a7883a 	add	r19,fp,r2
   108c8:	0000d906 	br	10c30 <___vfprintf_internal_r+0x4e8>
   108cc:	00c01b04 	movi	r3,108
   108d0:	10c0d226 	beq	r2,r3,10c1c <___vfprintf_internal_r+0x4d4>
   108d4:	013fffc4 	movi	r4,-1
   108d8:	99000226 	beq	r19,r4,108e4 <___vfprintf_internal_r+0x19c>
   108dc:	d8000b15 	stw	zero,44(sp)
   108e0:	00000106 	br	108e8 <___vfprintf_internal_r+0x1a0>
   108e4:	04c00044 	movi	r19,1
   108e8:	01001a44 	movi	r4,105
   108ec:	11001626 	beq	r2,r4,10948 <___vfprintf_internal_r+0x200>
   108f0:	20800916 	blt	r4,r2,10918 <___vfprintf_internal_r+0x1d0>
   108f4:	010018c4 	movi	r4,99
   108f8:	11008826 	beq	r2,r4,10b1c <___vfprintf_internal_r+0x3d4>
   108fc:	01001904 	movi	r4,100
   10900:	11001126 	beq	r2,r4,10948 <___vfprintf_internal_r+0x200>
   10904:	01001604 	movi	r4,88
   10908:	1100c81e 	bne	r2,r4,10c2c <___vfprintf_internal_r+0x4e4>
   1090c:	00c00044 	movi	r3,1
   10910:	d8c00e15 	stw	r3,56(sp)
   10914:	00001506 	br	1096c <___vfprintf_internal_r+0x224>
   10918:	01001cc4 	movi	r4,115
   1091c:	11009826 	beq	r2,r4,10b80 <___vfprintf_internal_r+0x438>
   10920:	20800416 	blt	r4,r2,10934 <___vfprintf_internal_r+0x1ec>
   10924:	01001bc4 	movi	r4,111
   10928:	1100c01e 	bne	r2,r4,10c2c <___vfprintf_internal_r+0x4e4>
   1092c:	05400204 	movi	r21,8
   10930:	00000f06 	br	10970 <___vfprintf_internal_r+0x228>
   10934:	01001d44 	movi	r4,117
   10938:	11000d26 	beq	r2,r4,10970 <___vfprintf_internal_r+0x228>
   1093c:	01001e04 	movi	r4,120
   10940:	11000a26 	beq	r2,r4,1096c <___vfprintf_internal_r+0x224>
   10944:	0000b906 	br	10c2c <___vfprintf_internal_r+0x4e4>
   10948:	d8c00a17 	ldw	r3,40(sp)
   1094c:	b7000104 	addi	fp,r22,4
   10950:	18000726 	beq	r3,zero,10970 <___vfprintf_internal_r+0x228>
   10954:	df000d15 	stw	fp,52(sp)
   10958:	b5c00017 	ldw	r23,0(r22)
   1095c:	b800080e 	bge	r23,zero,10980 <___vfprintf_internal_r+0x238>
   10960:	05efc83a 	sub	r23,zero,r23
   10964:	02400044 	movi	r9,1
   10968:	00000606 	br	10984 <___vfprintf_internal_r+0x23c>
   1096c:	05400404 	movi	r21,16
   10970:	b0c00104 	addi	r3,r22,4
   10974:	d8c00d15 	stw	r3,52(sp)
   10978:	b5c00017 	ldw	r23,0(r22)
   1097c:	d8000a15 	stw	zero,40(sp)
   10980:	0013883a 	mov	r9,zero
   10984:	d839883a 	mov	fp,sp
   10988:	b8001726 	beq	r23,zero,109e8 <___vfprintf_internal_r+0x2a0>
   1098c:	a80b883a 	mov	r5,r21
   10990:	b809883a 	mov	r4,r23
   10994:	da401015 	stw	r9,64(sp)
   10998:	00104e80 	call	104e8 <__udivsi3>
   1099c:	a80b883a 	mov	r5,r21
   109a0:	1009883a 	mov	r4,r2
   109a4:	102d883a 	mov	r22,r2
   109a8:	0010da00 	call	10da0 <__mulsi3>
   109ac:	b885c83a 	sub	r2,r23,r2
   109b0:	00c00244 	movi	r3,9
   109b4:	da401017 	ldw	r9,64(sp)
   109b8:	18800216 	blt	r3,r2,109c4 <___vfprintf_internal_r+0x27c>
   109bc:	10800c04 	addi	r2,r2,48
   109c0:	00000506 	br	109d8 <___vfprintf_internal_r+0x290>
   109c4:	d8c00e17 	ldw	r3,56(sp)
   109c8:	18000226 	beq	r3,zero,109d4 <___vfprintf_internal_r+0x28c>
   109cc:	10800dc4 	addi	r2,r2,55
   109d0:	00000106 	br	109d8 <___vfprintf_internal_r+0x290>
   109d4:	108015c4 	addi	r2,r2,87
   109d8:	e0800005 	stb	r2,0(fp)
   109dc:	b02f883a 	mov	r23,r22
   109e0:	e7000044 	addi	fp,fp,1
   109e4:	003fe806 	br	10988 <_gp+0xffff65c0>
   109e8:	e6efc83a 	sub	r23,fp,sp
   109ec:	9dc5c83a 	sub	r2,r19,r23
   109f0:	0080090e 	bge	zero,r2,10a18 <___vfprintf_internal_r+0x2d0>
   109f4:	e085883a 	add	r2,fp,r2
   109f8:	01400c04 	movi	r5,48
   109fc:	d8c00917 	ldw	r3,36(sp)
   10a00:	e009883a 	mov	r4,fp
   10a04:	e0c0032e 	bgeu	fp,r3,10a14 <___vfprintf_internal_r+0x2cc>
   10a08:	e7000044 	addi	fp,fp,1
   10a0c:	21400005 	stb	r5,0(r4)
   10a10:	e0bffa1e 	bne	fp,r2,109fc <_gp+0xffff6634>
   10a14:	e6efc83a 	sub	r23,fp,sp
   10a18:	d8c00b17 	ldw	r3,44(sp)
   10a1c:	4dd1883a 	add	r8,r9,r23
   10a20:	922dc83a 	sub	r22,r18,r8
   10a24:	18001626 	beq	r3,zero,10a80 <___vfprintf_internal_r+0x338>
   10a28:	48000a26 	beq	r9,zero,10a54 <___vfprintf_internal_r+0x30c>
   10a2c:	00800b44 	movi	r2,45
   10a30:	d8800805 	stb	r2,32(sp)
   10a34:	88800117 	ldw	r2,4(r17)
   10a38:	01c00044 	movi	r7,1
   10a3c:	d9800804 	addi	r6,sp,32
   10a40:	880b883a 	mov	r5,r17
   10a44:	a009883a 	mov	r4,r20
   10a48:	103ee83a 	callr	r2
   10a4c:	10004a1e 	bne	r2,zero,10b78 <___vfprintf_internal_r+0x430>
   10a50:	84000044 	addi	r16,r16,1
   10a54:	0580070e 	bge	zero,r22,10a74 <___vfprintf_internal_r+0x32c>
   10a58:	b00f883a 	mov	r7,r22
   10a5c:	01800c04 	movi	r6,48
   10a60:	880b883a 	mov	r5,r17
   10a64:	a009883a 	mov	r4,r20
   10a68:	00106dc0 	call	106dc <print_repeat>
   10a6c:	1000421e 	bne	r2,zero,10b78 <___vfprintf_internal_r+0x430>
   10a70:	85a1883a 	add	r16,r16,r22
   10a74:	e02d883a 	mov	r22,fp
   10a78:	bf2fc83a 	sub	r23,r23,fp
   10a7c:	00002006 	br	10b00 <___vfprintf_internal_r+0x3b8>
   10a80:	0580090e 	bge	zero,r22,10aa8 <___vfprintf_internal_r+0x360>
   10a84:	b00f883a 	mov	r7,r22
   10a88:	01800804 	movi	r6,32
   10a8c:	880b883a 	mov	r5,r17
   10a90:	a009883a 	mov	r4,r20
   10a94:	da401015 	stw	r9,64(sp)
   10a98:	00106dc0 	call	106dc <print_repeat>
   10a9c:	da401017 	ldw	r9,64(sp)
   10aa0:	1000351e 	bne	r2,zero,10b78 <___vfprintf_internal_r+0x430>
   10aa4:	85a1883a 	add	r16,r16,r22
   10aa8:	483ff226 	beq	r9,zero,10a74 <_gp+0xffff66ac>
   10aac:	00800b44 	movi	r2,45
   10ab0:	d8800805 	stb	r2,32(sp)
   10ab4:	88800117 	ldw	r2,4(r17)
   10ab8:	01c00044 	movi	r7,1
   10abc:	d9800804 	addi	r6,sp,32
   10ac0:	880b883a 	mov	r5,r17
   10ac4:	a009883a 	mov	r4,r20
   10ac8:	103ee83a 	callr	r2
   10acc:	10002a1e 	bne	r2,zero,10b78 <___vfprintf_internal_r+0x430>
   10ad0:	84000044 	addi	r16,r16,1
   10ad4:	003fe706 	br	10a74 <_gp+0xffff66ac>
   10ad8:	b5bfffc4 	addi	r22,r22,-1
   10adc:	b0800003 	ldbu	r2,0(r22)
   10ae0:	01c00044 	movi	r7,1
   10ae4:	d9800804 	addi	r6,sp,32
   10ae8:	d8800805 	stb	r2,32(sp)
   10aec:	88800117 	ldw	r2,4(r17)
   10af0:	880b883a 	mov	r5,r17
   10af4:	a009883a 	mov	r4,r20
   10af8:	103ee83a 	callr	r2
   10afc:	10001e1e 	bne	r2,zero,10b78 <___vfprintf_internal_r+0x430>
   10b00:	8585c83a 	sub	r2,r16,r22
   10b04:	b5c9883a 	add	r4,r22,r23
   10b08:	e085883a 	add	r2,fp,r2
   10b0c:	013ff216 	blt	zero,r4,10ad8 <_gp+0xffff6710>
   10b10:	1021883a 	mov	r16,r2
   10b14:	dd800d17 	ldw	r22,52(sp)
   10b18:	00004406 	br	10c2c <___vfprintf_internal_r+0x4e4>
   10b1c:	00800044 	movi	r2,1
   10b20:	1480080e 	bge	r2,r18,10b44 <___vfprintf_internal_r+0x3fc>
   10b24:	95ffffc4 	addi	r23,r18,-1
   10b28:	b80f883a 	mov	r7,r23
   10b2c:	01800804 	movi	r6,32
   10b30:	880b883a 	mov	r5,r17
   10b34:	a009883a 	mov	r4,r20
   10b38:	00106dc0 	call	106dc <print_repeat>
   10b3c:	10000e1e 	bne	r2,zero,10b78 <___vfprintf_internal_r+0x430>
   10b40:	85e1883a 	add	r16,r16,r23
   10b44:	b0800017 	ldw	r2,0(r22)
   10b48:	01c00044 	movi	r7,1
   10b4c:	d80d883a 	mov	r6,sp
   10b50:	d8800005 	stb	r2,0(sp)
   10b54:	88800117 	ldw	r2,4(r17)
   10b58:	880b883a 	mov	r5,r17
   10b5c:	a009883a 	mov	r4,r20
   10b60:	b5c00104 	addi	r23,r22,4
   10b64:	103ee83a 	callr	r2
   10b68:	1000031e 	bne	r2,zero,10b78 <___vfprintf_internal_r+0x430>
   10b6c:	84000044 	addi	r16,r16,1
   10b70:	b82d883a 	mov	r22,r23
   10b74:	00002d06 	br	10c2c <___vfprintf_internal_r+0x4e4>
   10b78:	00bfffc4 	movi	r2,-1
   10b7c:	00003106 	br	10c44 <___vfprintf_internal_r+0x4fc>
   10b80:	b5c00017 	ldw	r23,0(r22)
   10b84:	b7000104 	addi	fp,r22,4
   10b88:	b809883a 	mov	r4,r23
   10b8c:	00106c00 	call	106c0 <strlen>
   10b90:	9091c83a 	sub	r8,r18,r2
   10b94:	102d883a 	mov	r22,r2
   10b98:	0200090e 	bge	zero,r8,10bc0 <___vfprintf_internal_r+0x478>
   10b9c:	400f883a 	mov	r7,r8
   10ba0:	01800804 	movi	r6,32
   10ba4:	880b883a 	mov	r5,r17
   10ba8:	a009883a 	mov	r4,r20
   10bac:	da001015 	stw	r8,64(sp)
   10bb0:	00106dc0 	call	106dc <print_repeat>
   10bb4:	da001017 	ldw	r8,64(sp)
   10bb8:	103fef1e 	bne	r2,zero,10b78 <_gp+0xffff67b0>
   10bbc:	8221883a 	add	r16,r16,r8
   10bc0:	88800117 	ldw	r2,4(r17)
   10bc4:	b00f883a 	mov	r7,r22
   10bc8:	b80d883a 	mov	r6,r23
   10bcc:	880b883a 	mov	r5,r17
   10bd0:	a009883a 	mov	r4,r20
   10bd4:	103ee83a 	callr	r2
   10bd8:	103fe71e 	bne	r2,zero,10b78 <_gp+0xffff67b0>
   10bdc:	85a1883a 	add	r16,r16,r22
   10be0:	e02d883a 	mov	r22,fp
   10be4:	00001106 	br	10c2c <___vfprintf_internal_r+0x4e4>
   10be8:	00c00044 	movi	r3,1
   10bec:	04ffffc4 	movi	r19,-1
   10bf0:	d8000e15 	stw	zero,56(sp)
   10bf4:	d8c00a15 	stw	r3,40(sp)
   10bf8:	05400284 	movi	r21,10
   10bfc:	9825883a 	mov	r18,r19
   10c00:	d8000c15 	stw	zero,48(sp)
   10c04:	d8000b15 	stw	zero,44(sp)
   10c08:	182f883a 	mov	r23,r3
   10c0c:	00000806 	br	10c30 <___vfprintf_internal_r+0x4e8>
   10c10:	ddc00b15 	stw	r23,44(sp)
   10c14:	05c00084 	movi	r23,2
   10c18:	00000506 	br	10c30 <___vfprintf_internal_r+0x4e8>
   10c1c:	00c00044 	movi	r3,1
   10c20:	d8c00c15 	stw	r3,48(sp)
   10c24:	05c000c4 	movi	r23,3
   10c28:	00000106 	br	10c30 <___vfprintf_internal_r+0x4e8>
   10c2c:	002f883a 	mov	r23,zero
   10c30:	d8c00f17 	ldw	r3,60(sp)
   10c34:	18c00044 	addi	r3,r3,1
   10c38:	d8c00f15 	stw	r3,60(sp)
   10c3c:	003edc06 	br	107b0 <_gp+0xffff63e8>
   10c40:	8005883a 	mov	r2,r16
   10c44:	dfc01a17 	ldw	ra,104(sp)
   10c48:	df001917 	ldw	fp,100(sp)
   10c4c:	ddc01817 	ldw	r23,96(sp)
   10c50:	dd801717 	ldw	r22,92(sp)
   10c54:	dd401617 	ldw	r21,88(sp)
   10c58:	dd001517 	ldw	r20,84(sp)
   10c5c:	dcc01417 	ldw	r19,80(sp)
   10c60:	dc801317 	ldw	r18,76(sp)
   10c64:	dc401217 	ldw	r17,72(sp)
   10c68:	dc001117 	ldw	r16,68(sp)
   10c6c:	dec01b04 	addi	sp,sp,108
   10c70:	f800283a 	ret

00010c74 <__vfprintf_internal>:
   10c74:	00800074 	movhi	r2,1
   10c78:	1088f304 	addi	r2,r2,9164
   10c7c:	300f883a 	mov	r7,r6
   10c80:	280d883a 	mov	r6,r5
   10c84:	200b883a 	mov	r5,r4
   10c88:	11000017 	ldw	r4,0(r2)
   10c8c:	00107481 	jmpi	10748 <___vfprintf_internal_r>

00010c90 <__sfvwrite_small_dev>:
   10c90:	2880000b 	ldhu	r2,0(r5)
   10c94:	1080020c 	andi	r2,r2,8
   10c98:	10002126 	beq	r2,zero,10d20 <__sfvwrite_small_dev+0x90>
   10c9c:	2880008f 	ldh	r2,2(r5)
   10ca0:	defffa04 	addi	sp,sp,-24
   10ca4:	dc000015 	stw	r16,0(sp)
   10ca8:	dfc00515 	stw	ra,20(sp)
   10cac:	dd000415 	stw	r20,16(sp)
   10cb0:	dcc00315 	stw	r19,12(sp)
   10cb4:	dc800215 	stw	r18,8(sp)
   10cb8:	dc400115 	stw	r17,4(sp)
   10cbc:	2821883a 	mov	r16,r5
   10cc0:	10001216 	blt	r2,zero,10d0c <__sfvwrite_small_dev+0x7c>
   10cc4:	2027883a 	mov	r19,r4
   10cc8:	3025883a 	mov	r18,r6
   10ccc:	3823883a 	mov	r17,r7
   10cd0:	05010004 	movi	r20,1024
   10cd4:	04400b0e 	bge	zero,r17,10d04 <__sfvwrite_small_dev+0x74>
   10cd8:	880f883a 	mov	r7,r17
   10cdc:	a440010e 	bge	r20,r17,10ce4 <__sfvwrite_small_dev+0x54>
   10ce0:	01c10004 	movi	r7,1024
   10ce4:	8140008f 	ldh	r5,2(r16)
   10ce8:	900d883a 	mov	r6,r18
   10cec:	9809883a 	mov	r4,r19
   10cf0:	0010d480 	call	10d48 <_write_r>
   10cf4:	0080050e 	bge	zero,r2,10d0c <__sfvwrite_small_dev+0x7c>
   10cf8:	88a3c83a 	sub	r17,r17,r2
   10cfc:	90a5883a 	add	r18,r18,r2
   10d00:	003ff406 	br	10cd4 <_gp+0xffff690c>
   10d04:	0005883a 	mov	r2,zero
   10d08:	00000706 	br	10d28 <__sfvwrite_small_dev+0x98>
   10d0c:	8080000b 	ldhu	r2,0(r16)
   10d10:	10801014 	ori	r2,r2,64
   10d14:	8080000d 	sth	r2,0(r16)
   10d18:	00bfffc4 	movi	r2,-1
   10d1c:	00000206 	br	10d28 <__sfvwrite_small_dev+0x98>
   10d20:	00bfffc4 	movi	r2,-1
   10d24:	f800283a 	ret
   10d28:	dfc00517 	ldw	ra,20(sp)
   10d2c:	dd000417 	ldw	r20,16(sp)
   10d30:	dcc00317 	ldw	r19,12(sp)
   10d34:	dc800217 	ldw	r18,8(sp)
   10d38:	dc400117 	ldw	r17,4(sp)
   10d3c:	dc000017 	ldw	r16,0(sp)
   10d40:	dec00604 	addi	sp,sp,24
   10d44:	f800283a 	ret

00010d48 <_write_r>:
   10d48:	defffd04 	addi	sp,sp,-12
   10d4c:	dc000015 	stw	r16,0(sp)
   10d50:	04000074 	movhi	r16,1
   10d54:	dc400115 	stw	r17,4(sp)
   10d58:	8409bd04 	addi	r16,r16,9972
   10d5c:	2023883a 	mov	r17,r4
   10d60:	2809883a 	mov	r4,r5
   10d64:	300b883a 	mov	r5,r6
   10d68:	380d883a 	mov	r6,r7
   10d6c:	dfc00215 	stw	ra,8(sp)
   10d70:	80000015 	stw	zero,0(r16)
   10d74:	0010f800 	call	10f80 <write>
   10d78:	00ffffc4 	movi	r3,-1
   10d7c:	10c0031e 	bne	r2,r3,10d8c <_write_r+0x44>
   10d80:	80c00017 	ldw	r3,0(r16)
   10d84:	18000126 	beq	r3,zero,10d8c <_write_r+0x44>
   10d88:	88c00015 	stw	r3,0(r17)
   10d8c:	dfc00217 	ldw	ra,8(sp)
   10d90:	dc400117 	ldw	r17,4(sp)
   10d94:	dc000017 	ldw	r16,0(sp)
   10d98:	dec00304 	addi	sp,sp,12
   10d9c:	f800283a 	ret

00010da0 <__mulsi3>:
   10da0:	0005883a 	mov	r2,zero
   10da4:	20000726 	beq	r4,zero,10dc4 <__mulsi3+0x24>
   10da8:	20c0004c 	andi	r3,r4,1
   10dac:	2008d07a 	srli	r4,r4,1
   10db0:	18000126 	beq	r3,zero,10db8 <__mulsi3+0x18>
   10db4:	1145883a 	add	r2,r2,r5
   10db8:	294b883a 	add	r5,r5,r5
   10dbc:	203ffa1e 	bne	r4,zero,10da8 <_gp+0xffff69e0>
   10dc0:	f800283a 	ret
   10dc4:	f800283a 	ret

00010dc8 <alt_load_section>:
   10dc8:	defffc04 	addi	sp,sp,-16
   10dcc:	df000315 	stw	fp,12(sp)
   10dd0:	df000304 	addi	fp,sp,12
   10dd4:	e13ffd15 	stw	r4,-12(fp)
   10dd8:	e17ffe15 	stw	r5,-8(fp)
   10ddc:	e1bfff15 	stw	r6,-4(fp)
   10de0:	e0fffe17 	ldw	r3,-8(fp)
   10de4:	e0bffd17 	ldw	r2,-12(fp)
   10de8:	18800c26 	beq	r3,r2,10e1c <alt_load_section+0x54>
   10dec:	00000806 	br	10e10 <alt_load_section+0x48>
   10df0:	e0bffe17 	ldw	r2,-8(fp)
   10df4:	10c00104 	addi	r3,r2,4
   10df8:	e0fffe15 	stw	r3,-8(fp)
   10dfc:	e0fffd17 	ldw	r3,-12(fp)
   10e00:	19000104 	addi	r4,r3,4
   10e04:	e13ffd15 	stw	r4,-12(fp)
   10e08:	18c00017 	ldw	r3,0(r3)
   10e0c:	10c00015 	stw	r3,0(r2)
   10e10:	e0fffe17 	ldw	r3,-8(fp)
   10e14:	e0bfff17 	ldw	r2,-4(fp)
   10e18:	18bff51e 	bne	r3,r2,10df0 <_gp+0xffff6a28>
   10e1c:	0001883a 	nop
   10e20:	e037883a 	mov	sp,fp
   10e24:	df000017 	ldw	fp,0(sp)
   10e28:	dec00104 	addi	sp,sp,4
   10e2c:	f800283a 	ret

00010e30 <alt_load>:
   10e30:	defffe04 	addi	sp,sp,-8
   10e34:	dfc00115 	stw	ra,4(sp)
   10e38:	df000015 	stw	fp,0(sp)
   10e3c:	d839883a 	mov	fp,sp
   10e40:	01800074 	movhi	r6,1
   10e44:	3188ff04 	addi	r6,r6,9212
   10e48:	01400074 	movhi	r5,1
   10e4c:	29484104 	addi	r5,r5,8452
   10e50:	01000074 	movhi	r4,1
   10e54:	2108ff04 	addi	r4,r4,9212
   10e58:	0010dc80 	call	10dc8 <alt_load_section>
   10e5c:	01800074 	movhi	r6,1
   10e60:	31808c04 	addi	r6,r6,560
   10e64:	01400074 	movhi	r5,1
   10e68:	29400804 	addi	r5,r5,32
   10e6c:	01000074 	movhi	r4,1
   10e70:	21000804 	addi	r4,r4,32
   10e74:	0010dc80 	call	10dc8 <alt_load_section>
   10e78:	01800074 	movhi	r6,1
   10e7c:	31884104 	addi	r6,r6,8452
   10e80:	01400074 	movhi	r5,1
   10e84:	29483004 	addi	r5,r5,8384
   10e88:	01000074 	movhi	r4,1
   10e8c:	21083004 	addi	r4,r4,8384
   10e90:	0010dc80 	call	10dc8 <alt_load_section>
   10e94:	00115a00 	call	115a0 <alt_dcache_flush_all>
   10e98:	001181c0 	call	1181c <alt_icache_flush_all>
   10e9c:	0001883a 	nop
   10ea0:	e037883a 	mov	sp,fp
   10ea4:	dfc00117 	ldw	ra,4(sp)
   10ea8:	df000017 	ldw	fp,0(sp)
   10eac:	dec00204 	addi	sp,sp,8
   10eb0:	f800283a 	ret

00010eb4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10eb4:	defffd04 	addi	sp,sp,-12
   10eb8:	dfc00215 	stw	ra,8(sp)
   10ebc:	df000115 	stw	fp,4(sp)
   10ec0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10ec4:	0009883a 	mov	r4,zero
   10ec8:	00110500 	call	11050 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   10ecc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10ed0:	00110880 	call	11088 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   10ed4:	00116cc0 	call	116cc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   10ed8:	01000074 	movhi	r4,1
   10edc:	2105cb04 	addi	r4,r4,5932
   10ee0:	0011d400 	call	11d40 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   10ee4:	d0a0cc17 	ldw	r2,-31952(gp)
   10ee8:	d0e0cd17 	ldw	r3,-31948(gp)
   10eec:	d120ce17 	ldw	r4,-31944(gp)
   10ef0:	200d883a 	mov	r6,r4
   10ef4:	180b883a 	mov	r5,r3
   10ef8:	1009883a 	mov	r4,r2
   10efc:	001026c0 	call	1026c <main>
   10f00:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   10f04:	01000044 	movi	r4,1
   10f08:	00115640 	call	11564 <close>
  exit (result);
   10f0c:	e13fff17 	ldw	r4,-4(fp)
   10f10:	0011d540 	call	11d54 <exit>

00010f14 <usleep>:
   10f14:	defffd04 	addi	sp,sp,-12
   10f18:	dfc00215 	stw	ra,8(sp)
   10f1c:	df000115 	stw	fp,4(sp)
   10f20:	df000104 	addi	fp,sp,4
   10f24:	e13fff15 	stw	r4,-4(fp)
   10f28:	e13fff17 	ldw	r4,-4(fp)
   10f2c:	00113d00 	call	113d0 <alt_busy_sleep>
   10f30:	e037883a 	mov	sp,fp
   10f34:	dfc00117 	ldw	ra,4(sp)
   10f38:	df000017 	ldw	fp,0(sp)
   10f3c:	dec00204 	addi	sp,sp,8
   10f40:	f800283a 	ret

00010f44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10f44:	defffe04 	addi	sp,sp,-8
   10f48:	dfc00115 	stw	ra,4(sp)
   10f4c:	df000015 	stw	fp,0(sp)
   10f50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10f54:	d0a00917 	ldw	r2,-32732(gp)
   10f58:	10000326 	beq	r2,zero,10f68 <alt_get_errno+0x24>
   10f5c:	d0a00917 	ldw	r2,-32732(gp)
   10f60:	103ee83a 	callr	r2
   10f64:	00000106 	br	10f6c <alt_get_errno+0x28>
   10f68:	d0a0cb04 	addi	r2,gp,-31956
}
   10f6c:	e037883a 	mov	sp,fp
   10f70:	dfc00117 	ldw	ra,4(sp)
   10f74:	df000017 	ldw	fp,0(sp)
   10f78:	dec00204 	addi	sp,sp,8
   10f7c:	f800283a 	ret

00010f80 <write>:
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10f80:	defffb04 	addi	sp,sp,-20
   10f84:	dfc00415 	stw	ra,16(sp)
   10f88:	df000315 	stw	fp,12(sp)
   10f8c:	df000304 	addi	fp,sp,12
   10f90:	e13ffd15 	stw	r4,-12(fp)
   10f94:	e17ffe15 	stw	r5,-8(fp)
   10f98:	e1bfff15 	stw	r6,-4(fp)
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   10f9c:	e0bffd17 	ldw	r2,-12(fp)
   10fa0:	10c00060 	cmpeqi	r3,r2,1
   10fa4:	1800031e 	bne	r3,zero,10fb4 <write+0x34>
   10fa8:	108000a0 	cmpeqi	r2,r2,2
   10fac:	1000091e 	bne	r2,zero,10fd4 <write+0x54>
   10fb0:	00001006 	br	10ff4 <write+0x74>
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
   10fb4:	e0bfff17 	ldw	r2,-4(fp)
   10fb8:	000f883a 	mov	r7,zero
   10fbc:	100d883a 	mov	r6,r2
   10fc0:	e17ffe17 	ldw	r5,-8(fp)
   10fc4:	01000074 	movhi	r4,1
   10fc8:	2108f404 	addi	r4,r4,9168
   10fcc:	00110f40 	call	110f4 <altera_avalon_jtag_uart_write>
   10fd0:	00000d06 	br	11008 <write+0x88>
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   10fd4:	e0bfff17 	ldw	r2,-4(fp)
   10fd8:	000f883a 	mov	r7,zero
   10fdc:	100d883a 	mov	r6,r2
   10fe0:	e17ffe17 	ldw	r5,-8(fp)
   10fe4:	01000074 	movhi	r4,1
   10fe8:	2108f404 	addi	r4,r4,9168
   10fec:	00110f40 	call	110f4 <altera_avalon_jtag_uart_write>
   10ff0:	00000506 	br	11008 <write+0x88>
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   10ff4:	0010f440 	call	10f44 <alt_get_errno>
   10ff8:	1007883a 	mov	r3,r2
   10ffc:	00801444 	movi	r2,81
   11000:	18800015 	stw	r2,0(r3)
        return -1;
   11004:	00bfffc4 	movi	r2,-1
    }
}
   11008:	e037883a 	mov	sp,fp
   1100c:	dfc00117 	ldw	ra,4(sp)
   11010:	df000017 	ldw	fp,0(sp)
   11014:	dec00204 	addi	sp,sp,8
   11018:	f800283a 	ret

0001101c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1101c:	defffd04 	addi	sp,sp,-12
   11020:	dfc00215 	stw	ra,8(sp)
   11024:	df000115 	stw	fp,4(sp)
   11028:	df000104 	addi	fp,sp,4
   1102c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   11030:	d1600604 	addi	r5,gp,-32744
   11034:	e13fff17 	ldw	r4,-4(fp)
   11038:	00116280 	call	11628 <alt_dev_llist_insert>
}
   1103c:	e037883a 	mov	sp,fp
   11040:	dfc00117 	ldw	ra,4(sp)
   11044:	df000017 	ldw	fp,0(sp)
   11048:	dec00204 	addi	sp,sp,8
   1104c:	f800283a 	ret

00011050 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   11050:	defffd04 	addi	sp,sp,-12
   11054:	dfc00215 	stw	ra,8(sp)
   11058:	df000115 	stw	fp,4(sp)
   1105c:	df000104 	addi	fp,sp,4
   11060:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   11064:	0011c800 	call	11c80 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   11068:	00800044 	movi	r2,1
   1106c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   11070:	0001883a 	nop
   11074:	e037883a 	mov	sp,fp
   11078:	dfc00117 	ldw	ra,4(sp)
   1107c:	df000017 	ldw	fp,0(sp)
   11080:	dec00204 	addi	sp,sp,8
   11084:	f800283a 	ret

00011088 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   11088:	defffe04 	addi	sp,sp,-8
   1108c:	dfc00115 	stw	ra,4(sp)
   11090:	df000015 	stw	fp,0(sp)
   11094:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
   11098:	01c0fa04 	movi	r7,1000
   1109c:	01800144 	movi	r6,5
   110a0:	000b883a 	mov	r5,zero
   110a4:	010000b4 	movhi	r4,2
   110a8:	21042804 	addi	r4,r4,4256
   110ac:	00112000 	call	11200 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_GERAL, timer_geral);
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP_TIMER, timestamp_timer);
   110b0:	008000b4 	movhi	r2,2
   110b4:	10842004 	addi	r2,r2,4224
   110b8:	d0a0cf15 	stw	r2,-31940(gp)
   110bc:	0080bef4 	movhi	r2,763
   110c0:	10bc2004 	addi	r2,r2,-3968
   110c4:	d0a0d015 	stw	r2,-31936(gp)
    ALTERA_AVALON_TIMER_INIT ( WATCHDOG_TIMER, watchdog_timer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ALTERA_AVALON_SPI_INIT ( SPI, spi);
   110c8:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   110cc:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
    ALTERA_UP_AVALON_ADC_INIT ( ADC_1, adc_1);
   110d0:	01000074 	movhi	r4,1
   110d4:	21087d04 	addi	r4,r4,8692
   110d8:	001101c0 	call	1101c <alt_dev_reg>
}
   110dc:	0001883a 	nop
   110e0:	e037883a 	mov	sp,fp
   110e4:	dfc00117 	ldw	ra,4(sp)
   110e8:	df000017 	ldw	fp,0(sp)
   110ec:	dec00204 	addi	sp,sp,8
   110f0:	f800283a 	ret

000110f4 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   110f4:	defff904 	addi	sp,sp,-28
   110f8:	df000615 	stw	fp,24(sp)
   110fc:	df000604 	addi	fp,sp,24
   11100:	e13ffc15 	stw	r4,-16(fp)
   11104:	e17ffd15 	stw	r5,-12(fp)
   11108:	e1bffe15 	stw	r6,-8(fp)
   1110c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   11110:	e0bffc17 	ldw	r2,-16(fp)
   11114:	10800017 	ldw	r2,0(r2)
   11118:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   1111c:	e0bffe17 	ldw	r2,-8(fp)
   11120:	e0fffd17 	ldw	r3,-12(fp)
   11124:	1885883a 	add	r2,r3,r2
   11128:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   1112c:	00000e06 	br	11168 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   11130:	e0bffa17 	ldw	r2,-24(fp)
   11134:	10800104 	addi	r2,r2,4
   11138:	10800037 	ldwio	r2,0(r2)
   1113c:	10bfffec 	andhi	r2,r2,65535
   11140:	10000926 	beq	r2,zero,11168 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   11144:	e0fffa17 	ldw	r3,-24(fp)
   11148:	e0bffd17 	ldw	r2,-12(fp)
   1114c:	11000044 	addi	r4,r2,1
   11150:	e13ffd15 	stw	r4,-12(fp)
   11154:	10800003 	ldbu	r2,0(r2)
   11158:	10803fcc 	andi	r2,r2,255
   1115c:	1080201c 	xori	r2,r2,128
   11160:	10bfe004 	addi	r2,r2,-128
   11164:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   11168:	e0fffd17 	ldw	r3,-12(fp)
   1116c:	e0bffb17 	ldw	r2,-20(fp)
   11170:	18bfef36 	bltu	r3,r2,11130 <_gp+0xffff6d68>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   11174:	e0bffe17 	ldw	r2,-8(fp)
}
   11178:	e037883a 	mov	sp,fp
   1117c:	df000017 	ldw	fp,0(sp)
   11180:	dec00104 	addi	sp,sp,4
   11184:	f800283a 	ret

00011188 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   11188:	defffa04 	addi	sp,sp,-24
   1118c:	dfc00515 	stw	ra,20(sp)
   11190:	df000415 	stw	fp,16(sp)
   11194:	df000404 	addi	fp,sp,16
   11198:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1119c:	0007883a 	mov	r3,zero
   111a0:	e0bfff17 	ldw	r2,-4(fp)
   111a4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   111a8:	e0bfff17 	ldw	r2,-4(fp)
   111ac:	10800104 	addi	r2,r2,4
   111b0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   111b4:	0005303a 	rdctl	r2,status
   111b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   111bc:	e0fffd17 	ldw	r3,-12(fp)
   111c0:	00bfff84 	movi	r2,-2
   111c4:	1884703a 	and	r2,r3,r2
   111c8:	1001703a 	wrctl	status,r2
  
  return context;
   111cc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   111d0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   111d4:	0011b780 	call	11b78 <alt_tick>
   111d8:	e0bffc17 	ldw	r2,-16(fp)
   111dc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   111e0:	e0bffe17 	ldw	r2,-8(fp)
   111e4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   111e8:	0001883a 	nop
   111ec:	e037883a 	mov	sp,fp
   111f0:	dfc00117 	ldw	ra,4(sp)
   111f4:	df000017 	ldw	fp,0(sp)
   111f8:	dec00204 	addi	sp,sp,8
   111fc:	f800283a 	ret

00011200 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   11200:	defff804 	addi	sp,sp,-32
   11204:	dfc00715 	stw	ra,28(sp)
   11208:	df000615 	stw	fp,24(sp)
   1120c:	df000604 	addi	fp,sp,24
   11210:	e13ffc15 	stw	r4,-16(fp)
   11214:	e17ffd15 	stw	r5,-12(fp)
   11218:	e1bffe15 	stw	r6,-8(fp)
   1121c:	e1ffff15 	stw	r7,-4(fp)
   11220:	e0bfff17 	ldw	r2,-4(fp)
   11224:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   11228:	d0a0d217 	ldw	r2,-31928(gp)
   1122c:	1000021e 	bne	r2,zero,11238 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   11230:	e0bffb17 	ldw	r2,-20(fp)
   11234:	d0a0d215 	stw	r2,-31928(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   11238:	e0bffc17 	ldw	r2,-16(fp)
   1123c:	10800104 	addi	r2,r2,4
   11240:	00c001c4 	movi	r3,7
   11244:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   11248:	d8000015 	stw	zero,0(sp)
   1124c:	e1fffc17 	ldw	r7,-16(fp)
   11250:	01800074 	movhi	r6,1
   11254:	31846204 	addi	r6,r6,4488
   11258:	e17ffe17 	ldw	r5,-8(fp)
   1125c:	e13ffd17 	ldw	r4,-12(fp)
   11260:	001183c0 	call	1183c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   11264:	0001883a 	nop
   11268:	e037883a 	mov	sp,fp
   1126c:	dfc00117 	ldw	ra,4(sp)
   11270:	df000017 	ldw	fp,0(sp)
   11274:	dec00204 	addi	sp,sp,8
   11278:	f800283a 	ret

0001127c <alt_up_adc_open_dev>:
#define read_ch4(adc)  IORD_ALT_UP_ADC_CH_4(((adc)->base))
#define read_ch5(adc)  IORD_ALT_UP_ADC_CH_5(((adc)->base))
#define read_ch6(adc)  IORD_ALT_UP_ADC_CH_6(((adc)->base))
#define read_ch7(adc)  IORD_ALT_UP_ADC_CH_7(((adc)->base))

alt_up_adc_dev* alt_up_adc_open_dev (const char* name){
   1127c:	defffc04 	addi	sp,sp,-16
   11280:	dfc00315 	stw	ra,12(sp)
   11284:	df000215 	stw	fp,8(sp)
   11288:	df000204 	addi	fp,sp,8
   1128c:	e13fff15 	stw	r4,-4(fp)

	alt_up_adc_dev* dev = (alt_up_adc_dev*) alt_find_dev(name, &alt_dev_list);
   11290:	d1600604 	addi	r5,gp,-32744
   11294:	e13fff17 	ldw	r4,-4(fp)
   11298:	001178c0 	call	1178c <alt_find_dev>
   1129c:	e0bffe15 	stw	r2,-8(fp)
	
	return dev;
   112a0:	e0bffe17 	ldw	r2,-8(fp)
}
   112a4:	e037883a 	mov	sp,fp
   112a8:	dfc00117 	ldw	ra,4(sp)
   112ac:	df000017 	ldw	fp,0(sp)
   112b0:	dec00204 	addi	sp,sp,8
   112b4:	f800283a 	ret

000112b8 <alt_up_adc_read>:

unsigned int alt_up_adc_read (alt_up_adc_dev * adc, unsigned channel){
   112b8:	defffc04 	addi	sp,sp,-16
   112bc:	df000315 	stw	fp,12(sp)
   112c0:	df000304 	addi	fp,sp,12
   112c4:	e13ffe15 	stw	r4,-8(fp)
   112c8:	e17fff15 	stw	r5,-4(fp)

	unsigned int ch = channel % 8;
   112cc:	e0bfff17 	ldw	r2,-4(fp)
   112d0:	108001cc 	andi	r2,r2,7
   112d4:	e0bffd15 	stw	r2,-12(fp)
	
	switch (ch){
   112d8:	e0bffd17 	ldw	r2,-12(fp)
   112dc:	10800228 	cmpgeui	r2,r2,8
   112e0:	1000361e 	bne	r2,zero,113bc <alt_up_adc_read+0x104>
   112e4:	e0bffd17 	ldw	r2,-12(fp)
   112e8:	100690ba 	slli	r3,r2,2
   112ec:	00800074 	movhi	r2,1
   112f0:	1084c004 	addi	r2,r2,4864
   112f4:	1885883a 	add	r2,r3,r2
   112f8:	10800017 	ldw	r2,0(r2)
   112fc:	1000683a 	jmp	r2
   11300:	00011320 	cmpeqi	zero,zero,1100
   11304:	00011330 	cmpltui	zero,zero,1100
   11308:	00011344 	movi	zero,1101
   1130c:	00011358 	cmpnei	zero,zero,1101
   11310:	0001136c 	andhi	zero,zero,1101
   11314:	00011380 	call	1138 <__alt_mem_memoria-0xeec8>
   11318:	00011394 	movui	zero,1102
   1131c:	000113a8 	cmpgeui	zero,zero,1102
		case 0:
			return read_ch0(adc);
   11320:	e0bffe17 	ldw	r2,-8(fp)
   11324:	10800a17 	ldw	r2,40(r2)
   11328:	10800037 	ldwio	r2,0(r2)
   1132c:	00002406 	br	113c0 <alt_up_adc_read+0x108>
		case 1:
			return read_ch1(adc);
   11330:	e0bffe17 	ldw	r2,-8(fp)
   11334:	10800a17 	ldw	r2,40(r2)
   11338:	10800104 	addi	r2,r2,4
   1133c:	10800037 	ldwio	r2,0(r2)
   11340:	00001f06 	br	113c0 <alt_up_adc_read+0x108>
		case 2:
			return read_ch2(adc);
   11344:	e0bffe17 	ldw	r2,-8(fp)
   11348:	10800a17 	ldw	r2,40(r2)
   1134c:	10800204 	addi	r2,r2,8
   11350:	10800037 	ldwio	r2,0(r2)
   11354:	00001a06 	br	113c0 <alt_up_adc_read+0x108>
		case 3:
			return read_ch3(adc);
   11358:	e0bffe17 	ldw	r2,-8(fp)
   1135c:	10800a17 	ldw	r2,40(r2)
   11360:	10800304 	addi	r2,r2,12
   11364:	10800037 	ldwio	r2,0(r2)
   11368:	00001506 	br	113c0 <alt_up_adc_read+0x108>
		case 4:
			return read_ch4(adc);
   1136c:	e0bffe17 	ldw	r2,-8(fp)
   11370:	10800a17 	ldw	r2,40(r2)
   11374:	10800404 	addi	r2,r2,16
   11378:	10800037 	ldwio	r2,0(r2)
   1137c:	00001006 	br	113c0 <alt_up_adc_read+0x108>
		case 5:
			return read_ch5(adc);
   11380:	e0bffe17 	ldw	r2,-8(fp)
   11384:	10800a17 	ldw	r2,40(r2)
   11388:	10800504 	addi	r2,r2,20
   1138c:	10800037 	ldwio	r2,0(r2)
   11390:	00000b06 	br	113c0 <alt_up_adc_read+0x108>
		case 6:
			return read_ch6(adc);
   11394:	e0bffe17 	ldw	r2,-8(fp)
   11398:	10800a17 	ldw	r2,40(r2)
   1139c:	10800604 	addi	r2,r2,24
   113a0:	10800037 	ldwio	r2,0(r2)
   113a4:	00000606 	br	113c0 <alt_up_adc_read+0x108>
		case 7:
			return read_ch7(adc);
   113a8:	e0bffe17 	ldw	r2,-8(fp)
   113ac:	10800a17 	ldw	r2,40(r2)
   113b0:	10800704 	addi	r2,r2,28
   113b4:	10800037 	ldwio	r2,0(r2)
   113b8:	00000106 	br	113c0 <alt_up_adc_read+0x108>
		default:
			return 0;
   113bc:	0005883a 	mov	r2,zero
	}
}
   113c0:	e037883a 	mov	sp,fp
   113c4:	df000017 	ldw	fp,0(sp)
   113c8:	dec00104 	addi	sp,sp,4
   113cc:	f800283a 	ret

000113d0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   113d0:	defffa04 	addi	sp,sp,-24
   113d4:	dfc00515 	stw	ra,20(sp)
   113d8:	df000415 	stw	fp,16(sp)
   113dc:	df000404 	addi	fp,sp,16
   113e0:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   113e4:	00800244 	movi	r2,9
   113e8:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   113ec:	014003f4 	movhi	r5,15
   113f0:	29509004 	addi	r5,r5,16960
   113f4:	e13ffd17 	ldw	r4,-12(fp)
   113f8:	0010da00 	call	10da0 <__mulsi3>
   113fc:	100b883a 	mov	r5,r2
   11400:	0100bef4 	movhi	r4,763
   11404:	213c2004 	addi	r4,r4,-3968
   11408:	00104e80 	call	104e8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   1140c:	100b883a 	mov	r5,r2
   11410:	01200034 	movhi	r4,32768
   11414:	213fffc4 	addi	r4,r4,-1
   11418:	00104e80 	call	104e8 <__udivsi3>
   1141c:	100b883a 	mov	r5,r2
   11420:	e13fff17 	ldw	r4,-4(fp)
   11424:	00104e80 	call	104e8 <__udivsi3>
   11428:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   1142c:	e0bffe17 	ldw	r2,-8(fp)
   11430:	10002a26 	beq	r2,zero,114dc <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   11434:	e03ffc15 	stw	zero,-16(fp)
   11438:	00001706 	br	11498 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   1143c:	00a00034 	movhi	r2,32768
   11440:	10bfffc4 	addi	r2,r2,-1
   11444:	10bfffc4 	addi	r2,r2,-1
   11448:	103ffe1e 	bne	r2,zero,11444 <_gp+0xffff707c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   1144c:	014003f4 	movhi	r5,15
   11450:	29509004 	addi	r5,r5,16960
   11454:	e13ffd17 	ldw	r4,-12(fp)
   11458:	0010da00 	call	10da0 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   1145c:	100b883a 	mov	r5,r2
   11460:	0100bef4 	movhi	r4,763
   11464:	213c2004 	addi	r4,r4,-3968
   11468:	00104e80 	call	104e8 <__udivsi3>
   1146c:	100b883a 	mov	r5,r2
   11470:	01200034 	movhi	r4,32768
   11474:	213fffc4 	addi	r4,r4,-1
   11478:	00104e80 	call	104e8 <__udivsi3>
   1147c:	1007883a 	mov	r3,r2
   11480:	e0bfff17 	ldw	r2,-4(fp)
   11484:	10c5c83a 	sub	r2,r2,r3
   11488:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   1148c:	e0bffc17 	ldw	r2,-16(fp)
   11490:	10800044 	addi	r2,r2,1
   11494:	e0bffc15 	stw	r2,-16(fp)
   11498:	e0fffc17 	ldw	r3,-16(fp)
   1149c:	e0bffe17 	ldw	r2,-8(fp)
   114a0:	18bfe616 	blt	r3,r2,1143c <_gp+0xffff7074>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   114a4:	014003f4 	movhi	r5,15
   114a8:	29509004 	addi	r5,r5,16960
   114ac:	e13ffd17 	ldw	r4,-12(fp)
   114b0:	0010da00 	call	10da0 <__mulsi3>
   114b4:	100b883a 	mov	r5,r2
   114b8:	0100bef4 	movhi	r4,763
   114bc:	213c2004 	addi	r4,r4,-3968
   114c0:	00104e80 	call	104e8 <__udivsi3>
   114c4:	e17fff17 	ldw	r5,-4(fp)
   114c8:	1009883a 	mov	r4,r2
   114cc:	0010da00 	call	10da0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   114d0:	10bfffc4 	addi	r2,r2,-1
   114d4:	103ffe1e 	bne	r2,zero,114d0 <_gp+0xffff7108>
   114d8:	00000d06 	br	11510 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   114dc:	014003f4 	movhi	r5,15
   114e0:	29509004 	addi	r5,r5,16960
   114e4:	e13ffd17 	ldw	r4,-12(fp)
   114e8:	0010da00 	call	10da0 <__mulsi3>
   114ec:	100b883a 	mov	r5,r2
   114f0:	0100bef4 	movhi	r4,763
   114f4:	213c2004 	addi	r4,r4,-3968
   114f8:	00104e80 	call	104e8 <__udivsi3>
   114fc:	e17fff17 	ldw	r5,-4(fp)
   11500:	1009883a 	mov	r4,r2
   11504:	0010da00 	call	10da0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11508:	10bfffc4 	addi	r2,r2,-1
   1150c:	00bffe16 	blt	zero,r2,11508 <_gp+0xffff7140>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   11510:	0005883a 	mov	r2,zero
}
   11514:	e037883a 	mov	sp,fp
   11518:	dfc00117 	ldw	ra,4(sp)
   1151c:	df000017 	ldw	fp,0(sp)
   11520:	dec00204 	addi	sp,sp,8
   11524:	f800283a 	ret

00011528 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11528:	defffe04 	addi	sp,sp,-8
   1152c:	dfc00115 	stw	ra,4(sp)
   11530:	df000015 	stw	fp,0(sp)
   11534:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11538:	d0a00917 	ldw	r2,-32732(gp)
   1153c:	10000326 	beq	r2,zero,1154c <alt_get_errno+0x24>
   11540:	d0a00917 	ldw	r2,-32732(gp)
   11544:	103ee83a 	callr	r2
   11548:	00000106 	br	11550 <alt_get_errno+0x28>
   1154c:	d0a0cb04 	addi	r2,gp,-31956
}
   11550:	e037883a 	mov	sp,fp
   11554:	dfc00117 	ldw	ra,4(sp)
   11558:	df000017 	ldw	fp,0(sp)
   1155c:	dec00204 	addi	sp,sp,8
   11560:	f800283a 	ret

00011564 <close>:
#include "os/alt_syscall.h"

#ifdef ALT_USE_DIRECT_DRIVERS

int ALT_CLOSE (int fildes)
{
   11564:	defffd04 	addi	sp,sp,-12
   11568:	dfc00215 	stw	ra,8(sp)
   1156c:	df000115 	stw	fp,4(sp)
   11570:	df000104 	addi	fp,sp,4
   11574:	e13fff15 	stw	r4,-4(fp)
  
  ALT_STUB_WARNING(close);
  
  /* Indicate an error */
  
  ALT_ERRNO = ENOSYS;
   11578:	00115280 	call	11528 <alt_get_errno>
   1157c:	1007883a 	mov	r3,r2
   11580:	00801604 	movi	r2,88
   11584:	18800015 	stw	r2,0(r3)
  return -1;
   11588:	00bfffc4 	movi	r2,-1
}
   1158c:	e037883a 	mov	sp,fp
   11590:	dfc00117 	ldw	ra,4(sp)
   11594:	df000017 	ldw	fp,0(sp)
   11598:	dec00204 	addi	sp,sp,8
   1159c:	f800283a 	ret

000115a0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   115a0:	deffff04 	addi	sp,sp,-4
   115a4:	df000015 	stw	fp,0(sp)
   115a8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   115ac:	0001883a 	nop
   115b0:	e037883a 	mov	sp,fp
   115b4:	df000017 	ldw	fp,0(sp)
   115b8:	dec00104 	addi	sp,sp,4
   115bc:	f800283a 	ret

000115c0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   115c0:	defffc04 	addi	sp,sp,-16
   115c4:	df000315 	stw	fp,12(sp)
   115c8:	df000304 	addi	fp,sp,12
   115cc:	e13ffd15 	stw	r4,-12(fp)
   115d0:	e17ffe15 	stw	r5,-8(fp)
   115d4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   115d8:	e0bfff17 	ldw	r2,-4(fp)
}
   115dc:	e037883a 	mov	sp,fp
   115e0:	df000017 	ldw	fp,0(sp)
   115e4:	dec00104 	addi	sp,sp,4
   115e8:	f800283a 	ret

000115ec <alt_get_errno>:
   115ec:	defffe04 	addi	sp,sp,-8
   115f0:	dfc00115 	stw	ra,4(sp)
   115f4:	df000015 	stw	fp,0(sp)
   115f8:	d839883a 	mov	fp,sp
   115fc:	d0a00917 	ldw	r2,-32732(gp)
   11600:	10000326 	beq	r2,zero,11610 <alt_get_errno+0x24>
   11604:	d0a00917 	ldw	r2,-32732(gp)
   11608:	103ee83a 	callr	r2
   1160c:	00000106 	br	11614 <alt_get_errno+0x28>
   11610:	d0a0cb04 	addi	r2,gp,-31956
   11614:	e037883a 	mov	sp,fp
   11618:	dfc00117 	ldw	ra,4(sp)
   1161c:	df000017 	ldw	fp,0(sp)
   11620:	dec00204 	addi	sp,sp,8
   11624:	f800283a 	ret

00011628 <alt_dev_llist_insert>:
   11628:	defffa04 	addi	sp,sp,-24
   1162c:	dfc00515 	stw	ra,20(sp)
   11630:	df000415 	stw	fp,16(sp)
   11634:	df000404 	addi	fp,sp,16
   11638:	e13ffe15 	stw	r4,-8(fp)
   1163c:	e17fff15 	stw	r5,-4(fp)
   11640:	e0bffe17 	ldw	r2,-8(fp)
   11644:	10000326 	beq	r2,zero,11654 <alt_dev_llist_insert+0x2c>
   11648:	e0bffe17 	ldw	r2,-8(fp)
   1164c:	10800217 	ldw	r2,8(r2)
   11650:	1000061e 	bne	r2,zero,1166c <alt_dev_llist_insert+0x44>
   11654:	00115ec0 	call	115ec <alt_get_errno>
   11658:	1007883a 	mov	r3,r2
   1165c:	00800584 	movi	r2,22
   11660:	18800015 	stw	r2,0(r3)
   11664:	00bffa84 	movi	r2,-22
   11668:	00001306 	br	116b8 <alt_dev_llist_insert+0x90>
   1166c:	e0bffe17 	ldw	r2,-8(fp)
   11670:	e0ffff17 	ldw	r3,-4(fp)
   11674:	e0fffc15 	stw	r3,-16(fp)
   11678:	e0bffd15 	stw	r2,-12(fp)
   1167c:	e0bffd17 	ldw	r2,-12(fp)
   11680:	e0fffc17 	ldw	r3,-16(fp)
   11684:	10c00115 	stw	r3,4(r2)
   11688:	e0bffc17 	ldw	r2,-16(fp)
   1168c:	10c00017 	ldw	r3,0(r2)
   11690:	e0bffd17 	ldw	r2,-12(fp)
   11694:	10c00015 	stw	r3,0(r2)
   11698:	e0bffc17 	ldw	r2,-16(fp)
   1169c:	10800017 	ldw	r2,0(r2)
   116a0:	e0fffd17 	ldw	r3,-12(fp)
   116a4:	10c00115 	stw	r3,4(r2)
   116a8:	e0bffc17 	ldw	r2,-16(fp)
   116ac:	e0fffd17 	ldw	r3,-12(fp)
   116b0:	10c00015 	stw	r3,0(r2)
   116b4:	0005883a 	mov	r2,zero
   116b8:	e037883a 	mov	sp,fp
   116bc:	dfc00117 	ldw	ra,4(sp)
   116c0:	df000017 	ldw	fp,0(sp)
   116c4:	dec00204 	addi	sp,sp,8
   116c8:	f800283a 	ret

000116cc <_do_ctors>:
   116cc:	defffd04 	addi	sp,sp,-12
   116d0:	dfc00215 	stw	ra,8(sp)
   116d4:	df000115 	stw	fp,4(sp)
   116d8:	df000104 	addi	fp,sp,4
   116dc:	00800074 	movhi	r2,1
   116e0:	10882f04 	addi	r2,r2,8380
   116e4:	e0bfff15 	stw	r2,-4(fp)
   116e8:	00000606 	br	11704 <_do_ctors+0x38>
   116ec:	e0bfff17 	ldw	r2,-4(fp)
   116f0:	10800017 	ldw	r2,0(r2)
   116f4:	103ee83a 	callr	r2
   116f8:	e0bfff17 	ldw	r2,-4(fp)
   116fc:	10bfff04 	addi	r2,r2,-4
   11700:	e0bfff15 	stw	r2,-4(fp)
   11704:	e0ffff17 	ldw	r3,-4(fp)
   11708:	00800074 	movhi	r2,1
   1170c:	10883004 	addi	r2,r2,8384
   11710:	18bff62e 	bgeu	r3,r2,116ec <_gp+0xffff7324>
   11714:	0001883a 	nop
   11718:	e037883a 	mov	sp,fp
   1171c:	dfc00117 	ldw	ra,4(sp)
   11720:	df000017 	ldw	fp,0(sp)
   11724:	dec00204 	addi	sp,sp,8
   11728:	f800283a 	ret

0001172c <_do_dtors>:
   1172c:	defffd04 	addi	sp,sp,-12
   11730:	dfc00215 	stw	ra,8(sp)
   11734:	df000115 	stw	fp,4(sp)
   11738:	df000104 	addi	fp,sp,4
   1173c:	00800074 	movhi	r2,1
   11740:	10882f04 	addi	r2,r2,8380
   11744:	e0bfff15 	stw	r2,-4(fp)
   11748:	00000606 	br	11764 <_do_dtors+0x38>
   1174c:	e0bfff17 	ldw	r2,-4(fp)
   11750:	10800017 	ldw	r2,0(r2)
   11754:	103ee83a 	callr	r2
   11758:	e0bfff17 	ldw	r2,-4(fp)
   1175c:	10bfff04 	addi	r2,r2,-4
   11760:	e0bfff15 	stw	r2,-4(fp)
   11764:	e0ffff17 	ldw	r3,-4(fp)
   11768:	00800074 	movhi	r2,1
   1176c:	10883004 	addi	r2,r2,8384
   11770:	18bff62e 	bgeu	r3,r2,1174c <_gp+0xffff7384>
   11774:	0001883a 	nop
   11778:	e037883a 	mov	sp,fp
   1177c:	dfc00117 	ldw	ra,4(sp)
   11780:	df000017 	ldw	fp,0(sp)
   11784:	dec00204 	addi	sp,sp,8
   11788:	f800283a 	ret

0001178c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1178c:	defffa04 	addi	sp,sp,-24
   11790:	dfc00515 	stw	ra,20(sp)
   11794:	df000415 	stw	fp,16(sp)
   11798:	df000404 	addi	fp,sp,16
   1179c:	e13ffe15 	stw	r4,-8(fp)
   117a0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   117a4:	e0bfff17 	ldw	r2,-4(fp)
   117a8:	10800017 	ldw	r2,0(r2)
   117ac:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   117b0:	e13ffe17 	ldw	r4,-8(fp)
   117b4:	00106c00 	call	106c0 <strlen>
   117b8:	10800044 	addi	r2,r2,1
   117bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   117c0:	00000d06 	br	117f8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   117c4:	e0bffc17 	ldw	r2,-16(fp)
   117c8:	10800217 	ldw	r2,8(r2)
   117cc:	e0fffd17 	ldw	r3,-12(fp)
   117d0:	180d883a 	mov	r6,r3
   117d4:	e17ffe17 	ldw	r5,-8(fp)
   117d8:	1009883a 	mov	r4,r2
   117dc:	0011d740 	call	11d74 <memcmp>
   117e0:	1000021e 	bne	r2,zero,117ec <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   117e4:	e0bffc17 	ldw	r2,-16(fp)
   117e8:	00000706 	br	11808 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   117ec:	e0bffc17 	ldw	r2,-16(fp)
   117f0:	10800017 	ldw	r2,0(r2)
   117f4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   117f8:	e0fffc17 	ldw	r3,-16(fp)
   117fc:	e0bfff17 	ldw	r2,-4(fp)
   11800:	18bff01e 	bne	r3,r2,117c4 <_gp+0xffff73fc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   11804:	0005883a 	mov	r2,zero
}
   11808:	e037883a 	mov	sp,fp
   1180c:	dfc00117 	ldw	ra,4(sp)
   11810:	df000017 	ldw	fp,0(sp)
   11814:	dec00204 	addi	sp,sp,8
   11818:	f800283a 	ret

0001181c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1181c:	deffff04 	addi	sp,sp,-4
   11820:	df000015 	stw	fp,0(sp)
   11824:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   11828:	0001883a 	nop
   1182c:	e037883a 	mov	sp,fp
   11830:	df000017 	ldw	fp,0(sp)
   11834:	dec00104 	addi	sp,sp,4
   11838:	f800283a 	ret

0001183c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1183c:	defff904 	addi	sp,sp,-28
   11840:	dfc00615 	stw	ra,24(sp)
   11844:	df000515 	stw	fp,20(sp)
   11848:	df000504 	addi	fp,sp,20
   1184c:	e13ffc15 	stw	r4,-16(fp)
   11850:	e17ffd15 	stw	r5,-12(fp)
   11854:	e1bffe15 	stw	r6,-8(fp)
   11858:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1185c:	e0800217 	ldw	r2,8(fp)
   11860:	d8800015 	stw	r2,0(sp)
   11864:	e1ffff17 	ldw	r7,-4(fp)
   11868:	e1bffe17 	ldw	r6,-8(fp)
   1186c:	e17ffd17 	ldw	r5,-12(fp)
   11870:	e13ffc17 	ldw	r4,-16(fp)
   11874:	00119ec0 	call	119ec <alt_iic_isr_register>
}  
   11878:	e037883a 	mov	sp,fp
   1187c:	dfc00117 	ldw	ra,4(sp)
   11880:	df000017 	ldw	fp,0(sp)
   11884:	dec00204 	addi	sp,sp,8
   11888:	f800283a 	ret

0001188c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1188c:	defff904 	addi	sp,sp,-28
   11890:	df000615 	stw	fp,24(sp)
   11894:	df000604 	addi	fp,sp,24
   11898:	e13ffe15 	stw	r4,-8(fp)
   1189c:	e17fff15 	stw	r5,-4(fp)
   118a0:	e0bfff17 	ldw	r2,-4(fp)
   118a4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   118a8:	0005303a 	rdctl	r2,status
   118ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   118b0:	e0fffb17 	ldw	r3,-20(fp)
   118b4:	00bfff84 	movi	r2,-2
   118b8:	1884703a 	and	r2,r3,r2
   118bc:	1001703a 	wrctl	status,r2
  
  return context;
   118c0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   118c4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   118c8:	00c00044 	movi	r3,1
   118cc:	e0bffa17 	ldw	r2,-24(fp)
   118d0:	1884983a 	sll	r2,r3,r2
   118d4:	1007883a 	mov	r3,r2
   118d8:	d0a0d117 	ldw	r2,-31932(gp)
   118dc:	1884b03a 	or	r2,r3,r2
   118e0:	d0a0d115 	stw	r2,-31932(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   118e4:	d0a0d117 	ldw	r2,-31932(gp)
   118e8:	100170fa 	wrctl	ienable,r2
   118ec:	e0bffc17 	ldw	r2,-16(fp)
   118f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   118f4:	e0bffd17 	ldw	r2,-12(fp)
   118f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   118fc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   11900:	0001883a 	nop
}
   11904:	e037883a 	mov	sp,fp
   11908:	df000017 	ldw	fp,0(sp)
   1190c:	dec00104 	addi	sp,sp,4
   11910:	f800283a 	ret

00011914 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   11914:	defff904 	addi	sp,sp,-28
   11918:	df000615 	stw	fp,24(sp)
   1191c:	df000604 	addi	fp,sp,24
   11920:	e13ffe15 	stw	r4,-8(fp)
   11924:	e17fff15 	stw	r5,-4(fp)
   11928:	e0bfff17 	ldw	r2,-4(fp)
   1192c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11930:	0005303a 	rdctl	r2,status
   11934:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11938:	e0fffb17 	ldw	r3,-20(fp)
   1193c:	00bfff84 	movi	r2,-2
   11940:	1884703a 	and	r2,r3,r2
   11944:	1001703a 	wrctl	status,r2
  
  return context;
   11948:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1194c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   11950:	00c00044 	movi	r3,1
   11954:	e0bffa17 	ldw	r2,-24(fp)
   11958:	1884983a 	sll	r2,r3,r2
   1195c:	0084303a 	nor	r2,zero,r2
   11960:	1007883a 	mov	r3,r2
   11964:	d0a0d117 	ldw	r2,-31932(gp)
   11968:	1884703a 	and	r2,r3,r2
   1196c:	d0a0d115 	stw	r2,-31932(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11970:	d0a0d117 	ldw	r2,-31932(gp)
   11974:	100170fa 	wrctl	ienable,r2
   11978:	e0bffc17 	ldw	r2,-16(fp)
   1197c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11980:	e0bffd17 	ldw	r2,-12(fp)
   11984:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11988:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   1198c:	0001883a 	nop
}
   11990:	e037883a 	mov	sp,fp
   11994:	df000017 	ldw	fp,0(sp)
   11998:	dec00104 	addi	sp,sp,4
   1199c:	f800283a 	ret

000119a0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   119a0:	defffc04 	addi	sp,sp,-16
   119a4:	df000315 	stw	fp,12(sp)
   119a8:	df000304 	addi	fp,sp,12
   119ac:	e13ffe15 	stw	r4,-8(fp)
   119b0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   119b4:	000530fa 	rdctl	r2,ienable
   119b8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   119bc:	00c00044 	movi	r3,1
   119c0:	e0bfff17 	ldw	r2,-4(fp)
   119c4:	1884983a 	sll	r2,r3,r2
   119c8:	1007883a 	mov	r3,r2
   119cc:	e0bffd17 	ldw	r2,-12(fp)
   119d0:	1884703a 	and	r2,r3,r2
   119d4:	1004c03a 	cmpne	r2,r2,zero
   119d8:	10803fcc 	andi	r2,r2,255
}
   119dc:	e037883a 	mov	sp,fp
   119e0:	df000017 	ldw	fp,0(sp)
   119e4:	dec00104 	addi	sp,sp,4
   119e8:	f800283a 	ret

000119ec <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   119ec:	defff504 	addi	sp,sp,-44
   119f0:	dfc00a15 	stw	ra,40(sp)
   119f4:	df000915 	stw	fp,36(sp)
   119f8:	df000904 	addi	fp,sp,36
   119fc:	e13ffc15 	stw	r4,-16(fp)
   11a00:	e17ffd15 	stw	r5,-12(fp)
   11a04:	e1bffe15 	stw	r6,-8(fp)
   11a08:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   11a0c:	00bffa84 	movi	r2,-22
   11a10:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   11a14:	e0bffd17 	ldw	r2,-12(fp)
   11a18:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11a1c:	e0bff817 	ldw	r2,-32(fp)
   11a20:	10800808 	cmpgei	r2,r2,32
   11a24:	1000271e 	bne	r2,zero,11ac4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11a28:	0005303a 	rdctl	r2,status
   11a2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11a30:	e0fffb17 	ldw	r3,-20(fp)
   11a34:	00bfff84 	movi	r2,-2
   11a38:	1884703a 	and	r2,r3,r2
   11a3c:	1001703a 	wrctl	status,r2
  
  return context;
   11a40:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   11a44:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   11a48:	00800074 	movhi	r2,1
   11a4c:	1089c704 	addi	r2,r2,10012
   11a50:	e0fff817 	ldw	r3,-32(fp)
   11a54:	180690fa 	slli	r3,r3,3
   11a58:	10c5883a 	add	r2,r2,r3
   11a5c:	e0fffe17 	ldw	r3,-8(fp)
   11a60:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   11a64:	00800074 	movhi	r2,1
   11a68:	1089c704 	addi	r2,r2,10012
   11a6c:	e0fff817 	ldw	r3,-32(fp)
   11a70:	180690fa 	slli	r3,r3,3
   11a74:	10c5883a 	add	r2,r2,r3
   11a78:	10800104 	addi	r2,r2,4
   11a7c:	e0ffff17 	ldw	r3,-4(fp)
   11a80:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   11a84:	e0bffe17 	ldw	r2,-8(fp)
   11a88:	10000526 	beq	r2,zero,11aa0 <alt_iic_isr_register+0xb4>
   11a8c:	e0bff817 	ldw	r2,-32(fp)
   11a90:	100b883a 	mov	r5,r2
   11a94:	e13ffc17 	ldw	r4,-16(fp)
   11a98:	001188c0 	call	1188c <alt_ic_irq_enable>
   11a9c:	00000406 	br	11ab0 <alt_iic_isr_register+0xc4>
   11aa0:	e0bff817 	ldw	r2,-32(fp)
   11aa4:	100b883a 	mov	r5,r2
   11aa8:	e13ffc17 	ldw	r4,-16(fp)
   11aac:	00119140 	call	11914 <alt_ic_irq_disable>
   11ab0:	e0bff715 	stw	r2,-36(fp)
   11ab4:	e0bffa17 	ldw	r2,-24(fp)
   11ab8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11abc:	e0bff917 	ldw	r2,-28(fp)
   11ac0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   11ac4:	e0bff717 	ldw	r2,-36(fp)
}
   11ac8:	e037883a 	mov	sp,fp
   11acc:	dfc00117 	ldw	ra,4(sp)
   11ad0:	df000017 	ldw	fp,0(sp)
   11ad4:	dec00204 	addi	sp,sp,8
   11ad8:	f800283a 	ret

00011adc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   11adc:	defffa04 	addi	sp,sp,-24
   11ae0:	df000515 	stw	fp,20(sp)
   11ae4:	df000504 	addi	fp,sp,20
   11ae8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11aec:	0005303a 	rdctl	r2,status
   11af0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11af4:	e0fffc17 	ldw	r3,-16(fp)
   11af8:	00bfff84 	movi	r2,-2
   11afc:	1884703a 	and	r2,r3,r2
   11b00:	1001703a 	wrctl	status,r2
  
  return context;
   11b04:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   11b08:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   11b0c:	e0bfff17 	ldw	r2,-4(fp)
   11b10:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   11b14:	e0bffd17 	ldw	r2,-12(fp)
   11b18:	10800017 	ldw	r2,0(r2)
   11b1c:	e0fffd17 	ldw	r3,-12(fp)
   11b20:	18c00117 	ldw	r3,4(r3)
   11b24:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   11b28:	e0bffd17 	ldw	r2,-12(fp)
   11b2c:	10800117 	ldw	r2,4(r2)
   11b30:	e0fffd17 	ldw	r3,-12(fp)
   11b34:	18c00017 	ldw	r3,0(r3)
   11b38:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   11b3c:	e0bffd17 	ldw	r2,-12(fp)
   11b40:	e0fffd17 	ldw	r3,-12(fp)
   11b44:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   11b48:	e0bffd17 	ldw	r2,-12(fp)
   11b4c:	e0fffd17 	ldw	r3,-12(fp)
   11b50:	10c00015 	stw	r3,0(r2)
   11b54:	e0bffb17 	ldw	r2,-20(fp)
   11b58:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11b5c:	e0bffe17 	ldw	r2,-8(fp)
   11b60:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   11b64:	0001883a 	nop
   11b68:	e037883a 	mov	sp,fp
   11b6c:	df000017 	ldw	fp,0(sp)
   11b70:	dec00104 	addi	sp,sp,4
   11b74:	f800283a 	ret

00011b78 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11b78:	defffb04 	addi	sp,sp,-20
   11b7c:	dfc00415 	stw	ra,16(sp)
   11b80:	df000315 	stw	fp,12(sp)
   11b84:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   11b88:	d0a00b17 	ldw	r2,-32724(gp)
   11b8c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   11b90:	d0a0d317 	ldw	r2,-31924(gp)
   11b94:	10800044 	addi	r2,r2,1
   11b98:	d0a0d315 	stw	r2,-31924(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11b9c:	00002e06 	br	11c58 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   11ba0:	e0bffd17 	ldw	r2,-12(fp)
   11ba4:	10800017 	ldw	r2,0(r2)
   11ba8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   11bac:	e0bffd17 	ldw	r2,-12(fp)
   11bb0:	10800403 	ldbu	r2,16(r2)
   11bb4:	10803fcc 	andi	r2,r2,255
   11bb8:	10000426 	beq	r2,zero,11bcc <alt_tick+0x54>
   11bbc:	d0a0d317 	ldw	r2,-31924(gp)
   11bc0:	1000021e 	bne	r2,zero,11bcc <alt_tick+0x54>
    {
      alarm->rollover = 0;
   11bc4:	e0bffd17 	ldw	r2,-12(fp)
   11bc8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   11bcc:	e0bffd17 	ldw	r2,-12(fp)
   11bd0:	10800217 	ldw	r2,8(r2)
   11bd4:	d0e0d317 	ldw	r3,-31924(gp)
   11bd8:	18801d36 	bltu	r3,r2,11c50 <alt_tick+0xd8>
   11bdc:	e0bffd17 	ldw	r2,-12(fp)
   11be0:	10800403 	ldbu	r2,16(r2)
   11be4:	10803fcc 	andi	r2,r2,255
   11be8:	1000191e 	bne	r2,zero,11c50 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   11bec:	e0bffd17 	ldw	r2,-12(fp)
   11bf0:	10800317 	ldw	r2,12(r2)
   11bf4:	e0fffd17 	ldw	r3,-12(fp)
   11bf8:	18c00517 	ldw	r3,20(r3)
   11bfc:	1809883a 	mov	r4,r3
   11c00:	103ee83a 	callr	r2
   11c04:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   11c08:	e0bfff17 	ldw	r2,-4(fp)
   11c0c:	1000031e 	bne	r2,zero,11c1c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   11c10:	e13ffd17 	ldw	r4,-12(fp)
   11c14:	0011adc0 	call	11adc <alt_alarm_stop>
   11c18:	00000d06 	br	11c50 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   11c1c:	e0bffd17 	ldw	r2,-12(fp)
   11c20:	10c00217 	ldw	r3,8(r2)
   11c24:	e0bfff17 	ldw	r2,-4(fp)
   11c28:	1887883a 	add	r3,r3,r2
   11c2c:	e0bffd17 	ldw	r2,-12(fp)
   11c30:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   11c34:	e0bffd17 	ldw	r2,-12(fp)
   11c38:	10c00217 	ldw	r3,8(r2)
   11c3c:	d0a0d317 	ldw	r2,-31924(gp)
   11c40:	1880032e 	bgeu	r3,r2,11c50 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   11c44:	e0bffd17 	ldw	r2,-12(fp)
   11c48:	00c00044 	movi	r3,1
   11c4c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   11c50:	e0bffe17 	ldw	r2,-8(fp)
   11c54:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11c58:	e0fffd17 	ldw	r3,-12(fp)
   11c5c:	d0a00b04 	addi	r2,gp,-32724
   11c60:	18bfcf1e 	bne	r3,r2,11ba0 <_gp+0xffff77d8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   11c64:	0001883a 	nop
}
   11c68:	0001883a 	nop
   11c6c:	e037883a 	mov	sp,fp
   11c70:	dfc00117 	ldw	ra,4(sp)
   11c74:	df000017 	ldw	fp,0(sp)
   11c78:	dec00204 	addi	sp,sp,8
   11c7c:	f800283a 	ret

00011c80 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   11c80:	deffff04 	addi	sp,sp,-4
   11c84:	df000015 	stw	fp,0(sp)
   11c88:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   11c8c:	000170fa 	wrctl	ienable,zero
}
   11c90:	0001883a 	nop
   11c94:	e037883a 	mov	sp,fp
   11c98:	df000017 	ldw	fp,0(sp)
   11c9c:	dec00104 	addi	sp,sp,4
   11ca0:	f800283a 	ret

00011ca4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   11ca4:	defffe04 	addi	sp,sp,-8
   11ca8:	df000115 	stw	fp,4(sp)
   11cac:	df000104 	addi	fp,sp,4
   11cb0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   11cb4:	e0bfff17 	ldw	r2,-4(fp)
   11cb8:	10bffe84 	addi	r2,r2,-6
   11cbc:	10c00428 	cmpgeui	r3,r2,16
   11cc0:	18001a1e 	bne	r3,zero,11d2c <alt_exception_cause_generated_bad_addr+0x88>
   11cc4:	100690ba 	slli	r3,r2,2
   11cc8:	00800074 	movhi	r2,1
   11ccc:	10873704 	addi	r2,r2,7388
   11cd0:	1885883a 	add	r2,r3,r2
   11cd4:	10800017 	ldw	r2,0(r2)
   11cd8:	1000683a 	jmp	r2
   11cdc:	00011d1c 	xori	zero,zero,1140
   11ce0:	00011d1c 	xori	zero,zero,1140
   11ce4:	00011d2c 	andhi	zero,zero,1140
   11ce8:	00011d2c 	andhi	zero,zero,1140
   11cec:	00011d2c 	andhi	zero,zero,1140
   11cf0:	00011d1c 	xori	zero,zero,1140
   11cf4:	00011d24 	muli	zero,zero,1140
   11cf8:	00011d2c 	andhi	zero,zero,1140
   11cfc:	00011d1c 	xori	zero,zero,1140
   11d00:	00011d1c 	xori	zero,zero,1140
   11d04:	00011d2c 	andhi	zero,zero,1140
   11d08:	00011d1c 	xori	zero,zero,1140
   11d0c:	00011d24 	muli	zero,zero,1140
   11d10:	00011d2c 	andhi	zero,zero,1140
   11d14:	00011d2c 	andhi	zero,zero,1140
   11d18:	00011d1c 	xori	zero,zero,1140
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   11d1c:	00800044 	movi	r2,1
   11d20:	00000306 	br	11d30 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   11d24:	0005883a 	mov	r2,zero
   11d28:	00000106 	br	11d30 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   11d2c:	0005883a 	mov	r2,zero
  }
}
   11d30:	e037883a 	mov	sp,fp
   11d34:	df000017 	ldw	fp,0(sp)
   11d38:	dec00104 	addi	sp,sp,4
   11d3c:	f800283a 	ret

00011d40 <atexit>:
   11d40:	200b883a 	mov	r5,r4
   11d44:	000f883a 	mov	r7,zero
   11d48:	000d883a 	mov	r6,zero
   11d4c:	0009883a 	mov	r4,zero
   11d50:	0011da41 	jmpi	11da4 <__register_exitproc>

00011d54 <exit>:
   11d54:	defffe04 	addi	sp,sp,-8
   11d58:	000b883a 	mov	r5,zero
   11d5c:	dc000015 	stw	r16,0(sp)
   11d60:	dfc00115 	stw	ra,4(sp)
   11d64:	2021883a 	mov	r16,r4
   11d68:	0011efc0 	call	11efc <__call_exitprocs>
   11d6c:	8009883a 	mov	r4,r16
   11d70:	001208c0 	call	1208c <_exit>

00011d74 <memcmp>:
   11d74:	218d883a 	add	r6,r4,r6
   11d78:	21800826 	beq	r4,r6,11d9c <memcmp+0x28>
   11d7c:	20800003 	ldbu	r2,0(r4)
   11d80:	28c00003 	ldbu	r3,0(r5)
   11d84:	10c00226 	beq	r2,r3,11d90 <memcmp+0x1c>
   11d88:	10c5c83a 	sub	r2,r2,r3
   11d8c:	f800283a 	ret
   11d90:	21000044 	addi	r4,r4,1
   11d94:	29400044 	addi	r5,r5,1
   11d98:	003ff706 	br	11d78 <_gp+0xffff79b0>
   11d9c:	0005883a 	mov	r2,zero
   11da0:	f800283a 	ret

00011da4 <__register_exitproc>:
   11da4:	00800074 	movhi	r2,1
   11da8:	1088f204 	addi	r2,r2,9160
   11dac:	10c00017 	ldw	r3,0(r2)
   11db0:	defff904 	addi	sp,sp,-28
   11db4:	dc000015 	stw	r16,0(sp)
   11db8:	1c000c17 	ldw	r16,48(r3)
   11dbc:	dd400515 	stw	r21,20(sp)
   11dc0:	dd000415 	stw	r20,16(sp)
   11dc4:	dcc00315 	stw	r19,12(sp)
   11dc8:	dc800215 	stw	r18,8(sp)
   11dcc:	dc400115 	stw	r17,4(sp)
   11dd0:	dfc00615 	stw	ra,24(sp)
   11dd4:	202b883a 	mov	r21,r4
   11dd8:	2823883a 	mov	r17,r5
   11ddc:	3027883a 	mov	r19,r6
   11de0:	3825883a 	mov	r18,r7
   11de4:	1029883a 	mov	r20,r2
   11de8:	8000021e 	bne	r16,zero,11df4 <__register_exitproc+0x50>
   11dec:	1c000d04 	addi	r16,r3,52
   11df0:	1c000c15 	stw	r16,48(r3)
   11df4:	80800117 	ldw	r2,4(r16)
   11df8:	00c007c4 	movi	r3,31
   11dfc:	1880110e 	bge	r3,r2,11e44 <__register_exitproc+0xa0>
   11e00:	00800034 	movhi	r2,0
   11e04:	10800004 	addi	r2,r2,0
   11e08:	1000021e 	bne	r2,zero,11e14 <__register_exitproc+0x70>
   11e0c:	00bfffc4 	movi	r2,-1
   11e10:	00003106 	br	11ed8 <__register_exitproc+0x134>
   11e14:	01002304 	movi	r4,140
   11e18:	00000000 	call	0 <__alt_mem_memoria-0x10000>
   11e1c:	1021883a 	mov	r16,r2
   11e20:	103ffa26 	beq	r2,zero,11e0c <_gp+0xffff7a44>
   11e24:	10000115 	stw	zero,4(r2)
   11e28:	a0800017 	ldw	r2,0(r20)
   11e2c:	10c00c17 	ldw	r3,48(r2)
   11e30:	80c00015 	stw	r3,0(r16)
   11e34:	14000c15 	stw	r16,48(r2)
   11e38:	80002215 	stw	zero,136(r16)
   11e3c:	a8001d26 	beq	r21,zero,11eb4 <__register_exitproc+0x110>
   11e40:	00000606 	br	11e5c <__register_exitproc+0xb8>
   11e44:	a8001b26 	beq	r21,zero,11eb4 <__register_exitproc+0x110>
   11e48:	80802217 	ldw	r2,136(r16)
   11e4c:	1000091e 	bne	r2,zero,11e74 <__register_exitproc+0xd0>
   11e50:	00800034 	movhi	r2,0
   11e54:	10800004 	addi	r2,r2,0
   11e58:	103fec26 	beq	r2,zero,11e0c <_gp+0xffff7a44>
   11e5c:	01004204 	movi	r4,264
   11e60:	00000000 	call	0 <__alt_mem_memoria-0x10000>
   11e64:	103fe926 	beq	r2,zero,11e0c <_gp+0xffff7a44>
   11e68:	10004015 	stw	zero,256(r2)
   11e6c:	10004115 	stw	zero,260(r2)
   11e70:	80802215 	stw	r2,136(r16)
   11e74:	81400117 	ldw	r5,4(r16)
   11e78:	01000044 	movi	r4,1
   11e7c:	2947883a 	add	r3,r5,r5
   11e80:	18c7883a 	add	r3,r3,r3
   11e84:	10c7883a 	add	r3,r2,r3
   11e88:	1cc00015 	stw	r19,0(r3)
   11e8c:	2148983a 	sll	r4,r4,r5
   11e90:	11404017 	ldw	r5,256(r2)
   11e94:	290ab03a 	or	r5,r5,r4
   11e98:	11404015 	stw	r5,256(r2)
   11e9c:	1c802015 	stw	r18,128(r3)
   11ea0:	00c00084 	movi	r3,2
   11ea4:	a8c0031e 	bne	r21,r3,11eb4 <__register_exitproc+0x110>
   11ea8:	10c04117 	ldw	r3,260(r2)
   11eac:	1908b03a 	or	r4,r3,r4
   11eb0:	11004115 	stw	r4,260(r2)
   11eb4:	80800117 	ldw	r2,4(r16)
   11eb8:	10c00044 	addi	r3,r2,1
   11ebc:	10800084 	addi	r2,r2,2
   11ec0:	1085883a 	add	r2,r2,r2
   11ec4:	1085883a 	add	r2,r2,r2
   11ec8:	80c00115 	stw	r3,4(r16)
   11ecc:	80a1883a 	add	r16,r16,r2
   11ed0:	84400015 	stw	r17,0(r16)
   11ed4:	0005883a 	mov	r2,zero
   11ed8:	dfc00617 	ldw	ra,24(sp)
   11edc:	dd400517 	ldw	r21,20(sp)
   11ee0:	dd000417 	ldw	r20,16(sp)
   11ee4:	dcc00317 	ldw	r19,12(sp)
   11ee8:	dc800217 	ldw	r18,8(sp)
   11eec:	dc400117 	ldw	r17,4(sp)
   11ef0:	dc000017 	ldw	r16,0(sp)
   11ef4:	dec00704 	addi	sp,sp,28
   11ef8:	f800283a 	ret

00011efc <__call_exitprocs>:
   11efc:	defff504 	addi	sp,sp,-44
   11f00:	dd000515 	stw	r20,20(sp)
   11f04:	05000074 	movhi	r20,1
   11f08:	dc800315 	stw	r18,12(sp)
   11f0c:	dfc00a15 	stw	ra,40(sp)
   11f10:	df000915 	stw	fp,36(sp)
   11f14:	ddc00815 	stw	r23,32(sp)
   11f18:	dd800715 	stw	r22,28(sp)
   11f1c:	dd400615 	stw	r21,24(sp)
   11f20:	dcc00415 	stw	r19,16(sp)
   11f24:	dc400215 	stw	r17,8(sp)
   11f28:	dc000115 	stw	r16,4(sp)
   11f2c:	d9000015 	stw	r4,0(sp)
   11f30:	2825883a 	mov	r18,r5
   11f34:	a508f204 	addi	r20,r20,9160
   11f38:	a4400017 	ldw	r17,0(r20)
   11f3c:	8cc00c17 	ldw	r19,48(r17)
   11f40:	8c400c04 	addi	r17,r17,48
   11f44:	98004526 	beq	r19,zero,1205c <__call_exitprocs+0x160>
   11f48:	9c000117 	ldw	r16,4(r19)
   11f4c:	00900034 	movhi	r2,16384
   11f50:	10bfffc4 	addi	r2,r2,-1
   11f54:	9d402217 	ldw	r21,136(r19)
   11f58:	85bfffc4 	addi	r22,r16,-1
   11f5c:	80a1883a 	add	r16,r16,r2
   11f60:	8421883a 	add	r16,r16,r16
   11f64:	8421883a 	add	r16,r16,r16
   11f68:	ac2f883a 	add	r23,r21,r16
   11f6c:	84000204 	addi	r16,r16,8
   11f70:	9c21883a 	add	r16,r19,r16
   11f74:	b0002716 	blt	r22,zero,12014 <__call_exitprocs+0x118>
   11f78:	90000726 	beq	r18,zero,11f98 <__call_exitprocs+0x9c>
   11f7c:	a800041e 	bne	r21,zero,11f90 <__call_exitprocs+0x94>
   11f80:	b5bfffc4 	addi	r22,r22,-1
   11f84:	bdffff04 	addi	r23,r23,-4
   11f88:	843fff04 	addi	r16,r16,-4
   11f8c:	003ff906 	br	11f74 <_gp+0xffff7bac>
   11f90:	b9002017 	ldw	r4,128(r23)
   11f94:	913ffa1e 	bne	r18,r4,11f80 <_gp+0xffff7bb8>
   11f98:	99000117 	ldw	r4,4(r19)
   11f9c:	82000017 	ldw	r8,0(r16)
   11fa0:	213fffc4 	addi	r4,r4,-1
   11fa4:	b100021e 	bne	r22,r4,11fb0 <__call_exitprocs+0xb4>
   11fa8:	9d800115 	stw	r22,4(r19)
   11fac:	00000106 	br	11fb4 <__call_exitprocs+0xb8>
   11fb0:	80000015 	stw	zero,0(r16)
   11fb4:	403ff226 	beq	r8,zero,11f80 <_gp+0xffff7bb8>
   11fb8:	9f000117 	ldw	fp,4(r19)
   11fbc:	a8000526 	beq	r21,zero,11fd4 <__call_exitprocs+0xd8>
   11fc0:	00800044 	movi	r2,1
   11fc4:	1592983a 	sll	r9,r2,r22
   11fc8:	a9404017 	ldw	r5,256(r21)
   11fcc:	494a703a 	and	r5,r9,r5
   11fd0:	2800021e 	bne	r5,zero,11fdc <__call_exitprocs+0xe0>
   11fd4:	403ee83a 	callr	r8
   11fd8:	00000906 	br	12000 <__call_exitprocs+0x104>
   11fdc:	a9004117 	ldw	r4,260(r21)
   11fe0:	4908703a 	and	r4,r9,r4
   11fe4:	2000041e 	bne	r4,zero,11ff8 <__call_exitprocs+0xfc>
   11fe8:	b9400017 	ldw	r5,0(r23)
   11fec:	d9000017 	ldw	r4,0(sp)
   11ff0:	403ee83a 	callr	r8
   11ff4:	00000206 	br	12000 <__call_exitprocs+0x104>
   11ff8:	b9000017 	ldw	r4,0(r23)
   11ffc:	403ee83a 	callr	r8
   12000:	99000117 	ldw	r4,4(r19)
   12004:	e13fcc1e 	bne	fp,r4,11f38 <_gp+0xffff7b70>
   12008:	89000017 	ldw	r4,0(r17)
   1200c:	993fdc26 	beq	r19,r4,11f80 <_gp+0xffff7bb8>
   12010:	003fc906 	br	11f38 <_gp+0xffff7b70>
   12014:	00800034 	movhi	r2,0
   12018:	10800004 	addi	r2,r2,0
   1201c:	10000f26 	beq	r2,zero,1205c <__call_exitprocs+0x160>
   12020:	99400117 	ldw	r5,4(r19)
   12024:	99000017 	ldw	r4,0(r19)
   12028:	2800091e 	bne	r5,zero,12050 <__call_exitprocs+0x154>
   1202c:	20000826 	beq	r4,zero,12050 <__call_exitprocs+0x154>
   12030:	89000015 	stw	r4,0(r17)
   12034:	a8000226 	beq	r21,zero,12040 <__call_exitprocs+0x144>
   12038:	a809883a 	mov	r4,r21
   1203c:	00000000 	call	0 <__alt_mem_memoria-0x10000>
   12040:	9809883a 	mov	r4,r19
   12044:	00000000 	call	0 <__alt_mem_memoria-0x10000>
   12048:	8cc00017 	ldw	r19,0(r17)
   1204c:	003fbd06 	br	11f44 <_gp+0xffff7b7c>
   12050:	9823883a 	mov	r17,r19
   12054:	2027883a 	mov	r19,r4
   12058:	003fba06 	br	11f44 <_gp+0xffff7b7c>
   1205c:	dfc00a17 	ldw	ra,40(sp)
   12060:	df000917 	ldw	fp,36(sp)
   12064:	ddc00817 	ldw	r23,32(sp)
   12068:	dd800717 	ldw	r22,28(sp)
   1206c:	dd400617 	ldw	r21,24(sp)
   12070:	dd000517 	ldw	r20,20(sp)
   12074:	dcc00417 	ldw	r19,16(sp)
   12078:	dc800317 	ldw	r18,12(sp)
   1207c:	dc400217 	ldw	r17,8(sp)
   12080:	dc000117 	ldw	r16,4(sp)
   12084:	dec00b04 	addi	sp,sp,44
   12088:	f800283a 	ret

0001208c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1208c:	defffd04 	addi	sp,sp,-12
   12090:	df000215 	stw	fp,8(sp)
   12094:	df000204 	addi	fp,sp,8
   12098:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1209c:	0001883a 	nop
   120a0:	e0bfff17 	ldw	r2,-4(fp)
   120a4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   120a8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   120ac:	10000226 	beq	r2,zero,120b8 <_exit+0x2c>
    ALT_SIM_FAIL();
   120b0:	002af070 	cmpltui	zero,zero,43969
   120b4:	00000106 	br	120bc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   120b8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   120bc:	003fff06 	br	120bc <_gp+0xffff7cf4>
